// (C) 1992-2014 Altera Corporation. All rights reserved.                         
// Your use of Altera Corporation's design tools, logic functions and other       
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Altera MegaCore Function License Agreement, or other applicable     
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Altera and sold by   
// Altera or its authorized distributors.  Please refer to the applicable         
// agreement for further details.                                                 
    

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

module sha256_basic_block_0
	(
		input 		clock,
		input 		resetn,
		input 		start,
		input [63:0] 		input_data,
		input [63:0] 		input_digest,
		input 		valid_in,
		output 		stall_out,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_bb0_ld_,
		output [31:0] 		lvb_bb0_mul158,
		output [31:0] 		lvb_bb0__,
		output 		lvb_bb0_cmp166_xor,
		output [63:0] 		lvb_bb0_memcoalesce_digest_bitcast_08,
		output [511:0] 		lvb_bb0_memcoalesce_null_insertValue_0,
		input [31:0] 		workgroup_size,
		input [255:0] 		avm_local_bb0_ld__readdata,
		input 		avm_local_bb0_ld__readdatavalid,
		input 		avm_local_bb0_ld__waitrequest,
		output [29:0] 		avm_local_bb0_ld__address,
		output 		avm_local_bb0_ld__read,
		output 		avm_local_bb0_ld__write,
		input 		avm_local_bb0_ld__writeack,
		output [255:0] 		avm_local_bb0_ld__writedata,
		output [31:0] 		avm_local_bb0_ld__byteenable,
		output [4:0] 		avm_local_bb0_ld__burstcount,
		output 		local_bb0_ld__active,
		input 		clock2x,
		input [255:0] 		avm_local_bb0_st__readdata,
		input 		avm_local_bb0_st__readdatavalid,
		input 		avm_local_bb0_st__waitrequest,
		output [29:0] 		avm_local_bb0_st__address,
		output 		avm_local_bb0_st__read,
		output 		avm_local_bb0_st__write,
		input 		avm_local_bb0_st__writeack,
		output [255:0] 		avm_local_bb0_st__writedata,
		output [31:0] 		avm_local_bb0_st__byteenable,
		output [4:0] 		avm_local_bb0_st__burstcount,
		output 		local_bb0_st__active
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb0_arrayidx_valid_out;
wire local_bb0_arrayidx_stall_in;
wire local_bb0_arrayidx_inputs_ready;
wire local_bb0_arrayidx_stall_local;
wire [63:0] local_bb0_arrayidx;

assign local_bb0_arrayidx_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb0_arrayidx = (input_data + 64'h8);
assign local_bb0_arrayidx_valid_out = local_bb0_arrayidx_inputs_ready;
assign local_bb0_arrayidx_stall_local = local_bb0_arrayidx_stall_in;
assign merge_node_stall_in_0 = (|local_bb0_arrayidx_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb0_memcoalesce_digest_bitcast_0_valid_out;
wire local_bb0_memcoalesce_digest_bitcast_0_stall_in;
wire local_bb0_memcoalesce_digest_bitcast_0_inputs_ready;
wire local_bb0_memcoalesce_digest_bitcast_0_stall_local;
wire [63:0] local_bb0_memcoalesce_digest_bitcast_0;

assign local_bb0_memcoalesce_digest_bitcast_0_inputs_ready = merge_node_valid_out_1_NO_SHIFT_REG;
assign local_bb0_memcoalesce_digest_bitcast_0 = input_digest;
assign local_bb0_memcoalesce_digest_bitcast_0_valid_out = local_bb0_memcoalesce_digest_bitcast_0_inputs_ready;
assign local_bb0_memcoalesce_digest_bitcast_0_stall_local = local_bb0_memcoalesce_digest_bitcast_0_stall_in;
assign merge_node_stall_in_1 = (|local_bb0_memcoalesce_digest_bitcast_0_stall_local);

// This section implements a registered operation.
// 
wire local_bb0_memcoalesce_digest_bitcast_08_inputs_ready;
 reg local_bb0_memcoalesce_digest_bitcast_08_wii_reg_NO_SHIFT_REG;
 reg local_bb0_memcoalesce_digest_bitcast_08_valid_out_NO_SHIFT_REG;
wire local_bb0_memcoalesce_digest_bitcast_08_stall_in;
wire local_bb0_memcoalesce_digest_bitcast_08_output_regs_ready;
 reg [63:0] local_bb0_memcoalesce_digest_bitcast_08_NO_SHIFT_REG;
wire local_bb0_memcoalesce_digest_bitcast_08_causedstall;

assign local_bb0_memcoalesce_digest_bitcast_08_inputs_ready = merge_node_valid_out_2_NO_SHIFT_REG;
assign local_bb0_memcoalesce_digest_bitcast_08_output_regs_ready = (~(local_bb0_memcoalesce_digest_bitcast_08_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_memcoalesce_digest_bitcast_08_valid_out_NO_SHIFT_REG) | ~(local_bb0_memcoalesce_digest_bitcast_08_stall_in))));
assign merge_node_stall_in_2 = (~(local_bb0_memcoalesce_digest_bitcast_08_wii_reg_NO_SHIFT_REG) & (~(local_bb0_memcoalesce_digest_bitcast_08_output_regs_ready) | ~(local_bb0_memcoalesce_digest_bitcast_08_inputs_ready)));
assign local_bb0_memcoalesce_digest_bitcast_08_causedstall = (local_bb0_memcoalesce_digest_bitcast_08_inputs_ready && (~(local_bb0_memcoalesce_digest_bitcast_08_output_regs_ready) && !(~(local_bb0_memcoalesce_digest_bitcast_08_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_digest_bitcast_08_NO_SHIFT_REG <= 'x;
		local_bb0_memcoalesce_digest_bitcast_08_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_digest_bitcast_08_NO_SHIFT_REG <= 'x;
			local_bb0_memcoalesce_digest_bitcast_08_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_digest_bitcast_08_output_regs_ready)
			begin
				local_bb0_memcoalesce_digest_bitcast_08_NO_SHIFT_REG <= input_digest;
				local_bb0_memcoalesce_digest_bitcast_08_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_digest_bitcast_08_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_memcoalesce_digest_bitcast_08_stall_in))
				begin
					local_bb0_memcoalesce_digest_bitcast_08_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_digest_bitcast_08_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_digest_bitcast_08_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_digest_bitcast_08_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_digest_bitcast_08_inputs_ready)
			begin
				local_bb0_memcoalesce_digest_bitcast_08_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_ld__inputs_ready;
 reg local_bb0_ld__wii_reg_NO_SHIFT_REG;
 reg local_bb0_ld__valid_out_NO_SHIFT_REG;
wire local_bb0_ld__stall_in;
wire local_bb0_ld__output_regs_ready;
wire local_bb0_ld__fu_stall_out;
wire local_bb0_ld__fu_valid_out;
wire [31:0] local_bb0_ld__lsu_dataout;
 reg [31:0] local_bb0_ld__NO_SHIFT_REG;
wire local_bb0_ld__causedstall;

lsu_top lsu_local_bb0_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb0_ld__fu_stall_out),
	.i_valid((~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & local_bb0_ld__inputs_ready)),
	.i_address(local_bb0_arrayidx),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(1'b0),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb0_ld__output_regs_ready)),
	.o_valid(local_bb0_ld__fu_valid_out),
	.o_readdata(local_bb0_ld__lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb0_ld__active),
	.avm_address(avm_local_bb0_ld__address),
	.avm_read(avm_local_bb0_ld__read),
	.avm_readdata(avm_local_bb0_ld__readdata),
	.avm_write(avm_local_bb0_ld__write),
	.avm_writeack(avm_local_bb0_ld__writeack),
	.avm_burstcount(avm_local_bb0_ld__burstcount),
	.avm_writedata(avm_local_bb0_ld__writedata),
	.avm_byteenable(avm_local_bb0_ld__byteenable),
	.avm_waitrequest(avm_local_bb0_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb0_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb0_ld_.AWIDTH = 30;
defparam lsu_local_bb0_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb0_ld_.MWIDTH_BYTES = 32;
defparam lsu_local_bb0_ld_.WRITEDATAWIDTH_BYTES = 32;
defparam lsu_local_bb0_ld_.ALIGNMENT_BYTES = 8;
defparam lsu_local_bb0_ld_.READ = 1;
defparam lsu_local_bb0_ld_.ATOMIC = 0;
defparam lsu_local_bb0_ld_.WIDTH = 32;
defparam lsu_local_bb0_ld_.MWIDTH = 256;
defparam lsu_local_bb0_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb0_ld_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb0_ld_.KERNEL_SIDE_MEM_LATENCY = 1;
defparam lsu_local_bb0_ld_.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb0_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb0_ld_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb0_ld_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb0_ld_.NUMBER_BANKS = 1;
defparam lsu_local_bb0_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb0_ld_.USEINPUTFIFO = 0;
defparam lsu_local_bb0_ld_.USECACHING = 0;
defparam lsu_local_bb0_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb0_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb0_ld_.HIGH_FMAX = 1;
defparam lsu_local_bb0_ld_.ADDRSPACE = 1;
defparam lsu_local_bb0_ld_.STYLE = "SIMPLE";

assign local_bb0_ld__inputs_ready = local_bb0_arrayidx_valid_out;
assign local_bb0_ld__output_regs_ready = (~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_ld__valid_out_NO_SHIFT_REG) | ~(local_bb0_ld__stall_in))));
assign local_bb0_arrayidx_stall_in = (~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & (local_bb0_ld__fu_stall_out | ~((~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & local_bb0_ld__inputs_ready))));
assign local_bb0_ld__causedstall = ((~(local_bb0_ld__wii_reg_NO_SHIFT_REG) & local_bb0_ld__inputs_ready) && (local_bb0_ld__fu_stall_out && !(~(local_bb0_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld__NO_SHIFT_REG <= 'x;
		local_bb0_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld__NO_SHIFT_REG <= 'x;
			local_bb0_ld__valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld__output_regs_ready)
			begin
				local_bb0_ld__NO_SHIFT_REG <= local_bb0_ld__lsu_dataout;
				local_bb0_ld__valid_out_NO_SHIFT_REG <= local_bb0_ld__fu_valid_out;
			end
			else
			begin
				if (~(local_bb0_ld__stall_in))
				begin
					local_bb0_ld__valid_out_NO_SHIFT_REG <= local_bb0_ld__wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_ld__wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_ld__wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_ld__fu_valid_out)
			begin
				local_bb0_ld__wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_2to2_bb0_ld__valid_out_0;
wire rstag_2to2_bb0_ld__stall_in_0;
 reg rstag_2to2_bb0_ld__consumed_0_NO_SHIFT_REG;
wire rstag_2to2_bb0_ld__valid_out_1;
wire rstag_2to2_bb0_ld__stall_in_1;
 reg rstag_2to2_bb0_ld__consumed_1_NO_SHIFT_REG;
wire rstag_2to2_bb0_ld__valid_out_2;
wire rstag_2to2_bb0_ld__stall_in_2;
 reg rstag_2to2_bb0_ld__consumed_2_NO_SHIFT_REG;
wire rstag_2to2_bb0_ld__valid_out_3;
wire rstag_2to2_bb0_ld__stall_in_3;
 reg rstag_2to2_bb0_ld__consumed_3_NO_SHIFT_REG;
wire rstag_2to2_bb0_ld__valid_out_4;
wire rstag_2to2_bb0_ld__stall_in_4;
 reg rstag_2to2_bb0_ld__consumed_4_NO_SHIFT_REG;
wire rstag_2to2_bb0_ld__inputs_ready;
wire rstag_2to2_bb0_ld__stall_local;
 reg rstag_2to2_bb0_ld__staging_valid_NO_SHIFT_REG;
wire rstag_2to2_bb0_ld__combined_valid;
 reg [31:0] rstag_2to2_bb0_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_2to2_bb0_ld_;

assign rstag_2to2_bb0_ld__inputs_ready = local_bb0_ld__valid_out_NO_SHIFT_REG;
assign rstag_2to2_bb0_ld_ = (rstag_2to2_bb0_ld__staging_valid_NO_SHIFT_REG ? rstag_2to2_bb0_ld__staging_reg_NO_SHIFT_REG : local_bb0_ld__NO_SHIFT_REG);
assign rstag_2to2_bb0_ld__combined_valid = (rstag_2to2_bb0_ld__staging_valid_NO_SHIFT_REG | rstag_2to2_bb0_ld__inputs_ready);
assign rstag_2to2_bb0_ld__stall_local = ((rstag_2to2_bb0_ld__stall_in_0 & ~(rstag_2to2_bb0_ld__consumed_0_NO_SHIFT_REG)) | (rstag_2to2_bb0_ld__stall_in_1 & ~(rstag_2to2_bb0_ld__consumed_1_NO_SHIFT_REG)) | (rstag_2to2_bb0_ld__stall_in_2 & ~(rstag_2to2_bb0_ld__consumed_2_NO_SHIFT_REG)) | (rstag_2to2_bb0_ld__stall_in_3 & ~(rstag_2to2_bb0_ld__consumed_3_NO_SHIFT_REG)) | (rstag_2to2_bb0_ld__stall_in_4 & ~(rstag_2to2_bb0_ld__consumed_4_NO_SHIFT_REG)));
assign rstag_2to2_bb0_ld__valid_out_0 = (rstag_2to2_bb0_ld__combined_valid & ~(rstag_2to2_bb0_ld__consumed_0_NO_SHIFT_REG));
assign rstag_2to2_bb0_ld__valid_out_1 = (rstag_2to2_bb0_ld__combined_valid & ~(rstag_2to2_bb0_ld__consumed_1_NO_SHIFT_REG));
assign rstag_2to2_bb0_ld__valid_out_2 = (rstag_2to2_bb0_ld__combined_valid & ~(rstag_2to2_bb0_ld__consumed_2_NO_SHIFT_REG));
assign rstag_2to2_bb0_ld__valid_out_3 = (rstag_2to2_bb0_ld__combined_valid & ~(rstag_2to2_bb0_ld__consumed_3_NO_SHIFT_REG));
assign rstag_2to2_bb0_ld__valid_out_4 = (rstag_2to2_bb0_ld__combined_valid & ~(rstag_2to2_bb0_ld__consumed_4_NO_SHIFT_REG));
assign local_bb0_ld__stall_in = (|rstag_2to2_bb0_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_2to2_bb0_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb0_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (start)
		begin
			rstag_2to2_bb0_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_2to2_bb0_ld__stall_local)
			begin
				if (~(rstag_2to2_bb0_ld__staging_valid_NO_SHIFT_REG))
				begin
					rstag_2to2_bb0_ld__staging_valid_NO_SHIFT_REG <= rstag_2to2_bb0_ld__inputs_ready;
				end
			end
			else
			begin
				rstag_2to2_bb0_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
		if (~(rstag_2to2_bb0_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_2to2_bb0_ld__staging_reg_NO_SHIFT_REG <= local_bb0_ld__NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_2to2_bb0_ld__consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb0_ld__consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb0_ld__consumed_2_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb0_ld__consumed_3_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb0_ld__consumed_4_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			rstag_2to2_bb0_ld__consumed_0_NO_SHIFT_REG <= 1'b0;
			rstag_2to2_bb0_ld__consumed_1_NO_SHIFT_REG <= 1'b0;
			rstag_2to2_bb0_ld__consumed_2_NO_SHIFT_REG <= 1'b0;
			rstag_2to2_bb0_ld__consumed_3_NO_SHIFT_REG <= 1'b0;
			rstag_2to2_bb0_ld__consumed_4_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			rstag_2to2_bb0_ld__consumed_0_NO_SHIFT_REG <= (rstag_2to2_bb0_ld__combined_valid & (rstag_2to2_bb0_ld__consumed_0_NO_SHIFT_REG | ~(rstag_2to2_bb0_ld__stall_in_0)) & rstag_2to2_bb0_ld__stall_local);
			rstag_2to2_bb0_ld__consumed_1_NO_SHIFT_REG <= (rstag_2to2_bb0_ld__combined_valid & (rstag_2to2_bb0_ld__consumed_1_NO_SHIFT_REG | ~(rstag_2to2_bb0_ld__stall_in_1)) & rstag_2to2_bb0_ld__stall_local);
			rstag_2to2_bb0_ld__consumed_2_NO_SHIFT_REG <= (rstag_2to2_bb0_ld__combined_valid & (rstag_2to2_bb0_ld__consumed_2_NO_SHIFT_REG | ~(rstag_2to2_bb0_ld__stall_in_2)) & rstag_2to2_bb0_ld__stall_local);
			rstag_2to2_bb0_ld__consumed_3_NO_SHIFT_REG <= (rstag_2to2_bb0_ld__combined_valid & (rstag_2to2_bb0_ld__consumed_3_NO_SHIFT_REG | ~(rstag_2to2_bb0_ld__stall_in_3)) & rstag_2to2_bb0_ld__stall_local);
			rstag_2to2_bb0_ld__consumed_4_NO_SHIFT_REG <= (rstag_2to2_bb0_ld__combined_valid & (rstag_2to2_bb0_ld__consumed_4_NO_SHIFT_REG | ~(rstag_2to2_bb0_ld__stall_in_4)) & rstag_2to2_bb0_ld__stall_local);
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_mul158_inputs_ready;
 reg local_bb0_mul158_wii_reg_NO_SHIFT_REG;
 reg local_bb0_mul158_valid_out_0_NO_SHIFT_REG;
wire local_bb0_mul158_stall_in_0;
 reg local_bb0_mul158_valid_out_1_NO_SHIFT_REG;
wire local_bb0_mul158_stall_in_1;
wire local_bb0_mul158_output_regs_ready;
 reg [31:0] local_bb0_mul158_NO_SHIFT_REG;
wire local_bb0_mul158_causedstall;

assign local_bb0_mul158_inputs_ready = rstag_2to2_bb0_ld__valid_out_1;
assign local_bb0_mul158_output_regs_ready = (~(local_bb0_mul158_wii_reg_NO_SHIFT_REG) & ((~(local_bb0_mul158_valid_out_0_NO_SHIFT_REG) | ~(local_bb0_mul158_stall_in_0)) & (~(local_bb0_mul158_valid_out_1_NO_SHIFT_REG) | ~(local_bb0_mul158_stall_in_1))));
assign rstag_2to2_bb0_ld__stall_in_1 = (~(local_bb0_mul158_wii_reg_NO_SHIFT_REG) & (~(local_bb0_mul158_output_regs_ready) | ~(local_bb0_mul158_inputs_ready)));
assign local_bb0_mul158_causedstall = (local_bb0_mul158_inputs_ready && (~(local_bb0_mul158_output_regs_ready) && !(~(local_bb0_mul158_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul158_NO_SHIFT_REG <= 'x;
		local_bb0_mul158_valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb0_mul158_valid_out_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul158_NO_SHIFT_REG <= 'x;
			local_bb0_mul158_valid_out_0_NO_SHIFT_REG <= 1'b0;
			local_bb0_mul158_valid_out_1_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul158_output_regs_ready)
			begin
				local_bb0_mul158_NO_SHIFT_REG <= (rstag_2to2_bb0_ld_ << 32'h3);
				local_bb0_mul158_valid_out_0_NO_SHIFT_REG <= local_bb0_mul158_inputs_ready;
				local_bb0_mul158_valid_out_1_NO_SHIFT_REG <= local_bb0_mul158_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_mul158_stall_in_0))
				begin
					local_bb0_mul158_valid_out_0_NO_SHIFT_REG <= local_bb0_mul158_wii_reg_NO_SHIFT_REG;
				end
				if (~(local_bb0_mul158_stall_in_1))
				begin
					local_bb0_mul158_valid_out_1_NO_SHIFT_REG <= local_bb0_mul158_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_mul158_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_mul158_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_mul158_inputs_ready)
			begin
				local_bb0_mul158_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb0_div_stall_local;
wire [31:0] local_bb0_div;

assign local_bb0_div = (rstag_2to2_bb0_ld_ >> 32'h6);

// This section implements a registered operation.
// 
wire local_bb0_rem_inputs_ready;
 reg local_bb0_rem_wii_reg_NO_SHIFT_REG;
 reg local_bb0_rem_valid_out_0_NO_SHIFT_REG;
wire local_bb0_rem_stall_in_0;
 reg local_bb0_rem_valid_out_1_NO_SHIFT_REG;
wire local_bb0_rem_stall_in_1;
wire local_bb0_rem_output_regs_ready;
 reg [31:0] local_bb0_rem_NO_SHIFT_REG;
wire local_bb0_rem_causedstall;

assign local_bb0_rem_inputs_ready = rstag_2to2_bb0_ld__valid_out_3;
assign local_bb0_rem_output_regs_ready = (~(local_bb0_rem_wii_reg_NO_SHIFT_REG) & ((~(local_bb0_rem_valid_out_0_NO_SHIFT_REG) | ~(local_bb0_rem_stall_in_0)) & (~(local_bb0_rem_valid_out_1_NO_SHIFT_REG) | ~(local_bb0_rem_stall_in_1))));
assign rstag_2to2_bb0_ld__stall_in_3 = (~(local_bb0_rem_wii_reg_NO_SHIFT_REG) & (~(local_bb0_rem_output_regs_ready) | ~(local_bb0_rem_inputs_ready)));
assign local_bb0_rem_causedstall = (local_bb0_rem_inputs_ready && (~(local_bb0_rem_output_regs_ready) && !(~(local_bb0_rem_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_rem_NO_SHIFT_REG <= 'x;
		local_bb0_rem_valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb0_rem_valid_out_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_rem_NO_SHIFT_REG <= 'x;
			local_bb0_rem_valid_out_0_NO_SHIFT_REG <= 1'b0;
			local_bb0_rem_valid_out_1_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_rem_output_regs_ready)
			begin
				local_bb0_rem_NO_SHIFT_REG <= (rstag_2to2_bb0_ld_ & 32'h3F);
				local_bb0_rem_valid_out_0_NO_SHIFT_REG <= local_bb0_rem_inputs_ready;
				local_bb0_rem_valid_out_1_NO_SHIFT_REG <= local_bb0_rem_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_rem_stall_in_0))
				begin
					local_bb0_rem_valid_out_0_NO_SHIFT_REG <= local_bb0_rem_wii_reg_NO_SHIFT_REG;
				end
				if (~(local_bb0_rem_stall_in_1))
				begin
					local_bb0_rem_valid_out_1_NO_SHIFT_REG <= local_bb0_rem_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_rem_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_rem_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_rem_inputs_ready)
			begin
				local_bb0_rem_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb0__toi1_intcast_valid_out;
wire local_bb0__toi1_intcast_stall_in;
wire local_bb0__toi1_intcast_inputs_ready;
wire local_bb0__toi1_intcast_stall_local;
wire local_bb0__toi1_intcast;

assign local_bb0__toi1_intcast_inputs_ready = rstag_2to2_bb0_ld__valid_out_4;
assign local_bb0__toi1_intcast = rstag_2to2_bb0_ld_[0];
assign local_bb0__toi1_intcast_valid_out = local_bb0__toi1_intcast_inputs_ready;
assign local_bb0__toi1_intcast_stall_local = local_bb0__toi1_intcast_stall_in;
assign rstag_2to2_bb0_ld__stall_in_4 = (|local_bb0__toi1_intcast_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb0_memcoalesce_null_insertValue_9_valid_out;
wire local_bb0_memcoalesce_null_insertValue_9_stall_in;
wire local_bb0_memcoalesce_null_insertValue_9_inputs_ready;
wire local_bb0_memcoalesce_null_insertValue_9_stall_local;
wire [511:0] local_bb0_memcoalesce_null_insertValue_9;

assign local_bb0_memcoalesce_null_insertValue_9_inputs_ready = local_bb0_mul158_valid_out_0_NO_SHIFT_REG;
assign local_bb0_memcoalesce_null_insertValue_9[479:0] = 480'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
assign local_bb0_memcoalesce_null_insertValue_9[511:480] = local_bb0_mul158_NO_SHIFT_REG;
assign local_bb0_memcoalesce_null_insertValue_9_valid_out = local_bb0_memcoalesce_null_insertValue_9_inputs_ready;
assign local_bb0_memcoalesce_null_insertValue_9_stall_local = local_bb0_memcoalesce_null_insertValue_9_stall_in;
assign local_bb0_mul158_stall_in_0 = (|local_bb0_memcoalesce_null_insertValue_9_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb0_add_valid_out;
wire local_bb0_add_stall_in;
wire local_bb0_add_inputs_ready;
wire local_bb0_add_stall_local;
wire [31:0] local_bb0_add;

assign local_bb0_add_inputs_ready = rstag_2to2_bb0_ld__valid_out_2;
assign local_bb0_add = (local_bb0_div + 32'h1);
assign local_bb0_add_valid_out = local_bb0_add_inputs_ready;
assign local_bb0_add_stall_local = local_bb0_add_stall_in;
assign rstag_2to2_bb0_ld__stall_in_2 = (|local_bb0_add_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb0_cmp_valid_out;
wire local_bb0_cmp_stall_in;
wire local_bb0_cmp_inputs_ready;
wire local_bb0_cmp_stall_local;
wire local_bb0_cmp;

assign local_bb0_cmp_inputs_ready = local_bb0_rem_valid_out_0_NO_SHIFT_REG;
assign local_bb0_cmp = (local_bb0_rem_NO_SHIFT_REG > 32'h37);
assign local_bb0_cmp_valid_out = local_bb0_cmp_inputs_ready;
assign local_bb0_cmp_stall_local = local_bb0_cmp_stall_in;
assign local_bb0_rem_stall_in_0 = (|local_bb0_cmp_stall_local);

// This section implements a registered operation.
// 
wire local_bb0_cmp166_xor_inputs_ready;
 reg local_bb0_cmp166_xor_wii_reg_NO_SHIFT_REG;
 reg local_bb0_cmp166_xor_valid_out_NO_SHIFT_REG;
wire local_bb0_cmp166_xor_stall_in;
wire local_bb0_cmp166_xor_output_regs_ready;
 reg local_bb0_cmp166_xor_NO_SHIFT_REG;
wire local_bb0_cmp166_xor_causedstall;

assign local_bb0_cmp166_xor_inputs_ready = local_bb0_rem_valid_out_1_NO_SHIFT_REG;
assign local_bb0_cmp166_xor_output_regs_ready = (~(local_bb0_cmp166_xor_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_cmp166_xor_valid_out_NO_SHIFT_REG) | ~(local_bb0_cmp166_xor_stall_in))));
assign local_bb0_rem_stall_in_1 = (~(local_bb0_cmp166_xor_wii_reg_NO_SHIFT_REG) & (~(local_bb0_cmp166_xor_output_regs_ready) | ~(local_bb0_cmp166_xor_inputs_ready)));
assign local_bb0_cmp166_xor_causedstall = (local_bb0_cmp166_xor_inputs_ready && (~(local_bb0_cmp166_xor_output_regs_ready) && !(~(local_bb0_cmp166_xor_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_cmp166_xor_NO_SHIFT_REG <= 'x;
		local_bb0_cmp166_xor_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_cmp166_xor_NO_SHIFT_REG <= 'x;
			local_bb0_cmp166_xor_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_cmp166_xor_output_regs_ready)
			begin
				local_bb0_cmp166_xor_NO_SHIFT_REG <= (local_bb0_rem_NO_SHIFT_REG != 32'h0);
				local_bb0_cmp166_xor_valid_out_NO_SHIFT_REG <= local_bb0_cmp166_xor_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_cmp166_xor_stall_in))
				begin
					local_bb0_cmp166_xor_valid_out_NO_SHIFT_REG <= local_bb0_cmp166_xor_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_cmp166_xor_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_cmp166_xor_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_cmp166_xor_inputs_ready)
			begin
				local_bb0_cmp166_xor_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_st__inputs_ready;
 reg local_bb0_st__wii_reg_NO_SHIFT_REG;
 reg local_bb0_st__valid_out_NO_SHIFT_REG;
wire local_bb0_st__stall_in;
wire local_bb0_st__output_regs_ready;
wire local_bb0_st__fu_stall_out;
wire local_bb0_st__fu_valid_out;
wire local_bb0_st__causedstall;

lsu_top lsu_local_bb0_st_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb0_st__fu_stall_out),
	.i_valid((~(local_bb0_st__wii_reg_NO_SHIFT_REG) & local_bb0_st__inputs_ready)),
	.i_address(local_bb0_memcoalesce_digest_bitcast_0),
	.i_writedata(256'h5BE0CD191F83D9AB9B05688C510E527FA54FF53A3C6EF372BB67AE856A09E667),
	.i_cmpdata(),
	.i_predicate(1'b0),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb0_st__output_regs_ready)),
	.o_valid(local_bb0_st__fu_valid_out),
	.o_readdata(),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb0_st__active),
	.avm_address(avm_local_bb0_st__address),
	.avm_read(avm_local_bb0_st__read),
	.avm_readdata(avm_local_bb0_st__readdata),
	.avm_write(avm_local_bb0_st__write),
	.avm_writeack(avm_local_bb0_st__writeack),
	.avm_burstcount(avm_local_bb0_st__burstcount),
	.avm_writedata(avm_local_bb0_st__writedata),
	.avm_byteenable(avm_local_bb0_st__byteenable),
	.avm_waitrequest(avm_local_bb0_st__waitrequest),
	.avm_readdatavalid(avm_local_bb0_st__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb0_st_.AWIDTH = 30;
defparam lsu_local_bb0_st_.WIDTH_BYTES = 32;
defparam lsu_local_bb0_st_.MWIDTH_BYTES = 32;
defparam lsu_local_bb0_st_.WRITEDATAWIDTH_BYTES = 32;
defparam lsu_local_bb0_st_.ALIGNMENT_BYTES = 32;
defparam lsu_local_bb0_st_.READ = 0;
defparam lsu_local_bb0_st_.ATOMIC = 0;
defparam lsu_local_bb0_st_.WIDTH = 256;
defparam lsu_local_bb0_st_.MWIDTH = 256;
defparam lsu_local_bb0_st_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb0_st_.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb0_st_.KERNEL_SIDE_MEM_LATENCY = 1;
defparam lsu_local_bb0_st_.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb0_st_.USE_WRITE_ACK = 0;
defparam lsu_local_bb0_st_.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb0_st_.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb0_st_.NUMBER_BANKS = 1;
defparam lsu_local_bb0_st_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb0_st_.USEINPUTFIFO = 0;
defparam lsu_local_bb0_st_.USECACHING = 0;
defparam lsu_local_bb0_st_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb0_st_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb0_st_.HIGH_FMAX = 1;
defparam lsu_local_bb0_st_.ADDRSPACE = 1;
defparam lsu_local_bb0_st_.STYLE = "SIMPLE";
defparam lsu_local_bb0_st_.USE_BYTE_EN = 0;

assign local_bb0_st__inputs_ready = (local_bb0_memcoalesce_digest_bitcast_0_valid_out & local_bb0__toi1_intcast_valid_out);
assign local_bb0_st__output_regs_ready = (~(local_bb0_st__wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_st__valid_out_NO_SHIFT_REG) | ~(local_bb0_st__stall_in))));
assign local_bb0_memcoalesce_digest_bitcast_0_stall_in = (~(local_bb0_st__wii_reg_NO_SHIFT_REG) & (local_bb0_st__fu_stall_out | ~((~(local_bb0_st__wii_reg_NO_SHIFT_REG) & local_bb0_st__inputs_ready))));
assign local_bb0__toi1_intcast_stall_in = (~(local_bb0_st__wii_reg_NO_SHIFT_REG) & (local_bb0_st__fu_stall_out | ~((~(local_bb0_st__wii_reg_NO_SHIFT_REG) & local_bb0_st__inputs_ready))));
assign local_bb0_st__causedstall = ((~(local_bb0_st__wii_reg_NO_SHIFT_REG) & local_bb0_st__inputs_ready) && (local_bb0_st__fu_stall_out && !(~(local_bb0_st__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_st__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_st__valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_st__output_regs_ready)
			begin
				local_bb0_st__valid_out_NO_SHIFT_REG <= local_bb0_st__fu_valid_out;
			end
			else
			begin
				if (~(local_bb0_st__stall_in))
				begin
					local_bb0_st__valid_out_NO_SHIFT_REG <= local_bb0_st__wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_st__wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_st__wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_st__fu_valid_out)
			begin
				local_bb0_st__wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0_memcoalesce_null_insertValue_0_inputs_ready;
 reg local_bb0_memcoalesce_null_insertValue_0_wii_reg_NO_SHIFT_REG;
 reg local_bb0_memcoalesce_null_insertValue_0_valid_out_NO_SHIFT_REG;
wire local_bb0_memcoalesce_null_insertValue_0_stall_in;
wire local_bb0_memcoalesce_null_insertValue_0_output_regs_ready;
 reg [511:0] local_bb0_memcoalesce_null_insertValue_0_NO_SHIFT_REG;
wire [511:0] local_bb0_memcoalesce_null_insertValue_0_op_wire;
wire local_bb0_memcoalesce_null_insertValue_0_causedstall;

assign local_bb0_memcoalesce_null_insertValue_0_inputs_ready = local_bb0_memcoalesce_null_insertValue_9_valid_out;
assign local_bb0_memcoalesce_null_insertValue_0_output_regs_ready = (~(local_bb0_memcoalesce_null_insertValue_0_wii_reg_NO_SHIFT_REG) & (&(~(local_bb0_memcoalesce_null_insertValue_0_valid_out_NO_SHIFT_REG) | ~(local_bb0_memcoalesce_null_insertValue_0_stall_in))));
assign local_bb0_memcoalesce_null_insertValue_0_op_wire[31:0] = 32'h80000000;
assign local_bb0_memcoalesce_null_insertValue_0_op_wire[511:32] = local_bb0_memcoalesce_null_insertValue_9[511:32];
assign local_bb0_memcoalesce_null_insertValue_9_stall_in = (~(local_bb0_memcoalesce_null_insertValue_0_wii_reg_NO_SHIFT_REG) & (~(local_bb0_memcoalesce_null_insertValue_0_output_regs_ready) | ~(local_bb0_memcoalesce_null_insertValue_0_inputs_ready)));
assign local_bb0_memcoalesce_null_insertValue_0_causedstall = (local_bb0_memcoalesce_null_insertValue_0_inputs_ready && (~(local_bb0_memcoalesce_null_insertValue_0_output_regs_ready) && !(~(local_bb0_memcoalesce_null_insertValue_0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_null_insertValue_0_NO_SHIFT_REG <= 'x;
		local_bb0_memcoalesce_null_insertValue_0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_null_insertValue_0_NO_SHIFT_REG <= 'x;
			local_bb0_memcoalesce_null_insertValue_0_valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_null_insertValue_0_output_regs_ready)
			begin
				local_bb0_memcoalesce_null_insertValue_0_NO_SHIFT_REG <= local_bb0_memcoalesce_null_insertValue_0_op_wire;
				local_bb0_memcoalesce_null_insertValue_0_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_null_insertValue_0_inputs_ready;
			end
			else
			begin
				if (~(local_bb0_memcoalesce_null_insertValue_0_stall_in))
				begin
					local_bb0_memcoalesce_null_insertValue_0_valid_out_NO_SHIFT_REG <= local_bb0_memcoalesce_null_insertValue_0_wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0_memcoalesce_null_insertValue_0_wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0_memcoalesce_null_insertValue_0_wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0_memcoalesce_null_insertValue_0_inputs_ready)
			begin
				local_bb0_memcoalesce_null_insertValue_0_wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb0___inputs_ready;
 reg local_bb0___wii_reg_NO_SHIFT_REG;
 reg local_bb0___valid_out_NO_SHIFT_REG;
wire local_bb0___stall_in;
wire local_bb0___output_regs_ready;
 reg [31:0] local_bb0___NO_SHIFT_REG;
wire local_bb0___causedstall;

assign local_bb0___inputs_ready = (local_bb0_cmp_valid_out & local_bb0_add_valid_out);
assign local_bb0___output_regs_ready = (~(local_bb0___wii_reg_NO_SHIFT_REG) & (&(~(local_bb0___valid_out_NO_SHIFT_REG) | ~(local_bb0___stall_in))));
assign local_bb0_cmp_stall_in = (~(local_bb0___wii_reg_NO_SHIFT_REG) & (~(local_bb0___output_regs_ready) | ~(local_bb0___inputs_ready)));
assign local_bb0_add_stall_in = (~(local_bb0___wii_reg_NO_SHIFT_REG) & (~(local_bb0___output_regs_ready) | ~(local_bb0___inputs_ready)));
assign local_bb0___causedstall = (local_bb0___inputs_ready && (~(local_bb0___output_regs_ready) && !(~(local_bb0___output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0___NO_SHIFT_REG <= 'x;
		local_bb0___valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0___NO_SHIFT_REG <= 'x;
			local_bb0___valid_out_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0___output_regs_ready)
			begin
				local_bb0___NO_SHIFT_REG <= (local_bb0_cmp ? 32'h2 : local_bb0_add);
				local_bb0___valid_out_NO_SHIFT_REG <= local_bb0___inputs_ready;
			end
			else
			begin
				if (~(local_bb0___stall_in))
				begin
					local_bb0___valid_out_NO_SHIFT_REG <= local_bb0___wii_reg_NO_SHIFT_REG;
				end
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb0___wii_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			local_bb0___wii_reg_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (local_bb0___inputs_ready)
			begin
				local_bb0___wii_reg_NO_SHIFT_REG <= 1'b1;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_4to4_bb0_st__valid_out;
wire rstag_4to4_bb0_st__stall_in;
wire rstag_4to4_bb0_st__inputs_ready;
wire rstag_4to4_bb0_st__stall_local;
 reg rstag_4to4_bb0_st__staging_valid_NO_SHIFT_REG;
wire rstag_4to4_bb0_st__combined_valid;

assign rstag_4to4_bb0_st__inputs_ready = local_bb0_st__valid_out_NO_SHIFT_REG;
assign rstag_4to4_bb0_st__combined_valid = (rstag_4to4_bb0_st__staging_valid_NO_SHIFT_REG | rstag_4to4_bb0_st__inputs_ready);
assign rstag_4to4_bb0_st__valid_out = rstag_4to4_bb0_st__combined_valid;
assign rstag_4to4_bb0_st__stall_local = rstag_4to4_bb0_st__stall_in;
assign local_bb0_st__stall_in = (|rstag_4to4_bb0_st__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_4to4_bb0_st__staging_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (start)
		begin
			rstag_4to4_bb0_st__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		else
		begin
			if (rstag_4to4_bb0_st__stall_local)
			begin
				if (~(rstag_4to4_bb0_st__staging_valid_NO_SHIFT_REG))
				begin
					rstag_4to4_bb0_st__staging_valid_NO_SHIFT_REG <= rstag_4to4_bb0_st__inputs_ready;
				end
			end
			else
			begin
				rstag_4to4_bb0_st__staging_valid_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_bb0_ld__reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb0_mul158_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb0___reg_NO_SHIFT_REG;
 reg lvb_bb0_cmp166_xor_reg_NO_SHIFT_REG;
 reg [63:0] lvb_bb0_memcoalesce_digest_bitcast_08_reg_NO_SHIFT_REG;
 reg [511:0] lvb_bb0_memcoalesce_null_insertValue_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb0_memcoalesce_null_insertValue_0_valid_out_NO_SHIFT_REG & local_bb0_memcoalesce_digest_bitcast_08_valid_out_NO_SHIFT_REG & local_bb0_cmp166_xor_valid_out_NO_SHIFT_REG & local_bb0___valid_out_NO_SHIFT_REG & merge_node_valid_out_3_NO_SHIFT_REG & local_bb0_mul158_valid_out_1_NO_SHIFT_REG & rstag_4to4_bb0_st__valid_out & rstag_2to2_bb0_ld__valid_out_0);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign local_bb0_memcoalesce_null_insertValue_0_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_memcoalesce_digest_bitcast_08_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_cmp166_xor_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0___stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign merge_node_stall_in_3 = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb0_mul158_stall_in_1 = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_4to4_bb0_st__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_2to2_bb0_ld__stall_in_0 = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb0_ld_ = lvb_bb0_ld__reg_NO_SHIFT_REG;
assign lvb_bb0_mul158 = lvb_bb0_mul158_reg_NO_SHIFT_REG;
assign lvb_bb0__ = lvb_bb0___reg_NO_SHIFT_REG;
assign lvb_bb0_cmp166_xor = lvb_bb0_cmp166_xor_reg_NO_SHIFT_REG;
assign lvb_bb0_memcoalesce_digest_bitcast_08 = lvb_bb0_memcoalesce_digest_bitcast_08_reg_NO_SHIFT_REG;
assign lvb_bb0_memcoalesce_null_insertValue_0 = lvb_bb0_memcoalesce_null_insertValue_0_reg_NO_SHIFT_REG;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_bb0_ld__reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_mul158_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0___reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_cmp166_xor_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_memcoalesce_digest_bitcast_08_reg_NO_SHIFT_REG <= 'x;
		lvb_bb0_memcoalesce_null_insertValue_0_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb0_ld__reg_NO_SHIFT_REG <= rstag_2to2_bb0_ld_;
			lvb_bb0_mul158_reg_NO_SHIFT_REG <= local_bb0_mul158_NO_SHIFT_REG;
			lvb_bb0___reg_NO_SHIFT_REG <= local_bb0___NO_SHIFT_REG;
			lvb_bb0_cmp166_xor_reg_NO_SHIFT_REG <= local_bb0_cmp166_xor_NO_SHIFT_REG;
			lvb_bb0_memcoalesce_digest_bitcast_08_reg_NO_SHIFT_REG <= local_bb0_memcoalesce_digest_bitcast_08_NO_SHIFT_REG;
			lvb_bb0_memcoalesce_null_insertValue_0_reg_NO_SHIFT_REG <= local_bb0_memcoalesce_null_insertValue_0_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

module sha256_basic_block_1
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_ld_,
		input [31:0] 		input_wii_mul158,
		input [31:0] 		input_wii__,
		input 		input_wii_cmp166_xor,
		input [63:0] 		input_wii_memcoalesce_digest_bitcast_08,
		input [511:0] 		input_wii_memcoalesce_null_insertValue_0,
		input 		valid_in_0,
		output 		stall_out_0,
		input [31:0] 		input_var__0,
		input [31:0] 		input_var__u0_0,
		input [31:0] 		input_i9_052_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input [31:0] 		input_var__1,
		input [31:0] 		input_var__u0_1,
		input [31:0] 		input_i9_052_1,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_var_,
		output [31:0] 		lvb_var__u0,
		output [31:0] 		lvb_i9_052,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in;
 reg merge_node_valid_out_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u0_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_i9_052_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_var__u0_NO_SHIFT_REG;
 reg [31:0] local_lvm_i9_052_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u0_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_i9_052_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = (|(merge_node_stall_in & merge_node_valid_out_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_var__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u0_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_i9_052_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_var__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u0_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_i9_052_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_var__0_staging_reg_NO_SHIFT_REG <= input_var__0;
				input_var__u0_0_staging_reg_NO_SHIFT_REG <= input_var__u0_0;
				input_i9_052_0_staging_reg_NO_SHIFT_REG <= input_i9_052_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_var__1_staging_reg_NO_SHIFT_REG <= input_var__1;
				input_var__u0_1_staging_reg_NO_SHIFT_REG <= input_var__u0_1;
				input_i9_052_1_staging_reg_NO_SHIFT_REG <= input_i9_052_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_var__NO_SHIFT_REG <= input_var__0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u0_NO_SHIFT_REG <= input_var__u0_0_staging_reg_NO_SHIFT_REG;
					local_lvm_i9_052_NO_SHIFT_REG <= input_i9_052_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_var__NO_SHIFT_REG <= input_var__0;
					local_lvm_var__u0_NO_SHIFT_REG <= input_var__u0_0;
					local_lvm_i9_052_NO_SHIFT_REG <= input_i9_052_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_var__NO_SHIFT_REG <= input_var__1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u0_NO_SHIFT_REG <= input_var__u0_1_staging_reg_NO_SHIFT_REG;
					local_lvm_i9_052_NO_SHIFT_REG <= input_i9_052_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_var__NO_SHIFT_REG <= input_var__1;
					local_lvm_var__u0_NO_SHIFT_REG <= input_var__u0_1;
					local_lvm_i9_052_NO_SHIFT_REG <= input_i9_052_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in))
			begin
				merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_var__reg_NO_SHIFT_REG;
 reg [31:0] lvb_var__u0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_i9_052_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = merge_node_valid_out_NO_SHIFT_REG;
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign merge_node_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_var_ = lvb_var__reg_NO_SHIFT_REG;
assign lvb_var__u0 = lvb_var__u0_reg_NO_SHIFT_REG;
assign lvb_i9_052 = lvb_i9_052_reg_NO_SHIFT_REG;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_var__reg_NO_SHIFT_REG <= 'x;
		lvb_var__u0_reg_NO_SHIFT_REG <= 'x;
		lvb_i9_052_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_var__reg_NO_SHIFT_REG <= local_lvm_var__NO_SHIFT_REG;
			lvb_var__u0_reg_NO_SHIFT_REG <= local_lvm_var__u0_NO_SHIFT_REG;
			lvb_i9_052_reg_NO_SHIFT_REG <= local_lvm_i9_052_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

module sha256_basic_block_2
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_ld_,
		input [31:0] 		input_wii_mul158,
		input [31:0] 		input_wii__,
		input 		input_wii_cmp166_xor,
		input [63:0] 		input_wii_memcoalesce_digest_bitcast_08,
		input [511:0] 		input_wii_memcoalesce_null_insertValue_0,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input_forked26_0,
		input [31:0] 		input_var__0,
		input [31:0] 		input_var__u1_0,
		input [31:0] 		input_i9_05227_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input_forked26_1,
		input [31:0] 		input_var__1,
		input [31:0] 		input_var__u1_1,
		input [31:0] 		input_i9_05227_1,
		output 		valid_out_0,
		input 		stall_in_0,
		output [255:0] 		lvb_bb2_c0_exit_c0_exi6_0,
		output [31:0] 		lvb_bb2_c0_exe6_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output [255:0] 		lvb_bb2_c0_exit_c0_exi6_1,
		output [31:0] 		lvb_bb2_c0_exe6_1,
		input [31:0] 		workgroup_size,
		input 		start,
		input 		feedback_valid_in_33,
		output 		feedback_stall_out_33,
		input [63:0] 		feedback_data_in_33,
		output 		feedback_stall_out_0,
		input 		feedback_valid_in_1,
		output 		feedback_stall_out_1,
		input 		feedback_data_in_1,
		output 		acl_pipelined_valid,
		input 		acl_pipelined_stall,
		output 		acl_pipelined_exiting_valid,
		output 		acl_pipelined_exiting_stall,
		output 		feedback_valid_out_1,
		input 		feedback_stall_in_1,
		output 		feedback_data_out_1,
		output 		feedback_valid_out_33,
		input 		feedback_stall_in_33,
		output [63:0] 		feedback_data_out_33,
		input 		feedback_valid_in_34,
		output 		feedback_stall_out_34,
		input [31:0] 		feedback_data_in_34,
		input 		feedback_valid_in_35,
		output 		feedback_stall_out_35,
		input [31:0] 		feedback_data_in_35,
		input 		feedback_valid_in_36,
		output 		feedback_stall_out_36,
		input [31:0] 		feedback_data_in_36,
		output 		feedback_valid_out_34,
		input 		feedback_stall_in_34,
		output [31:0] 		feedback_data_out_34,
		output 		feedback_valid_out_35,
		input 		feedback_stall_in_35,
		output [31:0] 		feedback_data_out_35,
		output 		feedback_valid_out_36,
		input 		feedback_stall_in_36,
		output [31:0] 		feedback_data_out_36,
		input [511:0] 		avm_local_bb2_st__readdata,
		input 		avm_local_bb2_st__readdatavalid,
		input 		avm_local_bb2_st__waitrequest,
		output [31:0] 		avm_local_bb2_st__address,
		output 		avm_local_bb2_st__read,
		output 		avm_local_bb2_st__write,
		input 		avm_local_bb2_st__writeack,
		output [511:0] 		avm_local_bb2_st__writedata,
		output [63:0] 		avm_local_bb2_st__byteenable,
		output 		avm_local_bb2_st__burstcount,
		output [7:0] 		local_bb2_st__input_fifo_depth,
		output 		local_bb2_st__active,
		input 		clock2x
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input_forked26_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u1_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_i9_05227_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm_forked26_NO_SHIFT_REG;
 reg [31:0] local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_var__u1_NO_SHIFT_REG;
 reg [31:0] local_lvm_i9_05227_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input_forked26_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u1_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_i9_05227_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_forked26_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u1_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_i9_05227_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_forked26_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u1_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_i9_05227_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_forked26_0_staging_reg_NO_SHIFT_REG <= input_forked26_0;
				input_var__0_staging_reg_NO_SHIFT_REG <= input_var__0;
				input_var__u1_0_staging_reg_NO_SHIFT_REG <= input_var__u1_0;
				input_i9_05227_0_staging_reg_NO_SHIFT_REG <= input_i9_05227_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_forked26_1_staging_reg_NO_SHIFT_REG <= input_forked26_1;
				input_var__1_staging_reg_NO_SHIFT_REG <= input_var__1;
				input_var__u1_1_staging_reg_NO_SHIFT_REG <= input_var__u1_1;
				input_i9_05227_1_staging_reg_NO_SHIFT_REG <= input_i9_05227_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_forked26_NO_SHIFT_REG <= input_forked26_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u1_NO_SHIFT_REG <= input_var__u1_0_staging_reg_NO_SHIFT_REG;
					local_lvm_i9_05227_NO_SHIFT_REG <= input_i9_05227_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_forked26_NO_SHIFT_REG <= input_forked26_0;
					local_lvm_var__NO_SHIFT_REG <= input_var__0;
					local_lvm_var__u1_NO_SHIFT_REG <= input_var__u1_0;
					local_lvm_i9_05227_NO_SHIFT_REG <= input_i9_05227_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_forked26_NO_SHIFT_REG <= input_forked26_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u1_NO_SHIFT_REG <= input_var__u1_1_staging_reg_NO_SHIFT_REG;
					local_lvm_i9_05227_NO_SHIFT_REG <= input_i9_05227_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_forked26_NO_SHIFT_REG <= input_forked26_1;
					local_lvm_var__NO_SHIFT_REG <= input_var__1;
					local_lvm_var__u1_NO_SHIFT_REG <= input_var__u1_1;
					local_lvm_i9_05227_NO_SHIFT_REG <= input_i9_05227_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_c0_eni1_stall_local;
wire [127:0] local_bb2_c0_eni1;

assign local_bb2_c0_eni1[7:0] = 8'bxxxxxxxx;
assign local_bb2_c0_eni1[8] = local_lvm_forked26_NO_SHIFT_REG;
assign local_bb2_c0_eni1[127:9] = 119'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;

// This section implements an unregistered operation.
// 
wire local_bb2_c0_eni2_stall_local;
wire [127:0] local_bb2_c0_eni2;

assign local_bb2_c0_eni2[31:0] = local_bb2_c0_eni1[31:0];
assign local_bb2_c0_eni2[63:32] = local_lvm_var__NO_SHIFT_REG;
assign local_bb2_c0_eni2[127:64] = local_bb2_c0_eni1[127:64];

// This section implements an unregistered operation.
// 
wire local_bb2_c0_eni3_stall_local;
wire [127:0] local_bb2_c0_eni3;

assign local_bb2_c0_eni3[63:0] = local_bb2_c0_eni2[63:0];
assign local_bb2_c0_eni3[95:64] = local_lvm_var__u1_NO_SHIFT_REG;
assign local_bb2_c0_eni3[127:96] = local_bb2_c0_eni2[127:96];

// This section implements an unregistered operation.
// 
wire local_bb2_c0_eni4_stall_local;
wire [127:0] local_bb2_c0_eni4;

assign local_bb2_c0_eni4[95:0] = local_bb2_c0_eni3[95:0];
assign local_bb2_c0_eni4[127:96] = local_lvm_i9_05227_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb2_c0_ene1_valid_out_1;
wire local_bb2_c0_ene1_stall_in_1;
 reg local_bb2_c0_ene1_consumed_1_NO_SHIFT_REG;
wire local_bb2_c0_ene1_valid_out_2;
wire local_bb2_c0_ene1_stall_in_2;
 reg local_bb2_c0_ene1_consumed_2_NO_SHIFT_REG;
wire local_bb2_c0_ene2_valid_out;
wire local_bb2_c0_ene2_stall_in;
 reg local_bb2_c0_ene2_consumed_0_NO_SHIFT_REG;
wire local_bb2_c0_ene3_valid_out;
wire local_bb2_c0_ene3_stall_in;
 reg local_bb2_c0_ene3_consumed_0_NO_SHIFT_REG;
wire local_bb2_c0_ene4_valid_out;
wire local_bb2_c0_ene4_stall_in;
 reg local_bb2_c0_ene4_consumed_0_NO_SHIFT_REG;
wire local_bb2_indvars_iv_pop33_acl_pop_i64_0_valid_out_1;
wire local_bb2_indvars_iv_pop33_acl_pop_i64_0_stall_in_1;
 reg local_bb2_indvars_iv_pop33_acl_pop_i64_0_consumed_1_NO_SHIFT_REG;
wire local_bb2_indvars_iv_next_valid_out_1;
wire local_bb2_indvars_iv_next_stall_in_1;
 reg local_bb2_indvars_iv_next_consumed_1_NO_SHIFT_REG;
wire local_bb2_exitcond_valid_out_1;
wire local_bb2_exitcond_stall_in_1;
 reg local_bb2_exitcond_consumed_1_NO_SHIFT_REG;
wire local_bb2_notexit_valid_out_0;
wire local_bb2_notexit_stall_in_0;
 reg local_bb2_notexit_consumed_0_NO_SHIFT_REG;
wire local_bb2_notexit_valid_out_1;
wire local_bb2_notexit_stall_in_1;
 reg local_bb2_notexit_consumed_1_NO_SHIFT_REG;
wire local_bb2_c0_enter_c0_eni4_inputs_ready;
wire local_bb2_c0_enter_c0_eni4_stall_local;
wire local_bb2_c0_enter_c0_eni4_input_accepted;
wire [127:0] local_bb2_c0_enter_c0_eni4;
wire local_bb2_c0_exit_c0_exi6_entry_stall;
wire local_bb2_c0_exit_c0_exi6_output_regs_ready;
wire [4:0] local_bb2_c0_exit_c0_exi6_valid_bits;
wire local_bb2_c0_exit_c0_exi6_phases;
wire local_bb2_c0_enter_c0_eni4_inc_pipelined_thread;
wire local_bb2_c0_enter_c0_eni4_dec_pipelined_thread;
wire local_bb2_c0_enter_c0_eni4_fu_stall_out;

assign local_bb2_c0_enter_c0_eni4_inputs_ready = (merge_node_valid_out_0_NO_SHIFT_REG & merge_node_valid_out_1_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG & merge_node_valid_out_3_NO_SHIFT_REG);
assign local_bb2_c0_enter_c0_eni4 = local_bb2_c0_eni4;
assign local_bb2_c0_enter_c0_eni4_input_accepted = (local_bb2_c0_enter_c0_eni4_inputs_ready && !(local_bb2_c0_exit_c0_exi6_entry_stall));
assign local_bb2_c0_enter_c0_eni4_inc_pipelined_thread = 1'b1;
assign local_bb2_c0_enter_c0_eni4_dec_pipelined_thread = ~(1'b0);
assign local_bb2_c0_enter_c0_eni4_fu_stall_out = (~(local_bb2_c0_enter_c0_eni4_inputs_ready) | local_bb2_c0_exit_c0_exi6_entry_stall);
assign local_bb2_c0_enter_c0_eni4_stall_local = ((local_bb2_c0_ene1_stall_in_1 & ~(local_bb2_c0_ene1_consumed_1_NO_SHIFT_REG)) | (local_bb2_c0_ene1_stall_in_2 & ~(local_bb2_c0_ene1_consumed_2_NO_SHIFT_REG)) | (local_bb2_c0_ene2_stall_in & ~(local_bb2_c0_ene2_consumed_0_NO_SHIFT_REG)) | (local_bb2_c0_ene3_stall_in & ~(local_bb2_c0_ene3_consumed_0_NO_SHIFT_REG)) | (local_bb2_c0_ene4_stall_in & ~(local_bb2_c0_ene4_consumed_0_NO_SHIFT_REG)) | (local_bb2_indvars_iv_pop33_acl_pop_i64_0_stall_in_1 & ~(local_bb2_indvars_iv_pop33_acl_pop_i64_0_consumed_1_NO_SHIFT_REG)) | (local_bb2_indvars_iv_next_stall_in_1 & ~(local_bb2_indvars_iv_next_consumed_1_NO_SHIFT_REG)) | (local_bb2_exitcond_stall_in_1 & ~(local_bb2_exitcond_consumed_1_NO_SHIFT_REG)) | (local_bb2_notexit_stall_in_0 & ~(local_bb2_notexit_consumed_0_NO_SHIFT_REG)) | (local_bb2_notexit_stall_in_1 & ~(local_bb2_notexit_consumed_1_NO_SHIFT_REG)));
assign local_bb2_c0_ene1_valid_out_1 = (local_bb2_c0_enter_c0_eni4_inputs_ready & ~(local_bb2_c0_ene1_consumed_1_NO_SHIFT_REG));
assign local_bb2_c0_ene1_valid_out_2 = (local_bb2_c0_enter_c0_eni4_inputs_ready & ~(local_bb2_c0_ene1_consumed_2_NO_SHIFT_REG));
assign local_bb2_c0_ene2_valid_out = (local_bb2_c0_enter_c0_eni4_inputs_ready & ~(local_bb2_c0_ene2_consumed_0_NO_SHIFT_REG));
assign local_bb2_c0_ene3_valid_out = (local_bb2_c0_enter_c0_eni4_inputs_ready & ~(local_bb2_c0_ene3_consumed_0_NO_SHIFT_REG));
assign local_bb2_c0_ene4_valid_out = (local_bb2_c0_enter_c0_eni4_inputs_ready & ~(local_bb2_c0_ene4_consumed_0_NO_SHIFT_REG));
assign local_bb2_indvars_iv_pop33_acl_pop_i64_0_valid_out_1 = (local_bb2_c0_enter_c0_eni4_inputs_ready & ~(local_bb2_indvars_iv_pop33_acl_pop_i64_0_consumed_1_NO_SHIFT_REG));
assign local_bb2_indvars_iv_next_valid_out_1 = (local_bb2_c0_enter_c0_eni4_inputs_ready & ~(local_bb2_indvars_iv_next_consumed_1_NO_SHIFT_REG));
assign local_bb2_exitcond_valid_out_1 = (local_bb2_c0_enter_c0_eni4_inputs_ready & ~(local_bb2_exitcond_consumed_1_NO_SHIFT_REG));
assign local_bb2_notexit_valid_out_0 = (local_bb2_c0_enter_c0_eni4_inputs_ready & ~(local_bb2_notexit_consumed_0_NO_SHIFT_REG));
assign local_bb2_notexit_valid_out_1 = (local_bb2_c0_enter_c0_eni4_inputs_ready & ~(local_bb2_notexit_consumed_1_NO_SHIFT_REG));
assign merge_node_stall_in_0 = (local_bb2_c0_enter_c0_eni4_fu_stall_out | ~(local_bb2_c0_enter_c0_eni4_inputs_ready));
assign merge_node_stall_in_1 = (local_bb2_c0_enter_c0_eni4_fu_stall_out | ~(local_bb2_c0_enter_c0_eni4_inputs_ready));
assign merge_node_stall_in_2 = (local_bb2_c0_enter_c0_eni4_fu_stall_out | ~(local_bb2_c0_enter_c0_eni4_inputs_ready));
assign merge_node_stall_in_3 = (local_bb2_c0_enter_c0_eni4_fu_stall_out | ~(local_bb2_c0_enter_c0_eni4_inputs_ready));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_c0_ene1_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb2_c0_ene1_consumed_2_NO_SHIFT_REG <= 1'b0;
		local_bb2_c0_ene2_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_c0_ene3_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_c0_ene4_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_indvars_iv_pop33_acl_pop_i64_0_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb2_indvars_iv_next_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb2_exitcond_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb2_notexit_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_notexit_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb2_c0_ene1_consumed_1_NO_SHIFT_REG <= (local_bb2_c0_enter_c0_eni4_inputs_ready & (local_bb2_c0_ene1_consumed_1_NO_SHIFT_REG | ~(local_bb2_c0_ene1_stall_in_1)) & local_bb2_c0_enter_c0_eni4_stall_local);
		local_bb2_c0_ene1_consumed_2_NO_SHIFT_REG <= (local_bb2_c0_enter_c0_eni4_inputs_ready & (local_bb2_c0_ene1_consumed_2_NO_SHIFT_REG | ~(local_bb2_c0_ene1_stall_in_2)) & local_bb2_c0_enter_c0_eni4_stall_local);
		local_bb2_c0_ene2_consumed_0_NO_SHIFT_REG <= (local_bb2_c0_enter_c0_eni4_inputs_ready & (local_bb2_c0_ene2_consumed_0_NO_SHIFT_REG | ~(local_bb2_c0_ene2_stall_in)) & local_bb2_c0_enter_c0_eni4_stall_local);
		local_bb2_c0_ene3_consumed_0_NO_SHIFT_REG <= (local_bb2_c0_enter_c0_eni4_inputs_ready & (local_bb2_c0_ene3_consumed_0_NO_SHIFT_REG | ~(local_bb2_c0_ene3_stall_in)) & local_bb2_c0_enter_c0_eni4_stall_local);
		local_bb2_c0_ene4_consumed_0_NO_SHIFT_REG <= (local_bb2_c0_enter_c0_eni4_inputs_ready & (local_bb2_c0_ene4_consumed_0_NO_SHIFT_REG | ~(local_bb2_c0_ene4_stall_in)) & local_bb2_c0_enter_c0_eni4_stall_local);
		local_bb2_indvars_iv_pop33_acl_pop_i64_0_consumed_1_NO_SHIFT_REG <= (local_bb2_c0_enter_c0_eni4_inputs_ready & (local_bb2_indvars_iv_pop33_acl_pop_i64_0_consumed_1_NO_SHIFT_REG | ~(local_bb2_indvars_iv_pop33_acl_pop_i64_0_stall_in_1)) & local_bb2_c0_enter_c0_eni4_stall_local);
		local_bb2_indvars_iv_next_consumed_1_NO_SHIFT_REG <= (local_bb2_c0_enter_c0_eni4_inputs_ready & (local_bb2_indvars_iv_next_consumed_1_NO_SHIFT_REG | ~(local_bb2_indvars_iv_next_stall_in_1)) & local_bb2_c0_enter_c0_eni4_stall_local);
		local_bb2_exitcond_consumed_1_NO_SHIFT_REG <= (local_bb2_c0_enter_c0_eni4_inputs_ready & (local_bb2_exitcond_consumed_1_NO_SHIFT_REG | ~(local_bb2_exitcond_stall_in_1)) & local_bb2_c0_enter_c0_eni4_stall_local);
		local_bb2_notexit_consumed_0_NO_SHIFT_REG <= (local_bb2_c0_enter_c0_eni4_inputs_ready & (local_bb2_notexit_consumed_0_NO_SHIFT_REG | ~(local_bb2_notexit_stall_in_0)) & local_bb2_c0_enter_c0_eni4_stall_local);
		local_bb2_notexit_consumed_1_NO_SHIFT_REG <= (local_bb2_c0_enter_c0_eni4_inputs_ready & (local_bb2_notexit_consumed_1_NO_SHIFT_REG | ~(local_bb2_notexit_stall_in_1)) & local_bb2_c0_enter_c0_eni4_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_c0_ene1_stall_local;
wire local_bb2_c0_ene1;

assign local_bb2_c0_ene1 = local_bb2_c0_enter_c0_eni4[8];

// This section implements an unregistered operation.
// 
wire local_bb2_c0_ene2_stall_local;
wire [31:0] local_bb2_c0_ene2;

assign local_bb2_c0_ene2 = local_bb2_c0_enter_c0_eni4[63:32];

// This section implements an unregistered operation.
// 
wire local_bb2_c0_ene3_stall_local;
wire [31:0] local_bb2_c0_ene3;

assign local_bb2_c0_ene3 = local_bb2_c0_enter_c0_eni4[95:64];

// This section implements an unregistered operation.
// 
wire local_bb2_c0_ene4_stall_local;
wire [31:0] local_bb2_c0_ene4;

assign local_bb2_c0_ene4 = local_bb2_c0_enter_c0_eni4[127:96];

// This section implements an unregistered operation.
// 
wire local_bb2_indvars_iv_pop33_acl_pop_i64_0_stall_local;
wire [63:0] local_bb2_indvars_iv_pop33_acl_pop_i64_0;
wire local_bb2_indvars_iv_pop33_acl_pop_i64_0_fu_valid_out;
wire local_bb2_indvars_iv_pop33_acl_pop_i64_0_fu_stall_out;

acl_pop local_bb2_indvars_iv_pop33_acl_pop_i64_0_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb2_c0_ene1),
	.predicate(1'b0),
	.data_in(64'h0),
	.stall_out(local_bb2_indvars_iv_pop33_acl_pop_i64_0_fu_stall_out),
	.valid_in(local_bb2_c0_exit_c0_exi6_valid_bits[0]),
	.valid_out(local_bb2_indvars_iv_pop33_acl_pop_i64_0_fu_valid_out),
	.stall_in(local_bb2_indvars_iv_pop33_acl_pop_i64_0_stall_local),
	.data_out(local_bb2_indvars_iv_pop33_acl_pop_i64_0),
	.feedback_in(feedback_data_in_33),
	.feedback_valid_in(feedback_valid_in_33),
	.feedback_stall_out(feedback_stall_out_33)
);

defparam local_bb2_indvars_iv_pop33_acl_pop_i64_0_feedback.DATA_WIDTH = 64;
defparam local_bb2_indvars_iv_pop33_acl_pop_i64_0_feedback.STYLE = "REGULAR";

assign local_bb2_indvars_iv_pop33_acl_pop_i64_0_stall_local = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb2_indvars_iv_next_stall_local;
wire [63:0] local_bb2_indvars_iv_next;

assign local_bb2_indvars_iv_next = (local_bb2_indvars_iv_pop33_acl_pop_i64_0 + 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb2_lftr_wideiv_stall_local;
wire [31:0] local_bb2_lftr_wideiv;

assign local_bb2_lftr_wideiv = local_bb2_indvars_iv_next[31:0];

// This section implements an unregistered operation.
// 
wire local_bb2_exitcond_stall_local;
wire local_bb2_exitcond;

assign local_bb2_exitcond = (local_bb2_lftr_wideiv == 32'h50);

// This section implements an unregistered operation.
// 
wire local_bb2_notexit_stall_local;
wire local_bb2_notexit;

assign local_bb2_notexit = (local_bb2_exitcond ^ 1'b1);

// This section implements a registered operation.
// 
wire local_bb2_keep_going_acl_pipeline_1_inputs_ready;
 reg local_bb2_keep_going_acl_pipeline_1_valid_out_NO_SHIFT_REG;
wire local_bb2_keep_going_acl_pipeline_1_stall_in;
wire local_bb2_keep_going_acl_pipeline_1_output_regs_ready;
wire local_bb2_keep_going_acl_pipeline_1_keep_going;
wire local_bb2_keep_going_acl_pipeline_1_fu_valid_out;
wire local_bb2_keep_going_acl_pipeline_1_fu_stall_out;
 reg local_bb2_keep_going_acl_pipeline_1_NO_SHIFT_REG;
wire local_bb2_keep_going_acl_pipeline_1_feedback_pipelined;
wire local_bb2_keep_going_acl_pipeline_1_causedstall;

acl_pipeline local_bb2_keep_going_acl_pipeline_1_pipelined (
	.clock(clock),
	.resetn(resetn),
	.data_in(1'b1),
	.stall_out(local_bb2_keep_going_acl_pipeline_1_fu_stall_out),
	.valid_in(local_bb2_c0_exit_c0_exi6_valid_bits[0]),
	.valid_out(local_bb2_keep_going_acl_pipeline_1_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb2_keep_going_acl_pipeline_1_keep_going),
	.initeration_in(1'b0),
	.initeration_valid_in(1'b0),
	.initeration_stall_out(feedback_stall_out_0),
	.not_exitcond_in(feedback_data_in_1),
	.not_exitcond_valid_in(feedback_valid_in_1),
	.not_exitcond_stall_out(feedback_stall_out_1),
	.pipeline_valid_out(acl_pipelined_valid),
	.pipeline_stall_in(acl_pipelined_stall),
	.exiting_valid_out(acl_pipelined_exiting_valid)
);

defparam local_bb2_keep_going_acl_pipeline_1_pipelined.FIFO_DEPTH = 0;
defparam local_bb2_keep_going_acl_pipeline_1_pipelined.STYLE = "NON_SPECULATIVE";

assign local_bb2_keep_going_acl_pipeline_1_inputs_ready = 1'b1;
assign local_bb2_keep_going_acl_pipeline_1_output_regs_ready = 1'b1;
assign acl_pipelined_exiting_stall = acl_pipelined_stall;
assign local_bb2_c0_ene1_stall_in_1 = 1'b0;
assign local_bb2_keep_going_acl_pipeline_1_causedstall = (local_bb2_c0_exit_c0_exi6_valid_bits[0] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_keep_going_acl_pipeline_1_NO_SHIFT_REG <= 'x;
		local_bb2_keep_going_acl_pipeline_1_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_keep_going_acl_pipeline_1_output_regs_ready)
		begin
			local_bb2_keep_going_acl_pipeline_1_NO_SHIFT_REG <= local_bb2_keep_going_acl_pipeline_1_keep_going;
			local_bb2_keep_going_acl_pipeline_1_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb2_keep_going_acl_pipeline_1_stall_in))
			begin
				local_bb2_keep_going_acl_pipeline_1_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb2_c0_ene1_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene1_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene1_0_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene1_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene1_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene1_1_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene1_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene1_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene1_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene1_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene1_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene1_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene1_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene1_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb2_c0_ene1_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb2_c0_ene1_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb2_c0_ene1_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb2_c0_ene1_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb2_c0_ene1_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb2_c0_ene1),
	.data_out(rnode_1to2_bb2_c0_ene1_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb2_c0_ene1_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb2_c0_ene1_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_bb2_c0_ene1_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb2_c0_ene1_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb2_c0_ene1_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2_c0_ene1_stall_in_2 = 1'b0;
assign rnode_1to2_bb2_c0_ene1_0_stall_in_0_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb2_c0_ene1_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb2_c0_ene1_0_NO_SHIFT_REG = rnode_1to2_bb2_c0_ene1_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb2_c0_ene1_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb2_c0_ene1_1_NO_SHIFT_REG = rnode_1to2_bb2_c0_ene1_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb2_c0_ene1_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb2_c0_ene1_2_NO_SHIFT_REG = rnode_1to2_bb2_c0_ene1_0_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb2_c0_ene2_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb2_c0_ene2_0_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene2_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb2_c0_ene2_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene2_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene2_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene2_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb2_c0_ene2_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb2_c0_ene2_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb2_c0_ene2_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb2_c0_ene2_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb2_c0_ene2_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb2_c0_ene2),
	.data_out(rnode_1to2_bb2_c0_ene2_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb2_c0_ene2_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb2_c0_ene2_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb2_c0_ene2_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb2_c0_ene2_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb2_c0_ene2_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2_c0_ene2_stall_in = 1'b0;
assign rnode_1to2_bb2_c0_ene2_0_NO_SHIFT_REG = rnode_1to2_bb2_c0_ene2_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb2_c0_ene2_0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb2_c0_ene2_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb2_c0_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb2_c0_ene3_0_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene3_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb2_c0_ene3_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene3_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene3_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene3_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb2_c0_ene3_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb2_c0_ene3_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb2_c0_ene3_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb2_c0_ene3_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb2_c0_ene3_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb2_c0_ene3),
	.data_out(rnode_1to2_bb2_c0_ene3_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb2_c0_ene3_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb2_c0_ene3_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb2_c0_ene3_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb2_c0_ene3_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb2_c0_ene3_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2_c0_ene3_stall_in = 1'b0;
assign rnode_1to2_bb2_c0_ene3_0_NO_SHIFT_REG = rnode_1to2_bb2_c0_ene3_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb2_c0_ene3_0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb2_c0_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb2_c0_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb2_c0_ene4_0_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene4_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb2_c0_ene4_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene4_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene4_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_c0_ene4_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb2_c0_ene4_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb2_c0_ene4_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb2_c0_ene4_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb2_c0_ene4_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb2_c0_ene4_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb2_c0_ene4),
	.data_out(rnode_1to2_bb2_c0_ene4_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb2_c0_ene4_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb2_c0_ene4_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb2_c0_ene4_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb2_c0_ene4_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb2_c0_ene4_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2_c0_ene4_stall_in = 1'b0;
assign rnode_1to2_bb2_c0_ene4_0_NO_SHIFT_REG = rnode_1to2_bb2_c0_ene4_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb2_c0_ene4_0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb2_c0_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb2_arrayidx22_inputs_ready;
 reg local_bb2_arrayidx22_valid_out_NO_SHIFT_REG;
wire local_bb2_arrayidx22_stall_in;
wire local_bb2_arrayidx22_output_regs_ready;
 reg [31:0] local_bb2_arrayidx22_NO_SHIFT_REG;
wire [31:0] local_bb2_arrayidx22_op_wire;
wire local_bb2_arrayidx22_causedstall;

assign local_bb2_arrayidx22_inputs_ready = 1'b1;
assign local_bb2_arrayidx22_output_regs_ready = 1'b1;
assign local_bb2_arrayidx22_op_wire = (64'h0 + (local_bb2_indvars_iv_pop33_acl_pop_i64_0 << 6'h2));
assign local_bb2_indvars_iv_pop33_acl_pop_i64_0_stall_in_1 = 1'b0;
assign local_bb2_arrayidx22_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_arrayidx22_NO_SHIFT_REG <= 'x;
		local_bb2_arrayidx22_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_arrayidx22_output_regs_ready)
		begin
			local_bb2_arrayidx22_NO_SHIFT_REG <= local_bb2_arrayidx22_op_wire;
			local_bb2_arrayidx22_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb2_arrayidx22_stall_in))
			begin
				local_bb2_arrayidx22_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb2_exitcond_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb2_exitcond_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to2_bb2_exitcond_0_NO_SHIFT_REG;
 logic rnode_1to2_bb2_exitcond_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_bb2_exitcond_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_exitcond_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_exitcond_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb2_exitcond_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb2_exitcond_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb2_exitcond_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb2_exitcond_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb2_exitcond_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb2_exitcond_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb2_exitcond),
	.data_out(rnode_1to2_bb2_exitcond_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb2_exitcond_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb2_exitcond_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_bb2_exitcond_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb2_exitcond_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb2_exitcond_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2_exitcond_stall_in_1 = 1'b0;
assign rnode_1to2_bb2_exitcond_0_NO_SHIFT_REG = rnode_1to2_bb2_exitcond_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb2_exitcond_0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb2_exitcond_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb2_notexitcond_notexit_inputs_ready;
 reg local_bb2_notexitcond_notexit_valid_out_0_NO_SHIFT_REG;
wire local_bb2_notexitcond_notexit_stall_in_0;
 reg local_bb2_notexitcond_notexit_valid_out_1_NO_SHIFT_REG;
wire local_bb2_notexitcond_notexit_stall_in_1;
 reg local_bb2_notexitcond_notexit_valid_out_2_NO_SHIFT_REG;
wire local_bb2_notexitcond_notexit_stall_in_2;
 reg local_bb2_notexitcond_notexit_valid_out_3_NO_SHIFT_REG;
wire local_bb2_notexitcond_notexit_stall_in_3;
wire local_bb2_notexitcond_notexit_output_regs_ready;
wire local_bb2_notexitcond_notexit_result;
wire local_bb2_notexitcond_notexit_fu_valid_out;
wire local_bb2_notexitcond_notexit_fu_stall_out;
 reg local_bb2_notexitcond_notexit_NO_SHIFT_REG;
wire local_bb2_notexitcond_notexit_causedstall;

acl_push local_bb2_notexitcond_notexit_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(1'b1),
	.predicate(1'b0),
	.data_in(local_bb2_notexit),
	.stall_out(local_bb2_notexitcond_notexit_fu_stall_out),
	.valid_in(local_bb2_c0_exit_c0_exi6_valid_bits[0]),
	.valid_out(local_bb2_notexitcond_notexit_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb2_notexitcond_notexit_result),
	.feedback_out(feedback_data_out_1),
	.feedback_valid_out(feedback_valid_out_1),
	.feedback_stall_in(feedback_stall_in_1)
);

defparam local_bb2_notexitcond_notexit_feedback.STALLFREE = 1;
defparam local_bb2_notexitcond_notexit_feedback.DATA_WIDTH = 1;
defparam local_bb2_notexitcond_notexit_feedback.FIFO_DEPTH = 0;
defparam local_bb2_notexitcond_notexit_feedback.MIN_FIFO_LATENCY = 0;
defparam local_bb2_notexitcond_notexit_feedback.STYLE = "REGULAR";

assign local_bb2_notexitcond_notexit_inputs_ready = 1'b1;
assign local_bb2_notexitcond_notexit_output_regs_ready = 1'b1;
assign local_bb2_notexit_stall_in_0 = 1'b0;
assign local_bb2_notexitcond_notexit_causedstall = (local_bb2_c0_exit_c0_exi6_valid_bits[0] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_notexitcond_notexit_NO_SHIFT_REG <= 'x;
		local_bb2_notexitcond_notexit_valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_notexitcond_notexit_valid_out_1_NO_SHIFT_REG <= 1'b0;
		local_bb2_notexitcond_notexit_valid_out_2_NO_SHIFT_REG <= 1'b0;
		local_bb2_notexitcond_notexit_valid_out_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_notexitcond_notexit_output_regs_ready)
		begin
			local_bb2_notexitcond_notexit_NO_SHIFT_REG <= local_bb2_notexitcond_notexit_result;
			local_bb2_notexitcond_notexit_valid_out_0_NO_SHIFT_REG <= 1'b1;
			local_bb2_notexitcond_notexit_valid_out_1_NO_SHIFT_REG <= 1'b1;
			local_bb2_notexitcond_notexit_valid_out_2_NO_SHIFT_REG <= 1'b1;
			local_bb2_notexitcond_notexit_valid_out_3_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb2_notexitcond_notexit_stall_in_0))
			begin
				local_bb2_notexitcond_notexit_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb2_notexitcond_notexit_stall_in_1))
			begin
				local_bb2_notexitcond_notexit_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb2_notexitcond_notexit_stall_in_2))
			begin
				local_bb2_notexitcond_notexit_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb2_notexitcond_notexit_stall_in_3))
			begin
				local_bb2_notexitcond_notexit_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb2_indvars_iv_push33_indvars_iv_next_inputs_ready;
 reg local_bb2_indvars_iv_push33_indvars_iv_next_valid_out_NO_SHIFT_REG;
wire local_bb2_indvars_iv_push33_indvars_iv_next_stall_in;
wire local_bb2_indvars_iv_push33_indvars_iv_next_output_regs_ready;
wire [63:0] local_bb2_indvars_iv_push33_indvars_iv_next_result;
wire local_bb2_indvars_iv_push33_indvars_iv_next_fu_valid_out;
wire local_bb2_indvars_iv_push33_indvars_iv_next_fu_stall_out;
 reg [63:0] local_bb2_indvars_iv_push33_indvars_iv_next_NO_SHIFT_REG;
wire local_bb2_indvars_iv_push33_indvars_iv_next_causedstall;

acl_push local_bb2_indvars_iv_push33_indvars_iv_next_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb2_notexit),
	.predicate(1'b0),
	.data_in(local_bb2_indvars_iv_next),
	.stall_out(local_bb2_indvars_iv_push33_indvars_iv_next_fu_stall_out),
	.valid_in(local_bb2_c0_exit_c0_exi6_valid_bits[0]),
	.valid_out(local_bb2_indvars_iv_push33_indvars_iv_next_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb2_indvars_iv_push33_indvars_iv_next_result),
	.feedback_out(feedback_data_out_33),
	.feedback_valid_out(feedback_valid_out_33),
	.feedback_stall_in(feedback_stall_in_33)
);

defparam local_bb2_indvars_iv_push33_indvars_iv_next_feedback.STALLFREE = 1;
defparam local_bb2_indvars_iv_push33_indvars_iv_next_feedback.DATA_WIDTH = 64;
defparam local_bb2_indvars_iv_push33_indvars_iv_next_feedback.FIFO_DEPTH = 1;
defparam local_bb2_indvars_iv_push33_indvars_iv_next_feedback.MIN_FIFO_LATENCY = 1;
defparam local_bb2_indvars_iv_push33_indvars_iv_next_feedback.STYLE = "REGULAR";

assign local_bb2_indvars_iv_push33_indvars_iv_next_inputs_ready = 1'b1;
assign local_bb2_indvars_iv_push33_indvars_iv_next_output_regs_ready = 1'b1;
assign local_bb2_indvars_iv_next_stall_in_1 = 1'b0;
assign local_bb2_notexit_stall_in_1 = 1'b0;
assign local_bb2_indvars_iv_push33_indvars_iv_next_causedstall = (local_bb2_c0_exit_c0_exi6_valid_bits[0] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_indvars_iv_push33_indvars_iv_next_NO_SHIFT_REG <= 'x;
		local_bb2_indvars_iv_push33_indvars_iv_next_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_indvars_iv_push33_indvars_iv_next_output_regs_ready)
		begin
			local_bb2_indvars_iv_push33_indvars_iv_next_NO_SHIFT_REG <= local_bb2_indvars_iv_push33_indvars_iv_next_result;
			local_bb2_indvars_iv_push33_indvars_iv_next_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb2_indvars_iv_push33_indvars_iv_next_stall_in))
			begin
				local_bb2_indvars_iv_push33_indvars_iv_next_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb2_keep_going_acl_pipeline_1_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb2_keep_going_acl_pipeline_1_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb2_keep_going_acl_pipeline_1_0_NO_SHIFT_REG;
 logic rnode_2to3_bb2_keep_going_acl_pipeline_1_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb2_keep_going_acl_pipeline_1_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_keep_going_acl_pipeline_1_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_keep_going_acl_pipeline_1_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_keep_going_acl_pipeline_1_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb2_keep_going_acl_pipeline_1_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb2_keep_going_acl_pipeline_1_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb2_keep_going_acl_pipeline_1_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb2_keep_going_acl_pipeline_1_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb2_keep_going_acl_pipeline_1_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb2_keep_going_acl_pipeline_1_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb2_keep_going_acl_pipeline_1_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb2_keep_going_acl_pipeline_1_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb2_keep_going_acl_pipeline_1_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb2_keep_going_acl_pipeline_1_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb2_keep_going_acl_pipeline_1_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb2_keep_going_acl_pipeline_1_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2_keep_going_acl_pipeline_1_stall_in = 1'b0;
assign rnode_2to3_bb2_keep_going_acl_pipeline_1_0_NO_SHIFT_REG = rnode_2to3_bb2_keep_going_acl_pipeline_1_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb2_keep_going_acl_pipeline_1_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb2_keep_going_acl_pipeline_1_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb2__pop34_c0_ene2_valid_out_0;
wire local_bb2__pop34_c0_ene2_stall_in_0;
 reg local_bb2__pop34_c0_ene2_consumed_0_NO_SHIFT_REG;
wire local_bb2__pop34_c0_ene2_valid_out_1;
wire local_bb2__pop34_c0_ene2_stall_in_1;
 reg local_bb2__pop34_c0_ene2_consumed_1_NO_SHIFT_REG;
wire local_bb2__pop34_c0_ene2_inputs_ready;
wire local_bb2__pop34_c0_ene2_stall_local;
wire [31:0] local_bb2__pop34_c0_ene2;
wire local_bb2__pop34_c0_ene2_fu_valid_out;
wire local_bb2__pop34_c0_ene2_fu_stall_out;

acl_pop local_bb2__pop34_c0_ene2_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_bb2_c0_ene1_0_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_1to2_bb2_c0_ene2_0_NO_SHIFT_REG),
	.stall_out(local_bb2__pop34_c0_ene2_fu_stall_out),
	.valid_in(local_bb2_c0_exit_c0_exi6_valid_bits[1]),
	.valid_out(local_bb2__pop34_c0_ene2_fu_valid_out),
	.stall_in(local_bb2__pop34_c0_ene2_stall_local),
	.data_out(local_bb2__pop34_c0_ene2),
	.feedback_in(feedback_data_in_34),
	.feedback_valid_in(feedback_valid_in_34),
	.feedback_stall_out(feedback_stall_out_34)
);

defparam local_bb2__pop34_c0_ene2_feedback.DATA_WIDTH = 32;
defparam local_bb2__pop34_c0_ene2_feedback.STYLE = "REGULAR";

assign local_bb2__pop34_c0_ene2_inputs_ready = (rnode_1to2_bb2_c0_ene2_0_valid_out_NO_SHIFT_REG & rnode_1to2_bb2_c0_ene1_0_valid_out_0_NO_SHIFT_REG);
assign local_bb2__pop34_c0_ene2_stall_local = 1'b0;
assign local_bb2__pop34_c0_ene2_valid_out_0 = 1'b1;
assign local_bb2__pop34_c0_ene2_valid_out_1 = 1'b1;
assign rnode_1to2_bb2_c0_ene2_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb2_c0_ene1_0_stall_in_0_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2__pop34_c0_ene2_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2__pop34_c0_ene2_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb2__pop34_c0_ene2_consumed_0_NO_SHIFT_REG <= (local_bb2__pop34_c0_ene2_fu_valid_out & (local_bb2__pop34_c0_ene2_consumed_0_NO_SHIFT_REG | ~(local_bb2__pop34_c0_ene2_stall_in_0)) & local_bb2__pop34_c0_ene2_stall_local);
		local_bb2__pop34_c0_ene2_consumed_1_NO_SHIFT_REG <= (local_bb2__pop34_c0_ene2_fu_valid_out & (local_bb2__pop34_c0_ene2_consumed_1_NO_SHIFT_REG | ~(local_bb2__pop34_c0_ene2_stall_in_1)) & local_bb2__pop34_c0_ene2_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2__pop35_c0_ene3_valid_out_0;
wire local_bb2__pop35_c0_ene3_stall_in_0;
 reg local_bb2__pop35_c0_ene3_consumed_0_NO_SHIFT_REG;
wire local_bb2__pop35_c0_ene3_valid_out_1;
wire local_bb2__pop35_c0_ene3_stall_in_1;
 reg local_bb2__pop35_c0_ene3_consumed_1_NO_SHIFT_REG;
wire local_bb2__pop35_c0_ene3_inputs_ready;
wire local_bb2__pop35_c0_ene3_stall_local;
wire [31:0] local_bb2__pop35_c0_ene3;
wire local_bb2__pop35_c0_ene3_fu_valid_out;
wire local_bb2__pop35_c0_ene3_fu_stall_out;

acl_pop local_bb2__pop35_c0_ene3_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_bb2_c0_ene1_1_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_1to2_bb2_c0_ene3_0_NO_SHIFT_REG),
	.stall_out(local_bb2__pop35_c0_ene3_fu_stall_out),
	.valid_in(local_bb2_c0_exit_c0_exi6_valid_bits[1]),
	.valid_out(local_bb2__pop35_c0_ene3_fu_valid_out),
	.stall_in(local_bb2__pop35_c0_ene3_stall_local),
	.data_out(local_bb2__pop35_c0_ene3),
	.feedback_in(feedback_data_in_35),
	.feedback_valid_in(feedback_valid_in_35),
	.feedback_stall_out(feedback_stall_out_35)
);

defparam local_bb2__pop35_c0_ene3_feedback.DATA_WIDTH = 32;
defparam local_bb2__pop35_c0_ene3_feedback.STYLE = "REGULAR";

assign local_bb2__pop35_c0_ene3_inputs_ready = (rnode_1to2_bb2_c0_ene3_0_valid_out_NO_SHIFT_REG & rnode_1to2_bb2_c0_ene1_0_valid_out_1_NO_SHIFT_REG);
assign local_bb2__pop35_c0_ene3_stall_local = 1'b0;
assign local_bb2__pop35_c0_ene3_valid_out_0 = 1'b1;
assign local_bb2__pop35_c0_ene3_valid_out_1 = 1'b1;
assign rnode_1to2_bb2_c0_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb2_c0_ene1_0_stall_in_1_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2__pop35_c0_ene3_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2__pop35_c0_ene3_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb2__pop35_c0_ene3_consumed_0_NO_SHIFT_REG <= (local_bb2__pop35_c0_ene3_fu_valid_out & (local_bb2__pop35_c0_ene3_consumed_0_NO_SHIFT_REG | ~(local_bb2__pop35_c0_ene3_stall_in_0)) & local_bb2__pop35_c0_ene3_stall_local);
		local_bb2__pop35_c0_ene3_consumed_1_NO_SHIFT_REG <= (local_bb2__pop35_c0_ene3_fu_valid_out & (local_bb2__pop35_c0_ene3_consumed_1_NO_SHIFT_REG | ~(local_bb2__pop35_c0_ene3_stall_in_1)) & local_bb2__pop35_c0_ene3_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_i9_05227_pop36_c0_ene4_valid_out_0;
wire local_bb2_i9_05227_pop36_c0_ene4_stall_in_0;
 reg local_bb2_i9_05227_pop36_c0_ene4_consumed_0_NO_SHIFT_REG;
wire local_bb2_i9_05227_pop36_c0_ene4_valid_out_1;
wire local_bb2_i9_05227_pop36_c0_ene4_stall_in_1;
 reg local_bb2_i9_05227_pop36_c0_ene4_consumed_1_NO_SHIFT_REG;
wire local_bb2_i9_05227_pop36_c0_ene4_inputs_ready;
wire local_bb2_i9_05227_pop36_c0_ene4_stall_local;
wire [31:0] local_bb2_i9_05227_pop36_c0_ene4;
wire local_bb2_i9_05227_pop36_c0_ene4_fu_valid_out;
wire local_bb2_i9_05227_pop36_c0_ene4_fu_stall_out;

acl_pop local_bb2_i9_05227_pop36_c0_ene4_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_bb2_c0_ene1_2_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_1to2_bb2_c0_ene4_0_NO_SHIFT_REG),
	.stall_out(local_bb2_i9_05227_pop36_c0_ene4_fu_stall_out),
	.valid_in(local_bb2_c0_exit_c0_exi6_valid_bits[1]),
	.valid_out(local_bb2_i9_05227_pop36_c0_ene4_fu_valid_out),
	.stall_in(local_bb2_i9_05227_pop36_c0_ene4_stall_local),
	.data_out(local_bb2_i9_05227_pop36_c0_ene4),
	.feedback_in(feedback_data_in_36),
	.feedback_valid_in(feedback_valid_in_36),
	.feedback_stall_out(feedback_stall_out_36)
);

defparam local_bb2_i9_05227_pop36_c0_ene4_feedback.DATA_WIDTH = 32;
defparam local_bb2_i9_05227_pop36_c0_ene4_feedback.STYLE = "REGULAR";

assign local_bb2_i9_05227_pop36_c0_ene4_inputs_ready = (rnode_1to2_bb2_c0_ene4_0_valid_out_NO_SHIFT_REG & rnode_1to2_bb2_c0_ene1_0_valid_out_2_NO_SHIFT_REG);
assign local_bb2_i9_05227_pop36_c0_ene4_stall_local = 1'b0;
assign local_bb2_i9_05227_pop36_c0_ene4_valid_out_0 = 1'b1;
assign local_bb2_i9_05227_pop36_c0_ene4_valid_out_1 = 1'b1;
assign rnode_1to2_bb2_c0_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb2_c0_ene1_0_stall_in_2_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_i9_05227_pop36_c0_ene4_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_i9_05227_pop36_c0_ene4_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb2_i9_05227_pop36_c0_ene4_consumed_0_NO_SHIFT_REG <= (local_bb2_i9_05227_pop36_c0_ene4_fu_valid_out & (local_bb2_i9_05227_pop36_c0_ene4_consumed_0_NO_SHIFT_REG | ~(local_bb2_i9_05227_pop36_c0_ene4_stall_in_0)) & local_bb2_i9_05227_pop36_c0_ene4_stall_local);
		local_bb2_i9_05227_pop36_c0_ene4_consumed_1_NO_SHIFT_REG <= (local_bb2_i9_05227_pop36_c0_ene4_fu_valid_out & (local_bb2_i9_05227_pop36_c0_ene4_consumed_1_NO_SHIFT_REG | ~(local_bb2_i9_05227_pop36_c0_ene4_stall_in_1)) & local_bb2_i9_05227_pop36_c0_ene4_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb2_arrayidx22_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb2_arrayidx22_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb2_arrayidx22_0_NO_SHIFT_REG;
 logic rnode_2to3_bb2_arrayidx22_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb2_arrayidx22_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_arrayidx22_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_arrayidx22_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_arrayidx22_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb2_arrayidx22_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb2_arrayidx22_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb2_arrayidx22_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb2_arrayidx22_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb2_arrayidx22_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb2_arrayidx22_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb2_arrayidx22_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb2_arrayidx22_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb2_arrayidx22_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb2_arrayidx22_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb2_arrayidx22_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb2_arrayidx22_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2_arrayidx22_stall_in = 1'b0;
assign rnode_2to3_bb2_arrayidx22_0_NO_SHIFT_REG = rnode_2to3_bb2_arrayidx22_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb2_arrayidx22_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb2_arrayidx22_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_2to4_bb2_exitcond_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to4_bb2_exitcond_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to4_bb2_exitcond_0_NO_SHIFT_REG;
 logic rnode_2to4_bb2_exitcond_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to4_bb2_exitcond_0_reg_4_NO_SHIFT_REG;
 logic rnode_2to4_bb2_exitcond_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_2to4_bb2_exitcond_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_2to4_bb2_exitcond_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_2to4_bb2_exitcond_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to4_bb2_exitcond_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to4_bb2_exitcond_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_2to4_bb2_exitcond_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_2to4_bb2_exitcond_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb2_exitcond_0_NO_SHIFT_REG),
	.data_out(rnode_2to4_bb2_exitcond_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_2to4_bb2_exitcond_0_reg_4_fifo.DEPTH = 2;
defparam rnode_2to4_bb2_exitcond_0_reg_4_fifo.DATA_WIDTH = 1;
defparam rnode_2to4_bb2_exitcond_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to4_bb2_exitcond_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_2to4_bb2_exitcond_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb2_exitcond_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to4_bb2_exitcond_0_NO_SHIFT_REG = rnode_2to4_bb2_exitcond_0_reg_4_NO_SHIFT_REG;
assign rnode_2to4_bb2_exitcond_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_2to4_bb2_exitcond_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb2_notexitcond_notexit_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb2_notexitcond_notexit_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb2_notexitcond_notexit_0_NO_SHIFT_REG;
 logic rnode_2to3_bb2_notexitcond_notexit_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb2_notexitcond_notexit_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_notexitcond_notexit_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_notexitcond_notexit_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_notexitcond_notexit_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb2_notexitcond_notexit_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb2_notexitcond_notexit_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb2_notexitcond_notexit_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb2_notexitcond_notexit_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb2_notexitcond_notexit_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb2_notexitcond_notexit_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb2_notexitcond_notexit_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb2_notexitcond_notexit_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb2_notexitcond_notexit_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb2_notexitcond_notexit_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb2_notexitcond_notexit_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb2_notexitcond_notexit_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2_notexitcond_notexit_stall_in_3 = 1'b0;
assign rnode_2to3_bb2_notexitcond_notexit_0_NO_SHIFT_REG = rnode_2to3_bb2_notexitcond_notexit_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb2_notexitcond_notexit_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb2_notexitcond_notexit_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_NO_SHIFT_REG;
 logic rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb2_indvars_iv_push33_indvars_iv_next_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_reg_3_fifo.DATA_WIDTH = 64;
defparam rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2_indvars_iv_push33_indvars_iv_next_stall_in = 1'b0;
assign rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_NO_SHIFT_REG = rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb2_keep_going_acl_pipeline_1_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb2_keep_going_acl_pipeline_1_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to4_bb2_keep_going_acl_pipeline_1_0_NO_SHIFT_REG;
 logic rnode_3to4_bb2_keep_going_acl_pipeline_1_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to4_bb2_keep_going_acl_pipeline_1_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_keep_going_acl_pipeline_1_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_keep_going_acl_pipeline_1_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_keep_going_acl_pipeline_1_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb2_keep_going_acl_pipeline_1_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb2_keep_going_acl_pipeline_1_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb2_keep_going_acl_pipeline_1_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb2_keep_going_acl_pipeline_1_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb2_keep_going_acl_pipeline_1_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb2_keep_going_acl_pipeline_1_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb2_keep_going_acl_pipeline_1_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb2_keep_going_acl_pipeline_1_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb2_keep_going_acl_pipeline_1_0_reg_4_fifo.DATA_WIDTH = 1;
defparam rnode_3to4_bb2_keep_going_acl_pipeline_1_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb2_keep_going_acl_pipeline_1_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb2_keep_going_acl_pipeline_1_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb2_keep_going_acl_pipeline_1_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2_keep_going_acl_pipeline_1_0_NO_SHIFT_REG = rnode_3to4_bb2_keep_going_acl_pipeline_1_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb2_keep_going_acl_pipeline_1_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2_keep_going_acl_pipeline_1_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb2__push34__pop34_inputs_ready;
 reg local_bb2__push34__pop34_valid_out_NO_SHIFT_REG;
wire local_bb2__push34__pop34_stall_in;
wire local_bb2__push34__pop34_output_regs_ready;
wire [31:0] local_bb2__push34__pop34_result;
wire local_bb2__push34__pop34_fu_valid_out;
wire local_bb2__push34__pop34_fu_stall_out;
 reg [31:0] local_bb2__push34__pop34_NO_SHIFT_REG;
wire local_bb2__push34__pop34_causedstall;

acl_push local_bb2__push34__pop34_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb2_notexitcond_notexit_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb2__pop34_c0_ene2),
	.stall_out(local_bb2__push34__pop34_fu_stall_out),
	.valid_in(local_bb2_c0_exit_c0_exi6_valid_bits[1]),
	.valid_out(local_bb2__push34__pop34_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb2__push34__pop34_result),
	.feedback_out(feedback_data_out_34),
	.feedback_valid_out(feedback_valid_out_34),
	.feedback_stall_in(feedback_stall_in_34)
);

defparam local_bb2__push34__pop34_feedback.STALLFREE = 1;
defparam local_bb2__push34__pop34_feedback.DATA_WIDTH = 32;
defparam local_bb2__push34__pop34_feedback.FIFO_DEPTH = 1;
defparam local_bb2__push34__pop34_feedback.MIN_FIFO_LATENCY = 1;
defparam local_bb2__push34__pop34_feedback.STYLE = "REGULAR";

assign local_bb2__push34__pop34_inputs_ready = 1'b1;
assign local_bb2__push34__pop34_output_regs_ready = 1'b1;
assign local_bb2__pop34_c0_ene2_stall_in_0 = 1'b0;
assign local_bb2_notexitcond_notexit_stall_in_0 = 1'b0;
assign local_bb2__push34__pop34_causedstall = (local_bb2_c0_exit_c0_exi6_valid_bits[1] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2__push34__pop34_NO_SHIFT_REG <= 'x;
		local_bb2__push34__pop34_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2__push34__pop34_output_regs_ready)
		begin
			local_bb2__push34__pop34_NO_SHIFT_REG <= local_bb2__push34__pop34_result;
			local_bb2__push34__pop34_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb2__push34__pop34_stall_in))
			begin
				local_bb2__push34__pop34_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb2__pop34_c0_ene2_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb2__pop34_c0_ene2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb2__pop34_c0_ene2_0_NO_SHIFT_REG;
 logic rnode_2to3_bb2__pop34_c0_ene2_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb2__pop34_c0_ene2_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2__pop34_c0_ene2_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2__pop34_c0_ene2_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2__pop34_c0_ene2_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb2__pop34_c0_ene2_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb2__pop34_c0_ene2_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb2__pop34_c0_ene2_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb2__pop34_c0_ene2_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb2__pop34_c0_ene2_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb2__pop34_c0_ene2),
	.data_out(rnode_2to3_bb2__pop34_c0_ene2_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb2__pop34_c0_ene2_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb2__pop34_c0_ene2_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb2__pop34_c0_ene2_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb2__pop34_c0_ene2_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb2__pop34_c0_ene2_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2__pop34_c0_ene2_stall_in_1 = 1'b0;
assign rnode_2to3_bb2__pop34_c0_ene2_0_NO_SHIFT_REG = rnode_2to3_bb2__pop34_c0_ene2_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb2__pop34_c0_ene2_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb2__pop34_c0_ene2_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb2__push35__pop35_inputs_ready;
 reg local_bb2__push35__pop35_valid_out_NO_SHIFT_REG;
wire local_bb2__push35__pop35_stall_in;
wire local_bb2__push35__pop35_output_regs_ready;
wire [31:0] local_bb2__push35__pop35_result;
wire local_bb2__push35__pop35_fu_valid_out;
wire local_bb2__push35__pop35_fu_stall_out;
 reg [31:0] local_bb2__push35__pop35_NO_SHIFT_REG;
wire local_bb2__push35__pop35_causedstall;

acl_push local_bb2__push35__pop35_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb2_notexitcond_notexit_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb2__pop35_c0_ene3),
	.stall_out(local_bb2__push35__pop35_fu_stall_out),
	.valid_in(local_bb2_c0_exit_c0_exi6_valid_bits[1]),
	.valid_out(local_bb2__push35__pop35_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb2__push35__pop35_result),
	.feedback_out(feedback_data_out_35),
	.feedback_valid_out(feedback_valid_out_35),
	.feedback_stall_in(feedback_stall_in_35)
);

defparam local_bb2__push35__pop35_feedback.STALLFREE = 1;
defparam local_bb2__push35__pop35_feedback.DATA_WIDTH = 32;
defparam local_bb2__push35__pop35_feedback.FIFO_DEPTH = 1;
defparam local_bb2__push35__pop35_feedback.MIN_FIFO_LATENCY = 1;
defparam local_bb2__push35__pop35_feedback.STYLE = "REGULAR";

assign local_bb2__push35__pop35_inputs_ready = 1'b1;
assign local_bb2__push35__pop35_output_regs_ready = 1'b1;
assign local_bb2__pop35_c0_ene3_stall_in_0 = 1'b0;
assign local_bb2_notexitcond_notexit_stall_in_1 = 1'b0;
assign local_bb2__push35__pop35_causedstall = (local_bb2_c0_exit_c0_exi6_valid_bits[1] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2__push35__pop35_NO_SHIFT_REG <= 'x;
		local_bb2__push35__pop35_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2__push35__pop35_output_regs_ready)
		begin
			local_bb2__push35__pop35_NO_SHIFT_REG <= local_bb2__push35__pop35_result;
			local_bb2__push35__pop35_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb2__push35__pop35_stall_in))
			begin
				local_bb2__push35__pop35_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb2__pop35_c0_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb2__pop35_c0_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb2__pop35_c0_ene3_0_NO_SHIFT_REG;
 logic rnode_2to3_bb2__pop35_c0_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb2__pop35_c0_ene3_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2__pop35_c0_ene3_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2__pop35_c0_ene3_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2__pop35_c0_ene3_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb2__pop35_c0_ene3_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb2__pop35_c0_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb2__pop35_c0_ene3_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb2__pop35_c0_ene3_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb2__pop35_c0_ene3_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb2__pop35_c0_ene3),
	.data_out(rnode_2to3_bb2__pop35_c0_ene3_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb2__pop35_c0_ene3_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb2__pop35_c0_ene3_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb2__pop35_c0_ene3_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb2__pop35_c0_ene3_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb2__pop35_c0_ene3_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2__pop35_c0_ene3_stall_in_1 = 1'b0;
assign rnode_2to3_bb2__pop35_c0_ene3_0_NO_SHIFT_REG = rnode_2to3_bb2__pop35_c0_ene3_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb2__pop35_c0_ene3_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb2__pop35_c0_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb2_i9_05227_push36_i9_05227_pop36_inputs_ready;
 reg local_bb2_i9_05227_push36_i9_05227_pop36_valid_out_NO_SHIFT_REG;
wire local_bb2_i9_05227_push36_i9_05227_pop36_stall_in;
wire local_bb2_i9_05227_push36_i9_05227_pop36_output_regs_ready;
wire [31:0] local_bb2_i9_05227_push36_i9_05227_pop36_result;
wire local_bb2_i9_05227_push36_i9_05227_pop36_fu_valid_out;
wire local_bb2_i9_05227_push36_i9_05227_pop36_fu_stall_out;
 reg [31:0] local_bb2_i9_05227_push36_i9_05227_pop36_NO_SHIFT_REG;
wire local_bb2_i9_05227_push36_i9_05227_pop36_causedstall;

acl_push local_bb2_i9_05227_push36_i9_05227_pop36_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb2_notexitcond_notexit_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb2_i9_05227_pop36_c0_ene4),
	.stall_out(local_bb2_i9_05227_push36_i9_05227_pop36_fu_stall_out),
	.valid_in(local_bb2_c0_exit_c0_exi6_valid_bits[1]),
	.valid_out(local_bb2_i9_05227_push36_i9_05227_pop36_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb2_i9_05227_push36_i9_05227_pop36_result),
	.feedback_out(feedback_data_out_36),
	.feedback_valid_out(feedback_valid_out_36),
	.feedback_stall_in(feedback_stall_in_36)
);

defparam local_bb2_i9_05227_push36_i9_05227_pop36_feedback.STALLFREE = 1;
defparam local_bb2_i9_05227_push36_i9_05227_pop36_feedback.DATA_WIDTH = 32;
defparam local_bb2_i9_05227_push36_i9_05227_pop36_feedback.FIFO_DEPTH = 1;
defparam local_bb2_i9_05227_push36_i9_05227_pop36_feedback.MIN_FIFO_LATENCY = 1;
defparam local_bb2_i9_05227_push36_i9_05227_pop36_feedback.STYLE = "REGULAR";

assign local_bb2_i9_05227_push36_i9_05227_pop36_inputs_ready = 1'b1;
assign local_bb2_i9_05227_push36_i9_05227_pop36_output_regs_ready = 1'b1;
assign local_bb2_i9_05227_pop36_c0_ene4_stall_in_0 = 1'b0;
assign local_bb2_notexitcond_notexit_stall_in_2 = 1'b0;
assign local_bb2_i9_05227_push36_i9_05227_pop36_causedstall = (local_bb2_c0_exit_c0_exi6_valid_bits[1] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_i9_05227_push36_i9_05227_pop36_NO_SHIFT_REG <= 'x;
		local_bb2_i9_05227_push36_i9_05227_pop36_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_i9_05227_push36_i9_05227_pop36_output_regs_ready)
		begin
			local_bb2_i9_05227_push36_i9_05227_pop36_NO_SHIFT_REG <= local_bb2_i9_05227_push36_i9_05227_pop36_result;
			local_bb2_i9_05227_push36_i9_05227_pop36_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb2_i9_05227_push36_i9_05227_pop36_stall_in))
			begin
				local_bb2_i9_05227_push36_i9_05227_pop36_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_NO_SHIFT_REG;
 logic rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb2_i9_05227_pop36_c0_ene4),
	.data_out(rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2_i9_05227_pop36_c0_ene4_stall_in_1 = 1'b0;
assign rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_NO_SHIFT_REG = rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb2_arrayidx22_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb2_arrayidx22_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb2_arrayidx22_0_NO_SHIFT_REG;
 logic rnode_3to4_bb2_arrayidx22_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb2_arrayidx22_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_arrayidx22_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_arrayidx22_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_arrayidx22_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb2_arrayidx22_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb2_arrayidx22_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb2_arrayidx22_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb2_arrayidx22_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb2_arrayidx22_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb2_arrayidx22_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb2_arrayidx22_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb2_arrayidx22_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb2_arrayidx22_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb2_arrayidx22_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb2_arrayidx22_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb2_arrayidx22_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb2_arrayidx22_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2_arrayidx22_0_NO_SHIFT_REG = rnode_3to4_bb2_arrayidx22_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb2_arrayidx22_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2_arrayidx22_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb2_exitcond_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb2_exitcond_0_stall_in_NO_SHIFT_REG;
 logic rnode_4to5_bb2_exitcond_0_NO_SHIFT_REG;
 logic rnode_4to5_bb2_exitcond_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_4to5_bb2_exitcond_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_exitcond_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_exitcond_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_exitcond_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb2_exitcond_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb2_exitcond_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb2_exitcond_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb2_exitcond_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb2_exitcond_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_2to4_bb2_exitcond_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb2_exitcond_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb2_exitcond_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb2_exitcond_0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_4to5_bb2_exitcond_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb2_exitcond_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb2_exitcond_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to4_bb2_exitcond_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_exitcond_0_NO_SHIFT_REG = rnode_4to5_bb2_exitcond_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb2_exitcond_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_exitcond_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb2_notexitcond_notexit_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb2_notexitcond_notexit_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to4_bb2_notexitcond_notexit_0_NO_SHIFT_REG;
 logic rnode_3to4_bb2_notexitcond_notexit_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to4_bb2_notexitcond_notexit_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_notexitcond_notexit_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_notexitcond_notexit_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_notexitcond_notexit_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb2_notexitcond_notexit_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb2_notexitcond_notexit_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb2_notexitcond_notexit_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb2_notexitcond_notexit_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb2_notexitcond_notexit_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb2_notexitcond_notexit_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb2_notexitcond_notexit_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb2_notexitcond_notexit_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb2_notexitcond_notexit_0_reg_4_fifo.DATA_WIDTH = 1;
defparam rnode_3to4_bb2_notexitcond_notexit_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb2_notexitcond_notexit_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb2_notexitcond_notexit_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb2_notexitcond_notexit_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2_notexitcond_notexit_0_NO_SHIFT_REG = rnode_3to4_bb2_notexitcond_notexit_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb2_notexitcond_notexit_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2_notexitcond_notexit_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_NO_SHIFT_REG;
 logic rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_NO_SHIFT_REG = rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb2_keep_going_acl_pipeline_1_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb2_keep_going_acl_pipeline_1_0_stall_in_NO_SHIFT_REG;
 logic rnode_4to5_bb2_keep_going_acl_pipeline_1_0_NO_SHIFT_REG;
 logic rnode_4to5_bb2_keep_going_acl_pipeline_1_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_4to5_bb2_keep_going_acl_pipeline_1_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_keep_going_acl_pipeline_1_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_keep_going_acl_pipeline_1_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_keep_going_acl_pipeline_1_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb2_keep_going_acl_pipeline_1_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb2_keep_going_acl_pipeline_1_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb2_keep_going_acl_pipeline_1_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb2_keep_going_acl_pipeline_1_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb2_keep_going_acl_pipeline_1_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb2_keep_going_acl_pipeline_1_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb2_keep_going_acl_pipeline_1_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb2_keep_going_acl_pipeline_1_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb2_keep_going_acl_pipeline_1_0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_4to5_bb2_keep_going_acl_pipeline_1_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb2_keep_going_acl_pipeline_1_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb2_keep_going_acl_pipeline_1_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb2_keep_going_acl_pipeline_1_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_keep_going_acl_pipeline_1_0_NO_SHIFT_REG = rnode_4to5_bb2_keep_going_acl_pipeline_1_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb2_keep_going_acl_pipeline_1_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_keep_going_acl_pipeline_1_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_3to5_bb2__push34__pop34_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to5_bb2__push34__pop34_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb2__push34__pop34_0_NO_SHIFT_REG;
 logic rnode_3to5_bb2__push34__pop34_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb2__push34__pop34_0_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb2__push34__pop34_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb2__push34__pop34_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb2__push34__pop34_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_3to5_bb2__push34__pop34_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to5_bb2__push34__pop34_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to5_bb2__push34__pop34_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_3to5_bb2__push34__pop34_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_3to5_bb2__push34__pop34_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb2__push34__pop34_NO_SHIFT_REG),
	.data_out(rnode_3to5_bb2__push34__pop34_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_3to5_bb2__push34__pop34_0_reg_5_fifo.DEPTH = 2;
defparam rnode_3to5_bb2__push34__pop34_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_3to5_bb2__push34__pop34_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to5_bb2__push34__pop34_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_3to5_bb2__push34__pop34_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2__push34__pop34_stall_in = 1'b0;
assign rnode_3to5_bb2__push34__pop34_0_NO_SHIFT_REG = rnode_3to5_bb2__push34__pop34_0_reg_5_NO_SHIFT_REG;
assign rnode_3to5_bb2__push34__pop34_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb2__push34__pop34_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb2__pop34_c0_ene2_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb2__pop34_c0_ene2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb2__pop34_c0_ene2_0_NO_SHIFT_REG;
 logic rnode_3to4_bb2__pop34_c0_ene2_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb2__pop34_c0_ene2_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2__pop34_c0_ene2_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2__pop34_c0_ene2_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2__pop34_c0_ene2_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb2__pop34_c0_ene2_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb2__pop34_c0_ene2_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb2__pop34_c0_ene2_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb2__pop34_c0_ene2_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb2__pop34_c0_ene2_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb2__pop34_c0_ene2_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb2__pop34_c0_ene2_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb2__pop34_c0_ene2_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb2__pop34_c0_ene2_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb2__pop34_c0_ene2_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb2__pop34_c0_ene2_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb2__pop34_c0_ene2_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb2__pop34_c0_ene2_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2__pop34_c0_ene2_0_NO_SHIFT_REG = rnode_3to4_bb2__pop34_c0_ene2_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb2__pop34_c0_ene2_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2__pop34_c0_ene2_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_3to5_bb2__push35__pop35_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to5_bb2__push35__pop35_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb2__push35__pop35_0_NO_SHIFT_REG;
 logic rnode_3to5_bb2__push35__pop35_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb2__push35__pop35_0_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb2__push35__pop35_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb2__push35__pop35_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb2__push35__pop35_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_3to5_bb2__push35__pop35_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to5_bb2__push35__pop35_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to5_bb2__push35__pop35_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_3to5_bb2__push35__pop35_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_3to5_bb2__push35__pop35_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb2__push35__pop35_NO_SHIFT_REG),
	.data_out(rnode_3to5_bb2__push35__pop35_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_3to5_bb2__push35__pop35_0_reg_5_fifo.DEPTH = 2;
defparam rnode_3to5_bb2__push35__pop35_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_3to5_bb2__push35__pop35_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to5_bb2__push35__pop35_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_3to5_bb2__push35__pop35_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2__push35__pop35_stall_in = 1'b0;
assign rnode_3to5_bb2__push35__pop35_0_NO_SHIFT_REG = rnode_3to5_bb2__push35__pop35_0_reg_5_NO_SHIFT_REG;
assign rnode_3to5_bb2__push35__pop35_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb2__push35__pop35_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb2__pop35_c0_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb2__pop35_c0_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb2__pop35_c0_ene3_0_NO_SHIFT_REG;
 logic rnode_3to4_bb2__pop35_c0_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb2__pop35_c0_ene3_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2__pop35_c0_ene3_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2__pop35_c0_ene3_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2__pop35_c0_ene3_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb2__pop35_c0_ene3_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb2__pop35_c0_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb2__pop35_c0_ene3_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb2__pop35_c0_ene3_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb2__pop35_c0_ene3_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb2__pop35_c0_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb2__pop35_c0_ene3_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb2__pop35_c0_ene3_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb2__pop35_c0_ene3_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb2__pop35_c0_ene3_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb2__pop35_c0_ene3_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb2__pop35_c0_ene3_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb2__pop35_c0_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2__pop35_c0_ene3_0_NO_SHIFT_REG = rnode_3to4_bb2__pop35_c0_ene3_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb2__pop35_c0_ene3_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2__pop35_c0_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_NO_SHIFT_REG;
 logic rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb2_i9_05227_push36_i9_05227_pop36_NO_SHIFT_REG),
	.data_out(rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_reg_5_fifo.DEPTH = 2;
defparam rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb2_i9_05227_push36_i9_05227_pop36_stall_in = 1'b0;
assign rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_NO_SHIFT_REG = rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_reg_5_NO_SHIFT_REG;
assign rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_NO_SHIFT_REG;
 logic rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb2_i9_05227_pop36_c0_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_NO_SHIFT_REG = rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb2_arrayidx22_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb2_arrayidx22_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb2_arrayidx22_0_NO_SHIFT_REG;
 logic rnode_4to5_bb2_arrayidx22_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb2_arrayidx22_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_arrayidx22_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_arrayidx22_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_arrayidx22_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb2_arrayidx22_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb2_arrayidx22_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb2_arrayidx22_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb2_arrayidx22_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb2_arrayidx22_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb2_arrayidx22_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb2_arrayidx22_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb2_arrayidx22_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb2_arrayidx22_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb2_arrayidx22_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb2_arrayidx22_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb2_arrayidx22_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb2_arrayidx22_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_arrayidx22_0_NO_SHIFT_REG = rnode_4to5_bb2_arrayidx22_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb2_arrayidx22_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_arrayidx22_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb2_c0_exi1_stall_local;
wire [255:0] local_bb2_c0_exi1;

assign local_bb2_c0_exi1[7:0] = 8'bxxxxxxxx;
assign local_bb2_c0_exi1[8] = rnode_4to5_bb2_exitcond_0_NO_SHIFT_REG;
assign local_bb2_c0_exi1[255:9] = 247'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb2_notexitcond_notexit_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb2_notexitcond_notexit_0_stall_in_NO_SHIFT_REG;
 logic rnode_4to5_bb2_notexitcond_notexit_0_NO_SHIFT_REG;
 logic rnode_4to5_bb2_notexitcond_notexit_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_4to5_bb2_notexitcond_notexit_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_notexitcond_notexit_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_notexitcond_notexit_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_notexitcond_notexit_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb2_notexitcond_notexit_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb2_notexitcond_notexit_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb2_notexitcond_notexit_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb2_notexitcond_notexit_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb2_notexitcond_notexit_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb2_notexitcond_notexit_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb2_notexitcond_notexit_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb2_notexitcond_notexit_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb2_notexitcond_notexit_0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_4to5_bb2_notexitcond_notexit_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb2_notexitcond_notexit_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb2_notexitcond_notexit_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb2_notexitcond_notexit_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_notexitcond_notexit_0_NO_SHIFT_REG = rnode_4to5_bb2_notexitcond_notexit_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb2_notexitcond_notexit_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_notexitcond_notexit_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_NO_SHIFT_REG;
 logic rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_reg_5_fifo.DATA_WIDTH = 64;
defparam rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_NO_SHIFT_REG = rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb2__pop34_c0_ene2_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb2__pop34_c0_ene2_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb2__pop34_c0_ene2_0_NO_SHIFT_REG;
 logic rnode_4to5_bb2__pop34_c0_ene2_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb2__pop34_c0_ene2_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2__pop34_c0_ene2_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2__pop34_c0_ene2_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2__pop34_c0_ene2_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb2__pop34_c0_ene2_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb2__pop34_c0_ene2_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb2__pop34_c0_ene2_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb2__pop34_c0_ene2_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb2__pop34_c0_ene2_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb2__pop34_c0_ene2_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb2__pop34_c0_ene2_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb2__pop34_c0_ene2_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb2__pop34_c0_ene2_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb2__pop34_c0_ene2_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb2__pop34_c0_ene2_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb2__pop34_c0_ene2_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb2__pop34_c0_ene2_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2__pop34_c0_ene2_0_NO_SHIFT_REG = rnode_4to5_bb2__pop34_c0_ene2_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb2__pop34_c0_ene2_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2__pop34_c0_ene2_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb2__pop35_c0_ene3_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb2__pop35_c0_ene3_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb2__pop35_c0_ene3_0_NO_SHIFT_REG;
 logic rnode_4to5_bb2__pop35_c0_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb2__pop35_c0_ene3_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2__pop35_c0_ene3_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2__pop35_c0_ene3_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2__pop35_c0_ene3_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb2__pop35_c0_ene3_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb2__pop35_c0_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb2__pop35_c0_ene3_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb2__pop35_c0_ene3_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb2__pop35_c0_ene3_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb2__pop35_c0_ene3_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb2__pop35_c0_ene3_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb2__pop35_c0_ene3_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb2__pop35_c0_ene3_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb2__pop35_c0_ene3_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb2__pop35_c0_ene3_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb2__pop35_c0_ene3_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb2__pop35_c0_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2__pop35_c0_ene3_0_NO_SHIFT_REG = rnode_4to5_bb2__pop35_c0_ene3_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb2__pop35_c0_ene3_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2__pop35_c0_ene3_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_NO_SHIFT_REG;
 logic rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb2_i9_05227_pop36_c0_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_NO_SHIFT_REG = rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb2_c0_exi2_stall_local;
wire [255:0] local_bb2_c0_exi2;

assign local_bb2_c0_exi2[15:0] = local_bb2_c0_exi1[15:0];
assign local_bb2_c0_exi2[16] = rnode_4to5_bb2_notexitcond_notexit_0_NO_SHIFT_REG;
assign local_bb2_c0_exi2[255:17] = local_bb2_c0_exi1[255:17];

// This section implements an unregistered operation.
// 
wire local_bb2_c0_exi3_stall_local;
wire [255:0] local_bb2_c0_exi3;

assign local_bb2_c0_exi3[63:0] = local_bb2_c0_exi2[63:0];
assign local_bb2_c0_exi3[95:64] = rnode_4to5_bb2_arrayidx22_0_NO_SHIFT_REG;
assign local_bb2_c0_exi3[255:96] = local_bb2_c0_exi2[255:96];

// This section implements an unregistered operation.
// 
wire local_bb2_c0_exi4_stall_local;
wire [255:0] local_bb2_c0_exi4;

assign local_bb2_c0_exi4[127:0] = local_bb2_c0_exi3[127:0];
assign local_bb2_c0_exi4[159:128] = rnode_4to5_bb2__pop34_c0_ene2_0_NO_SHIFT_REG;
assign local_bb2_c0_exi4[255:160] = local_bb2_c0_exi3[255:160];

// This section implements an unregistered operation.
// 
wire local_bb2_c0_exi5_stall_local;
wire [255:0] local_bb2_c0_exi5;

assign local_bb2_c0_exi5[159:0] = local_bb2_c0_exi4[159:0];
assign local_bb2_c0_exi5[191:160] = rnode_4to5_bb2__pop35_c0_ene3_0_NO_SHIFT_REG;
assign local_bb2_c0_exi5[255:192] = local_bb2_c0_exi4[255:192];

// This section implements an unregistered operation.
// 
wire local_bb2_c0_exi6_valid_out;
wire local_bb2_c0_exi6_stall_in;
wire local_bb2_c0_exi6_inputs_ready;
wire local_bb2_c0_exi6_stall_local;
wire [255:0] local_bb2_c0_exi6;

assign local_bb2_c0_exi6_inputs_ready = (rnode_4to5_bb2_arrayidx22_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb2__pop34_c0_ene2_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb2__pop35_c0_ene3_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb2_exitcond_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb2_notexitcond_notexit_0_valid_out_NO_SHIFT_REG);
assign local_bb2_c0_exi6[191:0] = local_bb2_c0_exi5[191:0];
assign local_bb2_c0_exi6[223:192] = rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_NO_SHIFT_REG;
assign local_bb2_c0_exi6[255:224] = local_bb2_c0_exi5[255:224];
assign local_bb2_c0_exi6_valid_out = 1'b1;
assign rnode_4to5_bb2_arrayidx22_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2__pop34_c0_ene2_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2__pop35_c0_ene3_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_i9_05227_pop36_c0_ene4_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_exitcond_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_notexitcond_notexit_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements a registered operation.
// 
wire local_bb2_c0_exit_c0_exi6_inputs_ready;
 reg local_bb2_c0_exit_c0_exi6_valid_out_0_NO_SHIFT_REG;
wire local_bb2_c0_exit_c0_exi6_stall_in_0;
 reg local_bb2_c0_exit_c0_exi6_valid_out_1_NO_SHIFT_REG;
wire local_bb2_c0_exit_c0_exi6_stall_in_1;
 reg [255:0] local_bb2_c0_exit_c0_exi6_NO_SHIFT_REG;
wire [255:0] local_bb2_c0_exit_c0_exi6_in;
wire local_bb2_c0_exit_c0_exi6_valid;
wire local_bb2_c0_exit_c0_exi6_causedstall;

acl_stall_free_sink local_bb2_c0_exit_c0_exi6_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb2_c0_exi6),
	.data_out(local_bb2_c0_exit_c0_exi6_in),
	.input_accepted(local_bb2_c0_enter_c0_eni4_input_accepted),
	.valid_out(local_bb2_c0_exit_c0_exi6_valid),
	.stall_in(~(local_bb2_c0_exit_c0_exi6_output_regs_ready)),
	.stall_entry(local_bb2_c0_exit_c0_exi6_entry_stall),
	.valids(local_bb2_c0_exit_c0_exi6_valid_bits),
	.IIphases(local_bb2_c0_exit_c0_exi6_phases),
	.inc_pipelined_thread(local_bb2_c0_enter_c0_eni4_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb2_c0_enter_c0_eni4_dec_pipelined_thread)
);

defparam local_bb2_c0_exit_c0_exi6_instance.DATA_WIDTH = 256;
defparam local_bb2_c0_exit_c0_exi6_instance.PIPELINE_DEPTH = 9;
defparam local_bb2_c0_exit_c0_exi6_instance.SHARINGII = 1;
defparam local_bb2_c0_exit_c0_exi6_instance.SCHEDULEII = 1;

assign local_bb2_c0_exit_c0_exi6_inputs_ready = 1'b1;
assign local_bb2_c0_exit_c0_exi6_output_regs_ready = ((~(local_bb2_c0_exit_c0_exi6_valid_out_0_NO_SHIFT_REG) | ~(local_bb2_c0_exit_c0_exi6_stall_in_0)) & (~(local_bb2_c0_exit_c0_exi6_valid_out_1_NO_SHIFT_REG) | ~(local_bb2_c0_exit_c0_exi6_stall_in_1)));
assign local_bb2_c0_exi6_stall_in = 1'b0;
assign rnode_3to5_bb2__push34__pop34_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb2__push35__pop35_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb2_i9_05227_push36_i9_05227_pop36_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_keep_going_acl_pipeline_1_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb2_indvars_iv_push33_indvars_iv_next_0_stall_in_NO_SHIFT_REG = 1'b0;
assign local_bb2_c0_exit_c0_exi6_causedstall = (1'b1 && (1'b0 && !(~(local_bb2_c0_exit_c0_exi6_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_c0_exit_c0_exi6_NO_SHIFT_REG <= 'x;
		local_bb2_c0_exit_c0_exi6_valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_c0_exit_c0_exi6_valid_out_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_c0_exit_c0_exi6_output_regs_ready)
		begin
			local_bb2_c0_exit_c0_exi6_NO_SHIFT_REG <= local_bb2_c0_exit_c0_exi6_in;
			local_bb2_c0_exit_c0_exi6_valid_out_0_NO_SHIFT_REG <= local_bb2_c0_exit_c0_exi6_valid;
			local_bb2_c0_exit_c0_exi6_valid_out_1_NO_SHIFT_REG <= local_bb2_c0_exit_c0_exi6_valid;
		end
		else
		begin
			if (~(local_bb2_c0_exit_c0_exi6_stall_in_0))
			begin
				local_bb2_c0_exit_c0_exi6_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb2_c0_exit_c0_exi6_stall_in_1))
			begin
				local_bb2_c0_exit_c0_exi6_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_c0_exe3_valid_out;
wire local_bb2_c0_exe3_stall_in;
wire local_bb2_c0_exe3_inputs_ready;
wire local_bb2_c0_exe3_stall_local;
wire [31:0] local_bb2_c0_exe3;

assign local_bb2_c0_exe3_inputs_ready = local_bb2_c0_exit_c0_exi6_valid_out_0_NO_SHIFT_REG;
assign local_bb2_c0_exe3 = local_bb2_c0_exit_c0_exi6_NO_SHIFT_REG[95:64];
assign local_bb2_c0_exe3_valid_out = local_bb2_c0_exe3_inputs_ready;
assign local_bb2_c0_exe3_stall_local = local_bb2_c0_exe3_stall_in;
assign local_bb2_c0_exit_c0_exi6_stall_in_0 = (|local_bb2_c0_exe3_stall_local);

// Register node:
//  * latency = 30
//  * capacity = 30
 logic rnode_10to40_bb2_c0_exit_c0_exi6_0_valid_out_NO_SHIFT_REG;
 logic rnode_10to40_bb2_c0_exit_c0_exi6_0_stall_in_NO_SHIFT_REG;
 logic [255:0] rnode_10to40_bb2_c0_exit_c0_exi6_0_NO_SHIFT_REG;
 logic rnode_10to40_bb2_c0_exit_c0_exi6_0_reg_40_inputs_ready_NO_SHIFT_REG;
 logic [255:0] rnode_10to40_bb2_c0_exit_c0_exi6_0_reg_40_NO_SHIFT_REG;
 logic rnode_10to40_bb2_c0_exit_c0_exi6_0_valid_out_reg_40_NO_SHIFT_REG;
 logic rnode_10to40_bb2_c0_exit_c0_exi6_0_stall_in_reg_40_NO_SHIFT_REG;
 logic rnode_10to40_bb2_c0_exit_c0_exi6_0_stall_out_reg_40_NO_SHIFT_REG;

acl_data_fifo rnode_10to40_bb2_c0_exit_c0_exi6_0_reg_40_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_10to40_bb2_c0_exit_c0_exi6_0_reg_40_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_10to40_bb2_c0_exit_c0_exi6_0_stall_in_reg_40_NO_SHIFT_REG),
	.valid_out(rnode_10to40_bb2_c0_exit_c0_exi6_0_valid_out_reg_40_NO_SHIFT_REG),
	.stall_out(rnode_10to40_bb2_c0_exit_c0_exi6_0_stall_out_reg_40_NO_SHIFT_REG),
	.data_in(local_bb2_c0_exit_c0_exi6_NO_SHIFT_REG),
	.data_out(rnode_10to40_bb2_c0_exit_c0_exi6_0_reg_40_NO_SHIFT_REG)
);

defparam rnode_10to40_bb2_c0_exit_c0_exi6_0_reg_40_fifo.DEPTH = 31;
defparam rnode_10to40_bb2_c0_exit_c0_exi6_0_reg_40_fifo.DATA_WIDTH = 256;
defparam rnode_10to40_bb2_c0_exit_c0_exi6_0_reg_40_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_10to40_bb2_c0_exit_c0_exi6_0_reg_40_fifo.IMPL = "ram";

assign rnode_10to40_bb2_c0_exit_c0_exi6_0_reg_40_inputs_ready_NO_SHIFT_REG = local_bb2_c0_exit_c0_exi6_valid_out_1_NO_SHIFT_REG;
assign local_bb2_c0_exit_c0_exi6_stall_in_1 = rnode_10to40_bb2_c0_exit_c0_exi6_0_stall_out_reg_40_NO_SHIFT_REG;
assign rnode_10to40_bb2_c0_exit_c0_exi6_0_NO_SHIFT_REG = rnode_10to40_bb2_c0_exit_c0_exi6_0_reg_40_NO_SHIFT_REG;
assign rnode_10to40_bb2_c0_exit_c0_exi6_0_stall_in_reg_40_NO_SHIFT_REG = rnode_10to40_bb2_c0_exit_c0_exi6_0_stall_in_NO_SHIFT_REG;
assign rnode_10to40_bb2_c0_exit_c0_exi6_0_valid_out_NO_SHIFT_REG = rnode_10to40_bb2_c0_exit_c0_exi6_0_valid_out_reg_40_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb2_st__inputs_ready;
 reg local_bb2_st__valid_out_NO_SHIFT_REG;
wire local_bb2_st__stall_in;
wire local_bb2_st__output_regs_ready;
wire local_bb2_st__fu_stall_out;
wire local_bb2_st__fu_valid_out;
wire [31:0] local_bb2_st__lsu_wackout;
 reg local_bb2_st__NO_SHIFT_REG;
wire local_bb2_st__causedstall;

lsu_top lsu_local_bb2_st_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb2_st__fu_stall_out),
	.i_valid(local_bb2_st__inputs_ready),
	.i_address(local_bb2_c0_exe3),
	.i_writedata(32'h0),
	.i_cmpdata(),
	.i_predicate(1'b0),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb2_st__output_regs_ready)),
	.o_valid(local_bb2_st__fu_valid_out),
	.o_readdata(),
	.o_input_fifo_depth(local_bb2_st__input_fifo_depth),
	.o_writeack(local_bb2_st__lsu_wackout),
	.i_atomic_op(3'h0),
	.o_active(local_bb2_st__active),
	.avm_address(avm_local_bb2_st__address),
	.avm_read(avm_local_bb2_st__read),
	.avm_readdata(avm_local_bb2_st__readdata),
	.avm_write(avm_local_bb2_st__write),
	.avm_writeack(avm_local_bb2_st__writeack),
	.avm_burstcount(avm_local_bb2_st__burstcount),
	.avm_writedata(avm_local_bb2_st__writedata),
	.avm_byteenable(avm_local_bb2_st__byteenable),
	.avm_waitrequest(avm_local_bb2_st__waitrequest),
	.avm_readdatavalid(avm_local_bb2_st__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb2_st_.AWIDTH = 32;
defparam lsu_local_bb2_st_.WIDTH_BYTES = 4;
defparam lsu_local_bb2_st_.MWIDTH_BYTES = 64;
defparam lsu_local_bb2_st_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb2_st_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb2_st_.READ = 0;
defparam lsu_local_bb2_st_.ATOMIC = 0;
defparam lsu_local_bb2_st_.WIDTH = 32;
defparam lsu_local_bb2_st_.MWIDTH = 512;
defparam lsu_local_bb2_st_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb2_st_.BURSTCOUNT_WIDTH = 1;
defparam lsu_local_bb2_st_.KERNEL_SIDE_MEM_LATENCY = 31;
defparam lsu_local_bb2_st_.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb2_st_.USE_WRITE_ACK = 0;
defparam lsu_local_bb2_st_.ENABLE_BANKED_MEMORY = 1;
defparam lsu_local_bb2_st_.ABITS_PER_LMEM_BANK = 7;
defparam lsu_local_bb2_st_.NUMBER_BANKS = 4;
defparam lsu_local_bb2_st_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb2_st_.USEINPUTFIFO = 1;
defparam lsu_local_bb2_st_.USECACHING = 0;
defparam lsu_local_bb2_st_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb2_st_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb2_st_.HIGH_FMAX = 1;
defparam lsu_local_bb2_st_.ADDRSPACE = 5;
defparam lsu_local_bb2_st_.STYLE = "PIPELINED";
defparam lsu_local_bb2_st_.USE_BYTE_EN = 0;

assign local_bb2_st__inputs_ready = local_bb2_c0_exe3_valid_out;
assign local_bb2_st__output_regs_ready = (&(~(local_bb2_st__valid_out_NO_SHIFT_REG) | ~(local_bb2_st__stall_in)));
assign local_bb2_c0_exe3_stall_in = (local_bb2_st__fu_stall_out | ~(local_bb2_st__inputs_ready));
assign local_bb2_st__causedstall = (local_bb2_st__inputs_ready && (local_bb2_st__fu_stall_out && !(~(local_bb2_st__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_st__NO_SHIFT_REG <= 'x;
		local_bb2_st__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb2_st__output_regs_ready)
		begin
			local_bb2_st__NO_SHIFT_REG <= local_bb2_st__lsu_wackout;
			local_bb2_st__valid_out_NO_SHIFT_REG <= local_bb2_st__fu_valid_out;
		end
		else
		begin
			if (~(local_bb2_st__stall_in))
			begin
				local_bb2_st__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_40to41_bb2_c0_exit_c0_exi6_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_in_0_NO_SHIFT_REG;
 logic [255:0] rnode_40to41_bb2_c0_exit_c0_exi6_0_NO_SHIFT_REG;
 logic rnode_40to41_bb2_c0_exit_c0_exi6_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_in_1_NO_SHIFT_REG;
 logic [255:0] rnode_40to41_bb2_c0_exit_c0_exi6_1_NO_SHIFT_REG;
 logic rnode_40to41_bb2_c0_exit_c0_exi6_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_in_2_NO_SHIFT_REG;
 logic [255:0] rnode_40to41_bb2_c0_exit_c0_exi6_2_NO_SHIFT_REG;
 logic rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_inputs_ready_NO_SHIFT_REG;
 logic [255:0] rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb2_c0_exit_c0_exi6_0_valid_out_0_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_in_0_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_out_reg_41_NO_SHIFT_REG;
 logic [255:0] rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_NO_SHIFT_REG),
	.valid_in(rnode_40to41_bb2_c0_exit_c0_exi6_0_valid_out_0_reg_41_NO_SHIFT_REG),
	.stall_out(rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_in_0_reg_41_NO_SHIFT_REG),
	.data_out(rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_NO_SHIFT_REG_fa),
	.valid_out({rnode_40to41_bb2_c0_exit_c0_exi6_0_valid_out_0_NO_SHIFT_REG, rnode_40to41_bb2_c0_exit_c0_exi6_0_valid_out_1_NO_SHIFT_REG, rnode_40to41_bb2_c0_exit_c0_exi6_0_valid_out_2_NO_SHIFT_REG}),
	.stall_in({rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_in_0_NO_SHIFT_REG, rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_in_1_NO_SHIFT_REG, rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_in_2_NO_SHIFT_REG})
);

defparam rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_fanout_adaptor.DATA_WIDTH = 256;
defparam rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_fanout_adaptor.NUM_FANOUTS = 3;

acl_data_fifo rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_in_0_reg_41_NO_SHIFT_REG),
	.valid_out(rnode_40to41_bb2_c0_exit_c0_exi6_0_valid_out_0_reg_41_NO_SHIFT_REG),
	.stall_out(rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_out_reg_41_NO_SHIFT_REG),
	.data_in(rnode_10to40_bb2_c0_exit_c0_exi6_0_NO_SHIFT_REG),
	.data_out(rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_NO_SHIFT_REG)
);

defparam rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_fifo.DEPTH = 2;
defparam rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_fifo.DATA_WIDTH = 256;
defparam rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_fifo.IMPL = "ll_reg";

assign rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_inputs_ready_NO_SHIFT_REG = rnode_10to40_bb2_c0_exit_c0_exi6_0_valid_out_NO_SHIFT_REG;
assign rnode_10to40_bb2_c0_exit_c0_exi6_0_stall_in_NO_SHIFT_REG = rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_out_reg_41_NO_SHIFT_REG;
assign rnode_40to41_bb2_c0_exit_c0_exi6_0_NO_SHIFT_REG = rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_NO_SHIFT_REG_fa;
assign rnode_40to41_bb2_c0_exit_c0_exi6_1_NO_SHIFT_REG = rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_NO_SHIFT_REG_fa;
assign rnode_40to41_bb2_c0_exit_c0_exi6_2_NO_SHIFT_REG = rnode_40to41_bb2_c0_exit_c0_exi6_0_reg_41_NO_SHIFT_REG_fa;

// This section implements a staging register.
// 
wire rstag_41to41_bb2_st__valid_out;
wire rstag_41to41_bb2_st__stall_in;
wire rstag_41to41_bb2_st__inputs_ready;
wire rstag_41to41_bb2_st__stall_local;
 reg rstag_41to41_bb2_st__staging_valid_NO_SHIFT_REG;
wire rstag_41to41_bb2_st__combined_valid;
 reg rstag_41to41_bb2_st__staging_reg_NO_SHIFT_REG;
wire rstag_41to41_bb2_st_;

assign rstag_41to41_bb2_st__inputs_ready = local_bb2_st__valid_out_NO_SHIFT_REG;
assign rstag_41to41_bb2_st_ = (rstag_41to41_bb2_st__staging_valid_NO_SHIFT_REG ? rstag_41to41_bb2_st__staging_reg_NO_SHIFT_REG : local_bb2_st__NO_SHIFT_REG);
assign rstag_41to41_bb2_st__combined_valid = (rstag_41to41_bb2_st__staging_valid_NO_SHIFT_REG | rstag_41to41_bb2_st__inputs_ready);
assign rstag_41to41_bb2_st__valid_out = rstag_41to41_bb2_st__combined_valid;
assign rstag_41to41_bb2_st__stall_local = rstag_41to41_bb2_st__stall_in;
assign local_bb2_st__stall_in = (|rstag_41to41_bb2_st__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_41to41_bb2_st__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_41to41_bb2_st__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_41to41_bb2_st__stall_local)
		begin
			if (~(rstag_41to41_bb2_st__staging_valid_NO_SHIFT_REG))
			begin
				rstag_41to41_bb2_st__staging_valid_NO_SHIFT_REG <= rstag_41to41_bb2_st__inputs_ready;
			end
		end
		else
		begin
			rstag_41to41_bb2_st__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_41to41_bb2_st__staging_valid_NO_SHIFT_REG))
		begin
			rstag_41to41_bb2_st__staging_reg_NO_SHIFT_REG <= local_bb2_st__NO_SHIFT_REG;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb2_c0_exe1_stall_local;
wire local_bb2_c0_exe1;

assign local_bb2_c0_exe1 = rnode_40to41_bb2_c0_exit_c0_exi6_0_NO_SHIFT_REG[8];

// This section implements an unregistered operation.
// 
wire local_bb2_c0_exe6_valid_out;
wire local_bb2_c0_exe6_stall_in;
 reg local_bb2_c0_exe6_consumed_0_NO_SHIFT_REG;
wire local_bb2_c0_exe1_valid_out;
wire local_bb2_c0_exe1_stall_in;
 reg local_bb2_c0_exe1_consumed_0_NO_SHIFT_REG;
wire local_bb2_c0_exe6_inputs_ready;
wire local_bb2_c0_exe6_stall_local;
wire [31:0] local_bb2_c0_exe6;

assign local_bb2_c0_exe6_inputs_ready = (rnode_40to41_bb2_c0_exit_c0_exi6_0_valid_out_1_NO_SHIFT_REG & rnode_40to41_bb2_c0_exit_c0_exi6_0_valid_out_0_NO_SHIFT_REG);
assign local_bb2_c0_exe6 = rnode_40to41_bb2_c0_exit_c0_exi6_1_NO_SHIFT_REG[223:192];
assign local_bb2_c0_exe6_stall_local = ((local_bb2_c0_exe6_stall_in & ~(local_bb2_c0_exe6_consumed_0_NO_SHIFT_REG)) | (local_bb2_c0_exe1_stall_in & ~(local_bb2_c0_exe1_consumed_0_NO_SHIFT_REG)));
assign local_bb2_c0_exe6_valid_out = (local_bb2_c0_exe6_inputs_ready & ~(local_bb2_c0_exe6_consumed_0_NO_SHIFT_REG));
assign local_bb2_c0_exe1_valid_out = (local_bb2_c0_exe6_inputs_ready & ~(local_bb2_c0_exe1_consumed_0_NO_SHIFT_REG));
assign rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_in_1_NO_SHIFT_REG = (local_bb2_c0_exe6_stall_local | ~(local_bb2_c0_exe6_inputs_ready));
assign rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_in_0_NO_SHIFT_REG = (local_bb2_c0_exe6_stall_local | ~(local_bb2_c0_exe6_inputs_ready));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb2_c0_exe6_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb2_c0_exe1_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb2_c0_exe6_consumed_0_NO_SHIFT_REG <= (local_bb2_c0_exe6_inputs_ready & (local_bb2_c0_exe6_consumed_0_NO_SHIFT_REG | ~(local_bb2_c0_exe6_stall_in)) & local_bb2_c0_exe6_stall_local);
		local_bb2_c0_exe1_consumed_0_NO_SHIFT_REG <= (local_bb2_c0_exe6_inputs_ready & (local_bb2_c0_exe1_consumed_0_NO_SHIFT_REG | ~(local_bb2_c0_exe1_stall_in)) & local_bb2_c0_exe6_stall_local);
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [255:0] lvb_bb2_c0_exit_c0_exi6_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb2_c0_exe6_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb2_c0_exe6_valid_out & local_bb2_c0_exe1_valid_out & rnode_40to41_bb2_c0_exit_c0_exi6_0_valid_out_2_NO_SHIFT_REG & rstag_41to41_bb2_st__valid_out);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb2_c0_exe6_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb2_c0_exe1_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_40to41_bb2_c0_exit_c0_exi6_0_stall_in_2_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_41to41_bb2_st__stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb2_c0_exit_c0_exi6_0 = lvb_bb2_c0_exit_c0_exi6_0_reg_NO_SHIFT_REG;
assign lvb_bb2_c0_exit_c0_exi6_1 = lvb_bb2_c0_exit_c0_exi6_0_reg_NO_SHIFT_REG;
assign lvb_bb2_c0_exe6_0 = lvb_bb2_c0_exe6_0_reg_NO_SHIFT_REG;
assign lvb_bb2_c0_exe6_1 = lvb_bb2_c0_exe6_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_bb2_c0_exit_c0_exi6_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb2_c0_exe6_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb2_c0_exit_c0_exi6_0_reg_NO_SHIFT_REG <= rnode_40to41_bb2_c0_exit_c0_exi6_2_NO_SHIFT_REG;
			lvb_bb2_c0_exe6_0_reg_NO_SHIFT_REG <= local_bb2_c0_exe6;
			branch_compare_result_NO_SHIFT_REG <= local_bb2_c0_exe1;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

module sha256_basic_block_3
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_ld_,
		input [31:0] 		input_wii_mul158,
		input [31:0] 		input_wii__,
		input 		input_wii_cmp166_xor,
		input [63:0] 		input_wii_memcoalesce_digest_bitcast_08,
		input [511:0] 		input_wii_memcoalesce_null_insertValue_0,
		input 		valid_in,
		output 		stall_out,
		input [255:0] 		input_c0_exit_c0_exi6,
		input [31:0] 		input_c0_exe6,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_c0_exe6,
		output [31:0] 		lvb_bb3_c0_exe5,
		output [31:0] 		lvb_bb3_c0_exe4,
		output [31:0] 		lvb_bb3_c0_exe138,
		output [31:0] 		lvb_bb3_c0_exe239,
		output 		lvb_bb3_c0_exe340,
		output [31:0] 		lvb_bb3_c0_exe441,
		output 		lvb_bb3_c0_exe542,
		output 		lvb_bb3_c0_exe643,
		output 		lvb_bb3_c0_exe7,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [255:0] input_c0_exit_c0_exi6_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe6_staging_reg_NO_SHIFT_REG;
 reg [255:0] local_lvm_c0_exit_c0_exi6_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe6_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_c0_exit_c0_exi6_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe6_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_c0_exit_c0_exi6_staging_reg_NO_SHIFT_REG <= input_c0_exit_c0_exi6;
				input_c0_exe6_staging_reg_NO_SHIFT_REG <= input_c0_exe6;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_c0_exit_c0_exi6_NO_SHIFT_REG <= input_c0_exit_c0_exi6_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe6_NO_SHIFT_REG <= input_c0_exe6_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_c0_exit_c0_exi6_NO_SHIFT_REG <= input_c0_exit_c0_exi6;
					local_lvm_c0_exe6_NO_SHIFT_REG <= input_c0_exe6;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_c0_exe5_valid_out;
wire local_bb3_c0_exe5_stall_in;
wire local_bb3_c0_exe5_inputs_ready;
wire local_bb3_c0_exe5_stall_local;
wire [31:0] local_bb3_c0_exe5;

assign local_bb3_c0_exe5_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb3_c0_exe5 = local_lvm_c0_exit_c0_exi6_NO_SHIFT_REG[191:160];
assign local_bb3_c0_exe5_valid_out = local_bb3_c0_exe5_inputs_ready;
assign local_bb3_c0_exe5_stall_local = local_bb3_c0_exe5_stall_in;
assign merge_node_stall_in_0 = (|local_bb3_c0_exe5_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exe4_valid_out;
wire local_bb3_c0_exe4_stall_in;
wire local_bb3_c0_exe4_inputs_ready;
wire local_bb3_c0_exe4_stall_local;
wire [31:0] local_bb3_c0_exe4;

assign local_bb3_c0_exe4_inputs_ready = merge_node_valid_out_1_NO_SHIFT_REG;
assign local_bb3_c0_exe4 = local_lvm_c0_exit_c0_exi6_NO_SHIFT_REG[159:128];
assign local_bb3_c0_exe4_valid_out = local_bb3_c0_exe4_inputs_ready;
assign local_bb3_c0_exe4_stall_local = local_bb3_c0_exe4_stall_in;
assign merge_node_stall_in_1 = (|local_bb3_c0_exe4_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb3_c0_eni128_valid_out;
wire local_bb3_c0_eni128_stall_in;
wire local_bb3_c0_eni128_inputs_ready;
wire local_bb3_c0_eni128_stall_local;
wire [63:0] local_bb3_c0_eni128;

assign local_bb3_c0_eni128_inputs_ready = merge_node_valid_out_2_NO_SHIFT_REG;
assign local_bb3_c0_eni128[31:0] = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
assign local_bb3_c0_eni128[63:32] = local_lvm_c0_exe6_NO_SHIFT_REG;
assign local_bb3_c0_eni128_valid_out = local_bb3_c0_eni128_inputs_ready;
assign local_bb3_c0_eni128_stall_local = local_bb3_c0_eni128_stall_in;
assign merge_node_stall_in_2 = (|local_bb3_c0_eni128_stall_local);

// Register node:
//  * latency = 39
//  * capacity = 39
 logic rnode_1to40_c0_exe6_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to40_c0_exe6_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to40_c0_exe6_0_NO_SHIFT_REG;
 logic rnode_1to40_c0_exe6_0_reg_40_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to40_c0_exe6_0_reg_40_NO_SHIFT_REG;
 logic rnode_1to40_c0_exe6_0_valid_out_reg_40_NO_SHIFT_REG;
 logic rnode_1to40_c0_exe6_0_stall_in_reg_40_NO_SHIFT_REG;
 logic rnode_1to40_c0_exe6_0_stall_out_reg_40_NO_SHIFT_REG;

acl_data_fifo rnode_1to40_c0_exe6_0_reg_40_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to40_c0_exe6_0_reg_40_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to40_c0_exe6_0_stall_in_reg_40_NO_SHIFT_REG),
	.valid_out(rnode_1to40_c0_exe6_0_valid_out_reg_40_NO_SHIFT_REG),
	.stall_out(rnode_1to40_c0_exe6_0_stall_out_reg_40_NO_SHIFT_REG),
	.data_in(local_lvm_c0_exe6_NO_SHIFT_REG),
	.data_out(rnode_1to40_c0_exe6_0_reg_40_NO_SHIFT_REG)
);

defparam rnode_1to40_c0_exe6_0_reg_40_fifo.DEPTH = 40;
defparam rnode_1to40_c0_exe6_0_reg_40_fifo.DATA_WIDTH = 32;
defparam rnode_1to40_c0_exe6_0_reg_40_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to40_c0_exe6_0_reg_40_fifo.IMPL = "ram";

assign rnode_1to40_c0_exe6_0_reg_40_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign merge_node_stall_in_3 = rnode_1to40_c0_exe6_0_stall_out_reg_40_NO_SHIFT_REG;
assign rnode_1to40_c0_exe6_0_NO_SHIFT_REG = rnode_1to40_c0_exe6_0_reg_40_NO_SHIFT_REG;
assign rnode_1to40_c0_exe6_0_stall_in_reg_40_NO_SHIFT_REG = rnode_1to40_c0_exe6_0_stall_in_NO_SHIFT_REG;
assign rnode_1to40_c0_exe6_0_valid_out_NO_SHIFT_REG = rnode_1to40_c0_exe6_0_valid_out_reg_40_NO_SHIFT_REG;

// Register node:
//  * latency = 39
//  * capacity = 39
 logic rnode_1to40_bb3_c0_exe5_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to40_bb3_c0_exe5_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to40_bb3_c0_exe5_0_NO_SHIFT_REG;
 logic rnode_1to40_bb3_c0_exe5_0_reg_40_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to40_bb3_c0_exe5_0_reg_40_NO_SHIFT_REG;
 logic rnode_1to40_bb3_c0_exe5_0_valid_out_reg_40_NO_SHIFT_REG;
 logic rnode_1to40_bb3_c0_exe5_0_stall_in_reg_40_NO_SHIFT_REG;
 logic rnode_1to40_bb3_c0_exe5_0_stall_out_reg_40_NO_SHIFT_REG;

acl_data_fifo rnode_1to40_bb3_c0_exe5_0_reg_40_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to40_bb3_c0_exe5_0_reg_40_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to40_bb3_c0_exe5_0_stall_in_reg_40_NO_SHIFT_REG),
	.valid_out(rnode_1to40_bb3_c0_exe5_0_valid_out_reg_40_NO_SHIFT_REG),
	.stall_out(rnode_1to40_bb3_c0_exe5_0_stall_out_reg_40_NO_SHIFT_REG),
	.data_in(local_bb3_c0_exe5),
	.data_out(rnode_1to40_bb3_c0_exe5_0_reg_40_NO_SHIFT_REG)
);

defparam rnode_1to40_bb3_c0_exe5_0_reg_40_fifo.DEPTH = 40;
defparam rnode_1to40_bb3_c0_exe5_0_reg_40_fifo.DATA_WIDTH = 32;
defparam rnode_1to40_bb3_c0_exe5_0_reg_40_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to40_bb3_c0_exe5_0_reg_40_fifo.IMPL = "ram";

assign rnode_1to40_bb3_c0_exe5_0_reg_40_inputs_ready_NO_SHIFT_REG = local_bb3_c0_exe5_valid_out;
assign local_bb3_c0_exe5_stall_in = rnode_1to40_bb3_c0_exe5_0_stall_out_reg_40_NO_SHIFT_REG;
assign rnode_1to40_bb3_c0_exe5_0_NO_SHIFT_REG = rnode_1to40_bb3_c0_exe5_0_reg_40_NO_SHIFT_REG;
assign rnode_1to40_bb3_c0_exe5_0_stall_in_reg_40_NO_SHIFT_REG = rnode_1to40_bb3_c0_exe5_0_stall_in_NO_SHIFT_REG;
assign rnode_1to40_bb3_c0_exe5_0_valid_out_NO_SHIFT_REG = rnode_1to40_bb3_c0_exe5_0_valid_out_reg_40_NO_SHIFT_REG;

// Register node:
//  * latency = 39
//  * capacity = 39
 logic rnode_1to40_bb3_c0_exe4_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to40_bb3_c0_exe4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to40_bb3_c0_exe4_0_NO_SHIFT_REG;
 logic rnode_1to40_bb3_c0_exe4_0_reg_40_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to40_bb3_c0_exe4_0_reg_40_NO_SHIFT_REG;
 logic rnode_1to40_bb3_c0_exe4_0_valid_out_reg_40_NO_SHIFT_REG;
 logic rnode_1to40_bb3_c0_exe4_0_stall_in_reg_40_NO_SHIFT_REG;
 logic rnode_1to40_bb3_c0_exe4_0_stall_out_reg_40_NO_SHIFT_REG;

acl_data_fifo rnode_1to40_bb3_c0_exe4_0_reg_40_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to40_bb3_c0_exe4_0_reg_40_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to40_bb3_c0_exe4_0_stall_in_reg_40_NO_SHIFT_REG),
	.valid_out(rnode_1to40_bb3_c0_exe4_0_valid_out_reg_40_NO_SHIFT_REG),
	.stall_out(rnode_1to40_bb3_c0_exe4_0_stall_out_reg_40_NO_SHIFT_REG),
	.data_in(local_bb3_c0_exe4),
	.data_out(rnode_1to40_bb3_c0_exe4_0_reg_40_NO_SHIFT_REG)
);

defparam rnode_1to40_bb3_c0_exe4_0_reg_40_fifo.DEPTH = 40;
defparam rnode_1to40_bb3_c0_exe4_0_reg_40_fifo.DATA_WIDTH = 32;
defparam rnode_1to40_bb3_c0_exe4_0_reg_40_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to40_bb3_c0_exe4_0_reg_40_fifo.IMPL = "ram";

assign rnode_1to40_bb3_c0_exe4_0_reg_40_inputs_ready_NO_SHIFT_REG = local_bb3_c0_exe4_valid_out;
assign local_bb3_c0_exe4_stall_in = rnode_1to40_bb3_c0_exe4_0_stall_out_reg_40_NO_SHIFT_REG;
assign rnode_1to40_bb3_c0_exe4_0_NO_SHIFT_REG = rnode_1to40_bb3_c0_exe4_0_reg_40_NO_SHIFT_REG;
assign rnode_1to40_bb3_c0_exe4_0_stall_in_reg_40_NO_SHIFT_REG = rnode_1to40_bb3_c0_exe4_0_stall_in_NO_SHIFT_REG;
assign rnode_1to40_bb3_c0_exe4_0_valid_out_NO_SHIFT_REG = rnode_1to40_bb3_c0_exe4_0_valid_out_reg_40_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb3_c0_enter29_c0_eni128_inputs_ready;
 reg local_bb3_c0_enter29_c0_eni128_valid_out_NO_SHIFT_REG;
wire local_bb3_c0_enter29_c0_eni128_stall_in;
wire local_bb3_c0_enter29_c0_eni128_output_regs_ready;
 reg [63:0] local_bb3_c0_enter29_c0_eni128_NO_SHIFT_REG;
wire local_bb3_c0_enter29_c0_eni128_input_accepted;
wire local_bb3_c0_exit37_c0_exi7_entry_stall;
wire local_bb3_c0_exit37_c0_exi7_output_regs_ready;
wire [35:0] local_bb3_c0_exit37_c0_exi7_valid_bits;
wire local_bb3_c0_exit37_c0_exi7_phases;
wire local_bb3_c0_enter29_c0_eni128_inc_pipelined_thread;
wire local_bb3_c0_enter29_c0_eni128_dec_pipelined_thread;
wire local_bb3_c0_enter29_c0_eni128_causedstall;

assign local_bb3_c0_enter29_c0_eni128_inputs_ready = local_bb3_c0_eni128_valid_out;
assign local_bb3_c0_enter29_c0_eni128_output_regs_ready = 1'b1;
assign local_bb3_c0_enter29_c0_eni128_input_accepted = (local_bb3_c0_enter29_c0_eni128_inputs_ready && !(local_bb3_c0_exit37_c0_exi7_entry_stall));
assign local_bb3_c0_enter29_c0_eni128_inc_pipelined_thread = 1'b1;
assign local_bb3_c0_enter29_c0_eni128_dec_pipelined_thread = ~(1'b0);
assign local_bb3_c0_eni128_stall_in = ((~(local_bb3_c0_enter29_c0_eni128_inputs_ready) | local_bb3_c0_exit37_c0_exi7_entry_stall) | ~(1'b1));
assign local_bb3_c0_enter29_c0_eni128_causedstall = (1'b1 && ((~(local_bb3_c0_enter29_c0_eni128_inputs_ready) | local_bb3_c0_exit37_c0_exi7_entry_stall) && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_c0_enter29_c0_eni128_NO_SHIFT_REG <= 'x;
		local_bb3_c0_enter29_c0_eni128_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_c0_enter29_c0_eni128_output_regs_ready)
		begin
			local_bb3_c0_enter29_c0_eni128_NO_SHIFT_REG <= local_bb3_c0_eni128;
			local_bb3_c0_enter29_c0_eni128_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb3_c0_enter29_c0_eni128_stall_in))
			begin
				local_bb3_c0_enter29_c0_eni128_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_40to41_c0_exe6_0_valid_out_NO_SHIFT_REG;
 logic rnode_40to41_c0_exe6_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_40to41_c0_exe6_0_NO_SHIFT_REG;
 logic rnode_40to41_c0_exe6_0_reg_41_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_40to41_c0_exe6_0_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_c0_exe6_0_valid_out_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_c0_exe6_0_stall_in_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_c0_exe6_0_stall_out_reg_41_NO_SHIFT_REG;

acl_data_fifo rnode_40to41_c0_exe6_0_reg_41_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_40to41_c0_exe6_0_reg_41_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_40to41_c0_exe6_0_stall_in_reg_41_NO_SHIFT_REG),
	.valid_out(rnode_40to41_c0_exe6_0_valid_out_reg_41_NO_SHIFT_REG),
	.stall_out(rnode_40to41_c0_exe6_0_stall_out_reg_41_NO_SHIFT_REG),
	.data_in(rnode_1to40_c0_exe6_0_NO_SHIFT_REG),
	.data_out(rnode_40to41_c0_exe6_0_reg_41_NO_SHIFT_REG)
);

defparam rnode_40to41_c0_exe6_0_reg_41_fifo.DEPTH = 2;
defparam rnode_40to41_c0_exe6_0_reg_41_fifo.DATA_WIDTH = 32;
defparam rnode_40to41_c0_exe6_0_reg_41_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_40to41_c0_exe6_0_reg_41_fifo.IMPL = "ll_reg";

assign rnode_40to41_c0_exe6_0_reg_41_inputs_ready_NO_SHIFT_REG = rnode_1to40_c0_exe6_0_valid_out_NO_SHIFT_REG;
assign rnode_1to40_c0_exe6_0_stall_in_NO_SHIFT_REG = rnode_40to41_c0_exe6_0_stall_out_reg_41_NO_SHIFT_REG;
assign rnode_40to41_c0_exe6_0_NO_SHIFT_REG = rnode_40to41_c0_exe6_0_reg_41_NO_SHIFT_REG;
assign rnode_40to41_c0_exe6_0_stall_in_reg_41_NO_SHIFT_REG = rnode_40to41_c0_exe6_0_stall_in_NO_SHIFT_REG;
assign rnode_40to41_c0_exe6_0_valid_out_NO_SHIFT_REG = rnode_40to41_c0_exe6_0_valid_out_reg_41_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_40to41_bb3_c0_exe5_0_valid_out_NO_SHIFT_REG;
 logic rnode_40to41_bb3_c0_exe5_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_40to41_bb3_c0_exe5_0_NO_SHIFT_REG;
 logic rnode_40to41_bb3_c0_exe5_0_reg_41_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_40to41_bb3_c0_exe5_0_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb3_c0_exe5_0_valid_out_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb3_c0_exe5_0_stall_in_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb3_c0_exe5_0_stall_out_reg_41_NO_SHIFT_REG;

acl_data_fifo rnode_40to41_bb3_c0_exe5_0_reg_41_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_40to41_bb3_c0_exe5_0_reg_41_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_40to41_bb3_c0_exe5_0_stall_in_reg_41_NO_SHIFT_REG),
	.valid_out(rnode_40to41_bb3_c0_exe5_0_valid_out_reg_41_NO_SHIFT_REG),
	.stall_out(rnode_40to41_bb3_c0_exe5_0_stall_out_reg_41_NO_SHIFT_REG),
	.data_in(rnode_1to40_bb3_c0_exe5_0_NO_SHIFT_REG),
	.data_out(rnode_40to41_bb3_c0_exe5_0_reg_41_NO_SHIFT_REG)
);

defparam rnode_40to41_bb3_c0_exe5_0_reg_41_fifo.DEPTH = 2;
defparam rnode_40to41_bb3_c0_exe5_0_reg_41_fifo.DATA_WIDTH = 32;
defparam rnode_40to41_bb3_c0_exe5_0_reg_41_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_40to41_bb3_c0_exe5_0_reg_41_fifo.IMPL = "ll_reg";

assign rnode_40to41_bb3_c0_exe5_0_reg_41_inputs_ready_NO_SHIFT_REG = rnode_1to40_bb3_c0_exe5_0_valid_out_NO_SHIFT_REG;
assign rnode_1to40_bb3_c0_exe5_0_stall_in_NO_SHIFT_REG = rnode_40to41_bb3_c0_exe5_0_stall_out_reg_41_NO_SHIFT_REG;
assign rnode_40to41_bb3_c0_exe5_0_NO_SHIFT_REG = rnode_40to41_bb3_c0_exe5_0_reg_41_NO_SHIFT_REG;
assign rnode_40to41_bb3_c0_exe5_0_stall_in_reg_41_NO_SHIFT_REG = rnode_40to41_bb3_c0_exe5_0_stall_in_NO_SHIFT_REG;
assign rnode_40to41_bb3_c0_exe5_0_valid_out_NO_SHIFT_REG = rnode_40to41_bb3_c0_exe5_0_valid_out_reg_41_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_40to41_bb3_c0_exe4_0_valid_out_NO_SHIFT_REG;
 logic rnode_40to41_bb3_c0_exe4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_40to41_bb3_c0_exe4_0_NO_SHIFT_REG;
 logic rnode_40to41_bb3_c0_exe4_0_reg_41_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_40to41_bb3_c0_exe4_0_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb3_c0_exe4_0_valid_out_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb3_c0_exe4_0_stall_in_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb3_c0_exe4_0_stall_out_reg_41_NO_SHIFT_REG;

acl_data_fifo rnode_40to41_bb3_c0_exe4_0_reg_41_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_40to41_bb3_c0_exe4_0_reg_41_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_40to41_bb3_c0_exe4_0_stall_in_reg_41_NO_SHIFT_REG),
	.valid_out(rnode_40to41_bb3_c0_exe4_0_valid_out_reg_41_NO_SHIFT_REG),
	.stall_out(rnode_40to41_bb3_c0_exe4_0_stall_out_reg_41_NO_SHIFT_REG),
	.data_in(rnode_1to40_bb3_c0_exe4_0_NO_SHIFT_REG),
	.data_out(rnode_40to41_bb3_c0_exe4_0_reg_41_NO_SHIFT_REG)
);

defparam rnode_40to41_bb3_c0_exe4_0_reg_41_fifo.DEPTH = 2;
defparam rnode_40to41_bb3_c0_exe4_0_reg_41_fifo.DATA_WIDTH = 32;
defparam rnode_40to41_bb3_c0_exe4_0_reg_41_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_40to41_bb3_c0_exe4_0_reg_41_fifo.IMPL = "ll_reg";

assign rnode_40to41_bb3_c0_exe4_0_reg_41_inputs_ready_NO_SHIFT_REG = rnode_1to40_bb3_c0_exe4_0_valid_out_NO_SHIFT_REG;
assign rnode_1to40_bb3_c0_exe4_0_stall_in_NO_SHIFT_REG = rnode_40to41_bb3_c0_exe4_0_stall_out_reg_41_NO_SHIFT_REG;
assign rnode_40to41_bb3_c0_exe4_0_NO_SHIFT_REG = rnode_40to41_bb3_c0_exe4_0_reg_41_NO_SHIFT_REG;
assign rnode_40to41_bb3_c0_exe4_0_stall_in_reg_41_NO_SHIFT_REG = rnode_40to41_bb3_c0_exe4_0_stall_in_NO_SHIFT_REG;
assign rnode_40to41_bb3_c0_exe4_0_valid_out_NO_SHIFT_REG = rnode_40to41_bb3_c0_exe4_0_valid_out_reg_41_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_c0_ene130_stall_local;
wire [31:0] local_bb3_c0_ene130;

assign local_bb3_c0_ene130 = local_bb3_c0_enter29_c0_eni128_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb3_mul_stall_local;
wire [31:0] local_bb3_mul;

assign local_bb3_mul = (local_bb3_c0_ene130 << 32'h6);

// This section implements an unregistered operation.
// 
wire local_bb3_mul_valid_out_1;
wire local_bb3_mul_stall_in_1;
 reg local_bb3_mul_consumed_1_NO_SHIFT_REG;
wire local_bb3_sub_valid_out;
wire local_bb3_sub_stall_in;
 reg local_bb3_sub_consumed_0_NO_SHIFT_REG;
wire local_bb3_sub_inputs_ready;
wire local_bb3_sub_stall_local;
wire [31:0] local_bb3_sub;

assign local_bb3_sub_inputs_ready = local_bb3_c0_enter29_c0_eni128_valid_out_NO_SHIFT_REG;
assign local_bb3_sub = (input_wii_ld_ - local_bb3_mul);
assign local_bb3_mul_valid_out_1 = 1'b1;
assign local_bb3_sub_valid_out = 1'b1;
assign local_bb3_c0_enter29_c0_eni128_stall_in = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_mul_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb3_sub_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb3_mul_consumed_1_NO_SHIFT_REG <= (local_bb3_sub_inputs_ready & (local_bb3_mul_consumed_1_NO_SHIFT_REG | ~(local_bb3_mul_stall_in_1)) & local_bb3_sub_stall_local);
		local_bb3_sub_consumed_0_NO_SHIFT_REG <= (local_bb3_sub_inputs_ready & (local_bb3_sub_consumed_0_NO_SHIFT_REG | ~(local_bb3_sub_stall_in)) & local_bb3_sub_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb3_mul_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_2to3_bb3_mul_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb3_mul_0_NO_SHIFT_REG;
 logic rnode_2to3_bb3_mul_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_2to3_bb3_mul_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb3_mul_1_NO_SHIFT_REG;
 logic rnode_2to3_bb3_mul_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb3_mul_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_mul_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_mul_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_mul_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb3_mul_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb3_mul_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb3_mul_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb3_mul_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb3_mul_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb3_mul),
	.data_out(rnode_2to3_bb3_mul_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb3_mul_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb3_mul_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb3_mul_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb3_mul_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb3_mul_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb3_mul_stall_in_1 = 1'b0;
assign rnode_2to3_bb3_mul_0_stall_in_0_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb3_mul_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb3_mul_0_NO_SHIFT_REG = rnode_2to3_bb3_mul_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb3_mul_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb3_mul_1_NO_SHIFT_REG = rnode_2to3_bb3_mul_0_reg_3_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb3_sub_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_2to3_bb3_sub_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb3_sub_0_NO_SHIFT_REG;
 logic rnode_2to3_bb3_sub_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_2to3_bb3_sub_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb3_sub_1_NO_SHIFT_REG;
 logic rnode_2to3_bb3_sub_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb3_sub_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_sub_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_sub_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb3_sub_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb3_sub_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb3_sub_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb3_sub_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb3_sub_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb3_sub_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb3_sub),
	.data_out(rnode_2to3_bb3_sub_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb3_sub_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb3_sub_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb3_sub_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb3_sub_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb3_sub_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb3_sub_stall_in = 1'b0;
assign rnode_2to3_bb3_sub_0_stall_in_0_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb3_sub_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb3_sub_0_NO_SHIFT_REG = rnode_2to3_bb3_sub_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb3_sub_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb3_sub_1_NO_SHIFT_REG = rnode_2to3_bb3_sub_0_reg_3_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_cmp23_stall_local;
wire local_bb3_cmp23;

assign local_bb3_cmp23 = (input_wii_ld_ > rnode_2to3_bb3_mul_0_NO_SHIFT_REG);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb3_mul_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb3_mul_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb3_mul_0_NO_SHIFT_REG;
 logic rnode_3to4_bb3_mul_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb3_mul_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3_mul_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3_mul_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3_mul_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb3_mul_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb3_mul_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb3_mul_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb3_mul_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb3_mul_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb3_mul_1_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb3_mul_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb3_mul_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb3_mul_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb3_mul_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb3_mul_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb3_mul_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb3_mul_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb3_mul_0_NO_SHIFT_REG = rnode_3to4_bb3_mul_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb3_mul_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb3_mul_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb3_cmp24_stall_local;
wire local_bb3_cmp24;

assign local_bb3_cmp24 = (rnode_2to3_bb3_sub_0_NO_SHIFT_REG > 32'h40);

// Register node:
//  * latency = 31
//  * capacity = 31
 logic rnode_4to35_bb3_mul_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to35_bb3_mul_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to35_bb3_mul_0_NO_SHIFT_REG;
 logic rnode_4to35_bb3_mul_0_reg_35_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to35_bb3_mul_0_reg_35_NO_SHIFT_REG;
 logic rnode_4to35_bb3_mul_0_valid_out_reg_35_NO_SHIFT_REG;
 logic rnode_4to35_bb3_mul_0_stall_in_reg_35_NO_SHIFT_REG;
 logic rnode_4to35_bb3_mul_0_stall_out_reg_35_NO_SHIFT_REG;

acl_data_fifo rnode_4to35_bb3_mul_0_reg_35_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to35_bb3_mul_0_reg_35_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to35_bb3_mul_0_stall_in_reg_35_NO_SHIFT_REG),
	.valid_out(rnode_4to35_bb3_mul_0_valid_out_reg_35_NO_SHIFT_REG),
	.stall_out(rnode_4to35_bb3_mul_0_stall_out_reg_35_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb3_mul_0_NO_SHIFT_REG),
	.data_out(rnode_4to35_bb3_mul_0_reg_35_NO_SHIFT_REG)
);

defparam rnode_4to35_bb3_mul_0_reg_35_fifo.DEPTH = 31;
defparam rnode_4to35_bb3_mul_0_reg_35_fifo.DATA_WIDTH = 32;
defparam rnode_4to35_bb3_mul_0_reg_35_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to35_bb3_mul_0_reg_35_fifo.IMPL = "shift_reg";

assign rnode_4to35_bb3_mul_0_reg_35_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb3_mul_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to35_bb3_mul_0_NO_SHIFT_REG = rnode_4to35_bb3_mul_0_reg_35_NO_SHIFT_REG;
assign rnode_4to35_bb3_mul_0_stall_in_reg_35_NO_SHIFT_REG = 1'b0;
assign rnode_4to35_bb3_mul_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb3_cond29_stall_local;
wire [31:0] local_bb3_cond29;

assign local_bb3_cond29 = (local_bb3_cmp24 ? 32'h40 : rnode_2to3_bb3_sub_1_NO_SHIFT_REG);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_35to36_bb3_mul_0_valid_out_NO_SHIFT_REG;
 logic rnode_35to36_bb3_mul_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_35to36_bb3_mul_0_NO_SHIFT_REG;
 logic rnode_35to36_bb3_mul_0_reg_36_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_35to36_bb3_mul_0_reg_36_NO_SHIFT_REG;
 logic rnode_35to36_bb3_mul_0_valid_out_reg_36_NO_SHIFT_REG;
 logic rnode_35to36_bb3_mul_0_stall_in_reg_36_NO_SHIFT_REG;
 logic rnode_35to36_bb3_mul_0_stall_out_reg_36_NO_SHIFT_REG;

acl_data_fifo rnode_35to36_bb3_mul_0_reg_36_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_35to36_bb3_mul_0_reg_36_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_35to36_bb3_mul_0_stall_in_reg_36_NO_SHIFT_REG),
	.valid_out(rnode_35to36_bb3_mul_0_valid_out_reg_36_NO_SHIFT_REG),
	.stall_out(rnode_35to36_bb3_mul_0_stall_out_reg_36_NO_SHIFT_REG),
	.data_in(rnode_4to35_bb3_mul_0_NO_SHIFT_REG),
	.data_out(rnode_35to36_bb3_mul_0_reg_36_NO_SHIFT_REG)
);

defparam rnode_35to36_bb3_mul_0_reg_36_fifo.DEPTH = 1;
defparam rnode_35to36_bb3_mul_0_reg_36_fifo.DATA_WIDTH = 32;
defparam rnode_35to36_bb3_mul_0_reg_36_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_35to36_bb3_mul_0_reg_36_fifo.IMPL = "shift_reg";

assign rnode_35to36_bb3_mul_0_reg_36_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to35_bb3_mul_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_35to36_bb3_mul_0_NO_SHIFT_REG = rnode_35to36_bb3_mul_0_reg_36_NO_SHIFT_REG;
assign rnode_35to36_bb3_mul_0_stall_in_reg_36_NO_SHIFT_REG = 1'b0;
assign rnode_35to36_bb3_mul_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb3__72_valid_out;
wire local_bb3__72_stall_in;
wire local_bb3__72_inputs_ready;
wire local_bb3__72_stall_local;
wire [31:0] local_bb3__72;

assign local_bb3__72_inputs_ready = (rnode_2to3_bb3_mul_0_valid_out_0_NO_SHIFT_REG & rnode_2to3_bb3_sub_0_valid_out_0_NO_SHIFT_REG & rnode_2to3_bb3_sub_0_valid_out_1_NO_SHIFT_REG);
assign local_bb3__72 = (local_bb3_cmp23 ? local_bb3_cond29 : 32'hFFFFFFFF);
assign local_bb3__72_valid_out = 1'b1;
assign rnode_2to3_bb3_mul_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb3_sub_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb3_sub_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exi131_stall_local;
wire [191:0] local_bb3_c0_exi131;

assign local_bb3_c0_exi131[31:0] = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
assign local_bb3_c0_exi131[63:32] = rnode_35to36_bb3_mul_0_NO_SHIFT_REG;
assign local_bb3_c0_exi131[191:64] = 128'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb3__72_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_3to4_bb3__72_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb3__72_0_NO_SHIFT_REG;
 logic rnode_3to4_bb3__72_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_3to4_bb3__72_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb3__72_1_NO_SHIFT_REG;
 logic rnode_3to4_bb3__72_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb3__72_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3__72_0_valid_out_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3__72_0_stall_in_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb3__72_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb3__72_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb3__72_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb3__72_0_stall_in_0_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb3__72_0_valid_out_0_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb3__72_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb3__72),
	.data_out(rnode_3to4_bb3__72_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb3__72_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb3__72_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb3__72_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb3__72_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb3__72_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb3__72_stall_in = 1'b0;
assign rnode_3to4_bb3__72_0_stall_in_0_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb3__72_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb3__72_0_NO_SHIFT_REG = rnode_3to4_bb3__72_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb3__72_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb3__72_1_NO_SHIFT_REG = rnode_3to4_bb3__72_0_reg_4_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb3_div32_inputs_ready;
 reg local_bb3_div32_valid_out_NO_SHIFT_REG;
wire local_bb3_div32_stall_in;
wire local_bb3_div32_output_regs_ready;
wire [31:0] local_bb3_div32;
 reg local_bb3_div32_valid_pipe_0_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_1_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_2_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_3_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_4_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_5_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_6_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_7_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_8_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_9_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_10_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_11_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_12_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_13_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_14_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_15_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_16_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_17_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_18_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_19_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_20_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_21_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_22_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_23_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_24_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_25_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_26_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_27_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_28_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_29_NO_SHIFT_REG;
 reg local_bb3_div32_valid_pipe_30_NO_SHIFT_REG;
wire local_bb3_div32_causedstall;

acl_int_div32s int_module_local_bb3_div32 (
	.clock(clock),
	.numer(rnode_3to4_bb3__72_0_NO_SHIFT_REG),
	.denom(32'h4),
	.enable(local_bb3_div32_output_regs_ready),
	.quotient(local_bb3_div32),
	.remain()
);


assign local_bb3_div32_inputs_ready = 1'b1;
assign local_bb3_div32_output_regs_ready = 1'b1;
assign rnode_3to4_bb3__72_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign local_bb3_div32_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_div32_valid_pipe_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_1_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_2_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_3_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_4_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_5_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_6_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_7_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_8_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_9_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_10_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_11_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_12_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_13_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_14_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_15_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_16_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_17_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_18_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_19_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_20_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_21_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_22_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_23_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_24_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_25_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_26_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_27_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_28_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_29_NO_SHIFT_REG <= 1'b0;
		local_bb3_div32_valid_pipe_30_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_div32_output_regs_ready)
		begin
			local_bb3_div32_valid_pipe_0_NO_SHIFT_REG <= 1'b1;
			local_bb3_div32_valid_pipe_1_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_0_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_2_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_1_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_3_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_2_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_4_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_3_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_5_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_4_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_6_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_5_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_7_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_6_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_8_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_7_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_9_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_8_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_10_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_9_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_11_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_10_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_12_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_11_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_13_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_12_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_14_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_13_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_15_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_14_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_16_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_15_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_17_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_16_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_18_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_17_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_19_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_18_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_20_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_19_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_21_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_20_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_22_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_21_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_23_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_22_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_24_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_23_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_25_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_24_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_26_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_25_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_27_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_26_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_28_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_27_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_29_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_28_NO_SHIFT_REG;
			local_bb3_div32_valid_pipe_30_NO_SHIFT_REG <= local_bb3_div32_valid_pipe_29_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_div32_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_div32_output_regs_ready)
		begin
			local_bb3_div32_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb3_div32_stall_in))
			begin
				local_bb3_div32_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb3__72_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb3__72_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb3__72_0_NO_SHIFT_REG;
 logic rnode_4to5_bb3__72_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb3__72_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb3__72_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb3__72_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb3__72_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb3__72_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb3__72_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb3__72_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb3__72_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb3__72_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb3__72_1_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb3__72_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb3__72_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb3__72_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb3__72_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb3__72_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb3__72_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb3__72_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb3__72_0_NO_SHIFT_REG = rnode_4to5_bb3__72_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb3__72_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb3__72_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 30
//  * capacity = 30
 logic rnode_5to35_bb3__72_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to35_bb3__72_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_5to35_bb3__72_0_NO_SHIFT_REG;
 logic rnode_5to35_bb3__72_0_reg_35_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_5to35_bb3__72_0_reg_35_NO_SHIFT_REG;
 logic rnode_5to35_bb3__72_0_valid_out_reg_35_NO_SHIFT_REG;
 logic rnode_5to35_bb3__72_0_stall_in_reg_35_NO_SHIFT_REG;
 logic rnode_5to35_bb3__72_0_stall_out_reg_35_NO_SHIFT_REG;

acl_data_fifo rnode_5to35_bb3__72_0_reg_35_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to35_bb3__72_0_reg_35_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to35_bb3__72_0_stall_in_reg_35_NO_SHIFT_REG),
	.valid_out(rnode_5to35_bb3__72_0_valid_out_reg_35_NO_SHIFT_REG),
	.stall_out(rnode_5to35_bb3__72_0_stall_out_reg_35_NO_SHIFT_REG),
	.data_in(rnode_4to5_bb3__72_0_NO_SHIFT_REG),
	.data_out(rnode_5to35_bb3__72_0_reg_35_NO_SHIFT_REG)
);

defparam rnode_5to35_bb3__72_0_reg_35_fifo.DEPTH = 30;
defparam rnode_5to35_bb3__72_0_reg_35_fifo.DATA_WIDTH = 32;
defparam rnode_5to35_bb3__72_0_reg_35_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_5to35_bb3__72_0_reg_35_fifo.IMPL = "shift_reg";

assign rnode_5to35_bb3__72_0_reg_35_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to5_bb3__72_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_5to35_bb3__72_0_NO_SHIFT_REG = rnode_5to35_bb3__72_0_reg_35_NO_SHIFT_REG;
assign rnode_5to35_bb3__72_0_stall_in_reg_35_NO_SHIFT_REG = 1'b0;
assign rnode_5to35_bb3__72_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_35to36_bb3__72_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_35to36_bb3__72_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_35to36_bb3__72_0_NO_SHIFT_REG;
 logic rnode_35to36_bb3__72_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_35to36_bb3__72_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_35to36_bb3__72_1_NO_SHIFT_REG;
 logic rnode_35to36_bb3__72_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_35to36_bb3__72_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_35to36_bb3__72_2_NO_SHIFT_REG;
 logic rnode_35to36_bb3__72_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_35to36_bb3__72_0_stall_in_3_NO_SHIFT_REG;
 logic [31:0] rnode_35to36_bb3__72_3_NO_SHIFT_REG;
 logic rnode_35to36_bb3__72_0_reg_36_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_35to36_bb3__72_0_reg_36_NO_SHIFT_REG;
 logic rnode_35to36_bb3__72_0_valid_out_0_reg_36_NO_SHIFT_REG;
 logic rnode_35to36_bb3__72_0_stall_in_0_reg_36_NO_SHIFT_REG;
 logic rnode_35to36_bb3__72_0_stall_out_reg_36_NO_SHIFT_REG;

acl_data_fifo rnode_35to36_bb3__72_0_reg_36_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_35to36_bb3__72_0_reg_36_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_35to36_bb3__72_0_stall_in_0_reg_36_NO_SHIFT_REG),
	.valid_out(rnode_35to36_bb3__72_0_valid_out_0_reg_36_NO_SHIFT_REG),
	.stall_out(rnode_35to36_bb3__72_0_stall_out_reg_36_NO_SHIFT_REG),
	.data_in(rnode_5to35_bb3__72_0_NO_SHIFT_REG),
	.data_out(rnode_35to36_bb3__72_0_reg_36_NO_SHIFT_REG)
);

defparam rnode_35to36_bb3__72_0_reg_36_fifo.DEPTH = 1;
defparam rnode_35to36_bb3__72_0_reg_36_fifo.DATA_WIDTH = 32;
defparam rnode_35to36_bb3__72_0_reg_36_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_35to36_bb3__72_0_reg_36_fifo.IMPL = "shift_reg";

assign rnode_35to36_bb3__72_0_reg_36_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_5to35_bb3__72_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_35to36_bb3__72_0_stall_in_0_reg_36_NO_SHIFT_REG = 1'b0;
assign rnode_35to36_bb3__72_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_35to36_bb3__72_0_NO_SHIFT_REG = rnode_35to36_bb3__72_0_reg_36_NO_SHIFT_REG;
assign rnode_35to36_bb3__72_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_35to36_bb3__72_1_NO_SHIFT_REG = rnode_35to36_bb3__72_0_reg_36_NO_SHIFT_REG;
assign rnode_35to36_bb3__72_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_35to36_bb3__72_2_NO_SHIFT_REG = rnode_35to36_bb3__72_0_reg_36_NO_SHIFT_REG;
assign rnode_35to36_bb3__72_0_valid_out_3_NO_SHIFT_REG = 1'b1;
assign rnode_35to36_bb3__72_3_NO_SHIFT_REG = rnode_35to36_bb3__72_0_reg_36_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb3_cmp30_stall_local;
wire local_bb3_cmp30;

assign local_bb3_cmp30 = ($signed(rnode_35to36_bb3__72_0_NO_SHIFT_REG) > $signed(32'h0));

// This section implements an unregistered operation.
// 
wire local_bb3_cmp3541_stall_local;
wire local_bb3_cmp3541;

assign local_bb3_cmp3541 = ($signed(rnode_35to36_bb3__72_1_NO_SHIFT_REG) > $signed(32'h3));

// This section implements an unregistered operation.
// 
wire local_bb3_var__stall_local;
wire local_bb3_var_;

assign local_bb3_var_ = ($signed(rnode_35to36_bb3__72_2_NO_SHIFT_REG) > $signed(32'h7));

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exi232_stall_local;
wire [191:0] local_bb3_c0_exi232;

assign local_bb3_c0_exi232[63:0] = local_bb3_c0_exi131[63:0];
assign local_bb3_c0_exi232[95:64] = rnode_35to36_bb3__72_3_NO_SHIFT_REG;
assign local_bb3_c0_exi232[191:96] = local_bb3_c0_exi131[191:96];

// This section implements an unregistered operation.
// 
wire local_bb3__phi_decision136_xor_stall_local;
wire local_bb3__phi_decision136_xor;

assign local_bb3__phi_decision136_xor = (local_bb3_cmp3541 ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exi333_stall_local;
wire [191:0] local_bb3_c0_exi333;

assign local_bb3_c0_exi333[95:0] = local_bb3_c0_exi232[95:0];
assign local_bb3_c0_exi333[96] = local_bb3_cmp30;
assign local_bb3_c0_exi333[191:97] = local_bb3_c0_exi232[191:97];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exi434_stall_local;
wire [191:0] local_bb3_c0_exi434;

assign local_bb3_c0_exi434[127:0] = local_bb3_c0_exi333[127:0];
assign local_bb3_c0_exi434[159:128] = local_bb3_div32;
assign local_bb3_c0_exi434[191:160] = local_bb3_c0_exi333[191:160];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exi535_stall_local;
wire [191:0] local_bb3_c0_exi535;

assign local_bb3_c0_exi535[159:0] = local_bb3_c0_exi434[159:0];
assign local_bb3_c0_exi535[160] = local_bb3_cmp3541;
assign local_bb3_c0_exi535[191:161] = local_bb3_c0_exi434[191:161];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exi636_stall_local;
wire [191:0] local_bb3_c0_exi636;

assign local_bb3_c0_exi636[167:0] = local_bb3_c0_exi535[167:0];
assign local_bb3_c0_exi636[168] = local_bb3_var_;
assign local_bb3_c0_exi636[191:169] = local_bb3_c0_exi535[191:169];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exi7_valid_out;
wire local_bb3_c0_exi7_stall_in;
wire local_bb3_c0_exi7_inputs_ready;
wire local_bb3_c0_exi7_stall_local;
wire [191:0] local_bb3_c0_exi7;

assign local_bb3_c0_exi7_inputs_ready = (rnode_35to36_bb3_mul_0_valid_out_NO_SHIFT_REG & rnode_35to36_bb3__72_0_valid_out_3_NO_SHIFT_REG & local_bb3_div32_valid_out_NO_SHIFT_REG & rnode_35to36_bb3__72_0_valid_out_0_NO_SHIFT_REG & rnode_35to36_bb3__72_0_valid_out_1_NO_SHIFT_REG & rnode_35to36_bb3__72_0_valid_out_2_NO_SHIFT_REG);
assign local_bb3_c0_exi7[175:0] = local_bb3_c0_exi636[175:0];
assign local_bb3_c0_exi7[176] = local_bb3__phi_decision136_xor;
assign local_bb3_c0_exi7[191:177] = local_bb3_c0_exi636[191:177];
assign local_bb3_c0_exi7_valid_out = 1'b1;
assign rnode_35to36_bb3_mul_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_35to36_bb3__72_0_stall_in_3_NO_SHIFT_REG = 1'b0;
assign local_bb3_div32_stall_in = 1'b0;
assign rnode_35to36_bb3__72_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_35to36_bb3__72_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_35to36_bb3__72_0_stall_in_2_NO_SHIFT_REG = 1'b0;

// This section implements a registered operation.
// 
wire local_bb3_c0_exit37_c0_exi7_inputs_ready;
 reg local_bb3_c0_exit37_c0_exi7_valid_out_0_NO_SHIFT_REG;
wire local_bb3_c0_exit37_c0_exi7_stall_in_0;
 reg local_bb3_c0_exit37_c0_exi7_valid_out_1_NO_SHIFT_REG;
wire local_bb3_c0_exit37_c0_exi7_stall_in_1;
 reg local_bb3_c0_exit37_c0_exi7_valid_out_2_NO_SHIFT_REG;
wire local_bb3_c0_exit37_c0_exi7_stall_in_2;
 reg local_bb3_c0_exit37_c0_exi7_valid_out_3_NO_SHIFT_REG;
wire local_bb3_c0_exit37_c0_exi7_stall_in_3;
 reg local_bb3_c0_exit37_c0_exi7_valid_out_4_NO_SHIFT_REG;
wire local_bb3_c0_exit37_c0_exi7_stall_in_4;
 reg local_bb3_c0_exit37_c0_exi7_valid_out_5_NO_SHIFT_REG;
wire local_bb3_c0_exit37_c0_exi7_stall_in_5;
 reg local_bb3_c0_exit37_c0_exi7_valid_out_6_NO_SHIFT_REG;
wire local_bb3_c0_exit37_c0_exi7_stall_in_6;
 reg [191:0] local_bb3_c0_exit37_c0_exi7_NO_SHIFT_REG;
wire [191:0] local_bb3_c0_exit37_c0_exi7_in;
wire local_bb3_c0_exit37_c0_exi7_valid;
wire local_bb3_c0_exit37_c0_exi7_causedstall;

acl_stall_free_sink local_bb3_c0_exit37_c0_exi7_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb3_c0_exi7),
	.data_out(local_bb3_c0_exit37_c0_exi7_in),
	.input_accepted(local_bb3_c0_enter29_c0_eni128_input_accepted),
	.valid_out(local_bb3_c0_exit37_c0_exi7_valid),
	.stall_in(~(local_bb3_c0_exit37_c0_exi7_output_regs_ready)),
	.stall_entry(local_bb3_c0_exit37_c0_exi7_entry_stall),
	.valids(local_bb3_c0_exit37_c0_exi7_valid_bits),
	.IIphases(local_bb3_c0_exit37_c0_exi7_phases),
	.inc_pipelined_thread(local_bb3_c0_enter29_c0_eni128_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb3_c0_enter29_c0_eni128_dec_pipelined_thread)
);

defparam local_bb3_c0_exit37_c0_exi7_instance.DATA_WIDTH = 192;
defparam local_bb3_c0_exit37_c0_exi7_instance.PIPELINE_DEPTH = 40;
defparam local_bb3_c0_exit37_c0_exi7_instance.SHARINGII = 1;
defparam local_bb3_c0_exit37_c0_exi7_instance.SCHEDULEII = 1;

assign local_bb3_c0_exit37_c0_exi7_inputs_ready = 1'b1;
assign local_bb3_c0_exit37_c0_exi7_output_regs_ready = ((~(local_bb3_c0_exit37_c0_exi7_valid_out_0_NO_SHIFT_REG) | ~(local_bb3_c0_exit37_c0_exi7_stall_in_0)) & (~(local_bb3_c0_exit37_c0_exi7_valid_out_1_NO_SHIFT_REG) | ~(local_bb3_c0_exit37_c0_exi7_stall_in_1)) & (~(local_bb3_c0_exit37_c0_exi7_valid_out_2_NO_SHIFT_REG) | ~(local_bb3_c0_exit37_c0_exi7_stall_in_2)) & (~(local_bb3_c0_exit37_c0_exi7_valid_out_3_NO_SHIFT_REG) | ~(local_bb3_c0_exit37_c0_exi7_stall_in_3)) & (~(local_bb3_c0_exit37_c0_exi7_valid_out_4_NO_SHIFT_REG) | ~(local_bb3_c0_exit37_c0_exi7_stall_in_4)) & (~(local_bb3_c0_exit37_c0_exi7_valid_out_5_NO_SHIFT_REG) | ~(local_bb3_c0_exit37_c0_exi7_stall_in_5)) & (~(local_bb3_c0_exit37_c0_exi7_valid_out_6_NO_SHIFT_REG) | ~(local_bb3_c0_exit37_c0_exi7_stall_in_6)));
assign local_bb3_c0_exi7_stall_in = 1'b0;
assign local_bb3_c0_exit37_c0_exi7_causedstall = (1'b1 && (1'b0 && !(~(local_bb3_c0_exit37_c0_exi7_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_c0_exit37_c0_exi7_NO_SHIFT_REG <= 'x;
		local_bb3_c0_exit37_c0_exi7_valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_c0_exit37_c0_exi7_valid_out_1_NO_SHIFT_REG <= 1'b0;
		local_bb3_c0_exit37_c0_exi7_valid_out_2_NO_SHIFT_REG <= 1'b0;
		local_bb3_c0_exit37_c0_exi7_valid_out_3_NO_SHIFT_REG <= 1'b0;
		local_bb3_c0_exit37_c0_exi7_valid_out_4_NO_SHIFT_REG <= 1'b0;
		local_bb3_c0_exit37_c0_exi7_valid_out_5_NO_SHIFT_REG <= 1'b0;
		local_bb3_c0_exit37_c0_exi7_valid_out_6_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb3_c0_exit37_c0_exi7_output_regs_ready)
		begin
			local_bb3_c0_exit37_c0_exi7_NO_SHIFT_REG <= local_bb3_c0_exit37_c0_exi7_in;
			local_bb3_c0_exit37_c0_exi7_valid_out_0_NO_SHIFT_REG <= local_bb3_c0_exit37_c0_exi7_valid;
			local_bb3_c0_exit37_c0_exi7_valid_out_1_NO_SHIFT_REG <= local_bb3_c0_exit37_c0_exi7_valid;
			local_bb3_c0_exit37_c0_exi7_valid_out_2_NO_SHIFT_REG <= local_bb3_c0_exit37_c0_exi7_valid;
			local_bb3_c0_exit37_c0_exi7_valid_out_3_NO_SHIFT_REG <= local_bb3_c0_exit37_c0_exi7_valid;
			local_bb3_c0_exit37_c0_exi7_valid_out_4_NO_SHIFT_REG <= local_bb3_c0_exit37_c0_exi7_valid;
			local_bb3_c0_exit37_c0_exi7_valid_out_5_NO_SHIFT_REG <= local_bb3_c0_exit37_c0_exi7_valid;
			local_bb3_c0_exit37_c0_exi7_valid_out_6_NO_SHIFT_REG <= local_bb3_c0_exit37_c0_exi7_valid;
		end
		else
		begin
			if (~(local_bb3_c0_exit37_c0_exi7_stall_in_0))
			begin
				local_bb3_c0_exit37_c0_exi7_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb3_c0_exit37_c0_exi7_stall_in_1))
			begin
				local_bb3_c0_exit37_c0_exi7_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb3_c0_exit37_c0_exi7_stall_in_2))
			begin
				local_bb3_c0_exit37_c0_exi7_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb3_c0_exit37_c0_exi7_stall_in_3))
			begin
				local_bb3_c0_exit37_c0_exi7_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb3_c0_exit37_c0_exi7_stall_in_4))
			begin
				local_bb3_c0_exit37_c0_exi7_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb3_c0_exit37_c0_exi7_stall_in_5))
			begin
				local_bb3_c0_exit37_c0_exi7_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb3_c0_exit37_c0_exi7_stall_in_6))
			begin
				local_bb3_c0_exit37_c0_exi7_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb3_c0_exe138_stall_local;
wire [31:0] local_bb3_c0_exe138;

assign local_bb3_c0_exe138 = local_bb3_c0_exit37_c0_exi7_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exe239_stall_local;
wire [31:0] local_bb3_c0_exe239;

assign local_bb3_c0_exe239 = local_bb3_c0_exit37_c0_exi7_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exe340_stall_local;
wire local_bb3_c0_exe340;

assign local_bb3_c0_exe340 = local_bb3_c0_exit37_c0_exi7_NO_SHIFT_REG[96];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exe441_stall_local;
wire [31:0] local_bb3_c0_exe441;

assign local_bb3_c0_exe441 = local_bb3_c0_exit37_c0_exi7_NO_SHIFT_REG[159:128];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exe542_stall_local;
wire local_bb3_c0_exe542;

assign local_bb3_c0_exe542 = local_bb3_c0_exit37_c0_exi7_NO_SHIFT_REG[160];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exe643_stall_local;
wire local_bb3_c0_exe643;

assign local_bb3_c0_exe643 = local_bb3_c0_exit37_c0_exi7_NO_SHIFT_REG[168];

// This section implements an unregistered operation.
// 
wire local_bb3_c0_exe7_valid_out;
wire local_bb3_c0_exe7_stall_in;
 reg local_bb3_c0_exe7_consumed_0_NO_SHIFT_REG;
wire local_bb3_c0_exe643_valid_out;
wire local_bb3_c0_exe643_stall_in;
 reg local_bb3_c0_exe643_consumed_0_NO_SHIFT_REG;
wire local_bb3_c0_exe542_valid_out;
wire local_bb3_c0_exe542_stall_in;
 reg local_bb3_c0_exe542_consumed_0_NO_SHIFT_REG;
wire local_bb3_c0_exe441_valid_out;
wire local_bb3_c0_exe441_stall_in;
 reg local_bb3_c0_exe441_consumed_0_NO_SHIFT_REG;
wire local_bb3_c0_exe340_valid_out;
wire local_bb3_c0_exe340_stall_in;
 reg local_bb3_c0_exe340_consumed_0_NO_SHIFT_REG;
wire local_bb3_c0_exe239_valid_out;
wire local_bb3_c0_exe239_stall_in;
 reg local_bb3_c0_exe239_consumed_0_NO_SHIFT_REG;
wire local_bb3_c0_exe138_valid_out;
wire local_bb3_c0_exe138_stall_in;
 reg local_bb3_c0_exe138_consumed_0_NO_SHIFT_REG;
wire local_bb3_c0_exe7_inputs_ready;
wire local_bb3_c0_exe7_stall_local;
wire local_bb3_c0_exe7;

assign local_bb3_c0_exe7_inputs_ready = (local_bb3_c0_exit37_c0_exi7_valid_out_6_NO_SHIFT_REG & local_bb3_c0_exit37_c0_exi7_valid_out_5_NO_SHIFT_REG & local_bb3_c0_exit37_c0_exi7_valid_out_4_NO_SHIFT_REG & local_bb3_c0_exit37_c0_exi7_valid_out_3_NO_SHIFT_REG & local_bb3_c0_exit37_c0_exi7_valid_out_2_NO_SHIFT_REG & local_bb3_c0_exit37_c0_exi7_valid_out_1_NO_SHIFT_REG & local_bb3_c0_exit37_c0_exi7_valid_out_0_NO_SHIFT_REG);
assign local_bb3_c0_exe7 = local_bb3_c0_exit37_c0_exi7_NO_SHIFT_REG[176];
assign local_bb3_c0_exe7_stall_local = ((local_bb3_c0_exe7_stall_in & ~(local_bb3_c0_exe7_consumed_0_NO_SHIFT_REG)) | (local_bb3_c0_exe643_stall_in & ~(local_bb3_c0_exe643_consumed_0_NO_SHIFT_REG)) | (local_bb3_c0_exe542_stall_in & ~(local_bb3_c0_exe542_consumed_0_NO_SHIFT_REG)) | (local_bb3_c0_exe441_stall_in & ~(local_bb3_c0_exe441_consumed_0_NO_SHIFT_REG)) | (local_bb3_c0_exe340_stall_in & ~(local_bb3_c0_exe340_consumed_0_NO_SHIFT_REG)) | (local_bb3_c0_exe239_stall_in & ~(local_bb3_c0_exe239_consumed_0_NO_SHIFT_REG)) | (local_bb3_c0_exe138_stall_in & ~(local_bb3_c0_exe138_consumed_0_NO_SHIFT_REG)));
assign local_bb3_c0_exe7_valid_out = (local_bb3_c0_exe7_inputs_ready & ~(local_bb3_c0_exe7_consumed_0_NO_SHIFT_REG));
assign local_bb3_c0_exe643_valid_out = (local_bb3_c0_exe7_inputs_ready & ~(local_bb3_c0_exe643_consumed_0_NO_SHIFT_REG));
assign local_bb3_c0_exe542_valid_out = (local_bb3_c0_exe7_inputs_ready & ~(local_bb3_c0_exe542_consumed_0_NO_SHIFT_REG));
assign local_bb3_c0_exe441_valid_out = (local_bb3_c0_exe7_inputs_ready & ~(local_bb3_c0_exe441_consumed_0_NO_SHIFT_REG));
assign local_bb3_c0_exe340_valid_out = (local_bb3_c0_exe7_inputs_ready & ~(local_bb3_c0_exe340_consumed_0_NO_SHIFT_REG));
assign local_bb3_c0_exe239_valid_out = (local_bb3_c0_exe7_inputs_ready & ~(local_bb3_c0_exe239_consumed_0_NO_SHIFT_REG));
assign local_bb3_c0_exe138_valid_out = (local_bb3_c0_exe7_inputs_ready & ~(local_bb3_c0_exe138_consumed_0_NO_SHIFT_REG));
assign local_bb3_c0_exit37_c0_exi7_stall_in_6 = (local_bb3_c0_exe7_stall_local | ~(local_bb3_c0_exe7_inputs_ready));
assign local_bb3_c0_exit37_c0_exi7_stall_in_5 = (local_bb3_c0_exe7_stall_local | ~(local_bb3_c0_exe7_inputs_ready));
assign local_bb3_c0_exit37_c0_exi7_stall_in_4 = (local_bb3_c0_exe7_stall_local | ~(local_bb3_c0_exe7_inputs_ready));
assign local_bb3_c0_exit37_c0_exi7_stall_in_3 = (local_bb3_c0_exe7_stall_local | ~(local_bb3_c0_exe7_inputs_ready));
assign local_bb3_c0_exit37_c0_exi7_stall_in_2 = (local_bb3_c0_exe7_stall_local | ~(local_bb3_c0_exe7_inputs_ready));
assign local_bb3_c0_exit37_c0_exi7_stall_in_1 = (local_bb3_c0_exe7_stall_local | ~(local_bb3_c0_exe7_inputs_ready));
assign local_bb3_c0_exit37_c0_exi7_stall_in_0 = (local_bb3_c0_exe7_stall_local | ~(local_bb3_c0_exe7_inputs_ready));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb3_c0_exe7_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_c0_exe643_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_c0_exe542_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_c0_exe441_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_c0_exe340_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_c0_exe239_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb3_c0_exe138_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb3_c0_exe7_consumed_0_NO_SHIFT_REG <= (local_bb3_c0_exe7_inputs_ready & (local_bb3_c0_exe7_consumed_0_NO_SHIFT_REG | ~(local_bb3_c0_exe7_stall_in)) & local_bb3_c0_exe7_stall_local);
		local_bb3_c0_exe643_consumed_0_NO_SHIFT_REG <= (local_bb3_c0_exe7_inputs_ready & (local_bb3_c0_exe643_consumed_0_NO_SHIFT_REG | ~(local_bb3_c0_exe643_stall_in)) & local_bb3_c0_exe7_stall_local);
		local_bb3_c0_exe542_consumed_0_NO_SHIFT_REG <= (local_bb3_c0_exe7_inputs_ready & (local_bb3_c0_exe542_consumed_0_NO_SHIFT_REG | ~(local_bb3_c0_exe542_stall_in)) & local_bb3_c0_exe7_stall_local);
		local_bb3_c0_exe441_consumed_0_NO_SHIFT_REG <= (local_bb3_c0_exe7_inputs_ready & (local_bb3_c0_exe441_consumed_0_NO_SHIFT_REG | ~(local_bb3_c0_exe441_stall_in)) & local_bb3_c0_exe7_stall_local);
		local_bb3_c0_exe340_consumed_0_NO_SHIFT_REG <= (local_bb3_c0_exe7_inputs_ready & (local_bb3_c0_exe340_consumed_0_NO_SHIFT_REG | ~(local_bb3_c0_exe340_stall_in)) & local_bb3_c0_exe7_stall_local);
		local_bb3_c0_exe239_consumed_0_NO_SHIFT_REG <= (local_bb3_c0_exe7_inputs_ready & (local_bb3_c0_exe239_consumed_0_NO_SHIFT_REG | ~(local_bb3_c0_exe239_stall_in)) & local_bb3_c0_exe7_stall_local);
		local_bb3_c0_exe138_consumed_0_NO_SHIFT_REG <= (local_bb3_c0_exe7_inputs_ready & (local_bb3_c0_exe138_consumed_0_NO_SHIFT_REG | ~(local_bb3_c0_exe138_stall_in)) & local_bb3_c0_exe7_stall_local);
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_c0_exe6_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb3_c0_exe5_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb3_c0_exe4_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb3_c0_exe138_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb3_c0_exe239_reg_NO_SHIFT_REG;
 reg lvb_bb3_c0_exe340_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb3_c0_exe441_reg_NO_SHIFT_REG;
 reg lvb_bb3_c0_exe542_reg_NO_SHIFT_REG;
 reg lvb_bb3_c0_exe643_reg_NO_SHIFT_REG;
 reg lvb_bb3_c0_exe7_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb3_c0_exe7_valid_out & local_bb3_c0_exe643_valid_out & local_bb3_c0_exe542_valid_out & local_bb3_c0_exe441_valid_out & local_bb3_c0_exe340_valid_out & local_bb3_c0_exe239_valid_out & local_bb3_c0_exe138_valid_out & rnode_40to41_c0_exe6_0_valid_out_NO_SHIFT_REG & rnode_40to41_bb3_c0_exe5_0_valid_out_NO_SHIFT_REG & rnode_40to41_bb3_c0_exe4_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign local_bb3_c0_exe7_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb3_c0_exe643_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb3_c0_exe542_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb3_c0_exe441_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb3_c0_exe340_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb3_c0_exe239_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb3_c0_exe138_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_40to41_c0_exe6_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_40to41_bb3_c0_exe5_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_40to41_bb3_c0_exe4_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_c0_exe6 = lvb_c0_exe6_reg_NO_SHIFT_REG;
assign lvb_bb3_c0_exe5 = lvb_bb3_c0_exe5_reg_NO_SHIFT_REG;
assign lvb_bb3_c0_exe4 = lvb_bb3_c0_exe4_reg_NO_SHIFT_REG;
assign lvb_bb3_c0_exe138 = lvb_bb3_c0_exe138_reg_NO_SHIFT_REG;
assign lvb_bb3_c0_exe239 = lvb_bb3_c0_exe239_reg_NO_SHIFT_REG;
assign lvb_bb3_c0_exe340 = lvb_bb3_c0_exe340_reg_NO_SHIFT_REG;
assign lvb_bb3_c0_exe441 = lvb_bb3_c0_exe441_reg_NO_SHIFT_REG;
assign lvb_bb3_c0_exe542 = lvb_bb3_c0_exe542_reg_NO_SHIFT_REG;
assign lvb_bb3_c0_exe643 = lvb_bb3_c0_exe643_reg_NO_SHIFT_REG;
assign lvb_bb3_c0_exe7 = lvb_bb3_c0_exe7_reg_NO_SHIFT_REG;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_c0_exe6_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c0_exe5_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c0_exe4_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c0_exe138_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c0_exe239_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c0_exe340_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c0_exe441_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c0_exe542_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c0_exe643_reg_NO_SHIFT_REG <= 'x;
		lvb_bb3_c0_exe7_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_c0_exe6_reg_NO_SHIFT_REG <= rnode_40to41_c0_exe6_0_NO_SHIFT_REG;
			lvb_bb3_c0_exe5_reg_NO_SHIFT_REG <= rnode_40to41_bb3_c0_exe5_0_NO_SHIFT_REG;
			lvb_bb3_c0_exe4_reg_NO_SHIFT_REG <= rnode_40to41_bb3_c0_exe4_0_NO_SHIFT_REG;
			lvb_bb3_c0_exe138_reg_NO_SHIFT_REG <= local_bb3_c0_exe138;
			lvb_bb3_c0_exe239_reg_NO_SHIFT_REG <= local_bb3_c0_exe239;
			lvb_bb3_c0_exe340_reg_NO_SHIFT_REG <= local_bb3_c0_exe340;
			lvb_bb3_c0_exe441_reg_NO_SHIFT_REG <= local_bb3_c0_exe441;
			lvb_bb3_c0_exe542_reg_NO_SHIFT_REG <= local_bb3_c0_exe542;
			lvb_bb3_c0_exe643_reg_NO_SHIFT_REG <= local_bb3_c0_exe643;
			lvb_bb3_c0_exe7_reg_NO_SHIFT_REG <= local_bb3_c0_exe7;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

module sha256_basic_block_4
	(
		input 		clock,
		input 		resetn,
		input [63:0] 		input_key,
		input [31:0] 		input_wii_ld_,
		input [31:0] 		input_wii_mul158,
		input [31:0] 		input_wii__,
		input 		input_wii_cmp166_xor,
		input [63:0] 		input_wii_memcoalesce_digest_bitcast_08,
		input [511:0] 		input_wii_memcoalesce_null_insertValue_0,
		input 		valid_in_0,
		output 		stall_out_0,
		input 		input_forked18_0,
		input [31:0] 		input_var__0,
		input [31:0] 		input_var__u2_0,
		input [31:0] 		input_i9_05219_0,
		input [31:0] 		input_mul20_0,
		input [31:0] 		input__7221_0,
		input 		input_cmp3022_0,
		input [31:0] 		input_div3223_0,
		input 		input_cmp354124_0,
		input 		input_var__u3_0,
		input 		input__phi_decision136_xor25_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input 		input_forked18_1,
		input [31:0] 		input_var__1,
		input [31:0] 		input_var__u2_1,
		input [31:0] 		input_i9_05219_1,
		input [31:0] 		input_mul20_1,
		input [31:0] 		input__7221_1,
		input 		input_cmp3022_1,
		input [31:0] 		input_div3223_1,
		input 		input_cmp354124_1,
		input 		input_var__u3_1,
		input 		input__phi_decision136_xor25_1,
		output 		valid_out_0,
		input 		stall_in_0,
		output [511:0] 		lvb_bb4_c0_exit60_c0_exi14_0,
		output [31:0] 		lvb_bb4_c0_exe565_0,
		output 		lvb_bb4_c0_exe767_0,
		output [31:0] 		lvb_bb4_c0_exe9_0,
		output [31:0] 		lvb_bb4_c0_exe10_0,
		output 		lvb_bb4_c0_exe13_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output [511:0] 		lvb_bb4_c0_exit60_c0_exi14_1,
		output [31:0] 		lvb_bb4_c0_exe565_1,
		output 		lvb_bb4_c0_exe767_1,
		output [31:0] 		lvb_bb4_c0_exe9_1,
		output [31:0] 		lvb_bb4_c0_exe10_1,
		output 		lvb_bb4_c0_exe13_1,
		input [31:0] 		workgroup_size,
		input 		start,
		input 		feedback_valid_in_22,
		output 		feedback_stall_out_22,
		input [63:0] 		feedback_data_in_22,
		input 		feedback_valid_in_29,
		output 		feedback_stall_out_29,
		input [31:0] 		feedback_data_in_29,
		input 		feedback_valid_in_30,
		output 		feedback_stall_out_30,
		input 		feedback_data_in_30,
		output 		feedback_stall_out_2,
		input 		feedback_valid_in_3,
		output 		feedback_stall_out_3,
		input 		feedback_data_in_3,
		output 		acl_pipelined_valid,
		input 		acl_pipelined_stall,
		output 		acl_pipelined_exiting_valid,
		output 		acl_pipelined_exiting_stall,
		output 		feedback_valid_out_3,
		input 		feedback_stall_in_3,
		output 		feedback_data_out_3,
		output 		feedback_valid_out_22,
		input 		feedback_stall_in_22,
		output [63:0] 		feedback_data_out_22,
		input 		feedback_valid_in_26,
		output 		feedback_stall_out_26,
		input [31:0] 		feedback_data_in_26,
		input 		feedback_valid_in_32,
		output 		feedback_stall_out_32,
		input 		feedback_data_in_32,
		input 		feedback_valid_in_23,
		output 		feedback_stall_out_23,
		input [31:0] 		feedback_data_in_23,
		input 		feedback_valid_in_24,
		output 		feedback_stall_out_24,
		input [31:0] 		feedback_data_in_24,
		input 		feedback_valid_in_25,
		output 		feedback_stall_out_25,
		input [31:0] 		feedback_data_in_25,
		input 		feedback_valid_in_27,
		output 		feedback_stall_out_27,
		input [31:0] 		feedback_data_in_27,
		input 		feedback_valid_in_28,
		output 		feedback_stall_out_28,
		input 		feedback_data_in_28,
		input 		feedback_valid_in_31,
		output 		feedback_stall_out_31,
		input 		feedback_data_in_31,
		output 		feedback_valid_out_30,
		input 		feedback_stall_in_30,
		output 		feedback_data_out_30,
		output 		feedback_valid_out_29,
		input 		feedback_stall_in_29,
		output [31:0] 		feedback_data_out_29,
		output 		feedback_valid_out_26,
		input 		feedback_stall_in_26,
		output [31:0] 		feedback_data_out_26,
		output 		feedback_valid_out_32,
		input 		feedback_stall_in_32,
		output 		feedback_data_out_32,
		output 		feedback_valid_out_23,
		input 		feedback_stall_in_23,
		output [31:0] 		feedback_data_out_23,
		output 		feedback_valid_out_24,
		input 		feedback_stall_in_24,
		output [31:0] 		feedback_data_out_24,
		output 		feedback_valid_out_25,
		input 		feedback_stall_in_25,
		output [31:0] 		feedback_data_out_25,
		output 		feedback_valid_out_27,
		input 		feedback_stall_in_27,
		output [31:0] 		feedback_data_out_27,
		output 		feedback_valid_out_28,
		input 		feedback_stall_in_28,
		output 		feedback_data_out_28,
		output 		feedback_valid_out_31,
		input 		feedback_stall_in_31,
		output 		feedback_data_out_31,
		input [255:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_readdata,
		input 		avm_local_bb4_ld_memcoalesce_key_load_0_readdatavalid,
		input 		avm_local_bb4_ld_memcoalesce_key_load_0_waitrequest,
		output [29:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_address,
		output 		avm_local_bb4_ld_memcoalesce_key_load_0_read,
		output 		avm_local_bb4_ld_memcoalesce_key_load_0_write,
		input 		avm_local_bb4_ld_memcoalesce_key_load_0_writeack,
		output [255:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_writedata,
		output [31:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_byteenable,
		output [4:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_burstcount,
		output 		local_bb4_ld_memcoalesce_key_load_0_active,
		input 		clock2x,
		input [511:0] 		avm_local_bb4_st_reduction_2_readdata,
		input 		avm_local_bb4_st_reduction_2_readdatavalid,
		input 		avm_local_bb4_st_reduction_2_waitrequest,
		output [31:0] 		avm_local_bb4_st_reduction_2_address,
		output 		avm_local_bb4_st_reduction_2_read,
		output 		avm_local_bb4_st_reduction_2_write,
		input 		avm_local_bb4_st_reduction_2_writeack,
		output [511:0] 		avm_local_bb4_st_reduction_2_writedata,
		output [63:0] 		avm_local_bb4_st_reduction_2_byteenable,
		output 		avm_local_bb4_st_reduction_2_burstcount,
		output [7:0] 		local_bb4_st_reduction_2_input_fifo_depth,
		output 		local_bb4_st_reduction_2_active
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_node_stall_in_5;
 reg merge_node_valid_out_5_NO_SHIFT_REG;
wire merge_node_stall_in_6;
 reg merge_node_valid_out_6_NO_SHIFT_REG;
wire merge_node_stall_in_7;
 reg merge_node_valid_out_7_NO_SHIFT_REG;
wire merge_node_stall_in_8;
 reg merge_node_valid_out_8_NO_SHIFT_REG;
wire merge_node_stall_in_9;
 reg merge_node_valid_out_9_NO_SHIFT_REG;
wire merge_node_stall_in_10;
 reg merge_node_valid_out_10_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg input_forked18_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u2_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_i9_05219_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul20_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input__7221_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp3022_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_div3223_0_staging_reg_NO_SHIFT_REG;
 reg input_cmp354124_0_staging_reg_NO_SHIFT_REG;
 reg input_var__u3_0_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision136_xor25_0_staging_reg_NO_SHIFT_REG;
 reg local_lvm_forked18_NO_SHIFT_REG;
 reg [31:0] local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_var__u2_NO_SHIFT_REG;
 reg [31:0] local_lvm_i9_05219_NO_SHIFT_REG;
 reg [31:0] local_lvm_mul20_NO_SHIFT_REG;
 reg [31:0] local_lvm__7221_NO_SHIFT_REG;
 reg local_lvm_cmp3022_NO_SHIFT_REG;
 reg [31:0] local_lvm_div3223_NO_SHIFT_REG;
 reg local_lvm_cmp354124_NO_SHIFT_REG;
 reg local_lvm_var__u3_NO_SHIFT_REG;
 reg local_lvm__phi_decision136_xor25_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg input_forked18_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u2_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_i9_05219_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_mul20_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input__7221_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp3022_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_div3223_1_staging_reg_NO_SHIFT_REG;
 reg input_cmp354124_1_staging_reg_NO_SHIFT_REG;
 reg input_var__u3_1_staging_reg_NO_SHIFT_REG;
 reg input__phi_decision136_xor25_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG) | (merge_node_stall_in_5 & merge_node_valid_out_5_NO_SHIFT_REG) | (merge_node_stall_in_6 & merge_node_valid_out_6_NO_SHIFT_REG) | (merge_node_stall_in_7 & merge_node_valid_out_7_NO_SHIFT_REG) | (merge_node_stall_in_8 & merge_node_valid_out_8_NO_SHIFT_REG) | (merge_node_stall_in_9 & merge_node_valid_out_9_NO_SHIFT_REG) | (merge_node_stall_in_10 & merge_node_valid_out_10_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_forked18_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u2_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_i9_05219_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul20_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__7221_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp3022_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_div3223_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp354124_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u3_0_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision136_xor25_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_forked18_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u2_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_i9_05219_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_mul20_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__7221_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp3022_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_div3223_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_cmp354124_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u3_1_staging_reg_NO_SHIFT_REG <= 'x;
		input__phi_decision136_xor25_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_forked18_0_staging_reg_NO_SHIFT_REG <= input_forked18_0;
				input_var__0_staging_reg_NO_SHIFT_REG <= input_var__0;
				input_var__u2_0_staging_reg_NO_SHIFT_REG <= input_var__u2_0;
				input_i9_05219_0_staging_reg_NO_SHIFT_REG <= input_i9_05219_0;
				input_mul20_0_staging_reg_NO_SHIFT_REG <= input_mul20_0;
				input__7221_0_staging_reg_NO_SHIFT_REG <= input__7221_0;
				input_cmp3022_0_staging_reg_NO_SHIFT_REG <= input_cmp3022_0;
				input_div3223_0_staging_reg_NO_SHIFT_REG <= input_div3223_0;
				input_cmp354124_0_staging_reg_NO_SHIFT_REG <= input_cmp354124_0;
				input_var__u3_0_staging_reg_NO_SHIFT_REG <= input_var__u3_0;
				input__phi_decision136_xor25_0_staging_reg_NO_SHIFT_REG <= input__phi_decision136_xor25_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_forked18_1_staging_reg_NO_SHIFT_REG <= input_forked18_1;
				input_var__1_staging_reg_NO_SHIFT_REG <= input_var__1;
				input_var__u2_1_staging_reg_NO_SHIFT_REG <= input_var__u2_1;
				input_i9_05219_1_staging_reg_NO_SHIFT_REG <= input_i9_05219_1;
				input_mul20_1_staging_reg_NO_SHIFT_REG <= input_mul20_1;
				input__7221_1_staging_reg_NO_SHIFT_REG <= input__7221_1;
				input_cmp3022_1_staging_reg_NO_SHIFT_REG <= input_cmp3022_1;
				input_div3223_1_staging_reg_NO_SHIFT_REG <= input_div3223_1;
				input_cmp354124_1_staging_reg_NO_SHIFT_REG <= input_cmp354124_1;
				input_var__u3_1_staging_reg_NO_SHIFT_REG <= input_var__u3_1;
				input__phi_decision136_xor25_1_staging_reg_NO_SHIFT_REG <= input__phi_decision136_xor25_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_forked18_NO_SHIFT_REG <= input_forked18_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u2_NO_SHIFT_REG <= input_var__u2_0_staging_reg_NO_SHIFT_REG;
					local_lvm_i9_05219_NO_SHIFT_REG <= input_i9_05219_0_staging_reg_NO_SHIFT_REG;
					local_lvm_mul20_NO_SHIFT_REG <= input_mul20_0_staging_reg_NO_SHIFT_REG;
					local_lvm__7221_NO_SHIFT_REG <= input__7221_0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp3022_NO_SHIFT_REG <= input_cmp3022_0_staging_reg_NO_SHIFT_REG;
					local_lvm_div3223_NO_SHIFT_REG <= input_div3223_0_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp354124_NO_SHIFT_REG <= input_cmp354124_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u3_NO_SHIFT_REG <= input_var__u3_0_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision136_xor25_NO_SHIFT_REG <= input__phi_decision136_xor25_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_forked18_NO_SHIFT_REG <= input_forked18_0;
					local_lvm_var__NO_SHIFT_REG <= input_var__0;
					local_lvm_var__u2_NO_SHIFT_REG <= input_var__u2_0;
					local_lvm_i9_05219_NO_SHIFT_REG <= input_i9_05219_0;
					local_lvm_mul20_NO_SHIFT_REG <= input_mul20_0;
					local_lvm__7221_NO_SHIFT_REG <= input__7221_0;
					local_lvm_cmp3022_NO_SHIFT_REG <= input_cmp3022_0;
					local_lvm_div3223_NO_SHIFT_REG <= input_div3223_0;
					local_lvm_cmp354124_NO_SHIFT_REG <= input_cmp354124_0;
					local_lvm_var__u3_NO_SHIFT_REG <= input_var__u3_0;
					local_lvm__phi_decision136_xor25_NO_SHIFT_REG <= input__phi_decision136_xor25_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_forked18_NO_SHIFT_REG <= input_forked18_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u2_NO_SHIFT_REG <= input_var__u2_1_staging_reg_NO_SHIFT_REG;
					local_lvm_i9_05219_NO_SHIFT_REG <= input_i9_05219_1_staging_reg_NO_SHIFT_REG;
					local_lvm_mul20_NO_SHIFT_REG <= input_mul20_1_staging_reg_NO_SHIFT_REG;
					local_lvm__7221_NO_SHIFT_REG <= input__7221_1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp3022_NO_SHIFT_REG <= input_cmp3022_1_staging_reg_NO_SHIFT_REG;
					local_lvm_div3223_NO_SHIFT_REG <= input_div3223_1_staging_reg_NO_SHIFT_REG;
					local_lvm_cmp354124_NO_SHIFT_REG <= input_cmp354124_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u3_NO_SHIFT_REG <= input_var__u3_1_staging_reg_NO_SHIFT_REG;
					local_lvm__phi_decision136_xor25_NO_SHIFT_REG <= input__phi_decision136_xor25_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_forked18_NO_SHIFT_REG <= input_forked18_1;
					local_lvm_var__NO_SHIFT_REG <= input_var__1;
					local_lvm_var__u2_NO_SHIFT_REG <= input_var__u2_1;
					local_lvm_i9_05219_NO_SHIFT_REG <= input_i9_05219_1;
					local_lvm_mul20_NO_SHIFT_REG <= input_mul20_1;
					local_lvm__7221_NO_SHIFT_REG <= input__7221_1;
					local_lvm_cmp3022_NO_SHIFT_REG <= input_cmp3022_1;
					local_lvm_div3223_NO_SHIFT_REG <= input_div3223_1;
					local_lvm_cmp354124_NO_SHIFT_REG <= input_cmp354124_1;
					local_lvm_var__u3_NO_SHIFT_REG <= input_var__u3_1;
					local_lvm__phi_decision136_xor25_NO_SHIFT_REG <= input__phi_decision136_xor25_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_5_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_6_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_7_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_8_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_9_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_10_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_5))
			begin
				merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_6))
			begin
				merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_7))
			begin
				merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_8))
			begin
				merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_9))
			begin
				merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_10))
			begin
				merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4_c0_eni144_stall_local;
wire [319:0] local_bb4_c0_eni144;

assign local_bb4_c0_eni144[7:0] = 8'bxxxxxxxx;
assign local_bb4_c0_eni144[8] = local_lvm_forked18_NO_SHIFT_REG;
assign local_bb4_c0_eni144[319:9] = 311'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;

// This section implements an unregistered operation.
// 
wire local_bb4_c0_eni245_stall_local;
wire [319:0] local_bb4_c0_eni245;

assign local_bb4_c0_eni245[31:0] = local_bb4_c0_eni144[31:0];
assign local_bb4_c0_eni245[63:32] = local_lvm_div3223_NO_SHIFT_REG;
assign local_bb4_c0_eni245[319:64] = local_bb4_c0_eni144[319:64];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_eni346_stall_local;
wire [319:0] local_bb4_c0_eni346;

assign local_bb4_c0_eni346[63:0] = local_bb4_c0_eni245[63:0];
assign local_bb4_c0_eni346[64] = local_lvm_cmp354124_NO_SHIFT_REG;
assign local_bb4_c0_eni346[319:65] = local_bb4_c0_eni245[319:65];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_eni447_stall_local;
wire [319:0] local_bb4_c0_eni447;

assign local_bb4_c0_eni447[95:0] = local_bb4_c0_eni346[95:0];
assign local_bb4_c0_eni447[127:96] = local_lvm_mul20_NO_SHIFT_REG;
assign local_bb4_c0_eni447[319:128] = local_bb4_c0_eni346[319:128];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_eni5_stall_local;
wire [319:0] local_bb4_c0_eni5;

assign local_bb4_c0_eni5[127:0] = local_bb4_c0_eni447[127:0];
assign local_bb4_c0_eni5[128] = local_lvm__phi_decision136_xor25_NO_SHIFT_REG;
assign local_bb4_c0_eni5[319:129] = local_bb4_c0_eni447[319:129];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_eni6_stall_local;
wire [319:0] local_bb4_c0_eni6;

assign local_bb4_c0_eni6[159:0] = local_bb4_c0_eni5[159:0];
assign local_bb4_c0_eni6[191:160] = local_lvm_var__NO_SHIFT_REG;
assign local_bb4_c0_eni6[319:192] = local_bb4_c0_eni5[319:192];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_eni7_stall_local;
wire [319:0] local_bb4_c0_eni7;

assign local_bb4_c0_eni7[191:0] = local_bb4_c0_eni6[191:0];
assign local_bb4_c0_eni7[223:192] = local_lvm_var__u2_NO_SHIFT_REG;
assign local_bb4_c0_eni7[319:224] = local_bb4_c0_eni6[319:224];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_eni8_stall_local;
wire [319:0] local_bb4_c0_eni8;

assign local_bb4_c0_eni8[223:0] = local_bb4_c0_eni7[223:0];
assign local_bb4_c0_eni8[255:224] = local_lvm_i9_05219_NO_SHIFT_REG;
assign local_bb4_c0_eni8[319:256] = local_bb4_c0_eni7[319:256];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_eni9_stall_local;
wire [319:0] local_bb4_c0_eni9;

assign local_bb4_c0_eni9[255:0] = local_bb4_c0_eni8[255:0];
assign local_bb4_c0_eni9[287:256] = local_lvm__7221_NO_SHIFT_REG;
assign local_bb4_c0_eni9[319:288] = local_bb4_c0_eni8[319:288];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_eni10_stall_local;
wire [319:0] local_bb4_c0_eni10;

assign local_bb4_c0_eni10[287:0] = local_bb4_c0_eni9[287:0];
assign local_bb4_c0_eni10[288] = local_lvm_cmp3022_NO_SHIFT_REG;
assign local_bb4_c0_eni10[319:289] = local_bb4_c0_eni9[319:289];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_eni11_stall_local;
wire [319:0] local_bb4_c0_eni11;

assign local_bb4_c0_eni11[295:0] = local_bb4_c0_eni10[295:0];
assign local_bb4_c0_eni11[296] = local_lvm_var__u3_NO_SHIFT_REG;
assign local_bb4_c0_eni11[319:297] = local_bb4_c0_eni10[319:297];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_ene149_valid_out_3;
wire local_bb4_c0_ene149_stall_in_3;
 reg local_bb4_c0_ene149_consumed_3_NO_SHIFT_REG;
wire local_bb4_c0_ene149_valid_out_4;
wire local_bb4_c0_ene149_stall_in_4;
 reg local_bb4_c0_ene149_consumed_4_NO_SHIFT_REG;
wire local_bb4_c0_ene452_valid_out;
wire local_bb4_c0_ene452_stall_in;
 reg local_bb4_c0_ene452_consumed_0_NO_SHIFT_REG;
wire local_bb4_c0_ene5_valid_out;
wire local_bb4_c0_ene5_stall_in;
 reg local_bb4_c0_ene5_consumed_0_NO_SHIFT_REG;
wire local_bb4_c0_ene6_valid_out;
wire local_bb4_c0_ene6_stall_in;
 reg local_bb4_c0_ene6_consumed_0_NO_SHIFT_REG;
wire local_bb4_c0_ene7_valid_out;
wire local_bb4_c0_ene7_stall_in;
 reg local_bb4_c0_ene7_consumed_0_NO_SHIFT_REG;
wire local_bb4_c0_ene8_valid_out;
wire local_bb4_c0_ene8_stall_in;
 reg local_bb4_c0_ene8_consumed_0_NO_SHIFT_REG;
wire local_bb4_c0_ene9_valid_out;
wire local_bb4_c0_ene9_stall_in;
 reg local_bb4_c0_ene9_consumed_0_NO_SHIFT_REG;
wire local_bb4_c0_ene10_valid_out;
wire local_bb4_c0_ene10_stall_in;
 reg local_bb4_c0_ene10_consumed_0_NO_SHIFT_REG;
wire local_bb4_c0_ene11_valid_out;
wire local_bb4_c0_ene11_stall_in;
 reg local_bb4_c0_ene11_consumed_0_NO_SHIFT_REG;
wire local_bb4_indvars_iv54_pop22_acl_pop_i64_0_valid_out_1;
wire local_bb4_indvars_iv54_pop22_acl_pop_i64_0_stall_in_1;
 reg local_bb4_indvars_iv54_pop22_acl_pop_i64_0_consumed_1_NO_SHIFT_REG;
wire local_bb4_div3223_pop29_c0_ene250_valid_out_1;
wire local_bb4_div3223_pop29_c0_ene250_stall_in_1;
 reg local_bb4_div3223_pop29_c0_ene250_consumed_1_NO_SHIFT_REG;
wire local_bb4_cmp354124_pop30_c0_ene351_valid_out_1;
wire local_bb4_cmp354124_pop30_c0_ene351_stall_in_1;
 reg local_bb4_cmp354124_pop30_c0_ene351_consumed_1_NO_SHIFT_REG;
wire local_bb4_indvars_iv_next55_valid_out_1;
wire local_bb4_indvars_iv_next55_stall_in_1;
 reg local_bb4_indvars_iv_next55_consumed_1_NO_SHIFT_REG;
wire local_bb4_var__valid_out_0;
wire local_bb4_var__stall_in_0;
 reg local_bb4_var__consumed_0_NO_SHIFT_REG;
wire local_bb4_var__valid_out_1;
wire local_bb4_var__stall_in_1;
 reg local_bb4_var__consumed_1_NO_SHIFT_REG;
wire local_bb4_var__valid_out_2;
wire local_bb4_var__stall_in_2;
 reg local_bb4_var__consumed_2_NO_SHIFT_REG;
wire local_bb4_c0_enter48_c0_eni11_inputs_ready;
wire local_bb4_c0_enter48_c0_eni11_stall_local;
wire local_bb4_c0_enter48_c0_eni11_input_accepted;
wire [319:0] local_bb4_c0_enter48_c0_eni11;
wire local_bb4_c0_exit60_c0_exi14_entry_stall;
wire local_bb4_c0_exit60_c0_exi14_output_regs_ready;
wire [4:0] local_bb4_c0_exit60_c0_exi14_valid_bits;
wire local_bb4_c0_exit60_c0_exi14_phases;
wire local_bb4_c0_enter48_c0_eni11_inc_pipelined_thread;
wire local_bb4_c0_enter48_c0_eni11_dec_pipelined_thread;
wire local_bb4_c0_enter48_c0_eni11_fu_stall_out;

assign local_bb4_c0_enter48_c0_eni11_inputs_ready = (merge_node_valid_out_0_NO_SHIFT_REG & merge_node_valid_out_1_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG & merge_node_valid_out_3_NO_SHIFT_REG & merge_node_valid_out_4_NO_SHIFT_REG & merge_node_valid_out_5_NO_SHIFT_REG & merge_node_valid_out_6_NO_SHIFT_REG & merge_node_valid_out_7_NO_SHIFT_REG & merge_node_valid_out_8_NO_SHIFT_REG & merge_node_valid_out_9_NO_SHIFT_REG & merge_node_valid_out_10_NO_SHIFT_REG);
assign local_bb4_c0_enter48_c0_eni11 = local_bb4_c0_eni11;
assign local_bb4_c0_enter48_c0_eni11_input_accepted = (local_bb4_c0_enter48_c0_eni11_inputs_ready && !(local_bb4_c0_exit60_c0_exi14_entry_stall));
assign local_bb4_c0_enter48_c0_eni11_inc_pipelined_thread = 1'b1;
assign local_bb4_c0_enter48_c0_eni11_dec_pipelined_thread = ~(1'b0);
assign local_bb4_c0_enter48_c0_eni11_fu_stall_out = (~(local_bb4_c0_enter48_c0_eni11_inputs_ready) | local_bb4_c0_exit60_c0_exi14_entry_stall);
assign local_bb4_c0_enter48_c0_eni11_stall_local = ((local_bb4_c0_ene149_stall_in_3 & ~(local_bb4_c0_ene149_consumed_3_NO_SHIFT_REG)) | (local_bb4_c0_ene149_stall_in_4 & ~(local_bb4_c0_ene149_consumed_4_NO_SHIFT_REG)) | (local_bb4_c0_ene452_stall_in & ~(local_bb4_c0_ene452_consumed_0_NO_SHIFT_REG)) | (local_bb4_c0_ene5_stall_in & ~(local_bb4_c0_ene5_consumed_0_NO_SHIFT_REG)) | (local_bb4_c0_ene6_stall_in & ~(local_bb4_c0_ene6_consumed_0_NO_SHIFT_REG)) | (local_bb4_c0_ene7_stall_in & ~(local_bb4_c0_ene7_consumed_0_NO_SHIFT_REG)) | (local_bb4_c0_ene8_stall_in & ~(local_bb4_c0_ene8_consumed_0_NO_SHIFT_REG)) | (local_bb4_c0_ene9_stall_in & ~(local_bb4_c0_ene9_consumed_0_NO_SHIFT_REG)) | (local_bb4_c0_ene10_stall_in & ~(local_bb4_c0_ene10_consumed_0_NO_SHIFT_REG)) | (local_bb4_c0_ene11_stall_in & ~(local_bb4_c0_ene11_consumed_0_NO_SHIFT_REG)) | (local_bb4_indvars_iv54_pop22_acl_pop_i64_0_stall_in_1 & ~(local_bb4_indvars_iv54_pop22_acl_pop_i64_0_consumed_1_NO_SHIFT_REG)) | (local_bb4_div3223_pop29_c0_ene250_stall_in_1 & ~(local_bb4_div3223_pop29_c0_ene250_consumed_1_NO_SHIFT_REG)) | (local_bb4_cmp354124_pop30_c0_ene351_stall_in_1 & ~(local_bb4_cmp354124_pop30_c0_ene351_consumed_1_NO_SHIFT_REG)) | (local_bb4_indvars_iv_next55_stall_in_1 & ~(local_bb4_indvars_iv_next55_consumed_1_NO_SHIFT_REG)) | (local_bb4_var__stall_in_0 & ~(local_bb4_var__consumed_0_NO_SHIFT_REG)) | (local_bb4_var__stall_in_1 & ~(local_bb4_var__consumed_1_NO_SHIFT_REG)) | (local_bb4_var__stall_in_2 & ~(local_bb4_var__consumed_2_NO_SHIFT_REG)));
assign local_bb4_c0_ene149_valid_out_3 = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_c0_ene149_consumed_3_NO_SHIFT_REG));
assign local_bb4_c0_ene149_valid_out_4 = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_c0_ene149_consumed_4_NO_SHIFT_REG));
assign local_bb4_c0_ene452_valid_out = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_c0_ene452_consumed_0_NO_SHIFT_REG));
assign local_bb4_c0_ene5_valid_out = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_c0_ene5_consumed_0_NO_SHIFT_REG));
assign local_bb4_c0_ene6_valid_out = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_c0_ene6_consumed_0_NO_SHIFT_REG));
assign local_bb4_c0_ene7_valid_out = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_c0_ene7_consumed_0_NO_SHIFT_REG));
assign local_bb4_c0_ene8_valid_out = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_c0_ene8_consumed_0_NO_SHIFT_REG));
assign local_bb4_c0_ene9_valid_out = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_c0_ene9_consumed_0_NO_SHIFT_REG));
assign local_bb4_c0_ene10_valid_out = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_c0_ene10_consumed_0_NO_SHIFT_REG));
assign local_bb4_c0_ene11_valid_out = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_c0_ene11_consumed_0_NO_SHIFT_REG));
assign local_bb4_indvars_iv54_pop22_acl_pop_i64_0_valid_out_1 = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_indvars_iv54_pop22_acl_pop_i64_0_consumed_1_NO_SHIFT_REG));
assign local_bb4_div3223_pop29_c0_ene250_valid_out_1 = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_div3223_pop29_c0_ene250_consumed_1_NO_SHIFT_REG));
assign local_bb4_cmp354124_pop30_c0_ene351_valid_out_1 = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_cmp354124_pop30_c0_ene351_consumed_1_NO_SHIFT_REG));
assign local_bb4_indvars_iv_next55_valid_out_1 = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_indvars_iv_next55_consumed_1_NO_SHIFT_REG));
assign local_bb4_var__valid_out_0 = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_var__consumed_0_NO_SHIFT_REG));
assign local_bb4_var__valid_out_1 = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_var__consumed_1_NO_SHIFT_REG));
assign local_bb4_var__valid_out_2 = (local_bb4_c0_enter48_c0_eni11_inputs_ready & ~(local_bb4_var__consumed_2_NO_SHIFT_REG));
assign merge_node_stall_in_0 = (local_bb4_c0_enter48_c0_eni11_fu_stall_out | ~(local_bb4_c0_enter48_c0_eni11_inputs_ready));
assign merge_node_stall_in_1 = (local_bb4_c0_enter48_c0_eni11_fu_stall_out | ~(local_bb4_c0_enter48_c0_eni11_inputs_ready));
assign merge_node_stall_in_2 = (local_bb4_c0_enter48_c0_eni11_fu_stall_out | ~(local_bb4_c0_enter48_c0_eni11_inputs_ready));
assign merge_node_stall_in_3 = (local_bb4_c0_enter48_c0_eni11_fu_stall_out | ~(local_bb4_c0_enter48_c0_eni11_inputs_ready));
assign merge_node_stall_in_4 = (local_bb4_c0_enter48_c0_eni11_fu_stall_out | ~(local_bb4_c0_enter48_c0_eni11_inputs_ready));
assign merge_node_stall_in_5 = (local_bb4_c0_enter48_c0_eni11_fu_stall_out | ~(local_bb4_c0_enter48_c0_eni11_inputs_ready));
assign merge_node_stall_in_6 = (local_bb4_c0_enter48_c0_eni11_fu_stall_out | ~(local_bb4_c0_enter48_c0_eni11_inputs_ready));
assign merge_node_stall_in_7 = (local_bb4_c0_enter48_c0_eni11_fu_stall_out | ~(local_bb4_c0_enter48_c0_eni11_inputs_ready));
assign merge_node_stall_in_8 = (local_bb4_c0_enter48_c0_eni11_fu_stall_out | ~(local_bb4_c0_enter48_c0_eni11_inputs_ready));
assign merge_node_stall_in_9 = (local_bb4_c0_enter48_c0_eni11_fu_stall_out | ~(local_bb4_c0_enter48_c0_eni11_inputs_ready));
assign merge_node_stall_in_10 = (local_bb4_c0_enter48_c0_eni11_fu_stall_out | ~(local_bb4_c0_enter48_c0_eni11_inputs_ready));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_c0_ene149_consumed_3_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_ene149_consumed_4_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_ene452_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_ene5_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_ene6_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_ene7_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_ene8_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_ene9_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_ene10_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_ene11_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_indvars_iv54_pop22_acl_pop_i64_0_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb4_div3223_pop29_c0_ene250_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb4_cmp354124_pop30_c0_ene351_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb4_indvars_iv_next55_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb4_var__consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_var__consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb4_var__consumed_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb4_c0_ene149_consumed_3_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_c0_ene149_consumed_3_NO_SHIFT_REG | ~(local_bb4_c0_ene149_stall_in_3)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_c0_ene149_consumed_4_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_c0_ene149_consumed_4_NO_SHIFT_REG | ~(local_bb4_c0_ene149_stall_in_4)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_c0_ene452_consumed_0_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_c0_ene452_consumed_0_NO_SHIFT_REG | ~(local_bb4_c0_ene452_stall_in)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_c0_ene5_consumed_0_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_c0_ene5_consumed_0_NO_SHIFT_REG | ~(local_bb4_c0_ene5_stall_in)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_c0_ene6_consumed_0_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_c0_ene6_consumed_0_NO_SHIFT_REG | ~(local_bb4_c0_ene6_stall_in)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_c0_ene7_consumed_0_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_c0_ene7_consumed_0_NO_SHIFT_REG | ~(local_bb4_c0_ene7_stall_in)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_c0_ene8_consumed_0_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_c0_ene8_consumed_0_NO_SHIFT_REG | ~(local_bb4_c0_ene8_stall_in)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_c0_ene9_consumed_0_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_c0_ene9_consumed_0_NO_SHIFT_REG | ~(local_bb4_c0_ene9_stall_in)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_c0_ene10_consumed_0_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_c0_ene10_consumed_0_NO_SHIFT_REG | ~(local_bb4_c0_ene10_stall_in)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_c0_ene11_consumed_0_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_c0_ene11_consumed_0_NO_SHIFT_REG | ~(local_bb4_c0_ene11_stall_in)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_indvars_iv54_pop22_acl_pop_i64_0_consumed_1_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_indvars_iv54_pop22_acl_pop_i64_0_consumed_1_NO_SHIFT_REG | ~(local_bb4_indvars_iv54_pop22_acl_pop_i64_0_stall_in_1)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_div3223_pop29_c0_ene250_consumed_1_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_div3223_pop29_c0_ene250_consumed_1_NO_SHIFT_REG | ~(local_bb4_div3223_pop29_c0_ene250_stall_in_1)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_cmp354124_pop30_c0_ene351_consumed_1_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_cmp354124_pop30_c0_ene351_consumed_1_NO_SHIFT_REG | ~(local_bb4_cmp354124_pop30_c0_ene351_stall_in_1)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_indvars_iv_next55_consumed_1_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_indvars_iv_next55_consumed_1_NO_SHIFT_REG | ~(local_bb4_indvars_iv_next55_stall_in_1)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_var__consumed_0_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_var__consumed_0_NO_SHIFT_REG | ~(local_bb4_var__stall_in_0)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_var__consumed_1_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_var__consumed_1_NO_SHIFT_REG | ~(local_bb4_var__stall_in_1)) & local_bb4_c0_enter48_c0_eni11_stall_local);
		local_bb4_var__consumed_2_NO_SHIFT_REG <= (local_bb4_c0_enter48_c0_eni11_inputs_ready & (local_bb4_var__consumed_2_NO_SHIFT_REG | ~(local_bb4_var__stall_in_2)) & local_bb4_c0_enter48_c0_eni11_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4_c0_ene149_stall_local;
wire local_bb4_c0_ene149;

assign local_bb4_c0_ene149 = local_bb4_c0_enter48_c0_eni11[8];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_ene250_stall_local;
wire [31:0] local_bb4_c0_ene250;

assign local_bb4_c0_ene250 = local_bb4_c0_enter48_c0_eni11[63:32];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_ene351_stall_local;
wire local_bb4_c0_ene351;

assign local_bb4_c0_ene351 = local_bb4_c0_enter48_c0_eni11[64];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_ene452_stall_local;
wire [31:0] local_bb4_c0_ene452;

assign local_bb4_c0_ene452 = local_bb4_c0_enter48_c0_eni11[127:96];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_ene5_stall_local;
wire local_bb4_c0_ene5;

assign local_bb4_c0_ene5 = local_bb4_c0_enter48_c0_eni11[128];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_ene6_stall_local;
wire [31:0] local_bb4_c0_ene6;

assign local_bb4_c0_ene6 = local_bb4_c0_enter48_c0_eni11[191:160];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_ene7_stall_local;
wire [31:0] local_bb4_c0_ene7;

assign local_bb4_c0_ene7 = local_bb4_c0_enter48_c0_eni11[223:192];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_ene8_stall_local;
wire [31:0] local_bb4_c0_ene8;

assign local_bb4_c0_ene8 = local_bb4_c0_enter48_c0_eni11[255:224];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_ene9_stall_local;
wire [31:0] local_bb4_c0_ene9;

assign local_bb4_c0_ene9 = local_bb4_c0_enter48_c0_eni11[287:256];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_ene10_stall_local;
wire local_bb4_c0_ene10;

assign local_bb4_c0_ene10 = local_bb4_c0_enter48_c0_eni11[288];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_ene11_stall_local;
wire local_bb4_c0_ene11;

assign local_bb4_c0_ene11 = local_bb4_c0_enter48_c0_eni11[296];

// This section implements an unregistered operation.
// 
wire local_bb4_indvars_iv54_pop22_acl_pop_i64_0_stall_local;
wire [63:0] local_bb4_indvars_iv54_pop22_acl_pop_i64_0;
wire local_bb4_indvars_iv54_pop22_acl_pop_i64_0_fu_valid_out;
wire local_bb4_indvars_iv54_pop22_acl_pop_i64_0_fu_stall_out;

acl_pop local_bb4_indvars_iv54_pop22_acl_pop_i64_0_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_c0_ene149),
	.predicate(1'b0),
	.data_in(64'h0),
	.stall_out(local_bb4_indvars_iv54_pop22_acl_pop_i64_0_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[0]),
	.valid_out(local_bb4_indvars_iv54_pop22_acl_pop_i64_0_fu_valid_out),
	.stall_in(local_bb4_indvars_iv54_pop22_acl_pop_i64_0_stall_local),
	.data_out(local_bb4_indvars_iv54_pop22_acl_pop_i64_0),
	.feedback_in(feedback_data_in_22),
	.feedback_valid_in(feedback_valid_in_22),
	.feedback_stall_out(feedback_stall_out_22)
);

defparam local_bb4_indvars_iv54_pop22_acl_pop_i64_0_feedback.DATA_WIDTH = 64;
defparam local_bb4_indvars_iv54_pop22_acl_pop_i64_0_feedback.STYLE = "REGULAR";

assign local_bb4_indvars_iv54_pop22_acl_pop_i64_0_stall_local = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_div3223_pop29_c0_ene250_stall_local;
wire [31:0] local_bb4_div3223_pop29_c0_ene250;
wire local_bb4_div3223_pop29_c0_ene250_fu_valid_out;
wire local_bb4_div3223_pop29_c0_ene250_fu_stall_out;

acl_pop local_bb4_div3223_pop29_c0_ene250_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_c0_ene149),
	.predicate(1'b0),
	.data_in(local_bb4_c0_ene250),
	.stall_out(local_bb4_div3223_pop29_c0_ene250_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[0]),
	.valid_out(local_bb4_div3223_pop29_c0_ene250_fu_valid_out),
	.stall_in(local_bb4_div3223_pop29_c0_ene250_stall_local),
	.data_out(local_bb4_div3223_pop29_c0_ene250),
	.feedback_in(feedback_data_in_29),
	.feedback_valid_in(feedback_valid_in_29),
	.feedback_stall_out(feedback_stall_out_29)
);

defparam local_bb4_div3223_pop29_c0_ene250_feedback.DATA_WIDTH = 32;
defparam local_bb4_div3223_pop29_c0_ene250_feedback.STYLE = "REGULAR";

assign local_bb4_div3223_pop29_c0_ene250_stall_local = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_cmp354124_pop30_c0_ene351_stall_local;
wire local_bb4_cmp354124_pop30_c0_ene351;
wire local_bb4_cmp354124_pop30_c0_ene351_fu_valid_out;
wire local_bb4_cmp354124_pop30_c0_ene351_fu_stall_out;

acl_pop local_bb4_cmp354124_pop30_c0_ene351_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_c0_ene149),
	.predicate(1'b0),
	.data_in(local_bb4_c0_ene351),
	.stall_out(local_bb4_cmp354124_pop30_c0_ene351_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[0]),
	.valid_out(local_bb4_cmp354124_pop30_c0_ene351_fu_valid_out),
	.stall_in(local_bb4_cmp354124_pop30_c0_ene351_stall_local),
	.data_out(local_bb4_cmp354124_pop30_c0_ene351),
	.feedback_in(feedback_data_in_30),
	.feedback_valid_in(feedback_valid_in_30),
	.feedback_stall_out(feedback_stall_out_30)
);

defparam local_bb4_cmp354124_pop30_c0_ene351_feedback.DATA_WIDTH = 1;
defparam local_bb4_cmp354124_pop30_c0_ene351_feedback.STYLE = "REGULAR";

assign local_bb4_cmp354124_pop30_c0_ene351_stall_local = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_indvars_iv_next55_stall_local;
wire [63:0] local_bb4_indvars_iv_next55;

assign local_bb4_indvars_iv_next55 = (local_bb4_indvars_iv54_pop22_acl_pop_i64_0 + 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb4_var__u4_stall_local;
wire [31:0] local_bb4_var__u4;

assign local_bb4_var__u4 = local_bb4_indvars_iv_next55[31:0];

// This section implements an unregistered operation.
// 
wire local_bb4_cmp35_stall_local;
wire local_bb4_cmp35;

assign local_bb4_cmp35 = ($signed(local_bb4_var__u4) < $signed(local_bb4_div3223_pop29_c0_ene250));

// This section implements an unregistered operation.
// 
wire local_bb4_var__stall_local;
wire local_bb4_var_;

assign local_bb4_var_ = (local_bb4_cmp354124_pop30_c0_ene351 & local_bb4_cmp35);

// This section implements a registered operation.
// 
wire local_bb4_keep_going10_acl_pipeline_1_inputs_ready;
 reg local_bb4_keep_going10_acl_pipeline_1_valid_out_NO_SHIFT_REG;
wire local_bb4_keep_going10_acl_pipeline_1_stall_in;
wire local_bb4_keep_going10_acl_pipeline_1_output_regs_ready;
wire local_bb4_keep_going10_acl_pipeline_1_keep_going;
wire local_bb4_keep_going10_acl_pipeline_1_fu_valid_out;
wire local_bb4_keep_going10_acl_pipeline_1_fu_stall_out;
 reg local_bb4_keep_going10_acl_pipeline_1_NO_SHIFT_REG;
wire local_bb4_keep_going10_acl_pipeline_1_feedback_pipelined;
wire local_bb4_keep_going10_acl_pipeline_1_causedstall;

acl_pipeline local_bb4_keep_going10_acl_pipeline_1_pipelined (
	.clock(clock),
	.resetn(resetn),
	.data_in(1'b1),
	.stall_out(local_bb4_keep_going10_acl_pipeline_1_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[0]),
	.valid_out(local_bb4_keep_going10_acl_pipeline_1_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb4_keep_going10_acl_pipeline_1_keep_going),
	.initeration_in(1'b0),
	.initeration_valid_in(1'b0),
	.initeration_stall_out(feedback_stall_out_2),
	.not_exitcond_in(feedback_data_in_3),
	.not_exitcond_valid_in(feedback_valid_in_3),
	.not_exitcond_stall_out(feedback_stall_out_3),
	.pipeline_valid_out(acl_pipelined_valid),
	.pipeline_stall_in(acl_pipelined_stall),
	.exiting_valid_out(acl_pipelined_exiting_valid)
);

defparam local_bb4_keep_going10_acl_pipeline_1_pipelined.FIFO_DEPTH = 0;
defparam local_bb4_keep_going10_acl_pipeline_1_pipelined.STYLE = "NON_SPECULATIVE";

assign local_bb4_keep_going10_acl_pipeline_1_inputs_ready = 1'b1;
assign local_bb4_keep_going10_acl_pipeline_1_output_regs_ready = 1'b1;
assign acl_pipelined_exiting_stall = acl_pipelined_stall;
assign local_bb4_c0_ene149_stall_in_3 = 1'b0;
assign local_bb4_keep_going10_acl_pipeline_1_causedstall = (local_bb4_c0_exit60_c0_exi14_valid_bits[0] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_keep_going10_acl_pipeline_1_NO_SHIFT_REG <= 'x;
		local_bb4_keep_going10_acl_pipeline_1_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_keep_going10_acl_pipeline_1_output_regs_ready)
		begin
			local_bb4_keep_going10_acl_pipeline_1_NO_SHIFT_REG <= local_bb4_keep_going10_acl_pipeline_1_keep_going;
			local_bb4_keep_going10_acl_pipeline_1_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4_keep_going10_acl_pipeline_1_stall_in))
			begin
				local_bb4_keep_going10_acl_pipeline_1_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_c0_ene149_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_1_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_stall_in_3_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_3_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_valid_out_4_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_stall_in_4_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_4_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_valid_out_5_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_stall_in_5_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_5_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_valid_out_6_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_stall_in_6_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_6_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_valid_out_7_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_stall_in_7_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_7_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene149_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_c0_ene149_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_c0_ene149_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_c0_ene149_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_c0_ene149_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_c0_ene149_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_c0_ene149),
	.data_out(rnode_1to2_bb4_c0_ene149_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_c0_ene149_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_c0_ene149_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_bb4_c0_ene149_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_c0_ene149_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb4_c0_ene149_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c0_ene149_stall_in_4 = 1'b0;
assign rnode_1to2_bb4_c0_ene149_0_stall_in_0_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene149_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_c0_ene149_0_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene149_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene149_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_c0_ene149_1_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene149_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene149_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_c0_ene149_2_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene149_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene149_0_valid_out_3_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_c0_ene149_3_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene149_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene149_0_valid_out_4_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_c0_ene149_4_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene149_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene149_0_valid_out_5_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_c0_ene149_5_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene149_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene149_0_valid_out_6_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_c0_ene149_6_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene149_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene149_0_valid_out_7_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_c0_ene149_7_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene149_0_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_c0_ene452_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene452_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_c0_ene452_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene452_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_c0_ene452_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene452_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene452_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene452_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_c0_ene452_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_c0_ene452_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_c0_ene452_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_c0_ene452_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_c0_ene452_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_c0_ene452),
	.data_out(rnode_1to2_bb4_c0_ene452_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_c0_ene452_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_c0_ene452_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb4_c0_ene452_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_c0_ene452_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb4_c0_ene452_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c0_ene452_stall_in = 1'b0;
assign rnode_1to2_bb4_c0_ene452_0_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene452_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene452_0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene452_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_c0_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene5_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene5_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene5_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene5_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene5_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene5_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene5_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_c0_ene5_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_c0_ene5_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_c0_ene5_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_c0_ene5_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_c0_ene5_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_c0_ene5),
	.data_out(rnode_1to2_bb4_c0_ene5_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_c0_ene5_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_c0_ene5_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_bb4_c0_ene5_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_c0_ene5_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb4_c0_ene5_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c0_ene5_stall_in = 1'b0;
assign rnode_1to2_bb4_c0_ene5_0_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene5_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene5_0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_c0_ene6_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene6_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_c0_ene6_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene6_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_c0_ene6_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene6_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene6_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene6_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_c0_ene6_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_c0_ene6_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_c0_ene6_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_c0_ene6_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_c0_ene6_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_c0_ene6),
	.data_out(rnode_1to2_bb4_c0_ene6_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_c0_ene6_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_c0_ene6_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb4_c0_ene6_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_c0_ene6_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb4_c0_ene6_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c0_ene6_stall_in = 1'b0;
assign rnode_1to2_bb4_c0_ene6_0_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene6_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene6_0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene6_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_c0_ene7_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene7_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_c0_ene7_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene7_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_c0_ene7_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene7_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene7_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene7_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_c0_ene7_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_c0_ene7_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_c0_ene7_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_c0_ene7_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_c0_ene7_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_c0_ene7),
	.data_out(rnode_1to2_bb4_c0_ene7_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_c0_ene7_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_c0_ene7_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb4_c0_ene7_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_c0_ene7_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb4_c0_ene7_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c0_ene7_stall_in = 1'b0;
assign rnode_1to2_bb4_c0_ene7_0_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene7_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene7_0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene7_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_c0_ene8_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene8_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_c0_ene8_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene8_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_c0_ene8_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene8_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene8_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene8_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_c0_ene8_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_c0_ene8_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_c0_ene8_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_c0_ene8_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_c0_ene8_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_c0_ene8),
	.data_out(rnode_1to2_bb4_c0_ene8_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_c0_ene8_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_c0_ene8_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb4_c0_ene8_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_c0_ene8_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb4_c0_ene8_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c0_ene8_stall_in = 1'b0;
assign rnode_1to2_bb4_c0_ene8_0_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene8_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene8_0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene8_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_c0_ene9_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene9_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_c0_ene9_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene9_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_c0_ene9_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene9_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene9_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene9_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_c0_ene9_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_c0_ene9_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_c0_ene9_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_c0_ene9_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_c0_ene9_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_c0_ene9),
	.data_out(rnode_1to2_bb4_c0_ene9_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_c0_ene9_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_c0_ene9_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb4_c0_ene9_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_c0_ene9_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb4_c0_ene9_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c0_ene9_stall_in = 1'b0;
assign rnode_1to2_bb4_c0_ene9_0_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene9_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene9_0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene9_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_c0_ene10_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene10_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene10_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene10_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene10_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene10_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene10_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene10_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_c0_ene10_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_c0_ene10_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_c0_ene10_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_c0_ene10_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_c0_ene10_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_c0_ene10),
	.data_out(rnode_1to2_bb4_c0_ene10_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_c0_ene10_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_c0_ene10_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_bb4_c0_ene10_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_c0_ene10_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb4_c0_ene10_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c0_ene10_stall_in = 1'b0;
assign rnode_1to2_bb4_c0_ene10_0_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene10_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene10_0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene10_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_c0_ene11_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene11_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene11_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene11_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene11_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene11_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene11_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_c0_ene11_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_c0_ene11_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_c0_ene11_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_c0_ene11_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_c0_ene11_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_c0_ene11_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_c0_ene11),
	.data_out(rnode_1to2_bb4_c0_ene11_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_c0_ene11_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_c0_ene11_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_bb4_c0_ene11_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_c0_ene11_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb4_c0_ene11_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_c0_ene11_stall_in = 1'b0;
assign rnode_1to2_bb4_c0_ene11_0_NO_SHIFT_REG = rnode_1to2_bb4_c0_ene11_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_c0_ene11_0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene11_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_indvars_iv54_pop22_acl_pop_i64_0),
	.data_out(rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_2_fifo.DATA_WIDTH = 64;
defparam rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_indvars_iv54_pop22_acl_pop_i64_0_stall_in_1 = 1'b0;
assign rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_NO_SHIFT_REG = rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_div3223_pop29_c0_ene250_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_div3223_pop29_c0_ene250_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_div3223_pop29_c0_ene250_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_div3223_pop29_c0_ene250_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb4_div3223_pop29_c0_ene250_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_div3223_pop29_c0_ene250_1_NO_SHIFT_REG;
 logic rnode_1to2_bb4_div3223_pop29_c0_ene250_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb4_div3223_pop29_c0_ene250_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_div3223_pop29_c0_ene250_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_div3223_pop29_c0_ene250_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_div3223_pop29_c0_ene250_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_div3223_pop29_c0_ene250_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_div3223_pop29_c0_ene250_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_div3223_pop29_c0_ene250_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_div3223_pop29_c0_ene250_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_div3223_pop29_c0_ene250_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_div3223_pop29_c0_ene250),
	.data_out(rnode_1to2_bb4_div3223_pop29_c0_ene250_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_div3223_pop29_c0_ene250_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_div3223_pop29_c0_ene250_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb4_div3223_pop29_c0_ene250_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_div3223_pop29_c0_ene250_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb4_div3223_pop29_c0_ene250_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_div3223_pop29_c0_ene250_stall_in_1 = 1'b0;
assign rnode_1to2_bb4_div3223_pop29_c0_ene250_0_stall_in_0_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_div3223_pop29_c0_ene250_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_div3223_pop29_c0_ene250_0_NO_SHIFT_REG = rnode_1to2_bb4_div3223_pop29_c0_ene250_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_div3223_pop29_c0_ene250_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_div3223_pop29_c0_ene250_1_NO_SHIFT_REG = rnode_1to2_bb4_div3223_pop29_c0_ene250_0_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to2_bb4_cmp354124_pop30_c0_ene351_1_NO_SHIFT_REG;
 logic rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_cmp354124_pop30_c0_ene351),
	.data_out(rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_cmp354124_pop30_c0_ene351_stall_in_1 = 1'b0;
assign rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_stall_in_0_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_NO_SHIFT_REG = rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_cmp354124_pop30_c0_ene351_1_NO_SHIFT_REG = rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_reg_2_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb4_notexitcond11__inputs_ready;
 reg local_bb4_notexitcond11__valid_out_0_NO_SHIFT_REG;
wire local_bb4_notexitcond11__stall_in_0;
 reg local_bb4_notexitcond11__valid_out_1_NO_SHIFT_REG;
wire local_bb4_notexitcond11__stall_in_1;
 reg local_bb4_notexitcond11__valid_out_2_NO_SHIFT_REG;
wire local_bb4_notexitcond11__stall_in_2;
 reg local_bb4_notexitcond11__valid_out_3_NO_SHIFT_REG;
wire local_bb4_notexitcond11__stall_in_3;
 reg local_bb4_notexitcond11__valid_out_4_NO_SHIFT_REG;
wire local_bb4_notexitcond11__stall_in_4;
 reg local_bb4_notexitcond11__valid_out_5_NO_SHIFT_REG;
wire local_bb4_notexitcond11__stall_in_5;
 reg local_bb4_notexitcond11__valid_out_6_NO_SHIFT_REG;
wire local_bb4_notexitcond11__stall_in_6;
 reg local_bb4_notexitcond11__valid_out_7_NO_SHIFT_REG;
wire local_bb4_notexitcond11__stall_in_7;
 reg local_bb4_notexitcond11__valid_out_8_NO_SHIFT_REG;
wire local_bb4_notexitcond11__stall_in_8;
 reg local_bb4_notexitcond11__valid_out_9_NO_SHIFT_REG;
wire local_bb4_notexitcond11__stall_in_9;
 reg local_bb4_notexitcond11__valid_out_10_NO_SHIFT_REG;
wire local_bb4_notexitcond11__stall_in_10;
wire local_bb4_notexitcond11__output_regs_ready;
wire local_bb4_notexitcond11__result;
wire local_bb4_notexitcond11__fu_valid_out;
wire local_bb4_notexitcond11__fu_stall_out;
 reg local_bb4_notexitcond11__NO_SHIFT_REG;
wire local_bb4_notexitcond11__causedstall;

acl_push local_bb4_notexitcond11__feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(1'b1),
	.predicate(1'b0),
	.data_in(local_bb4_var_),
	.stall_out(local_bb4_notexitcond11__fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[0]),
	.valid_out(local_bb4_notexitcond11__fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb4_notexitcond11__result),
	.feedback_out(feedback_data_out_3),
	.feedback_valid_out(feedback_valid_out_3),
	.feedback_stall_in(feedback_stall_in_3)
);

defparam local_bb4_notexitcond11__feedback.STALLFREE = 1;
defparam local_bb4_notexitcond11__feedback.DATA_WIDTH = 1;
defparam local_bb4_notexitcond11__feedback.FIFO_DEPTH = 0;
defparam local_bb4_notexitcond11__feedback.MIN_FIFO_LATENCY = 0;
defparam local_bb4_notexitcond11__feedback.STYLE = "REGULAR";

assign local_bb4_notexitcond11__inputs_ready = 1'b1;
assign local_bb4_notexitcond11__output_regs_ready = 1'b1;
assign local_bb4_var__stall_in_0 = 1'b0;
assign local_bb4_notexitcond11__causedstall = (local_bb4_c0_exit60_c0_exi14_valid_bits[0] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_notexitcond11__NO_SHIFT_REG <= 'x;
		local_bb4_notexitcond11__valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_notexitcond11__valid_out_1_NO_SHIFT_REG <= 1'b0;
		local_bb4_notexitcond11__valid_out_2_NO_SHIFT_REG <= 1'b0;
		local_bb4_notexitcond11__valid_out_3_NO_SHIFT_REG <= 1'b0;
		local_bb4_notexitcond11__valid_out_4_NO_SHIFT_REG <= 1'b0;
		local_bb4_notexitcond11__valid_out_5_NO_SHIFT_REG <= 1'b0;
		local_bb4_notexitcond11__valid_out_6_NO_SHIFT_REG <= 1'b0;
		local_bb4_notexitcond11__valid_out_7_NO_SHIFT_REG <= 1'b0;
		local_bb4_notexitcond11__valid_out_8_NO_SHIFT_REG <= 1'b0;
		local_bb4_notexitcond11__valid_out_9_NO_SHIFT_REG <= 1'b0;
		local_bb4_notexitcond11__valid_out_10_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_notexitcond11__output_regs_ready)
		begin
			local_bb4_notexitcond11__NO_SHIFT_REG <= local_bb4_notexitcond11__result;
			local_bb4_notexitcond11__valid_out_0_NO_SHIFT_REG <= 1'b1;
			local_bb4_notexitcond11__valid_out_1_NO_SHIFT_REG <= 1'b1;
			local_bb4_notexitcond11__valid_out_2_NO_SHIFT_REG <= 1'b1;
			local_bb4_notexitcond11__valid_out_3_NO_SHIFT_REG <= 1'b1;
			local_bb4_notexitcond11__valid_out_4_NO_SHIFT_REG <= 1'b1;
			local_bb4_notexitcond11__valid_out_5_NO_SHIFT_REG <= 1'b1;
			local_bb4_notexitcond11__valid_out_6_NO_SHIFT_REG <= 1'b1;
			local_bb4_notexitcond11__valid_out_7_NO_SHIFT_REG <= 1'b1;
			local_bb4_notexitcond11__valid_out_8_NO_SHIFT_REG <= 1'b1;
			local_bb4_notexitcond11__valid_out_9_NO_SHIFT_REG <= 1'b1;
			local_bb4_notexitcond11__valid_out_10_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4_notexitcond11__stall_in_0))
			begin
				local_bb4_notexitcond11__valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb4_notexitcond11__stall_in_1))
			begin
				local_bb4_notexitcond11__valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb4_notexitcond11__stall_in_2))
			begin
				local_bb4_notexitcond11__valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb4_notexitcond11__stall_in_3))
			begin
				local_bb4_notexitcond11__valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb4_notexitcond11__stall_in_4))
			begin
				local_bb4_notexitcond11__valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb4_notexitcond11__stall_in_5))
			begin
				local_bb4_notexitcond11__valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb4_notexitcond11__stall_in_6))
			begin
				local_bb4_notexitcond11__valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb4_notexitcond11__stall_in_7))
			begin
				local_bb4_notexitcond11__valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb4_notexitcond11__stall_in_8))
			begin
				local_bb4_notexitcond11__valid_out_8_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb4_notexitcond11__stall_in_9))
			begin
				local_bb4_notexitcond11__valid_out_9_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb4_notexitcond11__stall_in_10))
			begin
				local_bb4_notexitcond11__valid_out_10_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb4_indvars_iv54_push22_indvars_iv_next55_inputs_ready;
 reg local_bb4_indvars_iv54_push22_indvars_iv_next55_valid_out_NO_SHIFT_REG;
wire local_bb4_indvars_iv54_push22_indvars_iv_next55_stall_in;
wire local_bb4_indvars_iv54_push22_indvars_iv_next55_output_regs_ready;
wire [63:0] local_bb4_indvars_iv54_push22_indvars_iv_next55_result;
wire local_bb4_indvars_iv54_push22_indvars_iv_next55_fu_valid_out;
wire local_bb4_indvars_iv54_push22_indvars_iv_next55_fu_stall_out;
 reg [63:0] local_bb4_indvars_iv54_push22_indvars_iv_next55_NO_SHIFT_REG;
wire local_bb4_indvars_iv54_push22_indvars_iv_next55_causedstall;

acl_push local_bb4_indvars_iv54_push22_indvars_iv_next55_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_var_),
	.predicate(1'b0),
	.data_in(local_bb4_indvars_iv_next55),
	.stall_out(local_bb4_indvars_iv54_push22_indvars_iv_next55_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[0]),
	.valid_out(local_bb4_indvars_iv54_push22_indvars_iv_next55_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb4_indvars_iv54_push22_indvars_iv_next55_result),
	.feedback_out(feedback_data_out_22),
	.feedback_valid_out(feedback_valid_out_22),
	.feedback_stall_in(feedback_stall_in_22)
);

defparam local_bb4_indvars_iv54_push22_indvars_iv_next55_feedback.STALLFREE = 1;
defparam local_bb4_indvars_iv54_push22_indvars_iv_next55_feedback.DATA_WIDTH = 64;
defparam local_bb4_indvars_iv54_push22_indvars_iv_next55_feedback.FIFO_DEPTH = 1;
defparam local_bb4_indvars_iv54_push22_indvars_iv_next55_feedback.MIN_FIFO_LATENCY = 1;
defparam local_bb4_indvars_iv54_push22_indvars_iv_next55_feedback.STYLE = "REGULAR";

assign local_bb4_indvars_iv54_push22_indvars_iv_next55_inputs_ready = 1'b1;
assign local_bb4_indvars_iv54_push22_indvars_iv_next55_output_regs_ready = 1'b1;
assign local_bb4_indvars_iv_next55_stall_in_1 = 1'b0;
assign local_bb4_var__stall_in_1 = 1'b0;
assign local_bb4_indvars_iv54_push22_indvars_iv_next55_causedstall = (local_bb4_c0_exit60_c0_exi14_valid_bits[0] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_indvars_iv54_push22_indvars_iv_next55_NO_SHIFT_REG <= 'x;
		local_bb4_indvars_iv54_push22_indvars_iv_next55_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_indvars_iv54_push22_indvars_iv_next55_output_regs_ready)
		begin
			local_bb4_indvars_iv54_push22_indvars_iv_next55_NO_SHIFT_REG <= local_bb4_indvars_iv54_push22_indvars_iv_next55_result;
			local_bb4_indvars_iv54_push22_indvars_iv_next55_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4_indvars_iv54_push22_indvars_iv_next55_stall_in))
			begin
				local_bb4_indvars_iv54_push22_indvars_iv_next55_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb4_var__0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb4_var__0_stall_in_NO_SHIFT_REG;
 logic rnode_1to2_bb4_var__0_NO_SHIFT_REG;
 logic rnode_1to2_bb4_var__0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_bb4_var__0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_var__0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_var__0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb4_var__0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb4_var__0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb4_var__0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb4_var__0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb4_var__0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb4_var__0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb4_var_),
	.data_out(rnode_1to2_bb4_var__0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb4_var__0_reg_2_fifo.DEPTH = 1;
defparam rnode_1to2_bb4_var__0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_bb4_var__0_reg_2_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_1to2_bb4_var__0_reg_2_fifo.IMPL = "shift_reg";

assign rnode_1to2_bb4_var__0_reg_2_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_var__stall_in_2 = 1'b0;
assign rnode_1to2_bb4_var__0_NO_SHIFT_REG = rnode_1to2_bb4_var__0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb4_var__0_stall_in_reg_2_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_var__0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb4_keep_going10_acl_pipeline_1_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_keep_going10_acl_pipeline_1_stall_in = 1'b0;
assign rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_NO_SHIFT_REG = rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb4_mul20_pop26_c0_ene452_valid_out_0;
wire local_bb4_mul20_pop26_c0_ene452_stall_in_0;
 reg local_bb4_mul20_pop26_c0_ene452_consumed_0_NO_SHIFT_REG;
wire local_bb4_mul20_pop26_c0_ene452_valid_out_1;
wire local_bb4_mul20_pop26_c0_ene452_stall_in_1;
 reg local_bb4_mul20_pop26_c0_ene452_consumed_1_NO_SHIFT_REG;
wire local_bb4_mul20_pop26_c0_ene452_inputs_ready;
wire local_bb4_mul20_pop26_c0_ene452_stall_local;
wire [31:0] local_bb4_mul20_pop26_c0_ene452;
wire local_bb4_mul20_pop26_c0_ene452_fu_valid_out;
wire local_bb4_mul20_pop26_c0_ene452_fu_stall_out;

acl_pop local_bb4_mul20_pop26_c0_ene452_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_bb4_c0_ene149_0_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_1to2_bb4_c0_ene452_0_NO_SHIFT_REG),
	.stall_out(local_bb4_mul20_pop26_c0_ene452_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4_mul20_pop26_c0_ene452_fu_valid_out),
	.stall_in(local_bb4_mul20_pop26_c0_ene452_stall_local),
	.data_out(local_bb4_mul20_pop26_c0_ene452),
	.feedback_in(feedback_data_in_26),
	.feedback_valid_in(feedback_valid_in_26),
	.feedback_stall_out(feedback_stall_out_26)
);

defparam local_bb4_mul20_pop26_c0_ene452_feedback.DATA_WIDTH = 32;
defparam local_bb4_mul20_pop26_c0_ene452_feedback.STYLE = "REGULAR";

assign local_bb4_mul20_pop26_c0_ene452_inputs_ready = (rnode_1to2_bb4_c0_ene452_0_valid_out_NO_SHIFT_REG & rnode_1to2_bb4_c0_ene149_0_valid_out_0_NO_SHIFT_REG);
assign local_bb4_mul20_pop26_c0_ene452_stall_local = 1'b0;
assign local_bb4_mul20_pop26_c0_ene452_valid_out_0 = 1'b1;
assign local_bb4_mul20_pop26_c0_ene452_valid_out_1 = 1'b1;
assign rnode_1to2_bb4_c0_ene452_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene149_0_stall_in_0_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_mul20_pop26_c0_ene452_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_mul20_pop26_c0_ene452_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb4_mul20_pop26_c0_ene452_consumed_0_NO_SHIFT_REG <= (local_bb4_mul20_pop26_c0_ene452_fu_valid_out & (local_bb4_mul20_pop26_c0_ene452_consumed_0_NO_SHIFT_REG | ~(local_bb4_mul20_pop26_c0_ene452_stall_in_0)) & local_bb4_mul20_pop26_c0_ene452_stall_local);
		local_bb4_mul20_pop26_c0_ene452_consumed_1_NO_SHIFT_REG <= (local_bb4_mul20_pop26_c0_ene452_fu_valid_out & (local_bb4_mul20_pop26_c0_ene452_consumed_1_NO_SHIFT_REG | ~(local_bb4_mul20_pop26_c0_ene452_stall_in_1)) & local_bb4_mul20_pop26_c0_ene452_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4__phi_decision136_xor25_pop32_c0_ene5_valid_out_0;
wire local_bb4__phi_decision136_xor25_pop32_c0_ene5_stall_in_0;
 reg local_bb4__phi_decision136_xor25_pop32_c0_ene5_consumed_0_NO_SHIFT_REG;
wire local_bb4__phi_decision136_xor25_pop32_c0_ene5_valid_out_1;
wire local_bb4__phi_decision136_xor25_pop32_c0_ene5_stall_in_1;
 reg local_bb4__phi_decision136_xor25_pop32_c0_ene5_consumed_1_NO_SHIFT_REG;
wire local_bb4__phi_decision136_xor25_pop32_c0_ene5_inputs_ready;
wire local_bb4__phi_decision136_xor25_pop32_c0_ene5_stall_local;
wire local_bb4__phi_decision136_xor25_pop32_c0_ene5;
wire local_bb4__phi_decision136_xor25_pop32_c0_ene5_fu_valid_out;
wire local_bb4__phi_decision136_xor25_pop32_c0_ene5_fu_stall_out;

acl_pop local_bb4__phi_decision136_xor25_pop32_c0_ene5_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_bb4_c0_ene149_1_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_1to2_bb4_c0_ene5_0_NO_SHIFT_REG),
	.stall_out(local_bb4__phi_decision136_xor25_pop32_c0_ene5_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4__phi_decision136_xor25_pop32_c0_ene5_fu_valid_out),
	.stall_in(local_bb4__phi_decision136_xor25_pop32_c0_ene5_stall_local),
	.data_out(local_bb4__phi_decision136_xor25_pop32_c0_ene5),
	.feedback_in(feedback_data_in_32),
	.feedback_valid_in(feedback_valid_in_32),
	.feedback_stall_out(feedback_stall_out_32)
);

defparam local_bb4__phi_decision136_xor25_pop32_c0_ene5_feedback.DATA_WIDTH = 1;
defparam local_bb4__phi_decision136_xor25_pop32_c0_ene5_feedback.STYLE = "REGULAR";

assign local_bb4__phi_decision136_xor25_pop32_c0_ene5_inputs_ready = (rnode_1to2_bb4_c0_ene5_0_valid_out_NO_SHIFT_REG & rnode_1to2_bb4_c0_ene149_0_valid_out_1_NO_SHIFT_REG);
assign local_bb4__phi_decision136_xor25_pop32_c0_ene5_stall_local = 1'b0;
assign local_bb4__phi_decision136_xor25_pop32_c0_ene5_valid_out_0 = 1'b1;
assign local_bb4__phi_decision136_xor25_pop32_c0_ene5_valid_out_1 = 1'b1;
assign rnode_1to2_bb4_c0_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene149_0_stall_in_1_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4__phi_decision136_xor25_pop32_c0_ene5_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4__phi_decision136_xor25_pop32_c0_ene5_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb4__phi_decision136_xor25_pop32_c0_ene5_consumed_0_NO_SHIFT_REG <= (local_bb4__phi_decision136_xor25_pop32_c0_ene5_fu_valid_out & (local_bb4__phi_decision136_xor25_pop32_c0_ene5_consumed_0_NO_SHIFT_REG | ~(local_bb4__phi_decision136_xor25_pop32_c0_ene5_stall_in_0)) & local_bb4__phi_decision136_xor25_pop32_c0_ene5_stall_local);
		local_bb4__phi_decision136_xor25_pop32_c0_ene5_consumed_1_NO_SHIFT_REG <= (local_bb4__phi_decision136_xor25_pop32_c0_ene5_fu_valid_out & (local_bb4__phi_decision136_xor25_pop32_c0_ene5_consumed_1_NO_SHIFT_REG | ~(local_bb4__phi_decision136_xor25_pop32_c0_ene5_stall_in_1)) & local_bb4__phi_decision136_xor25_pop32_c0_ene5_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4__pop23_c0_ene6_valid_out_0;
wire local_bb4__pop23_c0_ene6_stall_in_0;
 reg local_bb4__pop23_c0_ene6_consumed_0_NO_SHIFT_REG;
wire local_bb4__pop23_c0_ene6_valid_out_1;
wire local_bb4__pop23_c0_ene6_stall_in_1;
 reg local_bb4__pop23_c0_ene6_consumed_1_NO_SHIFT_REG;
wire local_bb4__pop23_c0_ene6_inputs_ready;
wire local_bb4__pop23_c0_ene6_stall_local;
wire [31:0] local_bb4__pop23_c0_ene6;
wire local_bb4__pop23_c0_ene6_fu_valid_out;
wire local_bb4__pop23_c0_ene6_fu_stall_out;

acl_pop local_bb4__pop23_c0_ene6_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_bb4_c0_ene149_2_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_1to2_bb4_c0_ene6_0_NO_SHIFT_REG),
	.stall_out(local_bb4__pop23_c0_ene6_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4__pop23_c0_ene6_fu_valid_out),
	.stall_in(local_bb4__pop23_c0_ene6_stall_local),
	.data_out(local_bb4__pop23_c0_ene6),
	.feedback_in(feedback_data_in_23),
	.feedback_valid_in(feedback_valid_in_23),
	.feedback_stall_out(feedback_stall_out_23)
);

defparam local_bb4__pop23_c0_ene6_feedback.DATA_WIDTH = 32;
defparam local_bb4__pop23_c0_ene6_feedback.STYLE = "REGULAR";

assign local_bb4__pop23_c0_ene6_inputs_ready = (rnode_1to2_bb4_c0_ene6_0_valid_out_NO_SHIFT_REG & rnode_1to2_bb4_c0_ene149_0_valid_out_2_NO_SHIFT_REG);
assign local_bb4__pop23_c0_ene6_stall_local = 1'b0;
assign local_bb4__pop23_c0_ene6_valid_out_0 = 1'b1;
assign local_bb4__pop23_c0_ene6_valid_out_1 = 1'b1;
assign rnode_1to2_bb4_c0_ene6_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene149_0_stall_in_2_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4__pop23_c0_ene6_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4__pop23_c0_ene6_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb4__pop23_c0_ene6_consumed_0_NO_SHIFT_REG <= (local_bb4__pop23_c0_ene6_fu_valid_out & (local_bb4__pop23_c0_ene6_consumed_0_NO_SHIFT_REG | ~(local_bb4__pop23_c0_ene6_stall_in_0)) & local_bb4__pop23_c0_ene6_stall_local);
		local_bb4__pop23_c0_ene6_consumed_1_NO_SHIFT_REG <= (local_bb4__pop23_c0_ene6_fu_valid_out & (local_bb4__pop23_c0_ene6_consumed_1_NO_SHIFT_REG | ~(local_bb4__pop23_c0_ene6_stall_in_1)) & local_bb4__pop23_c0_ene6_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4__pop24_c0_ene7_valid_out_0;
wire local_bb4__pop24_c0_ene7_stall_in_0;
 reg local_bb4__pop24_c0_ene7_consumed_0_NO_SHIFT_REG;
wire local_bb4__pop24_c0_ene7_valid_out_1;
wire local_bb4__pop24_c0_ene7_stall_in_1;
 reg local_bb4__pop24_c0_ene7_consumed_1_NO_SHIFT_REG;
wire local_bb4__pop24_c0_ene7_inputs_ready;
wire local_bb4__pop24_c0_ene7_stall_local;
wire [31:0] local_bb4__pop24_c0_ene7;
wire local_bb4__pop24_c0_ene7_fu_valid_out;
wire local_bb4__pop24_c0_ene7_fu_stall_out;

acl_pop local_bb4__pop24_c0_ene7_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_bb4_c0_ene149_3_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_1to2_bb4_c0_ene7_0_NO_SHIFT_REG),
	.stall_out(local_bb4__pop24_c0_ene7_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4__pop24_c0_ene7_fu_valid_out),
	.stall_in(local_bb4__pop24_c0_ene7_stall_local),
	.data_out(local_bb4__pop24_c0_ene7),
	.feedback_in(feedback_data_in_24),
	.feedback_valid_in(feedback_valid_in_24),
	.feedback_stall_out(feedback_stall_out_24)
);

defparam local_bb4__pop24_c0_ene7_feedback.DATA_WIDTH = 32;
defparam local_bb4__pop24_c0_ene7_feedback.STYLE = "REGULAR";

assign local_bb4__pop24_c0_ene7_inputs_ready = (rnode_1to2_bb4_c0_ene7_0_valid_out_NO_SHIFT_REG & rnode_1to2_bb4_c0_ene149_0_valid_out_3_NO_SHIFT_REG);
assign local_bb4__pop24_c0_ene7_stall_local = 1'b0;
assign local_bb4__pop24_c0_ene7_valid_out_0 = 1'b1;
assign local_bb4__pop24_c0_ene7_valid_out_1 = 1'b1;
assign rnode_1to2_bb4_c0_ene7_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene149_0_stall_in_3_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4__pop24_c0_ene7_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4__pop24_c0_ene7_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb4__pop24_c0_ene7_consumed_0_NO_SHIFT_REG <= (local_bb4__pop24_c0_ene7_fu_valid_out & (local_bb4__pop24_c0_ene7_consumed_0_NO_SHIFT_REG | ~(local_bb4__pop24_c0_ene7_stall_in_0)) & local_bb4__pop24_c0_ene7_stall_local);
		local_bb4__pop24_c0_ene7_consumed_1_NO_SHIFT_REG <= (local_bb4__pop24_c0_ene7_fu_valid_out & (local_bb4__pop24_c0_ene7_consumed_1_NO_SHIFT_REG | ~(local_bb4__pop24_c0_ene7_stall_in_1)) & local_bb4__pop24_c0_ene7_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4_i9_05219_pop25_c0_ene8_valid_out_0;
wire local_bb4_i9_05219_pop25_c0_ene8_stall_in_0;
 reg local_bb4_i9_05219_pop25_c0_ene8_consumed_0_NO_SHIFT_REG;
wire local_bb4_i9_05219_pop25_c0_ene8_valid_out_1;
wire local_bb4_i9_05219_pop25_c0_ene8_stall_in_1;
 reg local_bb4_i9_05219_pop25_c0_ene8_consumed_1_NO_SHIFT_REG;
wire local_bb4_i9_05219_pop25_c0_ene8_inputs_ready;
wire local_bb4_i9_05219_pop25_c0_ene8_stall_local;
wire [31:0] local_bb4_i9_05219_pop25_c0_ene8;
wire local_bb4_i9_05219_pop25_c0_ene8_fu_valid_out;
wire local_bb4_i9_05219_pop25_c0_ene8_fu_stall_out;

acl_pop local_bb4_i9_05219_pop25_c0_ene8_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_bb4_c0_ene149_4_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_1to2_bb4_c0_ene8_0_NO_SHIFT_REG),
	.stall_out(local_bb4_i9_05219_pop25_c0_ene8_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4_i9_05219_pop25_c0_ene8_fu_valid_out),
	.stall_in(local_bb4_i9_05219_pop25_c0_ene8_stall_local),
	.data_out(local_bb4_i9_05219_pop25_c0_ene8),
	.feedback_in(feedback_data_in_25),
	.feedback_valid_in(feedback_valid_in_25),
	.feedback_stall_out(feedback_stall_out_25)
);

defparam local_bb4_i9_05219_pop25_c0_ene8_feedback.DATA_WIDTH = 32;
defparam local_bb4_i9_05219_pop25_c0_ene8_feedback.STYLE = "REGULAR";

assign local_bb4_i9_05219_pop25_c0_ene8_inputs_ready = (rnode_1to2_bb4_c0_ene8_0_valid_out_NO_SHIFT_REG & rnode_1to2_bb4_c0_ene149_0_valid_out_4_NO_SHIFT_REG);
assign local_bb4_i9_05219_pop25_c0_ene8_stall_local = 1'b0;
assign local_bb4_i9_05219_pop25_c0_ene8_valid_out_0 = 1'b1;
assign local_bb4_i9_05219_pop25_c0_ene8_valid_out_1 = 1'b1;
assign rnode_1to2_bb4_c0_ene8_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene149_0_stall_in_4_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_i9_05219_pop25_c0_ene8_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_i9_05219_pop25_c0_ene8_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb4_i9_05219_pop25_c0_ene8_consumed_0_NO_SHIFT_REG <= (local_bb4_i9_05219_pop25_c0_ene8_fu_valid_out & (local_bb4_i9_05219_pop25_c0_ene8_consumed_0_NO_SHIFT_REG | ~(local_bb4_i9_05219_pop25_c0_ene8_stall_in_0)) & local_bb4_i9_05219_pop25_c0_ene8_stall_local);
		local_bb4_i9_05219_pop25_c0_ene8_consumed_1_NO_SHIFT_REG <= (local_bb4_i9_05219_pop25_c0_ene8_fu_valid_out & (local_bb4_i9_05219_pop25_c0_ene8_consumed_1_NO_SHIFT_REG | ~(local_bb4_i9_05219_pop25_c0_ene8_stall_in_1)) & local_bb4_i9_05219_pop25_c0_ene8_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4__7221_pop27_c0_ene9_valid_out_0;
wire local_bb4__7221_pop27_c0_ene9_stall_in_0;
 reg local_bb4__7221_pop27_c0_ene9_consumed_0_NO_SHIFT_REG;
wire local_bb4__7221_pop27_c0_ene9_valid_out_1;
wire local_bb4__7221_pop27_c0_ene9_stall_in_1;
 reg local_bb4__7221_pop27_c0_ene9_consumed_1_NO_SHIFT_REG;
wire local_bb4__7221_pop27_c0_ene9_inputs_ready;
wire local_bb4__7221_pop27_c0_ene9_stall_local;
wire [31:0] local_bb4__7221_pop27_c0_ene9;
wire local_bb4__7221_pop27_c0_ene9_fu_valid_out;
wire local_bb4__7221_pop27_c0_ene9_fu_stall_out;

acl_pop local_bb4__7221_pop27_c0_ene9_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_bb4_c0_ene149_5_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_1to2_bb4_c0_ene9_0_NO_SHIFT_REG),
	.stall_out(local_bb4__7221_pop27_c0_ene9_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4__7221_pop27_c0_ene9_fu_valid_out),
	.stall_in(local_bb4__7221_pop27_c0_ene9_stall_local),
	.data_out(local_bb4__7221_pop27_c0_ene9),
	.feedback_in(feedback_data_in_27),
	.feedback_valid_in(feedback_valid_in_27),
	.feedback_stall_out(feedback_stall_out_27)
);

defparam local_bb4__7221_pop27_c0_ene9_feedback.DATA_WIDTH = 32;
defparam local_bb4__7221_pop27_c0_ene9_feedback.STYLE = "REGULAR";

assign local_bb4__7221_pop27_c0_ene9_inputs_ready = (rnode_1to2_bb4_c0_ene9_0_valid_out_NO_SHIFT_REG & rnode_1to2_bb4_c0_ene149_0_valid_out_5_NO_SHIFT_REG);
assign local_bb4__7221_pop27_c0_ene9_stall_local = 1'b0;
assign local_bb4__7221_pop27_c0_ene9_valid_out_0 = 1'b1;
assign local_bb4__7221_pop27_c0_ene9_valid_out_1 = 1'b1;
assign rnode_1to2_bb4_c0_ene9_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene149_0_stall_in_5_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4__7221_pop27_c0_ene9_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4__7221_pop27_c0_ene9_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb4__7221_pop27_c0_ene9_consumed_0_NO_SHIFT_REG <= (local_bb4__7221_pop27_c0_ene9_fu_valid_out & (local_bb4__7221_pop27_c0_ene9_consumed_0_NO_SHIFT_REG | ~(local_bb4__7221_pop27_c0_ene9_stall_in_0)) & local_bb4__7221_pop27_c0_ene9_stall_local);
		local_bb4__7221_pop27_c0_ene9_consumed_1_NO_SHIFT_REG <= (local_bb4__7221_pop27_c0_ene9_fu_valid_out & (local_bb4__7221_pop27_c0_ene9_consumed_1_NO_SHIFT_REG | ~(local_bb4__7221_pop27_c0_ene9_stall_in_1)) & local_bb4__7221_pop27_c0_ene9_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4_cmp3022_pop28_c0_ene10_valid_out_0;
wire local_bb4_cmp3022_pop28_c0_ene10_stall_in_0;
 reg local_bb4_cmp3022_pop28_c0_ene10_consumed_0_NO_SHIFT_REG;
wire local_bb4_cmp3022_pop28_c0_ene10_valid_out_1;
wire local_bb4_cmp3022_pop28_c0_ene10_stall_in_1;
 reg local_bb4_cmp3022_pop28_c0_ene10_consumed_1_NO_SHIFT_REG;
wire local_bb4_cmp3022_pop28_c0_ene10_inputs_ready;
wire local_bb4_cmp3022_pop28_c0_ene10_stall_local;
wire local_bb4_cmp3022_pop28_c0_ene10;
wire local_bb4_cmp3022_pop28_c0_ene10_fu_valid_out;
wire local_bb4_cmp3022_pop28_c0_ene10_fu_stall_out;

acl_pop local_bb4_cmp3022_pop28_c0_ene10_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_bb4_c0_ene149_6_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_1to2_bb4_c0_ene10_0_NO_SHIFT_REG),
	.stall_out(local_bb4_cmp3022_pop28_c0_ene10_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4_cmp3022_pop28_c0_ene10_fu_valid_out),
	.stall_in(local_bb4_cmp3022_pop28_c0_ene10_stall_local),
	.data_out(local_bb4_cmp3022_pop28_c0_ene10),
	.feedback_in(feedback_data_in_28),
	.feedback_valid_in(feedback_valid_in_28),
	.feedback_stall_out(feedback_stall_out_28)
);

defparam local_bb4_cmp3022_pop28_c0_ene10_feedback.DATA_WIDTH = 1;
defparam local_bb4_cmp3022_pop28_c0_ene10_feedback.STYLE = "REGULAR";

assign local_bb4_cmp3022_pop28_c0_ene10_inputs_ready = (rnode_1to2_bb4_c0_ene10_0_valid_out_NO_SHIFT_REG & rnode_1to2_bb4_c0_ene149_0_valid_out_6_NO_SHIFT_REG);
assign local_bb4_cmp3022_pop28_c0_ene10_stall_local = 1'b0;
assign local_bb4_cmp3022_pop28_c0_ene10_valid_out_0 = 1'b1;
assign local_bb4_cmp3022_pop28_c0_ene10_valid_out_1 = 1'b1;
assign rnode_1to2_bb4_c0_ene10_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene149_0_stall_in_6_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_cmp3022_pop28_c0_ene10_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_cmp3022_pop28_c0_ene10_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb4_cmp3022_pop28_c0_ene10_consumed_0_NO_SHIFT_REG <= (local_bb4_cmp3022_pop28_c0_ene10_fu_valid_out & (local_bb4_cmp3022_pop28_c0_ene10_consumed_0_NO_SHIFT_REG | ~(local_bb4_cmp3022_pop28_c0_ene10_stall_in_0)) & local_bb4_cmp3022_pop28_c0_ene10_stall_local);
		local_bb4_cmp3022_pop28_c0_ene10_consumed_1_NO_SHIFT_REG <= (local_bb4_cmp3022_pop28_c0_ene10_fu_valid_out & (local_bb4_cmp3022_pop28_c0_ene10_consumed_1_NO_SHIFT_REG | ~(local_bb4_cmp3022_pop28_c0_ene10_stall_in_1)) & local_bb4_cmp3022_pop28_c0_ene10_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4__pop31_c0_ene11_valid_out_0;
wire local_bb4__pop31_c0_ene11_stall_in_0;
 reg local_bb4__pop31_c0_ene11_consumed_0_NO_SHIFT_REG;
wire local_bb4__pop31_c0_ene11_valid_out_1;
wire local_bb4__pop31_c0_ene11_stall_in_1;
 reg local_bb4__pop31_c0_ene11_consumed_1_NO_SHIFT_REG;
wire local_bb4__pop31_c0_ene11_inputs_ready;
wire local_bb4__pop31_c0_ene11_stall_local;
wire local_bb4__pop31_c0_ene11;
wire local_bb4__pop31_c0_ene11_fu_valid_out;
wire local_bb4__pop31_c0_ene11_fu_stall_out;

acl_pop local_bb4__pop31_c0_ene11_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_bb4_c0_ene149_7_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_1to2_bb4_c0_ene11_0_NO_SHIFT_REG),
	.stall_out(local_bb4__pop31_c0_ene11_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4__pop31_c0_ene11_fu_valid_out),
	.stall_in(local_bb4__pop31_c0_ene11_stall_local),
	.data_out(local_bb4__pop31_c0_ene11),
	.feedback_in(feedback_data_in_31),
	.feedback_valid_in(feedback_valid_in_31),
	.feedback_stall_out(feedback_stall_out_31)
);

defparam local_bb4__pop31_c0_ene11_feedback.DATA_WIDTH = 1;
defparam local_bb4__pop31_c0_ene11_feedback.STYLE = "REGULAR";

assign local_bb4__pop31_c0_ene11_inputs_ready = (rnode_1to2_bb4_c0_ene11_0_valid_out_NO_SHIFT_REG & rnode_1to2_bb4_c0_ene149_0_valid_out_7_NO_SHIFT_REG);
assign local_bb4__pop31_c0_ene11_stall_local = 1'b0;
assign local_bb4__pop31_c0_ene11_valid_out_0 = 1'b1;
assign local_bb4__pop31_c0_ene11_valid_out_1 = 1'b1;
assign rnode_1to2_bb4_c0_ene11_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_1to2_bb4_c0_ene149_0_stall_in_7_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4__pop31_c0_ene11_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4__pop31_c0_ene11_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb4__pop31_c0_ene11_consumed_0_NO_SHIFT_REG <= (local_bb4__pop31_c0_ene11_fu_valid_out & (local_bb4__pop31_c0_ene11_consumed_0_NO_SHIFT_REG | ~(local_bb4__pop31_c0_ene11_stall_in_0)) & local_bb4__pop31_c0_ene11_stall_local);
		local_bb4__pop31_c0_ene11_consumed_1_NO_SHIFT_REG <= (local_bb4__pop31_c0_ene11_fu_valid_out & (local_bb4__pop31_c0_ene11_consumed_1_NO_SHIFT_REG | ~(local_bb4__pop31_c0_ene11_stall_in_1)) & local_bb4__pop31_c0_ene11_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_3_fifo.DATA_WIDTH = 64;
defparam rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_NO_SHIFT_REG = rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4_div3223_pop29_c0_ene250_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb4_div3223_pop29_c0_ene250_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb4_div3223_pop29_c0_ene250_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_div3223_pop29_c0_ene250_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb4_div3223_pop29_c0_ene250_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_div3223_pop29_c0_ene250_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_div3223_pop29_c0_ene250_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_div3223_pop29_c0_ene250_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4_div3223_pop29_c0_ene250_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4_div3223_pop29_c0_ene250_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4_div3223_pop29_c0_ene250_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4_div3223_pop29_c0_ene250_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4_div3223_pop29_c0_ene250_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb4_div3223_pop29_c0_ene250_1_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb4_div3223_pop29_c0_ene250_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4_div3223_pop29_c0_ene250_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb4_div3223_pop29_c0_ene250_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb4_div3223_pop29_c0_ene250_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb4_div3223_pop29_c0_ene250_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb4_div3223_pop29_c0_ene250_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_div3223_pop29_c0_ene250_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4_div3223_pop29_c0_ene250_0_NO_SHIFT_REG = rnode_2to3_bb4_div3223_pop29_c0_ene250_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4_div3223_pop29_c0_ene250_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4_div3223_pop29_c0_ene250_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb4_cmp354124_pop30_c0_ene351_1_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_NO_SHIFT_REG = rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb4_cmp354124_push30_cmp354124_pop30_inputs_ready;
 reg local_bb4_cmp354124_push30_cmp354124_pop30_valid_out_NO_SHIFT_REG;
wire local_bb4_cmp354124_push30_cmp354124_pop30_stall_in;
wire local_bb4_cmp354124_push30_cmp354124_pop30_output_regs_ready;
wire local_bb4_cmp354124_push30_cmp354124_pop30_result;
wire local_bb4_cmp354124_push30_cmp354124_pop30_fu_valid_out;
wire local_bb4_cmp354124_push30_cmp354124_pop30_fu_stall_out;
 reg local_bb4_cmp354124_push30_cmp354124_pop30_NO_SHIFT_REG;
wire local_bb4_cmp354124_push30_cmp354124_pop30_causedstall;

acl_push local_bb4_cmp354124_push30_cmp354124_pop30_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_notexitcond11__NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_NO_SHIFT_REG),
	.stall_out(local_bb4_cmp354124_push30_cmp354124_pop30_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4_cmp354124_push30_cmp354124_pop30_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb4_cmp354124_push30_cmp354124_pop30_result),
	.feedback_out(feedback_data_out_30),
	.feedback_valid_out(feedback_valid_out_30),
	.feedback_stall_in(feedback_stall_in_30)
);

defparam local_bb4_cmp354124_push30_cmp354124_pop30_feedback.STALLFREE = 1;
defparam local_bb4_cmp354124_push30_cmp354124_pop30_feedback.DATA_WIDTH = 1;
defparam local_bb4_cmp354124_push30_cmp354124_pop30_feedback.FIFO_DEPTH = 1;
defparam local_bb4_cmp354124_push30_cmp354124_pop30_feedback.MIN_FIFO_LATENCY = 0;
defparam local_bb4_cmp354124_push30_cmp354124_pop30_feedback.STYLE = "REGULAR";

assign local_bb4_cmp354124_push30_cmp354124_pop30_inputs_ready = 1'b1;
assign local_bb4_cmp354124_push30_cmp354124_pop30_output_regs_ready = 1'b1;
assign local_bb4_notexitcond11__stall_in_0 = 1'b0;
assign rnode_1to2_bb4_cmp354124_pop30_c0_ene351_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign local_bb4_cmp354124_push30_cmp354124_pop30_causedstall = (local_bb4_c0_exit60_c0_exi14_valid_bits[1] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_cmp354124_push30_cmp354124_pop30_NO_SHIFT_REG <= 'x;
		local_bb4_cmp354124_push30_cmp354124_pop30_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_cmp354124_push30_cmp354124_pop30_output_regs_ready)
		begin
			local_bb4_cmp354124_push30_cmp354124_pop30_NO_SHIFT_REG <= local_bb4_cmp354124_push30_cmp354124_pop30_result;
			local_bb4_cmp354124_push30_cmp354124_pop30_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4_cmp354124_push30_cmp354124_pop30_stall_in))
			begin
				local_bb4_cmp354124_push30_cmp354124_pop30_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb4_div3223_push29_div3223_pop29_inputs_ready;
 reg local_bb4_div3223_push29_div3223_pop29_valid_out_NO_SHIFT_REG;
wire local_bb4_div3223_push29_div3223_pop29_stall_in;
wire local_bb4_div3223_push29_div3223_pop29_output_regs_ready;
wire [31:0] local_bb4_div3223_push29_div3223_pop29_result;
wire local_bb4_div3223_push29_div3223_pop29_fu_valid_out;
wire local_bb4_div3223_push29_div3223_pop29_fu_stall_out;
 reg [31:0] local_bb4_div3223_push29_div3223_pop29_NO_SHIFT_REG;
wire local_bb4_div3223_push29_div3223_pop29_causedstall;

acl_push local_bb4_div3223_push29_div3223_pop29_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_notexitcond11__NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_1to2_bb4_div3223_pop29_c0_ene250_0_NO_SHIFT_REG),
	.stall_out(local_bb4_div3223_push29_div3223_pop29_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4_div3223_push29_div3223_pop29_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb4_div3223_push29_div3223_pop29_result),
	.feedback_out(feedback_data_out_29),
	.feedback_valid_out(feedback_valid_out_29),
	.feedback_stall_in(feedback_stall_in_29)
);

defparam local_bb4_div3223_push29_div3223_pop29_feedback.STALLFREE = 1;
defparam local_bb4_div3223_push29_div3223_pop29_feedback.DATA_WIDTH = 32;
defparam local_bb4_div3223_push29_div3223_pop29_feedback.FIFO_DEPTH = 1;
defparam local_bb4_div3223_push29_div3223_pop29_feedback.MIN_FIFO_LATENCY = 0;
defparam local_bb4_div3223_push29_div3223_pop29_feedback.STYLE = "REGULAR";

assign local_bb4_div3223_push29_div3223_pop29_inputs_ready = 1'b1;
assign local_bb4_div3223_push29_div3223_pop29_output_regs_ready = 1'b1;
assign local_bb4_notexitcond11__stall_in_1 = 1'b0;
assign rnode_1to2_bb4_div3223_pop29_c0_ene250_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign local_bb4_div3223_push29_div3223_pop29_causedstall = (local_bb4_c0_exit60_c0_exi14_valid_bits[1] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_div3223_push29_div3223_pop29_NO_SHIFT_REG <= 'x;
		local_bb4_div3223_push29_div3223_pop29_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_div3223_push29_div3223_pop29_output_regs_ready)
		begin
			local_bb4_div3223_push29_div3223_pop29_NO_SHIFT_REG <= local_bb4_div3223_push29_div3223_pop29_result;
			local_bb4_div3223_push29_div3223_pop29_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4_div3223_push29_div3223_pop29_stall_in))
			begin
				local_bb4_div3223_push29_div3223_pop29_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4_notexitcond11__0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb4_notexitcond11__0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb4_notexitcond11__0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_notexitcond11__0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb4_notexitcond11__0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_notexitcond11__0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_notexitcond11__0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_notexitcond11__0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4_notexitcond11__0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4_notexitcond11__0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4_notexitcond11__0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4_notexitcond11__0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4_notexitcond11__0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb4_notexitcond11__NO_SHIFT_REG),
	.data_out(rnode_2to3_bb4_notexitcond11__0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4_notexitcond11__0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb4_notexitcond11__0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb4_notexitcond11__0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb4_notexitcond11__0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb4_notexitcond11__0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_notexitcond11__stall_in_10 = 1'b0;
assign rnode_2to3_bb4_notexitcond11__0_NO_SHIFT_REG = rnode_2to3_bb4_notexitcond11__0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4_notexitcond11__0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4_notexitcond11__0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb4_indvars_iv54_push22_indvars_iv_next55_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_3_fifo.DATA_WIDTH = 64;
defparam rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_indvars_iv54_push22_indvars_iv_next55_stall_in = 1'b0;
assign rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_NO_SHIFT_REG = rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_2to4_bb4_var__0_valid_out_NO_SHIFT_REG;
 logic rnode_2to4_bb4_var__0_stall_in_NO_SHIFT_REG;
 logic rnode_2to4_bb4_var__0_NO_SHIFT_REG;
 logic rnode_2to4_bb4_var__0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to4_bb4_var__0_reg_4_NO_SHIFT_REG;
 logic rnode_2to4_bb4_var__0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_2to4_bb4_var__0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_2to4_bb4_var__0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_2to4_bb4_var__0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to4_bb4_var__0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to4_bb4_var__0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_2to4_bb4_var__0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_2to4_bb4_var__0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb4_var__0_NO_SHIFT_REG),
	.data_out(rnode_2to4_bb4_var__0_reg_4_NO_SHIFT_REG)
);

defparam rnode_2to4_bb4_var__0_reg_4_fifo.DEPTH = 2;
defparam rnode_2to4_bb4_var__0_reg_4_fifo.DATA_WIDTH = 1;
defparam rnode_2to4_bb4_var__0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to4_bb4_var__0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_2to4_bb4_var__0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_1to2_bb4_var__0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_2to4_bb4_var__0_NO_SHIFT_REG = rnode_2to4_bb4_var__0_reg_4_NO_SHIFT_REG;
assign rnode_2to4_bb4_var__0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_2to4_bb4_var__0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_NO_SHIFT_REG;
 logic rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_reg_4_fifo.DATA_WIDTH = 1;
defparam rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb4_keep_going10_acl_pipeline_1_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_NO_SHIFT_REG = rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb4_mul20_push26_mul20_pop26_inputs_ready;
 reg local_bb4_mul20_push26_mul20_pop26_valid_out_NO_SHIFT_REG;
wire local_bb4_mul20_push26_mul20_pop26_stall_in;
wire local_bb4_mul20_push26_mul20_pop26_output_regs_ready;
wire [31:0] local_bb4_mul20_push26_mul20_pop26_result;
wire local_bb4_mul20_push26_mul20_pop26_fu_valid_out;
wire local_bb4_mul20_push26_mul20_pop26_fu_stall_out;
 reg [31:0] local_bb4_mul20_push26_mul20_pop26_NO_SHIFT_REG;
wire local_bb4_mul20_push26_mul20_pop26_causedstall;

acl_push local_bb4_mul20_push26_mul20_pop26_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_notexitcond11__NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb4_mul20_pop26_c0_ene452),
	.stall_out(local_bb4_mul20_push26_mul20_pop26_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4_mul20_push26_mul20_pop26_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb4_mul20_push26_mul20_pop26_result),
	.feedback_out(feedback_data_out_26),
	.feedback_valid_out(feedback_valid_out_26),
	.feedback_stall_in(feedback_stall_in_26)
);

defparam local_bb4_mul20_push26_mul20_pop26_feedback.STALLFREE = 1;
defparam local_bb4_mul20_push26_mul20_pop26_feedback.DATA_WIDTH = 32;
defparam local_bb4_mul20_push26_mul20_pop26_feedback.FIFO_DEPTH = 1;
defparam local_bb4_mul20_push26_mul20_pop26_feedback.MIN_FIFO_LATENCY = 1;
defparam local_bb4_mul20_push26_mul20_pop26_feedback.STYLE = "REGULAR";

assign local_bb4_mul20_push26_mul20_pop26_inputs_ready = 1'b1;
assign local_bb4_mul20_push26_mul20_pop26_output_regs_ready = 1'b1;
assign local_bb4_mul20_pop26_c0_ene452_stall_in_0 = 1'b0;
assign local_bb4_notexitcond11__stall_in_2 = 1'b0;
assign local_bb4_mul20_push26_mul20_pop26_causedstall = (local_bb4_c0_exit60_c0_exi14_valid_bits[1] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_mul20_push26_mul20_pop26_NO_SHIFT_REG <= 'x;
		local_bb4_mul20_push26_mul20_pop26_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_mul20_push26_mul20_pop26_output_regs_ready)
		begin
			local_bb4_mul20_push26_mul20_pop26_NO_SHIFT_REG <= local_bb4_mul20_push26_mul20_pop26_result;
			local_bb4_mul20_push26_mul20_pop26_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4_mul20_push26_mul20_pop26_stall_in))
			begin
				local_bb4_mul20_push26_mul20_pop26_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_2to4_bb4_mul20_pop26_c0_ene452_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_2to4_bb4_mul20_pop26_c0_ene452_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_2to4_bb4_mul20_pop26_c0_ene452_0_NO_SHIFT_REG;
 logic rnode_2to4_bb4_mul20_pop26_c0_ene452_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_2to4_bb4_mul20_pop26_c0_ene452_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_2to4_bb4_mul20_pop26_c0_ene452_1_NO_SHIFT_REG;
 logic rnode_2to4_bb4_mul20_pop26_c0_ene452_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to4_bb4_mul20_pop26_c0_ene452_0_reg_4_NO_SHIFT_REG;
 logic rnode_2to4_bb4_mul20_pop26_c0_ene452_0_valid_out_0_reg_4_NO_SHIFT_REG;
 logic rnode_2to4_bb4_mul20_pop26_c0_ene452_0_stall_in_0_reg_4_NO_SHIFT_REG;
 logic rnode_2to4_bb4_mul20_pop26_c0_ene452_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_2to4_bb4_mul20_pop26_c0_ene452_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to4_bb4_mul20_pop26_c0_ene452_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to4_bb4_mul20_pop26_c0_ene452_0_stall_in_0_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_2to4_bb4_mul20_pop26_c0_ene452_0_valid_out_0_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_2to4_bb4_mul20_pop26_c0_ene452_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb4_mul20_pop26_c0_ene452),
	.data_out(rnode_2to4_bb4_mul20_pop26_c0_ene452_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_2to4_bb4_mul20_pop26_c0_ene452_0_reg_4_fifo.DEPTH = 2;
defparam rnode_2to4_bb4_mul20_pop26_c0_ene452_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_2to4_bb4_mul20_pop26_c0_ene452_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to4_bb4_mul20_pop26_c0_ene452_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_2to4_bb4_mul20_pop26_c0_ene452_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_mul20_pop26_c0_ene452_stall_in_1 = 1'b0;
assign rnode_2to4_bb4_mul20_pop26_c0_ene452_0_stall_in_0_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_2to4_bb4_mul20_pop26_c0_ene452_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_2to4_bb4_mul20_pop26_c0_ene452_0_NO_SHIFT_REG = rnode_2to4_bb4_mul20_pop26_c0_ene452_0_reg_4_NO_SHIFT_REG;
assign rnode_2to4_bb4_mul20_pop26_c0_ene452_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_2to4_bb4_mul20_pop26_c0_ene452_1_NO_SHIFT_REG = rnode_2to4_bb4_mul20_pop26_c0_ene452_0_reg_4_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_inputs_ready;
 reg local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_valid_out_NO_SHIFT_REG;
wire local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_stall_in;
wire local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_output_regs_ready;
wire local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_result;
wire local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_fu_valid_out;
wire local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_fu_stall_out;
 reg local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_NO_SHIFT_REG;
wire local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_causedstall;

acl_push local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_notexitcond11__NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb4__phi_decision136_xor25_pop32_c0_ene5),
	.stall_out(local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_result),
	.feedback_out(feedback_data_out_32),
	.feedback_valid_out(feedback_valid_out_32),
	.feedback_stall_in(feedback_stall_in_32)
);

defparam local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_feedback.STALLFREE = 1;
defparam local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_feedback.DATA_WIDTH = 1;
defparam local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_feedback.FIFO_DEPTH = 1;
defparam local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_feedback.MIN_FIFO_LATENCY = 1;
defparam local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_feedback.STYLE = "REGULAR";

assign local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_inputs_ready = 1'b1;
assign local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_output_regs_ready = 1'b1;
assign local_bb4__phi_decision136_xor25_pop32_c0_ene5_stall_in_0 = 1'b0;
assign local_bb4_notexitcond11__stall_in_3 = 1'b0;
assign local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_causedstall = (local_bb4_c0_exit60_c0_exi14_valid_bits[1] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_NO_SHIFT_REG <= 'x;
		local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_output_regs_ready)
		begin
			local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_NO_SHIFT_REG <= local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_result;
			local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_stall_in))
			begin
				local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb4__phi_decision136_xor25_pop32_c0_ene5),
	.data_out(rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4__phi_decision136_xor25_pop32_c0_ene5_stall_in_1 = 1'b0;
assign rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_NO_SHIFT_REG = rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb4__push23__pop23_inputs_ready;
 reg local_bb4__push23__pop23_valid_out_NO_SHIFT_REG;
wire local_bb4__push23__pop23_stall_in;
wire local_bb4__push23__pop23_output_regs_ready;
wire [31:0] local_bb4__push23__pop23_result;
wire local_bb4__push23__pop23_fu_valid_out;
wire local_bb4__push23__pop23_fu_stall_out;
 reg [31:0] local_bb4__push23__pop23_NO_SHIFT_REG;
wire local_bb4__push23__pop23_causedstall;

acl_push local_bb4__push23__pop23_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_notexitcond11__NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb4__pop23_c0_ene6),
	.stall_out(local_bb4__push23__pop23_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4__push23__pop23_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb4__push23__pop23_result),
	.feedback_out(feedback_data_out_23),
	.feedback_valid_out(feedback_valid_out_23),
	.feedback_stall_in(feedback_stall_in_23)
);

defparam local_bb4__push23__pop23_feedback.STALLFREE = 1;
defparam local_bb4__push23__pop23_feedback.DATA_WIDTH = 32;
defparam local_bb4__push23__pop23_feedback.FIFO_DEPTH = 1;
defparam local_bb4__push23__pop23_feedback.MIN_FIFO_LATENCY = 1;
defparam local_bb4__push23__pop23_feedback.STYLE = "REGULAR";

assign local_bb4__push23__pop23_inputs_ready = 1'b1;
assign local_bb4__push23__pop23_output_regs_ready = 1'b1;
assign local_bb4__pop23_c0_ene6_stall_in_0 = 1'b0;
assign local_bb4_notexitcond11__stall_in_4 = 1'b0;
assign local_bb4__push23__pop23_causedstall = (local_bb4_c0_exit60_c0_exi14_valid_bits[1] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4__push23__pop23_NO_SHIFT_REG <= 'x;
		local_bb4__push23__pop23_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4__push23__pop23_output_regs_ready)
		begin
			local_bb4__push23__pop23_NO_SHIFT_REG <= local_bb4__push23__pop23_result;
			local_bb4__push23__pop23_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4__push23__pop23_stall_in))
			begin
				local_bb4__push23__pop23_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4__pop23_c0_ene6_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop23_c0_ene6_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb4__pop23_c0_ene6_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop23_c0_ene6_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb4__pop23_c0_ene6_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop23_c0_ene6_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop23_c0_ene6_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop23_c0_ene6_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4__pop23_c0_ene6_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4__pop23_c0_ene6_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4__pop23_c0_ene6_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4__pop23_c0_ene6_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4__pop23_c0_ene6_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb4__pop23_c0_ene6),
	.data_out(rnode_2to3_bb4__pop23_c0_ene6_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4__pop23_c0_ene6_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb4__pop23_c0_ene6_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb4__pop23_c0_ene6_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb4__pop23_c0_ene6_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb4__pop23_c0_ene6_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4__pop23_c0_ene6_stall_in_1 = 1'b0;
assign rnode_2to3_bb4__pop23_c0_ene6_0_NO_SHIFT_REG = rnode_2to3_bb4__pop23_c0_ene6_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4__pop23_c0_ene6_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4__pop23_c0_ene6_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb4__push24__pop24_inputs_ready;
 reg local_bb4__push24__pop24_valid_out_NO_SHIFT_REG;
wire local_bb4__push24__pop24_stall_in;
wire local_bb4__push24__pop24_output_regs_ready;
wire [31:0] local_bb4__push24__pop24_result;
wire local_bb4__push24__pop24_fu_valid_out;
wire local_bb4__push24__pop24_fu_stall_out;
 reg [31:0] local_bb4__push24__pop24_NO_SHIFT_REG;
wire local_bb4__push24__pop24_causedstall;

acl_push local_bb4__push24__pop24_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_notexitcond11__NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb4__pop24_c0_ene7),
	.stall_out(local_bb4__push24__pop24_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4__push24__pop24_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb4__push24__pop24_result),
	.feedback_out(feedback_data_out_24),
	.feedback_valid_out(feedback_valid_out_24),
	.feedback_stall_in(feedback_stall_in_24)
);

defparam local_bb4__push24__pop24_feedback.STALLFREE = 1;
defparam local_bb4__push24__pop24_feedback.DATA_WIDTH = 32;
defparam local_bb4__push24__pop24_feedback.FIFO_DEPTH = 1;
defparam local_bb4__push24__pop24_feedback.MIN_FIFO_LATENCY = 1;
defparam local_bb4__push24__pop24_feedback.STYLE = "REGULAR";

assign local_bb4__push24__pop24_inputs_ready = 1'b1;
assign local_bb4__push24__pop24_output_regs_ready = 1'b1;
assign local_bb4__pop24_c0_ene7_stall_in_0 = 1'b0;
assign local_bb4_notexitcond11__stall_in_5 = 1'b0;
assign local_bb4__push24__pop24_causedstall = (local_bb4_c0_exit60_c0_exi14_valid_bits[1] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4__push24__pop24_NO_SHIFT_REG <= 'x;
		local_bb4__push24__pop24_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4__push24__pop24_output_regs_ready)
		begin
			local_bb4__push24__pop24_NO_SHIFT_REG <= local_bb4__push24__pop24_result;
			local_bb4__push24__pop24_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4__push24__pop24_stall_in))
			begin
				local_bb4__push24__pop24_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4__pop24_c0_ene7_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop24_c0_ene7_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb4__pop24_c0_ene7_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop24_c0_ene7_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb4__pop24_c0_ene7_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop24_c0_ene7_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop24_c0_ene7_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop24_c0_ene7_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4__pop24_c0_ene7_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4__pop24_c0_ene7_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4__pop24_c0_ene7_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4__pop24_c0_ene7_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4__pop24_c0_ene7_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb4__pop24_c0_ene7),
	.data_out(rnode_2to3_bb4__pop24_c0_ene7_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4__pop24_c0_ene7_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb4__pop24_c0_ene7_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb4__pop24_c0_ene7_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb4__pop24_c0_ene7_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb4__pop24_c0_ene7_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4__pop24_c0_ene7_stall_in_1 = 1'b0;
assign rnode_2to3_bb4__pop24_c0_ene7_0_NO_SHIFT_REG = rnode_2to3_bb4__pop24_c0_ene7_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4__pop24_c0_ene7_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4__pop24_c0_ene7_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb4_i9_05219_push25_i9_05219_pop25_inputs_ready;
 reg local_bb4_i9_05219_push25_i9_05219_pop25_valid_out_NO_SHIFT_REG;
wire local_bb4_i9_05219_push25_i9_05219_pop25_stall_in;
wire local_bb4_i9_05219_push25_i9_05219_pop25_output_regs_ready;
wire [31:0] local_bb4_i9_05219_push25_i9_05219_pop25_result;
wire local_bb4_i9_05219_push25_i9_05219_pop25_fu_valid_out;
wire local_bb4_i9_05219_push25_i9_05219_pop25_fu_stall_out;
 reg [31:0] local_bb4_i9_05219_push25_i9_05219_pop25_NO_SHIFT_REG;
wire local_bb4_i9_05219_push25_i9_05219_pop25_causedstall;

acl_push local_bb4_i9_05219_push25_i9_05219_pop25_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_notexitcond11__NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb4_i9_05219_pop25_c0_ene8),
	.stall_out(local_bb4_i9_05219_push25_i9_05219_pop25_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4_i9_05219_push25_i9_05219_pop25_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb4_i9_05219_push25_i9_05219_pop25_result),
	.feedback_out(feedback_data_out_25),
	.feedback_valid_out(feedback_valid_out_25),
	.feedback_stall_in(feedback_stall_in_25)
);

defparam local_bb4_i9_05219_push25_i9_05219_pop25_feedback.STALLFREE = 1;
defparam local_bb4_i9_05219_push25_i9_05219_pop25_feedback.DATA_WIDTH = 32;
defparam local_bb4_i9_05219_push25_i9_05219_pop25_feedback.FIFO_DEPTH = 1;
defparam local_bb4_i9_05219_push25_i9_05219_pop25_feedback.MIN_FIFO_LATENCY = 1;
defparam local_bb4_i9_05219_push25_i9_05219_pop25_feedback.STYLE = "REGULAR";

assign local_bb4_i9_05219_push25_i9_05219_pop25_inputs_ready = 1'b1;
assign local_bb4_i9_05219_push25_i9_05219_pop25_output_regs_ready = 1'b1;
assign local_bb4_i9_05219_pop25_c0_ene8_stall_in_0 = 1'b0;
assign local_bb4_notexitcond11__stall_in_6 = 1'b0;
assign local_bb4_i9_05219_push25_i9_05219_pop25_causedstall = (local_bb4_c0_exit60_c0_exi14_valid_bits[1] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_i9_05219_push25_i9_05219_pop25_NO_SHIFT_REG <= 'x;
		local_bb4_i9_05219_push25_i9_05219_pop25_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_i9_05219_push25_i9_05219_pop25_output_regs_ready)
		begin
			local_bb4_i9_05219_push25_i9_05219_pop25_NO_SHIFT_REG <= local_bb4_i9_05219_push25_i9_05219_pop25_result;
			local_bb4_i9_05219_push25_i9_05219_pop25_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4_i9_05219_push25_i9_05219_pop25_stall_in))
			begin
				local_bb4_i9_05219_push25_i9_05219_pop25_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb4_i9_05219_pop25_c0_ene8),
	.data_out(rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_i9_05219_pop25_c0_ene8_stall_in_1 = 1'b0;
assign rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_NO_SHIFT_REG = rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb4__7221_push27__7221_pop27_inputs_ready;
 reg local_bb4__7221_push27__7221_pop27_valid_out_NO_SHIFT_REG;
wire local_bb4__7221_push27__7221_pop27_stall_in;
wire local_bb4__7221_push27__7221_pop27_output_regs_ready;
wire [31:0] local_bb4__7221_push27__7221_pop27_result;
wire local_bb4__7221_push27__7221_pop27_fu_valid_out;
wire local_bb4__7221_push27__7221_pop27_fu_stall_out;
 reg [31:0] local_bb4__7221_push27__7221_pop27_NO_SHIFT_REG;
wire local_bb4__7221_push27__7221_pop27_causedstall;

acl_push local_bb4__7221_push27__7221_pop27_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_notexitcond11__NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb4__7221_pop27_c0_ene9),
	.stall_out(local_bb4__7221_push27__7221_pop27_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4__7221_push27__7221_pop27_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb4__7221_push27__7221_pop27_result),
	.feedback_out(feedback_data_out_27),
	.feedback_valid_out(feedback_valid_out_27),
	.feedback_stall_in(feedback_stall_in_27)
);

defparam local_bb4__7221_push27__7221_pop27_feedback.STALLFREE = 1;
defparam local_bb4__7221_push27__7221_pop27_feedback.DATA_WIDTH = 32;
defparam local_bb4__7221_push27__7221_pop27_feedback.FIFO_DEPTH = 1;
defparam local_bb4__7221_push27__7221_pop27_feedback.MIN_FIFO_LATENCY = 1;
defparam local_bb4__7221_push27__7221_pop27_feedback.STYLE = "REGULAR";

assign local_bb4__7221_push27__7221_pop27_inputs_ready = 1'b1;
assign local_bb4__7221_push27__7221_pop27_output_regs_ready = 1'b1;
assign local_bb4__7221_pop27_c0_ene9_stall_in_0 = 1'b0;
assign local_bb4_notexitcond11__stall_in_7 = 1'b0;
assign local_bb4__7221_push27__7221_pop27_causedstall = (local_bb4_c0_exit60_c0_exi14_valid_bits[1] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4__7221_push27__7221_pop27_NO_SHIFT_REG <= 'x;
		local_bb4__7221_push27__7221_pop27_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4__7221_push27__7221_pop27_output_regs_ready)
		begin
			local_bb4__7221_push27__7221_pop27_NO_SHIFT_REG <= local_bb4__7221_push27__7221_pop27_result;
			local_bb4__7221_push27__7221_pop27_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4__7221_push27__7221_pop27_stall_in))
			begin
				local_bb4__7221_push27__7221_pop27_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4__7221_pop27_c0_ene9_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb4__7221_pop27_c0_ene9_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb4__7221_pop27_c0_ene9_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4__7221_pop27_c0_ene9_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb4__7221_pop27_c0_ene9_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__7221_pop27_c0_ene9_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__7221_pop27_c0_ene9_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__7221_pop27_c0_ene9_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4__7221_pop27_c0_ene9_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4__7221_pop27_c0_ene9_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4__7221_pop27_c0_ene9_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4__7221_pop27_c0_ene9_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4__7221_pop27_c0_ene9_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb4__7221_pop27_c0_ene9),
	.data_out(rnode_2to3_bb4__7221_pop27_c0_ene9_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4__7221_pop27_c0_ene9_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb4__7221_pop27_c0_ene9_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb4__7221_pop27_c0_ene9_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb4__7221_pop27_c0_ene9_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb4__7221_pop27_c0_ene9_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4__7221_pop27_c0_ene9_stall_in_1 = 1'b0;
assign rnode_2to3_bb4__7221_pop27_c0_ene9_0_NO_SHIFT_REG = rnode_2to3_bb4__7221_pop27_c0_ene9_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4__7221_pop27_c0_ene9_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4__7221_pop27_c0_ene9_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb4_cmp3022_push28_cmp3022_pop28_inputs_ready;
 reg local_bb4_cmp3022_push28_cmp3022_pop28_valid_out_NO_SHIFT_REG;
wire local_bb4_cmp3022_push28_cmp3022_pop28_stall_in;
wire local_bb4_cmp3022_push28_cmp3022_pop28_output_regs_ready;
wire local_bb4_cmp3022_push28_cmp3022_pop28_result;
wire local_bb4_cmp3022_push28_cmp3022_pop28_fu_valid_out;
wire local_bb4_cmp3022_push28_cmp3022_pop28_fu_stall_out;
 reg local_bb4_cmp3022_push28_cmp3022_pop28_NO_SHIFT_REG;
wire local_bb4_cmp3022_push28_cmp3022_pop28_causedstall;

acl_push local_bb4_cmp3022_push28_cmp3022_pop28_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_notexitcond11__NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb4_cmp3022_pop28_c0_ene10),
	.stall_out(local_bb4_cmp3022_push28_cmp3022_pop28_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4_cmp3022_push28_cmp3022_pop28_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb4_cmp3022_push28_cmp3022_pop28_result),
	.feedback_out(feedback_data_out_28),
	.feedback_valid_out(feedback_valid_out_28),
	.feedback_stall_in(feedback_stall_in_28)
);

defparam local_bb4_cmp3022_push28_cmp3022_pop28_feedback.STALLFREE = 1;
defparam local_bb4_cmp3022_push28_cmp3022_pop28_feedback.DATA_WIDTH = 1;
defparam local_bb4_cmp3022_push28_cmp3022_pop28_feedback.FIFO_DEPTH = 1;
defparam local_bb4_cmp3022_push28_cmp3022_pop28_feedback.MIN_FIFO_LATENCY = 1;
defparam local_bb4_cmp3022_push28_cmp3022_pop28_feedback.STYLE = "REGULAR";

assign local_bb4_cmp3022_push28_cmp3022_pop28_inputs_ready = 1'b1;
assign local_bb4_cmp3022_push28_cmp3022_pop28_output_regs_ready = 1'b1;
assign local_bb4_cmp3022_pop28_c0_ene10_stall_in_0 = 1'b0;
assign local_bb4_notexitcond11__stall_in_8 = 1'b0;
assign local_bb4_cmp3022_push28_cmp3022_pop28_causedstall = (local_bb4_c0_exit60_c0_exi14_valid_bits[1] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_cmp3022_push28_cmp3022_pop28_NO_SHIFT_REG <= 'x;
		local_bb4_cmp3022_push28_cmp3022_pop28_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_cmp3022_push28_cmp3022_pop28_output_regs_ready)
		begin
			local_bb4_cmp3022_push28_cmp3022_pop28_NO_SHIFT_REG <= local_bb4_cmp3022_push28_cmp3022_pop28_result;
			local_bb4_cmp3022_push28_cmp3022_pop28_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4_cmp3022_push28_cmp3022_pop28_stall_in))
			begin
				local_bb4_cmp3022_push28_cmp3022_pop28_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb4_cmp3022_pop28_c0_ene10),
	.data_out(rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_cmp3022_pop28_c0_ene10_stall_in_1 = 1'b0;
assign rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_NO_SHIFT_REG = rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb4__push31__pop31_inputs_ready;
 reg local_bb4__push31__pop31_valid_out_NO_SHIFT_REG;
wire local_bb4__push31__pop31_stall_in;
wire local_bb4__push31__pop31_output_regs_ready;
wire local_bb4__push31__pop31_result;
wire local_bb4__push31__pop31_fu_valid_out;
wire local_bb4__push31__pop31_fu_stall_out;
 reg local_bb4__push31__pop31_NO_SHIFT_REG;
wire local_bb4__push31__pop31_causedstall;

acl_push local_bb4__push31__pop31_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb4_notexitcond11__NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb4__pop31_c0_ene11),
	.stall_out(local_bb4__push31__pop31_fu_stall_out),
	.valid_in(local_bb4_c0_exit60_c0_exi14_valid_bits[1]),
	.valid_out(local_bb4__push31__pop31_fu_valid_out),
	.stall_in(1'b0),
	.data_out(local_bb4__push31__pop31_result),
	.feedback_out(feedback_data_out_31),
	.feedback_valid_out(feedback_valid_out_31),
	.feedback_stall_in(feedback_stall_in_31)
);

defparam local_bb4__push31__pop31_feedback.STALLFREE = 1;
defparam local_bb4__push31__pop31_feedback.DATA_WIDTH = 1;
defparam local_bb4__push31__pop31_feedback.FIFO_DEPTH = 1;
defparam local_bb4__push31__pop31_feedback.MIN_FIFO_LATENCY = 1;
defparam local_bb4__push31__pop31_feedback.STYLE = "REGULAR";

assign local_bb4__push31__pop31_inputs_ready = 1'b1;
assign local_bb4__push31__pop31_output_regs_ready = 1'b1;
assign local_bb4__pop31_c0_ene11_stall_in_0 = 1'b0;
assign local_bb4_notexitcond11__stall_in_9 = 1'b0;
assign local_bb4__push31__pop31_causedstall = (local_bb4_c0_exit60_c0_exi14_valid_bits[1] && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4__push31__pop31_NO_SHIFT_REG <= 'x;
		local_bb4__push31__pop31_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4__push31__pop31_output_regs_ready)
		begin
			local_bb4__push31__pop31_NO_SHIFT_REG <= local_bb4__push31__pop31_result;
			local_bb4__push31__pop31_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4__push31__pop31_stall_in))
			begin
				local_bb4__push31__pop31_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb4__pop31_c0_ene11_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop31_c0_ene11_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop31_c0_ene11_0_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop31_c0_ene11_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop31_c0_ene11_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop31_c0_ene11_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop31_c0_ene11_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb4__pop31_c0_ene11_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb4__pop31_c0_ene11_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb4__pop31_c0_ene11_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb4__pop31_c0_ene11_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb4__pop31_c0_ene11_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb4__pop31_c0_ene11_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb4__pop31_c0_ene11),
	.data_out(rnode_2to3_bb4__pop31_c0_ene11_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb4__pop31_c0_ene11_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb4__pop31_c0_ene11_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb4__pop31_c0_ene11_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb4__pop31_c0_ene11_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb4__pop31_c0_ene11_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4__pop31_c0_ene11_stall_in_1 = 1'b0;
assign rnode_2to3_bb4__pop31_c0_ene11_0_NO_SHIFT_REG = rnode_2to3_bb4__pop31_c0_ene11_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb4__pop31_c0_ene11_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb4__pop31_c0_ene11_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_0_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_NO_SHIFT_REG;
 logic rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_1_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_1_NO_SHIFT_REG;
 logic rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_0_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_0_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_0_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_NO_SHIFT_REG = rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_1_NO_SHIFT_REG = rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_reg_4_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb4_div3223_pop29_c0_ene250_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb4_div3223_pop29_c0_ene250_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb4_div3223_pop29_c0_ene250_0_NO_SHIFT_REG;
 logic rnode_3to4_bb4_div3223_pop29_c0_ene250_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb4_div3223_pop29_c0_ene250_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_div3223_pop29_c0_ene250_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_div3223_pop29_c0_ene250_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_div3223_pop29_c0_ene250_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb4_div3223_pop29_c0_ene250_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb4_div3223_pop29_c0_ene250_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb4_div3223_pop29_c0_ene250_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb4_div3223_pop29_c0_ene250_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb4_div3223_pop29_c0_ene250_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb4_div3223_pop29_c0_ene250_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb4_div3223_pop29_c0_ene250_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb4_div3223_pop29_c0_ene250_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb4_div3223_pop29_c0_ene250_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb4_div3223_pop29_c0_ene250_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb4_div3223_pop29_c0_ene250_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb4_div3223_pop29_c0_ene250_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb4_div3223_pop29_c0_ene250_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_div3223_pop29_c0_ene250_0_NO_SHIFT_REG = rnode_3to4_bb4_div3223_pop29_c0_ene250_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb4_div3223_pop29_c0_ene250_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_div3223_pop29_c0_ene250_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_reg_4_fifo.DATA_WIDTH = 1;
defparam rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb4_cmp354124_pop30_c0_ene351_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_NO_SHIFT_REG = rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb4_cmp354124_push30_cmp354124_pop30_NO_SHIFT_REG),
	.data_out(rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_reg_5_fifo.DEPTH = 2;
defparam rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_cmp354124_push30_cmp354124_pop30_stall_in = 1'b0;
assign rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_NO_SHIFT_REG = rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_reg_5_NO_SHIFT_REG;
assign rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_3to5_bb4_div3223_push29_div3223_pop29_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to5_bb4_div3223_push29_div3223_pop29_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb4_div3223_push29_div3223_pop29_0_NO_SHIFT_REG;
 logic rnode_3to5_bb4_div3223_push29_div3223_pop29_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb4_div3223_push29_div3223_pop29_0_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_div3223_push29_div3223_pop29_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_div3223_push29_div3223_pop29_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_div3223_push29_div3223_pop29_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_3to5_bb4_div3223_push29_div3223_pop29_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to5_bb4_div3223_push29_div3223_pop29_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to5_bb4_div3223_push29_div3223_pop29_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_3to5_bb4_div3223_push29_div3223_pop29_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_3to5_bb4_div3223_push29_div3223_pop29_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb4_div3223_push29_div3223_pop29_NO_SHIFT_REG),
	.data_out(rnode_3to5_bb4_div3223_push29_div3223_pop29_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_3to5_bb4_div3223_push29_div3223_pop29_0_reg_5_fifo.DEPTH = 2;
defparam rnode_3to5_bb4_div3223_push29_div3223_pop29_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_3to5_bb4_div3223_push29_div3223_pop29_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to5_bb4_div3223_push29_div3223_pop29_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_3to5_bb4_div3223_push29_div3223_pop29_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_div3223_push29_div3223_pop29_stall_in = 1'b0;
assign rnode_3to5_bb4_div3223_push29_div3223_pop29_0_NO_SHIFT_REG = rnode_3to5_bb4_div3223_push29_div3223_pop29_0_reg_5_NO_SHIFT_REG;
assign rnode_3to5_bb4_div3223_push29_div3223_pop29_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4_div3223_push29_div3223_pop29_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb4_notexitcond11__0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb4_notexitcond11__0_stall_in_NO_SHIFT_REG;
 logic rnode_3to4_bb4_notexitcond11__0_NO_SHIFT_REG;
 logic rnode_3to4_bb4_notexitcond11__0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to4_bb4_notexitcond11__0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_notexitcond11__0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_notexitcond11__0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_notexitcond11__0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb4_notexitcond11__0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb4_notexitcond11__0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb4_notexitcond11__0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb4_notexitcond11__0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb4_notexitcond11__0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb4_notexitcond11__0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb4_notexitcond11__0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb4_notexitcond11__0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb4_notexitcond11__0_reg_4_fifo.DATA_WIDTH = 1;
defparam rnode_3to4_bb4_notexitcond11__0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb4_notexitcond11__0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb4_notexitcond11__0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb4_notexitcond11__0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_notexitcond11__0_NO_SHIFT_REG = rnode_3to4_bb4_notexitcond11__0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb4_notexitcond11__0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_notexitcond11__0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_NO_SHIFT_REG;
 logic rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_NO_SHIFT_REG = rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4_var__0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4_var__0_stall_in_NO_SHIFT_REG;
 logic rnode_4to5_bb4_var__0_NO_SHIFT_REG;
 logic rnode_4to5_bb4_var__0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_4to5_bb4_var__0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_var__0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_var__0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_var__0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4_var__0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4_var__0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4_var__0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4_var__0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4_var__0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_2to4_bb4_var__0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4_var__0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4_var__0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4_var__0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_4to5_bb4_var__0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4_var__0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4_var__0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to4_bb4_var__0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_var__0_NO_SHIFT_REG = rnode_4to5_bb4_var__0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4_var__0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_var__0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_stall_in_NO_SHIFT_REG;
 logic rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_NO_SHIFT_REG;
 logic rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4_keep_going10_acl_pipeline_1_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_NO_SHIFT_REG = rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_3to5_bb4_mul20_push26_mul20_pop26_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to5_bb4_mul20_push26_mul20_pop26_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb4_mul20_push26_mul20_pop26_0_NO_SHIFT_REG;
 logic rnode_3to5_bb4_mul20_push26_mul20_pop26_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb4_mul20_push26_mul20_pop26_0_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_mul20_push26_mul20_pop26_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_mul20_push26_mul20_pop26_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_mul20_push26_mul20_pop26_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_3to5_bb4_mul20_push26_mul20_pop26_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to5_bb4_mul20_push26_mul20_pop26_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to5_bb4_mul20_push26_mul20_pop26_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_3to5_bb4_mul20_push26_mul20_pop26_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_3to5_bb4_mul20_push26_mul20_pop26_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb4_mul20_push26_mul20_pop26_NO_SHIFT_REG),
	.data_out(rnode_3to5_bb4_mul20_push26_mul20_pop26_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_3to5_bb4_mul20_push26_mul20_pop26_0_reg_5_fifo.DEPTH = 2;
defparam rnode_3to5_bb4_mul20_push26_mul20_pop26_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_3to5_bb4_mul20_push26_mul20_pop26_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to5_bb4_mul20_push26_mul20_pop26_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_3to5_bb4_mul20_push26_mul20_pop26_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_mul20_push26_mul20_pop26_stall_in = 1'b0;
assign rnode_3to5_bb4_mul20_push26_mul20_pop26_0_NO_SHIFT_REG = rnode_3to5_bb4_mul20_push26_mul20_pop26_0_reg_5_NO_SHIFT_REG;
assign rnode_3to5_bb4_mul20_push26_mul20_pop26_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4_mul20_push26_mul20_pop26_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4_mul20_pop26_c0_ene452_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4_mul20_pop26_c0_ene452_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4_mul20_pop26_c0_ene452_0_NO_SHIFT_REG;
 logic rnode_4to5_bb4_mul20_pop26_c0_ene452_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4_mul20_pop26_c0_ene452_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_mul20_pop26_c0_ene452_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_mul20_pop26_c0_ene452_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_mul20_pop26_c0_ene452_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4_mul20_pop26_c0_ene452_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4_mul20_pop26_c0_ene452_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4_mul20_pop26_c0_ene452_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4_mul20_pop26_c0_ene452_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4_mul20_pop26_c0_ene452_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_2to4_bb4_mul20_pop26_c0_ene452_1_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4_mul20_pop26_c0_ene452_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4_mul20_pop26_c0_ene452_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4_mul20_pop26_c0_ene452_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb4_mul20_pop26_c0_ene452_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4_mul20_pop26_c0_ene452_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4_mul20_pop26_c0_ene452_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to4_bb4_mul20_pop26_c0_ene452_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_mul20_pop26_c0_ene452_0_NO_SHIFT_REG = rnode_4to5_bb4_mul20_pop26_c0_ene452_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4_mul20_pop26_c0_ene452_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_mul20_pop26_c0_ene452_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_NO_SHIFT_REG;
 logic rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_NO_SHIFT_REG),
	.data_out(rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_reg_5_fifo.DEPTH = 2;
defparam rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_stall_in = 1'b0;
assign rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_NO_SHIFT_REG = rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_reg_5_NO_SHIFT_REG;
assign rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_NO_SHIFT_REG;
 logic rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_4_fifo.DATA_WIDTH = 1;
defparam rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_NO_SHIFT_REG = rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_3to5_bb4__push23__pop23_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push23__pop23_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb4__push23__pop23_0_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push23__pop23_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb4__push23__pop23_0_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push23__pop23_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push23__pop23_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push23__pop23_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_3to5_bb4__push23__pop23_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to5_bb4__push23__pop23_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to5_bb4__push23__pop23_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_3to5_bb4__push23__pop23_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_3to5_bb4__push23__pop23_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb4__push23__pop23_NO_SHIFT_REG),
	.data_out(rnode_3to5_bb4__push23__pop23_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_3to5_bb4__push23__pop23_0_reg_5_fifo.DEPTH = 2;
defparam rnode_3to5_bb4__push23__pop23_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_3to5_bb4__push23__pop23_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to5_bb4__push23__pop23_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_3to5_bb4__push23__pop23_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4__push23__pop23_stall_in = 1'b0;
assign rnode_3to5_bb4__push23__pop23_0_NO_SHIFT_REG = rnode_3to5_bb4__push23__pop23_0_reg_5_NO_SHIFT_REG;
assign rnode_3to5_bb4__push23__pop23_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4__push23__pop23_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb4__pop23_c0_ene6_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop23_c0_ene6_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb4__pop23_c0_ene6_0_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop23_c0_ene6_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb4__pop23_c0_ene6_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop23_c0_ene6_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop23_c0_ene6_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop23_c0_ene6_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb4__pop23_c0_ene6_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb4__pop23_c0_ene6_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb4__pop23_c0_ene6_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb4__pop23_c0_ene6_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb4__pop23_c0_ene6_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb4__pop23_c0_ene6_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb4__pop23_c0_ene6_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb4__pop23_c0_ene6_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb4__pop23_c0_ene6_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb4__pop23_c0_ene6_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb4__pop23_c0_ene6_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb4__pop23_c0_ene6_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb4__pop23_c0_ene6_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4__pop23_c0_ene6_0_NO_SHIFT_REG = rnode_3to4_bb4__pop23_c0_ene6_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb4__pop23_c0_ene6_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4__pop23_c0_ene6_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_3to5_bb4__push24__pop24_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push24__pop24_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb4__push24__pop24_0_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push24__pop24_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb4__push24__pop24_0_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push24__pop24_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push24__pop24_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push24__pop24_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_3to5_bb4__push24__pop24_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to5_bb4__push24__pop24_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to5_bb4__push24__pop24_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_3to5_bb4__push24__pop24_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_3to5_bb4__push24__pop24_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb4__push24__pop24_NO_SHIFT_REG),
	.data_out(rnode_3to5_bb4__push24__pop24_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_3to5_bb4__push24__pop24_0_reg_5_fifo.DEPTH = 2;
defparam rnode_3to5_bb4__push24__pop24_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_3to5_bb4__push24__pop24_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to5_bb4__push24__pop24_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_3to5_bb4__push24__pop24_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4__push24__pop24_stall_in = 1'b0;
assign rnode_3to5_bb4__push24__pop24_0_NO_SHIFT_REG = rnode_3to5_bb4__push24__pop24_0_reg_5_NO_SHIFT_REG;
assign rnode_3to5_bb4__push24__pop24_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4__push24__pop24_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb4__pop24_c0_ene7_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop24_c0_ene7_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb4__pop24_c0_ene7_0_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop24_c0_ene7_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb4__pop24_c0_ene7_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop24_c0_ene7_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop24_c0_ene7_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop24_c0_ene7_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb4__pop24_c0_ene7_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb4__pop24_c0_ene7_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb4__pop24_c0_ene7_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb4__pop24_c0_ene7_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb4__pop24_c0_ene7_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb4__pop24_c0_ene7_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb4__pop24_c0_ene7_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb4__pop24_c0_ene7_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb4__pop24_c0_ene7_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb4__pop24_c0_ene7_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb4__pop24_c0_ene7_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb4__pop24_c0_ene7_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb4__pop24_c0_ene7_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4__pop24_c0_ene7_0_NO_SHIFT_REG = rnode_3to4_bb4__pop24_c0_ene7_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb4__pop24_c0_ene7_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4__pop24_c0_ene7_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_NO_SHIFT_REG;
 logic rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb4_i9_05219_push25_i9_05219_pop25_NO_SHIFT_REG),
	.data_out(rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_reg_5_fifo.DEPTH = 2;
defparam rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_i9_05219_push25_i9_05219_pop25_stall_in = 1'b0;
assign rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_NO_SHIFT_REG = rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_reg_5_NO_SHIFT_REG;
assign rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_NO_SHIFT_REG;
 logic rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb4_i9_05219_pop25_c0_ene8_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_NO_SHIFT_REG = rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_3to5_bb4__7221_push27__7221_pop27_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to5_bb4__7221_push27__7221_pop27_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb4__7221_push27__7221_pop27_0_NO_SHIFT_REG;
 logic rnode_3to5_bb4__7221_push27__7221_pop27_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to5_bb4__7221_push27__7221_pop27_0_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__7221_push27__7221_pop27_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__7221_push27__7221_pop27_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__7221_push27__7221_pop27_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_3to5_bb4__7221_push27__7221_pop27_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to5_bb4__7221_push27__7221_pop27_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to5_bb4__7221_push27__7221_pop27_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_3to5_bb4__7221_push27__7221_pop27_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_3to5_bb4__7221_push27__7221_pop27_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb4__7221_push27__7221_pop27_NO_SHIFT_REG),
	.data_out(rnode_3to5_bb4__7221_push27__7221_pop27_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_3to5_bb4__7221_push27__7221_pop27_0_reg_5_fifo.DEPTH = 2;
defparam rnode_3to5_bb4__7221_push27__7221_pop27_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_3to5_bb4__7221_push27__7221_pop27_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to5_bb4__7221_push27__7221_pop27_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_3to5_bb4__7221_push27__7221_pop27_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4__7221_push27__7221_pop27_stall_in = 1'b0;
assign rnode_3to5_bb4__7221_push27__7221_pop27_0_NO_SHIFT_REG = rnode_3to5_bb4__7221_push27__7221_pop27_0_reg_5_NO_SHIFT_REG;
assign rnode_3to5_bb4__7221_push27__7221_pop27_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4__7221_push27__7221_pop27_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb4__7221_pop27_c0_ene9_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb4__7221_pop27_c0_ene9_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb4__7221_pop27_c0_ene9_0_NO_SHIFT_REG;
 logic rnode_3to4_bb4__7221_pop27_c0_ene9_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to4_bb4__7221_pop27_c0_ene9_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__7221_pop27_c0_ene9_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__7221_pop27_c0_ene9_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__7221_pop27_c0_ene9_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb4__7221_pop27_c0_ene9_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb4__7221_pop27_c0_ene9_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb4__7221_pop27_c0_ene9_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb4__7221_pop27_c0_ene9_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb4__7221_pop27_c0_ene9_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb4__7221_pop27_c0_ene9_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb4__7221_pop27_c0_ene9_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb4__7221_pop27_c0_ene9_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb4__7221_pop27_c0_ene9_0_reg_4_fifo.DATA_WIDTH = 32;
defparam rnode_3to4_bb4__7221_pop27_c0_ene9_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb4__7221_pop27_c0_ene9_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb4__7221_pop27_c0_ene9_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb4__7221_pop27_c0_ene9_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4__7221_pop27_c0_ene9_0_NO_SHIFT_REG = rnode_3to4_bb4__7221_pop27_c0_ene9_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb4__7221_pop27_c0_ene9_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4__7221_pop27_c0_ene9_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb4_cmp3022_push28_cmp3022_pop28_NO_SHIFT_REG),
	.data_out(rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_reg_5_fifo.DEPTH = 2;
defparam rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_cmp3022_push28_cmp3022_pop28_stall_in = 1'b0;
assign rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_NO_SHIFT_REG = rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_reg_5_NO_SHIFT_REG;
assign rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_reg_4_fifo.DATA_WIDTH = 1;
defparam rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb4_cmp3022_pop28_c0_ene10_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_NO_SHIFT_REG = rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_3to5_bb4__push31__pop31_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push31__pop31_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push31__pop31_0_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push31__pop31_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push31__pop31_0_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push31__pop31_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push31__pop31_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_3to5_bb4__push31__pop31_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_3to5_bb4__push31__pop31_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to5_bb4__push31__pop31_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to5_bb4__push31__pop31_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_3to5_bb4__push31__pop31_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_3to5_bb4__push31__pop31_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb4__push31__pop31_NO_SHIFT_REG),
	.data_out(rnode_3to5_bb4__push31__pop31_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_3to5_bb4__push31__pop31_0_reg_5_fifo.DEPTH = 2;
defparam rnode_3to5_bb4__push31__pop31_0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_3to5_bb4__push31__pop31_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to5_bb4__push31__pop31_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_3to5_bb4__push31__pop31_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4__push31__pop31_stall_in = 1'b0;
assign rnode_3to5_bb4__push31__pop31_0_NO_SHIFT_REG = rnode_3to5_bb4__push31__pop31_0_reg_5_NO_SHIFT_REG;
assign rnode_3to5_bb4__push31__pop31_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4__push31__pop31_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb4__pop31_c0_ene11_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop31_c0_ene11_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop31_c0_ene11_0_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop31_c0_ene11_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop31_c0_ene11_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop31_c0_ene11_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop31_c0_ene11_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb4__pop31_c0_ene11_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb4__pop31_c0_ene11_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb4__pop31_c0_ene11_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb4__pop31_c0_ene11_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb4__pop31_c0_ene11_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb4__pop31_c0_ene11_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb4__pop31_c0_ene11_0_NO_SHIFT_REG),
	.data_out(rnode_3to4_bb4__pop31_c0_ene11_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb4__pop31_c0_ene11_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb4__pop31_c0_ene11_0_reg_4_fifo.DATA_WIDTH = 1;
defparam rnode_3to4_bb4__pop31_c0_ene11_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb4__pop31_c0_ene11_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb4__pop31_c0_ene11_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb4__pop31_c0_ene11_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4__pop31_c0_ene11_0_NO_SHIFT_REG = rnode_3to4_bb4__pop31_c0_ene11_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb4__pop31_c0_ene11_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4__pop31_c0_ene11_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb4_var__u5_stall_local;
wire [31:0] local_bb4_var__u5;

assign local_bb4_var__u5 = rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_NO_SHIFT_REG[31:0];

// This section implements a registered operation.
// 
wire local_bb4_arrayidx42_inputs_ready;
 reg local_bb4_arrayidx42_valid_out_NO_SHIFT_REG;
wire local_bb4_arrayidx42_stall_in;
wire local_bb4_arrayidx42_output_regs_ready;
 reg [31:0] local_bb4_arrayidx42_NO_SHIFT_REG;
wire [31:0] local_bb4_arrayidx42_op_wire;
wire local_bb4_arrayidx42_causedstall;

assign local_bb4_arrayidx42_inputs_ready = 1'b1;
assign local_bb4_arrayidx42_output_regs_ready = 1'b1;
assign local_bb4_arrayidx42_op_wire = (64'h0 + (rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_1_NO_SHIFT_REG << 6'h2));
assign rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign local_bb4_arrayidx42_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_arrayidx42_NO_SHIFT_REG <= 'x;
		local_bb4_arrayidx42_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_arrayidx42_output_regs_ready)
		begin
			local_bb4_arrayidx42_NO_SHIFT_REG <= local_bb4_arrayidx42_op_wire;
			local_bb4_arrayidx42_valid_out_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb4_arrayidx42_stall_in))
			begin
				local_bb4_arrayidx42_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4_div3223_pop29_c0_ene250_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4_div3223_pop29_c0_ene250_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4_div3223_pop29_c0_ene250_0_NO_SHIFT_REG;
 logic rnode_4to5_bb4_div3223_pop29_c0_ene250_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4_div3223_pop29_c0_ene250_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_div3223_pop29_c0_ene250_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_div3223_pop29_c0_ene250_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_div3223_pop29_c0_ene250_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4_div3223_pop29_c0_ene250_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4_div3223_pop29_c0_ene250_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4_div3223_pop29_c0_ene250_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4_div3223_pop29_c0_ene250_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4_div3223_pop29_c0_ene250_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb4_div3223_pop29_c0_ene250_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4_div3223_pop29_c0_ene250_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4_div3223_pop29_c0_ene250_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4_div3223_pop29_c0_ene250_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb4_div3223_pop29_c0_ene250_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4_div3223_pop29_c0_ene250_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4_div3223_pop29_c0_ene250_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4_div3223_pop29_c0_ene250_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_div3223_pop29_c0_ene250_0_NO_SHIFT_REG = rnode_4to5_bb4_div3223_pop29_c0_ene250_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4_div3223_pop29_c0_ene250_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_div3223_pop29_c0_ene250_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_stall_in_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4_cmp354124_pop30_c0_ene351_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_NO_SHIFT_REG = rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4_notexitcond11__0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4_notexitcond11__0_stall_in_NO_SHIFT_REG;
 logic rnode_4to5_bb4_notexitcond11__0_NO_SHIFT_REG;
 logic rnode_4to5_bb4_notexitcond11__0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_4to5_bb4_notexitcond11__0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_notexitcond11__0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_notexitcond11__0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_notexitcond11__0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4_notexitcond11__0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4_notexitcond11__0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4_notexitcond11__0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4_notexitcond11__0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4_notexitcond11__0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb4_notexitcond11__0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4_notexitcond11__0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4_notexitcond11__0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4_notexitcond11__0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_4to5_bb4_notexitcond11__0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4_notexitcond11__0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4_notexitcond11__0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4_notexitcond11__0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_notexitcond11__0_NO_SHIFT_REG = rnode_4to5_bb4_notexitcond11__0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4_notexitcond11__0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_notexitcond11__0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_NO_SHIFT_REG;
 logic rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_5_fifo.DATA_WIDTH = 64;
defparam rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_NO_SHIFT_REG = rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_NO_SHIFT_REG;
 logic rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_NO_SHIFT_REG;
 logic rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_NO_SHIFT_REG = rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4__pop23_c0_ene6_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop23_c0_ene6_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4__pop23_c0_ene6_0_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop23_c0_ene6_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4__pop23_c0_ene6_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop23_c0_ene6_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop23_c0_ene6_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop23_c0_ene6_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4__pop23_c0_ene6_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4__pop23_c0_ene6_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4__pop23_c0_ene6_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4__pop23_c0_ene6_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4__pop23_c0_ene6_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb4__pop23_c0_ene6_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4__pop23_c0_ene6_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4__pop23_c0_ene6_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4__pop23_c0_ene6_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb4__pop23_c0_ene6_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4__pop23_c0_ene6_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4__pop23_c0_ene6_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4__pop23_c0_ene6_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__pop23_c0_ene6_0_NO_SHIFT_REG = rnode_4to5_bb4__pop23_c0_ene6_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4__pop23_c0_ene6_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__pop23_c0_ene6_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4__pop24_c0_ene7_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop24_c0_ene7_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4__pop24_c0_ene7_0_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop24_c0_ene7_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4__pop24_c0_ene7_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop24_c0_ene7_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop24_c0_ene7_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop24_c0_ene7_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4__pop24_c0_ene7_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4__pop24_c0_ene7_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4__pop24_c0_ene7_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4__pop24_c0_ene7_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4__pop24_c0_ene7_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb4__pop24_c0_ene7_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4__pop24_c0_ene7_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4__pop24_c0_ene7_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4__pop24_c0_ene7_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb4__pop24_c0_ene7_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4__pop24_c0_ene7_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4__pop24_c0_ene7_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4__pop24_c0_ene7_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__pop24_c0_ene7_0_NO_SHIFT_REG = rnode_4to5_bb4__pop24_c0_ene7_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4__pop24_c0_ene7_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__pop24_c0_ene7_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_NO_SHIFT_REG;
 logic rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4_i9_05219_pop25_c0_ene8_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_NO_SHIFT_REG = rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4__7221_pop27_c0_ene9_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4__7221_pop27_c0_ene9_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4__7221_pop27_c0_ene9_0_NO_SHIFT_REG;
 logic rnode_4to5_bb4__7221_pop27_c0_ene9_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4__7221_pop27_c0_ene9_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__7221_pop27_c0_ene9_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__7221_pop27_c0_ene9_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__7221_pop27_c0_ene9_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4__7221_pop27_c0_ene9_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4__7221_pop27_c0_ene9_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4__7221_pop27_c0_ene9_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4__7221_pop27_c0_ene9_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4__7221_pop27_c0_ene9_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb4__7221_pop27_c0_ene9_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4__7221_pop27_c0_ene9_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4__7221_pop27_c0_ene9_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4__7221_pop27_c0_ene9_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb4__7221_pop27_c0_ene9_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4__7221_pop27_c0_ene9_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4__7221_pop27_c0_ene9_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4__7221_pop27_c0_ene9_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__7221_pop27_c0_ene9_0_NO_SHIFT_REG = rnode_4to5_bb4__7221_pop27_c0_ene9_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4__7221_pop27_c0_ene9_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__7221_pop27_c0_ene9_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_stall_in_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4_cmp3022_pop28_c0_ene10_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_NO_SHIFT_REG = rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4__pop31_c0_ene11_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop31_c0_ene11_0_stall_in_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop31_c0_ene11_0_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop31_c0_ene11_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop31_c0_ene11_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop31_c0_ene11_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop31_c0_ene11_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4__pop31_c0_ene11_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4__pop31_c0_ene11_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4__pop31_c0_ene11_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4__pop31_c0_ene11_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4__pop31_c0_ene11_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4__pop31_c0_ene11_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb4__pop31_c0_ene11_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb4__pop31_c0_ene11_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4__pop31_c0_ene11_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4__pop31_c0_ene11_0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_4to5_bb4__pop31_c0_ene11_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4__pop31_c0_ene11_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4__pop31_c0_ene11_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb4__pop31_c0_ene11_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__pop31_c0_ene11_0_NO_SHIFT_REG = rnode_4to5_bb4__pop31_c0_ene11_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4__pop31_c0_ene11_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__pop31_c0_ene11_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb4_mul37_stall_local;
wire [31:0] local_bb4_mul37;

assign local_bb4_mul37 = (local_bb4_var__u5 << 32'h2);

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi153_stall_local;
wire [511:0] local_bb4_c0_exi153;

assign local_bb4_c0_exi153[31:0] = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
assign local_bb4_c0_exi153[63:32] = rnode_4to5_bb4_div3223_pop29_c0_ene250_0_NO_SHIFT_REG;
assign local_bb4_c0_exi153[511:64] = 448'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;

// This section implements an unregistered operation.
// 
wire local_bb4_add38_valid_out;
wire local_bb4_add38_stall_in;
wire local_bb4_add38_inputs_ready;
wire local_bb4_add38_stall_local;
wire [31:0] local_bb4_add38;

assign local_bb4_add38_inputs_ready = (rnode_2to4_bb4_mul20_pop26_c0_ene452_0_valid_out_0_NO_SHIFT_REG & rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_valid_out_0_NO_SHIFT_REG);
assign local_bb4_add38 = (local_bb4_mul37 + rnode_2to4_bb4_mul20_pop26_c0_ene452_0_NO_SHIFT_REG);
assign local_bb4_add38_valid_out = 1'b1;
assign rnode_2to4_bb4_mul20_pop26_c0_ene452_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb4_indvars_iv54_pop22_acl_pop_i64_0_0_stall_in_0_NO_SHIFT_REG = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi254_stall_local;
wire [511:0] local_bb4_c0_exi254;

assign local_bb4_c0_exi254[63:0] = local_bb4_c0_exi153[63:0];
assign local_bb4_c0_exi254[64] = rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_NO_SHIFT_REG;
assign local_bb4_c0_exi254[511:65] = local_bb4_c0_exi153[511:65];

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb4_add38_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb4_add38_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4_add38_0_NO_SHIFT_REG;
 logic rnode_4to5_bb4_add38_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_4to5_bb4_add38_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_add38_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_add38_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb4_add38_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb4_add38_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb4_add38_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb4_add38_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb4_add38_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb4_add38_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb4_add38),
	.data_out(rnode_4to5_bb4_add38_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb4_add38_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb4_add38_0_reg_5_fifo.DATA_WIDTH = 32;
defparam rnode_4to5_bb4_add38_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb4_add38_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb4_add38_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb4_add38_stall_in = 1'b0;
assign rnode_4to5_bb4_add38_0_NO_SHIFT_REG = rnode_4to5_bb4_add38_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb4_add38_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_add38_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi355_stall_local;
wire [511:0] local_bb4_c0_exi355;

assign local_bb4_c0_exi355[71:0] = local_bb4_c0_exi254[71:0];
assign local_bb4_c0_exi355[72] = rnode_4to5_bb4_var__0_NO_SHIFT_REG;
assign local_bb4_c0_exi355[511:73] = local_bb4_c0_exi254[511:73];

// This section implements an unregistered operation.
// 
wire local_bb4_idxprom39_stall_local;
wire [63:0] local_bb4_idxprom39;

assign local_bb4_idxprom39[32] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[33] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[34] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[35] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[36] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[37] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[38] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[39] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[40] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[41] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[42] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[43] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[44] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[45] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[46] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[47] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[48] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[49] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[50] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[51] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[52] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[53] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[54] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[55] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[56] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[57] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[58] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[59] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[60] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[61] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[62] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[63] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG[31];
assign local_bb4_idxprom39[31:0] = rnode_4to5_bb4_add38_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi456_stall_local;
wire [511:0] local_bb4_c0_exi456;

assign local_bb4_c0_exi456[79:0] = local_bb4_c0_exi355[79:0];
assign local_bb4_c0_exi456[80] = rnode_4to5_bb4_notexitcond11__0_NO_SHIFT_REG;
assign local_bb4_c0_exi456[511:81] = local_bb4_c0_exi355[511:81];

// This section implements an unregistered operation.
// 
wire local_bb4_arrayidx40_stall_local;
wire [63:0] local_bb4_arrayidx40;

assign local_bb4_arrayidx40 = (input_key + local_bb4_idxprom39);

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi557_stall_local;
wire [511:0] local_bb4_c0_exi557;

assign local_bb4_c0_exi557[95:0] = local_bb4_c0_exi456[95:0];
assign local_bb4_c0_exi557[127:96] = rnode_4to5_bb4_mul20_pop26_c0_ene452_0_NO_SHIFT_REG;
assign local_bb4_c0_exi557[511:128] = local_bb4_c0_exi456[511:128];

// This section implements an unregistered operation.
// 
wire local_bb4_memcoalesce_key_bitcast_0_stall_local;
wire [63:0] local_bb4_memcoalesce_key_bitcast_0;

assign local_bb4_memcoalesce_key_bitcast_0 = local_bb4_arrayidx40;

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi658_stall_local;
wire [511:0] local_bb4_c0_exi658;

assign local_bb4_c0_exi658[127:0] = local_bb4_c0_exi557[127:0];
assign local_bb4_c0_exi658[191:128] = local_bb4_memcoalesce_key_bitcast_0;
assign local_bb4_c0_exi658[511:192] = local_bb4_c0_exi557[511:192];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi759_stall_local;
wire [511:0] local_bb4_c0_exi759;

assign local_bb4_c0_exi759[191:0] = local_bb4_c0_exi658[191:0];
assign local_bb4_c0_exi759[192] = rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_NO_SHIFT_REG;
assign local_bb4_c0_exi759[511:193] = local_bb4_c0_exi658[511:193];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi8_stall_local;
wire [511:0] local_bb4_c0_exi8;

assign local_bb4_c0_exi8[255:0] = local_bb4_c0_exi759[255:0];
assign local_bb4_c0_exi8[287:256] = local_bb4_arrayidx42_NO_SHIFT_REG;
assign local_bb4_c0_exi8[511:288] = local_bb4_c0_exi759[511:288];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi9_stall_local;
wire [511:0] local_bb4_c0_exi9;

assign local_bb4_c0_exi9[319:0] = local_bb4_c0_exi8[319:0];
assign local_bb4_c0_exi9[351:320] = rnode_4to5_bb4__pop23_c0_ene6_0_NO_SHIFT_REG;
assign local_bb4_c0_exi9[511:352] = local_bb4_c0_exi8[511:352];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi10_stall_local;
wire [511:0] local_bb4_c0_exi10;

assign local_bb4_c0_exi10[351:0] = local_bb4_c0_exi9[351:0];
assign local_bb4_c0_exi10[383:352] = rnode_4to5_bb4__pop24_c0_ene7_0_NO_SHIFT_REG;
assign local_bb4_c0_exi10[511:384] = local_bb4_c0_exi9[511:384];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi11_stall_local;
wire [511:0] local_bb4_c0_exi11;

assign local_bb4_c0_exi11[383:0] = local_bb4_c0_exi10[383:0];
assign local_bb4_c0_exi11[415:384] = rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_NO_SHIFT_REG;
assign local_bb4_c0_exi11[511:416] = local_bb4_c0_exi10[511:416];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi12_stall_local;
wire [511:0] local_bb4_c0_exi12;

assign local_bb4_c0_exi12[415:0] = local_bb4_c0_exi11[415:0];
assign local_bb4_c0_exi12[447:416] = rnode_4to5_bb4__7221_pop27_c0_ene9_0_NO_SHIFT_REG;
assign local_bb4_c0_exi12[511:448] = local_bb4_c0_exi11[511:448];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi13_stall_local;
wire [511:0] local_bb4_c0_exi13;

assign local_bb4_c0_exi13[447:0] = local_bb4_c0_exi12[447:0];
assign local_bb4_c0_exi13[448] = rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_NO_SHIFT_REG;
assign local_bb4_c0_exi13[511:449] = local_bb4_c0_exi12[511:449];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exi14_valid_out;
wire local_bb4_c0_exi14_stall_in;
wire local_bb4_c0_exi14_inputs_ready;
wire local_bb4_c0_exi14_stall_local;
wire [511:0] local_bb4_c0_exi14;

assign local_bb4_c0_exi14_inputs_ready = (rnode_4to5_bb4_mul20_pop26_c0_ene452_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_valid_out_NO_SHIFT_REG & local_bb4_arrayidx42_valid_out_NO_SHIFT_REG & rnode_4to5_bb4__pop23_c0_ene6_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb4__pop24_c0_ene7_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb4__7221_pop27_c0_ene9_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb4__pop31_c0_ene11_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb4_div3223_pop29_c0_ene250_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb4_var__0_valid_out_NO_SHIFT_REG & rnode_4to5_bb4_notexitcond11__0_valid_out_NO_SHIFT_REG & rnode_4to5_bb4_add38_0_valid_out_NO_SHIFT_REG);
assign local_bb4_c0_exi14[455:0] = local_bb4_c0_exi13[455:0];
assign local_bb4_c0_exi14[456] = rnode_4to5_bb4__pop31_c0_ene11_0_NO_SHIFT_REG;
assign local_bb4_c0_exi14[511:457] = local_bb4_c0_exi13[511:457];
assign local_bb4_c0_exi14_valid_out = 1'b1;
assign rnode_4to5_bb4_mul20_pop26_c0_ene452_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__phi_decision136_xor25_pop32_c0_ene5_0_stall_in_NO_SHIFT_REG = 1'b0;
assign local_bb4_arrayidx42_stall_in = 1'b0;
assign rnode_4to5_bb4__pop23_c0_ene6_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__pop24_c0_ene7_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_i9_05219_pop25_c0_ene8_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__7221_pop27_c0_ene9_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_cmp3022_pop28_c0_ene10_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4__pop31_c0_ene11_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_div3223_pop29_c0_ene250_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_cmp354124_pop30_c0_ene351_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_var__0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_notexitcond11__0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_add38_0_stall_in_NO_SHIFT_REG = 1'b0;

// This section implements a registered operation.
// 
wire local_bb4_c0_exit60_c0_exi14_inputs_ready;
 reg local_bb4_c0_exit60_c0_exi14_valid_out_0_NO_SHIFT_REG;
wire local_bb4_c0_exit60_c0_exi14_stall_in_0;
 reg local_bb4_c0_exit60_c0_exi14_valid_out_1_NO_SHIFT_REG;
wire local_bb4_c0_exit60_c0_exi14_stall_in_1;
 reg local_bb4_c0_exit60_c0_exi14_valid_out_2_NO_SHIFT_REG;
wire local_bb4_c0_exit60_c0_exi14_stall_in_2;
 reg [511:0] local_bb4_c0_exit60_c0_exi14_NO_SHIFT_REG;
wire [511:0] local_bb4_c0_exit60_c0_exi14_in;
wire local_bb4_c0_exit60_c0_exi14_valid;
wire local_bb4_c0_exit60_c0_exi14_causedstall;

acl_stall_free_sink local_bb4_c0_exit60_c0_exi14_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb4_c0_exi14),
	.data_out(local_bb4_c0_exit60_c0_exi14_in),
	.input_accepted(local_bb4_c0_enter48_c0_eni11_input_accepted),
	.valid_out(local_bb4_c0_exit60_c0_exi14_valid),
	.stall_in(~(local_bb4_c0_exit60_c0_exi14_output_regs_ready)),
	.stall_entry(local_bb4_c0_exit60_c0_exi14_entry_stall),
	.valids(local_bb4_c0_exit60_c0_exi14_valid_bits),
	.IIphases(local_bb4_c0_exit60_c0_exi14_phases),
	.inc_pipelined_thread(local_bb4_c0_enter48_c0_eni11_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb4_c0_enter48_c0_eni11_dec_pipelined_thread)
);

defparam local_bb4_c0_exit60_c0_exi14_instance.DATA_WIDTH = 512;
defparam local_bb4_c0_exit60_c0_exi14_instance.PIPELINE_DEPTH = 9;
defparam local_bb4_c0_exit60_c0_exi14_instance.SHARINGII = 1;
defparam local_bb4_c0_exit60_c0_exi14_instance.SCHEDULEII = 1;

assign local_bb4_c0_exit60_c0_exi14_inputs_ready = 1'b1;
assign local_bb4_c0_exit60_c0_exi14_output_regs_ready = ((~(local_bb4_c0_exit60_c0_exi14_valid_out_0_NO_SHIFT_REG) | ~(local_bb4_c0_exit60_c0_exi14_stall_in_0)) & (~(local_bb4_c0_exit60_c0_exi14_valid_out_1_NO_SHIFT_REG) | ~(local_bb4_c0_exit60_c0_exi14_stall_in_1)) & (~(local_bb4_c0_exit60_c0_exi14_valid_out_2_NO_SHIFT_REG) | ~(local_bb4_c0_exit60_c0_exi14_stall_in_2)));
assign local_bb4_c0_exi14_stall_in = 1'b0;
assign rnode_3to5_bb4_cmp354124_push30_cmp354124_pop30_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4_div3223_push29_div3223_pop29_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4_mul20_push26_mul20_pop26_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4__phi_decision136_xor25_push32__phi_decision136_xor25_pop32_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4__push23__pop23_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4__push24__pop24_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4_i9_05219_push25_i9_05219_pop25_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4__7221_push27__7221_pop27_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4_cmp3022_push28_cmp3022_pop28_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to5_bb4__push31__pop31_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_keep_going10_acl_pipeline_1_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb4_indvars_iv54_push22_indvars_iv_next55_0_stall_in_NO_SHIFT_REG = 1'b0;
assign local_bb4_c0_exit60_c0_exi14_causedstall = (1'b1 && (1'b0 && !(~(local_bb4_c0_exit60_c0_exi14_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_c0_exit60_c0_exi14_NO_SHIFT_REG <= 'x;
		local_bb4_c0_exit60_c0_exi14_valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_exit60_c0_exi14_valid_out_1_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_exit60_c0_exi14_valid_out_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_c0_exit60_c0_exi14_output_regs_ready)
		begin
			local_bb4_c0_exit60_c0_exi14_NO_SHIFT_REG <= local_bb4_c0_exit60_c0_exi14_in;
			local_bb4_c0_exit60_c0_exi14_valid_out_0_NO_SHIFT_REG <= local_bb4_c0_exit60_c0_exi14_valid;
			local_bb4_c0_exit60_c0_exi14_valid_out_1_NO_SHIFT_REG <= local_bb4_c0_exit60_c0_exi14_valid;
			local_bb4_c0_exit60_c0_exi14_valid_out_2_NO_SHIFT_REG <= local_bb4_c0_exit60_c0_exi14_valid;
		end
		else
		begin
			if (~(local_bb4_c0_exit60_c0_exi14_stall_in_0))
			begin
				local_bb4_c0_exit60_c0_exi14_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb4_c0_exit60_c0_exi14_stall_in_1))
			begin
				local_bb4_c0_exit60_c0_exi14_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb4_c0_exit60_c0_exi14_stall_in_2))
			begin
				local_bb4_c0_exit60_c0_exi14_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4_c0_exe666_valid_out;
wire local_bb4_c0_exe666_stall_in;
wire local_bb4_c0_exe666_inputs_ready;
wire local_bb4_c0_exe666_stall_local;
wire [63:0] local_bb4_c0_exe666;

assign local_bb4_c0_exe666_inputs_ready = local_bb4_c0_exit60_c0_exi14_valid_out_0_NO_SHIFT_REG;
assign local_bb4_c0_exe666 = local_bb4_c0_exit60_c0_exi14_NO_SHIFT_REG[191:128];
assign local_bb4_c0_exe666_valid_out = local_bb4_c0_exe666_inputs_ready;
assign local_bb4_c0_exe666_stall_local = local_bb4_c0_exe666_stall_in;
assign local_bb4_c0_exit60_c0_exi14_stall_in_0 = (|local_bb4_c0_exe666_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exe767_valid_out;
wire local_bb4_c0_exe767_stall_in;
wire local_bb4_c0_exe767_inputs_ready;
wire local_bb4_c0_exe767_stall_local;
wire local_bb4_c0_exe767;

assign local_bb4_c0_exe767_inputs_ready = local_bb4_c0_exit60_c0_exi14_valid_out_1_NO_SHIFT_REG;
assign local_bb4_c0_exe767 = local_bb4_c0_exit60_c0_exi14_NO_SHIFT_REG[192];
assign local_bb4_c0_exe767_valid_out = local_bb4_c0_exe767_inputs_ready;
assign local_bb4_c0_exe767_stall_local = local_bb4_c0_exe767_stall_in;
assign local_bb4_c0_exit60_c0_exi14_stall_in_1 = (|local_bb4_c0_exe767_stall_local);

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_10to169_bb4_c0_exit60_c0_exi14_0_valid_out_NO_SHIFT_REG;
 logic rnode_10to169_bb4_c0_exit60_c0_exi14_0_stall_in_NO_SHIFT_REG;
 logic [511:0] rnode_10to169_bb4_c0_exit60_c0_exi14_0_NO_SHIFT_REG;
 logic rnode_10to169_bb4_c0_exit60_c0_exi14_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic [511:0] rnode_10to169_bb4_c0_exit60_c0_exi14_0_reg_169_NO_SHIFT_REG;
 logic rnode_10to169_bb4_c0_exit60_c0_exi14_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_10to169_bb4_c0_exit60_c0_exi14_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_10to169_bb4_c0_exit60_c0_exi14_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_10to169_bb4_c0_exit60_c0_exi14_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_10to169_bb4_c0_exit60_c0_exi14_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_10to169_bb4_c0_exit60_c0_exi14_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_10to169_bb4_c0_exit60_c0_exi14_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_10to169_bb4_c0_exit60_c0_exi14_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(local_bb4_c0_exit60_c0_exi14_NO_SHIFT_REG),
	.data_out(rnode_10to169_bb4_c0_exit60_c0_exi14_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_10to169_bb4_c0_exit60_c0_exi14_0_reg_169_fifo.DEPTH = 160;
defparam rnode_10to169_bb4_c0_exit60_c0_exi14_0_reg_169_fifo.DATA_WIDTH = 512;
defparam rnode_10to169_bb4_c0_exit60_c0_exi14_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_10to169_bb4_c0_exit60_c0_exi14_0_reg_169_fifo.IMPL = "ram";

assign rnode_10to169_bb4_c0_exit60_c0_exi14_0_reg_169_inputs_ready_NO_SHIFT_REG = local_bb4_c0_exit60_c0_exi14_valid_out_2_NO_SHIFT_REG;
assign local_bb4_c0_exit60_c0_exi14_stall_in_2 = rnode_10to169_bb4_c0_exit60_c0_exi14_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_10to169_bb4_c0_exit60_c0_exi14_0_NO_SHIFT_REG = rnode_10to169_bb4_c0_exit60_c0_exi14_0_reg_169_NO_SHIFT_REG;
assign rnode_10to169_bb4_c0_exit60_c0_exi14_0_stall_in_reg_169_NO_SHIFT_REG = rnode_10to169_bb4_c0_exit60_c0_exi14_0_stall_in_NO_SHIFT_REG;
assign rnode_10to169_bb4_c0_exit60_c0_exi14_0_valid_out_NO_SHIFT_REG = rnode_10to169_bb4_c0_exit60_c0_exi14_0_valid_out_reg_169_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_10to10_bb4_c0_exe767_valid_out_0;
wire rstag_10to10_bb4_c0_exe767_stall_in_0;
 reg rstag_10to10_bb4_c0_exe767_consumed_0_NO_SHIFT_REG;
wire rstag_10to10_bb4_c0_exe767_valid_out_1;
wire rstag_10to10_bb4_c0_exe767_stall_in_1;
 reg rstag_10to10_bb4_c0_exe767_consumed_1_NO_SHIFT_REG;
wire rstag_10to10_bb4_c0_exe767_inputs_ready;
wire rstag_10to10_bb4_c0_exe767_stall_local;
 reg rstag_10to10_bb4_c0_exe767_staging_valid_NO_SHIFT_REG;
wire rstag_10to10_bb4_c0_exe767_combined_valid;
 reg rstag_10to10_bb4_c0_exe767_staging_reg_NO_SHIFT_REG;
wire rstag_10to10_bb4_c0_exe767;

assign rstag_10to10_bb4_c0_exe767_inputs_ready = local_bb4_c0_exe767_valid_out;
assign rstag_10to10_bb4_c0_exe767 = (rstag_10to10_bb4_c0_exe767_staging_valid_NO_SHIFT_REG ? rstag_10to10_bb4_c0_exe767_staging_reg_NO_SHIFT_REG : local_bb4_c0_exe767);
assign rstag_10to10_bb4_c0_exe767_combined_valid = (rstag_10to10_bb4_c0_exe767_staging_valid_NO_SHIFT_REG | rstag_10to10_bb4_c0_exe767_inputs_ready);
assign rstag_10to10_bb4_c0_exe767_stall_local = ((rstag_10to10_bb4_c0_exe767_stall_in_0 & ~(rstag_10to10_bb4_c0_exe767_consumed_0_NO_SHIFT_REG)) | (rstag_10to10_bb4_c0_exe767_stall_in_1 & ~(rstag_10to10_bb4_c0_exe767_consumed_1_NO_SHIFT_REG)));
assign rstag_10to10_bb4_c0_exe767_valid_out_0 = (rstag_10to10_bb4_c0_exe767_combined_valid & ~(rstag_10to10_bb4_c0_exe767_consumed_0_NO_SHIFT_REG));
assign rstag_10to10_bb4_c0_exe767_valid_out_1 = (rstag_10to10_bb4_c0_exe767_combined_valid & ~(rstag_10to10_bb4_c0_exe767_consumed_1_NO_SHIFT_REG));
assign local_bb4_c0_exe767_stall_in = (|rstag_10to10_bb4_c0_exe767_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_10to10_bb4_c0_exe767_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_10to10_bb4_c0_exe767_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_10to10_bb4_c0_exe767_stall_local)
		begin
			if (~(rstag_10to10_bb4_c0_exe767_staging_valid_NO_SHIFT_REG))
			begin
				rstag_10to10_bb4_c0_exe767_staging_valid_NO_SHIFT_REG <= rstag_10to10_bb4_c0_exe767_inputs_ready;
			end
		end
		else
		begin
			rstag_10to10_bb4_c0_exe767_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_10to10_bb4_c0_exe767_staging_valid_NO_SHIFT_REG))
		begin
			rstag_10to10_bb4_c0_exe767_staging_reg_NO_SHIFT_REG <= local_bb4_c0_exe767;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_10to10_bb4_c0_exe767_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_10to10_bb4_c0_exe767_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_10to10_bb4_c0_exe767_consumed_0_NO_SHIFT_REG <= (rstag_10to10_bb4_c0_exe767_combined_valid & (rstag_10to10_bb4_c0_exe767_consumed_0_NO_SHIFT_REG | ~(rstag_10to10_bb4_c0_exe767_stall_in_0)) & rstag_10to10_bb4_c0_exe767_stall_local);
		rstag_10to10_bb4_c0_exe767_consumed_1_NO_SHIFT_REG <= (rstag_10to10_bb4_c0_exe767_combined_valid & (rstag_10to10_bb4_c0_exe767_consumed_1_NO_SHIFT_REG | ~(rstag_10to10_bb4_c0_exe767_stall_in_1)) & rstag_10to10_bb4_c0_exe767_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_169to170_bb4_c0_exit60_c0_exi14_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exit60_c0_exi14_0_stall_in_0_NO_SHIFT_REG;
 logic [511:0] rnode_169to170_bb4_c0_exit60_c0_exi14_0_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exit60_c0_exi14_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exit60_c0_exi14_0_stall_in_1_NO_SHIFT_REG;
 logic [511:0] rnode_169to170_bb4_c0_exit60_c0_exi14_1_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic [511:0] rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exit60_c0_exi14_0_valid_out_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exit60_c0_exi14_0_stall_in_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exit60_c0_exi14_0_stall_out_reg_170_NO_SHIFT_REG;
 logic [511:0] rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_NO_SHIFT_REG),
	.valid_in(rnode_169to170_bb4_c0_exit60_c0_exi14_0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_169to170_bb4_c0_exit60_c0_exi14_0_stall_in_0_reg_170_NO_SHIFT_REG),
	.data_out(rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_NO_SHIFT_REG_fa),
	.valid_out({rnode_169to170_bb4_c0_exit60_c0_exi14_0_valid_out_0_NO_SHIFT_REG, rnode_169to170_bb4_c0_exit60_c0_exi14_0_valid_out_1_NO_SHIFT_REG}),
	.stall_in({rnode_169to170_bb4_c0_exit60_c0_exi14_0_stall_in_0_NO_SHIFT_REG, rnode_169to170_bb4_c0_exit60_c0_exi14_0_stall_in_1_NO_SHIFT_REG})
);

defparam rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_fanout_adaptor.DATA_WIDTH = 512;
defparam rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_fanout_adaptor.NUM_FANOUTS = 2;

acl_data_fifo rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_169to170_bb4_c0_exit60_c0_exi14_0_stall_in_0_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_169to170_bb4_c0_exit60_c0_exi14_0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_169to170_bb4_c0_exit60_c0_exi14_0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(rnode_10to169_bb4_c0_exit60_c0_exi14_0_NO_SHIFT_REG),
	.data_out(rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_NO_SHIFT_REG)
);

defparam rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_fifo.DEPTH = 2;
defparam rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_fifo.DATA_WIDTH = 512;
defparam rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_fifo.IMPL = "ll_reg";

assign rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_inputs_ready_NO_SHIFT_REG = rnode_10to169_bb4_c0_exit60_c0_exi14_0_valid_out_NO_SHIFT_REG;
assign rnode_10to169_bb4_c0_exit60_c0_exi14_0_stall_in_NO_SHIFT_REG = rnode_169to170_bb4_c0_exit60_c0_exi14_0_stall_out_reg_170_NO_SHIFT_REG;
assign rnode_169to170_bb4_c0_exit60_c0_exi14_0_NO_SHIFT_REG = rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_NO_SHIFT_REG_fa;
assign rnode_169to170_bb4_c0_exit60_c0_exi14_1_NO_SHIFT_REG = rnode_169to170_bb4_c0_exit60_c0_exi14_0_reg_170_NO_SHIFT_REG_fa;

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_10to169_bb4_c0_exe767_0_valid_out_NO_SHIFT_REG;
 logic rnode_10to169_bb4_c0_exe767_0_stall_in_NO_SHIFT_REG;
 logic rnode_10to169_bb4_c0_exe767_0_NO_SHIFT_REG;
 logic rnode_10to169_bb4_c0_exe767_0_reg_169_inputs_ready_NO_SHIFT_REG;
 logic rnode_10to169_bb4_c0_exe767_0_reg_169_NO_SHIFT_REG;
 logic rnode_10to169_bb4_c0_exe767_0_valid_out_reg_169_NO_SHIFT_REG;
 logic rnode_10to169_bb4_c0_exe767_0_stall_in_reg_169_NO_SHIFT_REG;
 logic rnode_10to169_bb4_c0_exe767_0_stall_out_reg_169_NO_SHIFT_REG;

acl_data_fifo rnode_10to169_bb4_c0_exe767_0_reg_169_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_10to169_bb4_c0_exe767_0_reg_169_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_10to169_bb4_c0_exe767_0_stall_in_reg_169_NO_SHIFT_REG),
	.valid_out(rnode_10to169_bb4_c0_exe767_0_valid_out_reg_169_NO_SHIFT_REG),
	.stall_out(rnode_10to169_bb4_c0_exe767_0_stall_out_reg_169_NO_SHIFT_REG),
	.data_in(rstag_10to10_bb4_c0_exe767),
	.data_out(rnode_10to169_bb4_c0_exe767_0_reg_169_NO_SHIFT_REG)
);

defparam rnode_10to169_bb4_c0_exe767_0_reg_169_fifo.DEPTH = 160;
defparam rnode_10to169_bb4_c0_exe767_0_reg_169_fifo.DATA_WIDTH = 1;
defparam rnode_10to169_bb4_c0_exe767_0_reg_169_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_10to169_bb4_c0_exe767_0_reg_169_fifo.IMPL = "ram";

assign rnode_10to169_bb4_c0_exe767_0_reg_169_inputs_ready_NO_SHIFT_REG = rstag_10to10_bb4_c0_exe767_valid_out_0;
assign rstag_10to10_bb4_c0_exe767_stall_in_0 = rnode_10to169_bb4_c0_exe767_0_stall_out_reg_169_NO_SHIFT_REG;
assign rnode_10to169_bb4_c0_exe767_0_NO_SHIFT_REG = rnode_10to169_bb4_c0_exe767_0_reg_169_NO_SHIFT_REG;
assign rnode_10to169_bb4_c0_exe767_0_stall_in_reg_169_NO_SHIFT_REG = rnode_10to169_bb4_c0_exe767_0_stall_in_NO_SHIFT_REG;
assign rnode_10to169_bb4_c0_exe767_0_valid_out_NO_SHIFT_REG = rnode_10to169_bb4_c0_exe767_0_valid_out_reg_169_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb4_ld_memcoalesce_key_load_0_inputs_ready;
 reg local_bb4_ld_memcoalesce_key_load_0_valid_out_NO_SHIFT_REG;
wire local_bb4_ld_memcoalesce_key_load_0_stall_in;
wire local_bb4_ld_memcoalesce_key_load_0_output_regs_ready;
wire local_bb4_ld_memcoalesce_key_load_0_fu_stall_out;
wire local_bb4_ld_memcoalesce_key_load_0_fu_valid_out;
wire [31:0] local_bb4_ld_memcoalesce_key_load_0_lsu_dataout;
 reg [31:0] local_bb4_ld_memcoalesce_key_load_0_NO_SHIFT_REG;
wire local_bb4_ld_memcoalesce_key_load_0_causedstall;

lsu_top lsu_local_bb4_ld_memcoalesce_key_load_0 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb4_ld_memcoalesce_key_load_0_fu_stall_out),
	.i_valid(local_bb4_ld_memcoalesce_key_load_0_inputs_ready),
	.i_address(local_bb4_c0_exe666),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rstag_10to10_bb4_c0_exe767),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb4_ld_memcoalesce_key_load_0_output_regs_ready)),
	.o_valid(local_bb4_ld_memcoalesce_key_load_0_fu_valid_out),
	.o_readdata(local_bb4_ld_memcoalesce_key_load_0_lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb4_ld_memcoalesce_key_load_0_active),
	.avm_address(avm_local_bb4_ld_memcoalesce_key_load_0_address),
	.avm_read(avm_local_bb4_ld_memcoalesce_key_load_0_read),
	.avm_readdata(avm_local_bb4_ld_memcoalesce_key_load_0_readdata),
	.avm_write(avm_local_bb4_ld_memcoalesce_key_load_0_write),
	.avm_writeack(avm_local_bb4_ld_memcoalesce_key_load_0_writeack),
	.avm_burstcount(avm_local_bb4_ld_memcoalesce_key_load_0_burstcount),
	.avm_writedata(avm_local_bb4_ld_memcoalesce_key_load_0_writedata),
	.avm_byteenable(avm_local_bb4_ld_memcoalesce_key_load_0_byteenable),
	.avm_waitrequest(avm_local_bb4_ld_memcoalesce_key_load_0_waitrequest),
	.avm_readdatavalid(avm_local_bb4_ld_memcoalesce_key_load_0_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb4_ld_memcoalesce_key_load_0.AWIDTH = 30;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.WIDTH_BYTES = 4;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.MWIDTH_BYTES = 32;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.WRITEDATAWIDTH_BYTES = 32;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.READ = 1;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.ATOMIC = 0;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.WIDTH = 32;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.MWIDTH = 256;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.ATOMIC_WIDTH = 3;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.MEMORY_SIDE_MEM_LATENCY = 61;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.USE_WRITE_ACK = 0;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.NUMBER_BANKS = 1;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.USEINPUTFIFO = 0;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.USECACHING = 0;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.USEOUTPUTFIFO = 1;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.HIGH_FMAX = 1;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.ADDRSPACE = 1;
defparam lsu_local_bb4_ld_memcoalesce_key_load_0.STYLE = "BURST-COALESCED";

assign local_bb4_ld_memcoalesce_key_load_0_inputs_ready = (local_bb4_c0_exe666_valid_out & rstag_10to10_bb4_c0_exe767_valid_out_1);
assign local_bb4_ld_memcoalesce_key_load_0_output_regs_ready = (&(~(local_bb4_ld_memcoalesce_key_load_0_valid_out_NO_SHIFT_REG) | ~(local_bb4_ld_memcoalesce_key_load_0_stall_in)));
assign local_bb4_c0_exe666_stall_in = (local_bb4_ld_memcoalesce_key_load_0_fu_stall_out | ~(local_bb4_ld_memcoalesce_key_load_0_inputs_ready));
assign rstag_10to10_bb4_c0_exe767_stall_in_1 = (local_bb4_ld_memcoalesce_key_load_0_fu_stall_out | ~(local_bb4_ld_memcoalesce_key_load_0_inputs_ready));
assign local_bb4_ld_memcoalesce_key_load_0_causedstall = (local_bb4_ld_memcoalesce_key_load_0_inputs_ready && (local_bb4_ld_memcoalesce_key_load_0_fu_stall_out && !(~(local_bb4_ld_memcoalesce_key_load_0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_ld_memcoalesce_key_load_0_NO_SHIFT_REG <= 'x;
		local_bb4_ld_memcoalesce_key_load_0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_ld_memcoalesce_key_load_0_output_regs_ready)
		begin
			local_bb4_ld_memcoalesce_key_load_0_NO_SHIFT_REG <= local_bb4_ld_memcoalesce_key_load_0_lsu_dataout;
			local_bb4_ld_memcoalesce_key_load_0_valid_out_NO_SHIFT_REG <= local_bb4_ld_memcoalesce_key_load_0_fu_valid_out;
		end
		else
		begin
			if (~(local_bb4_ld_memcoalesce_key_load_0_stall_in))
			begin
				local_bb4_ld_memcoalesce_key_load_0_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb4_c0_exe8_valid_out;
wire local_bb4_c0_exe8_stall_in;
wire local_bb4_c0_exe8_inputs_ready;
wire local_bb4_c0_exe8_stall_local;
wire [31:0] local_bb4_c0_exe8;

assign local_bb4_c0_exe8_inputs_ready = rnode_169to170_bb4_c0_exit60_c0_exi14_0_valid_out_0_NO_SHIFT_REG;
assign local_bb4_c0_exe8 = rnode_169to170_bb4_c0_exit60_c0_exi14_0_NO_SHIFT_REG[287:256];
assign local_bb4_c0_exe8_valid_out = local_bb4_c0_exe8_inputs_ready;
assign local_bb4_c0_exe8_stall_local = local_bb4_c0_exe8_stall_in;
assign rnode_169to170_bb4_c0_exit60_c0_exi14_0_stall_in_0_NO_SHIFT_REG = (|local_bb4_c0_exe8_stall_local);

// Register node:
//  * latency = 30
//  * capacity = 30
 logic rnode_170to200_bb4_c0_exit60_c0_exi14_0_valid_out_NO_SHIFT_REG;
 logic rnode_170to200_bb4_c0_exit60_c0_exi14_0_stall_in_NO_SHIFT_REG;
 logic [511:0] rnode_170to200_bb4_c0_exit60_c0_exi14_0_NO_SHIFT_REG;
 logic rnode_170to200_bb4_c0_exit60_c0_exi14_0_reg_200_inputs_ready_NO_SHIFT_REG;
 logic [511:0] rnode_170to200_bb4_c0_exit60_c0_exi14_0_reg_200_NO_SHIFT_REG;
 logic rnode_170to200_bb4_c0_exit60_c0_exi14_0_valid_out_reg_200_NO_SHIFT_REG;
 logic rnode_170to200_bb4_c0_exit60_c0_exi14_0_stall_in_reg_200_NO_SHIFT_REG;
 logic rnode_170to200_bb4_c0_exit60_c0_exi14_0_stall_out_reg_200_NO_SHIFT_REG;

acl_data_fifo rnode_170to200_bb4_c0_exit60_c0_exi14_0_reg_200_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_170to200_bb4_c0_exit60_c0_exi14_0_reg_200_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_170to200_bb4_c0_exit60_c0_exi14_0_stall_in_reg_200_NO_SHIFT_REG),
	.valid_out(rnode_170to200_bb4_c0_exit60_c0_exi14_0_valid_out_reg_200_NO_SHIFT_REG),
	.stall_out(rnode_170to200_bb4_c0_exit60_c0_exi14_0_stall_out_reg_200_NO_SHIFT_REG),
	.data_in(rnode_169to170_bb4_c0_exit60_c0_exi14_1_NO_SHIFT_REG),
	.data_out(rnode_170to200_bb4_c0_exit60_c0_exi14_0_reg_200_NO_SHIFT_REG)
);

defparam rnode_170to200_bb4_c0_exit60_c0_exi14_0_reg_200_fifo.DEPTH = 31;
defparam rnode_170to200_bb4_c0_exit60_c0_exi14_0_reg_200_fifo.DATA_WIDTH = 512;
defparam rnode_170to200_bb4_c0_exit60_c0_exi14_0_reg_200_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_170to200_bb4_c0_exit60_c0_exi14_0_reg_200_fifo.IMPL = "ram";

assign rnode_170to200_bb4_c0_exit60_c0_exi14_0_reg_200_inputs_ready_NO_SHIFT_REG = rnode_169to170_bb4_c0_exit60_c0_exi14_0_valid_out_1_NO_SHIFT_REG;
assign rnode_169to170_bb4_c0_exit60_c0_exi14_0_stall_in_1_NO_SHIFT_REG = rnode_170to200_bb4_c0_exit60_c0_exi14_0_stall_out_reg_200_NO_SHIFT_REG;
assign rnode_170to200_bb4_c0_exit60_c0_exi14_0_NO_SHIFT_REG = rnode_170to200_bb4_c0_exit60_c0_exi14_0_reg_200_NO_SHIFT_REG;
assign rnode_170to200_bb4_c0_exit60_c0_exi14_0_stall_in_reg_200_NO_SHIFT_REG = rnode_170to200_bb4_c0_exit60_c0_exi14_0_stall_in_NO_SHIFT_REG;
assign rnode_170to200_bb4_c0_exit60_c0_exi14_0_valid_out_NO_SHIFT_REG = rnode_170to200_bb4_c0_exit60_c0_exi14_0_valid_out_reg_200_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_169to170_bb4_c0_exe767_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exe767_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exe767_0_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exe767_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exe767_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exe767_1_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exe767_0_reg_170_inputs_ready_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exe767_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exe767_0_valid_out_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exe767_0_stall_in_0_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exe767_0_stall_out_reg_170_NO_SHIFT_REG;
 logic rnode_169to170_bb4_c0_exe767_0_reg_170_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_169to170_bb4_c0_exe767_0_reg_170_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_169to170_bb4_c0_exe767_0_reg_170_NO_SHIFT_REG),
	.valid_in(rnode_169to170_bb4_c0_exe767_0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_169to170_bb4_c0_exe767_0_stall_in_0_reg_170_NO_SHIFT_REG),
	.data_out(rnode_169to170_bb4_c0_exe767_0_reg_170_NO_SHIFT_REG_fa),
	.valid_out({rnode_169to170_bb4_c0_exe767_0_valid_out_0_NO_SHIFT_REG, rnode_169to170_bb4_c0_exe767_0_valid_out_1_NO_SHIFT_REG}),
	.stall_in({rnode_169to170_bb4_c0_exe767_0_stall_in_0_NO_SHIFT_REG, rnode_169to170_bb4_c0_exe767_0_stall_in_1_NO_SHIFT_REG})
);

defparam rnode_169to170_bb4_c0_exe767_0_reg_170_fanout_adaptor.DATA_WIDTH = 1;
defparam rnode_169to170_bb4_c0_exe767_0_reg_170_fanout_adaptor.NUM_FANOUTS = 2;

acl_data_fifo rnode_169to170_bb4_c0_exe767_0_reg_170_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_169to170_bb4_c0_exe767_0_reg_170_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_169to170_bb4_c0_exe767_0_stall_in_0_reg_170_NO_SHIFT_REG),
	.valid_out(rnode_169to170_bb4_c0_exe767_0_valid_out_0_reg_170_NO_SHIFT_REG),
	.stall_out(rnode_169to170_bb4_c0_exe767_0_stall_out_reg_170_NO_SHIFT_REG),
	.data_in(rnode_10to169_bb4_c0_exe767_0_NO_SHIFT_REG),
	.data_out(rnode_169to170_bb4_c0_exe767_0_reg_170_NO_SHIFT_REG)
);

defparam rnode_169to170_bb4_c0_exe767_0_reg_170_fifo.DEPTH = 2;
defparam rnode_169to170_bb4_c0_exe767_0_reg_170_fifo.DATA_WIDTH = 1;
defparam rnode_169to170_bb4_c0_exe767_0_reg_170_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_169to170_bb4_c0_exe767_0_reg_170_fifo.IMPL = "ll_reg";

assign rnode_169to170_bb4_c0_exe767_0_reg_170_inputs_ready_NO_SHIFT_REG = rnode_10to169_bb4_c0_exe767_0_valid_out_NO_SHIFT_REG;
assign rnode_10to169_bb4_c0_exe767_0_stall_in_NO_SHIFT_REG = rnode_169to170_bb4_c0_exe767_0_stall_out_reg_170_NO_SHIFT_REG;
assign rnode_169to170_bb4_c0_exe767_0_NO_SHIFT_REG = rnode_169to170_bb4_c0_exe767_0_reg_170_NO_SHIFT_REG_fa;
assign rnode_169to170_bb4_c0_exe767_1_NO_SHIFT_REG = rnode_169to170_bb4_c0_exe767_0_reg_170_NO_SHIFT_REG_fa;

// This section implements a staging register.
// 
wire rstag_170to170_bb4_ld_memcoalesce_key_load_0_valid_out_0;
wire rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_0;
 reg rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_0_NO_SHIFT_REG;
wire rstag_170to170_bb4_ld_memcoalesce_key_load_0_valid_out_1;
wire rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_1;
 reg rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_1_NO_SHIFT_REG;
wire rstag_170to170_bb4_ld_memcoalesce_key_load_0_valid_out_2;
wire rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_2;
 reg rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_2_NO_SHIFT_REG;
wire rstag_170to170_bb4_ld_memcoalesce_key_load_0_valid_out_3;
wire rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_3;
 reg rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_3_NO_SHIFT_REG;
wire rstag_170to170_bb4_ld_memcoalesce_key_load_0_inputs_ready;
wire rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_local;
 reg rstag_170to170_bb4_ld_memcoalesce_key_load_0_staging_valid_NO_SHIFT_REG;
wire rstag_170to170_bb4_ld_memcoalesce_key_load_0_combined_valid;
 reg [31:0] rstag_170to170_bb4_ld_memcoalesce_key_load_0_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_170to170_bb4_ld_memcoalesce_key_load_0;

assign rstag_170to170_bb4_ld_memcoalesce_key_load_0_inputs_ready = local_bb4_ld_memcoalesce_key_load_0_valid_out_NO_SHIFT_REG;
assign rstag_170to170_bb4_ld_memcoalesce_key_load_0 = (rstag_170to170_bb4_ld_memcoalesce_key_load_0_staging_valid_NO_SHIFT_REG ? rstag_170to170_bb4_ld_memcoalesce_key_load_0_staging_reg_NO_SHIFT_REG : local_bb4_ld_memcoalesce_key_load_0_NO_SHIFT_REG);
assign rstag_170to170_bb4_ld_memcoalesce_key_load_0_combined_valid = (rstag_170to170_bb4_ld_memcoalesce_key_load_0_staging_valid_NO_SHIFT_REG | rstag_170to170_bb4_ld_memcoalesce_key_load_0_inputs_ready);
assign rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_local = ((rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_0 & ~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_0_NO_SHIFT_REG)) | (rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_1 & ~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_1_NO_SHIFT_REG)) | (rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_2 & ~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_2_NO_SHIFT_REG)) | (rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_3 & ~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_3_NO_SHIFT_REG)));
assign rstag_170to170_bb4_ld_memcoalesce_key_load_0_valid_out_0 = (rstag_170to170_bb4_ld_memcoalesce_key_load_0_combined_valid & ~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_0_NO_SHIFT_REG));
assign rstag_170to170_bb4_ld_memcoalesce_key_load_0_valid_out_1 = (rstag_170to170_bb4_ld_memcoalesce_key_load_0_combined_valid & ~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_1_NO_SHIFT_REG));
assign rstag_170to170_bb4_ld_memcoalesce_key_load_0_valid_out_2 = (rstag_170to170_bb4_ld_memcoalesce_key_load_0_combined_valid & ~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_2_NO_SHIFT_REG));
assign rstag_170to170_bb4_ld_memcoalesce_key_load_0_valid_out_3 = (rstag_170to170_bb4_ld_memcoalesce_key_load_0_combined_valid & ~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_3_NO_SHIFT_REG));
assign local_bb4_ld_memcoalesce_key_load_0_stall_in = (|rstag_170to170_bb4_ld_memcoalesce_key_load_0_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_170to170_bb4_ld_memcoalesce_key_load_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_170to170_bb4_ld_memcoalesce_key_load_0_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_local)
		begin
			if (~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_staging_valid_NO_SHIFT_REG))
			begin
				rstag_170to170_bb4_ld_memcoalesce_key_load_0_staging_valid_NO_SHIFT_REG <= rstag_170to170_bb4_ld_memcoalesce_key_load_0_inputs_ready;
			end
		end
		else
		begin
			rstag_170to170_bb4_ld_memcoalesce_key_load_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_staging_valid_NO_SHIFT_REG))
		begin
			rstag_170to170_bb4_ld_memcoalesce_key_load_0_staging_reg_NO_SHIFT_REG <= local_bb4_ld_memcoalesce_key_load_0_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_2_NO_SHIFT_REG <= 1'b0;
		rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_0_NO_SHIFT_REG <= (rstag_170to170_bb4_ld_memcoalesce_key_load_0_combined_valid & (rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_0_NO_SHIFT_REG | ~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_0)) & rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_local);
		rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_1_NO_SHIFT_REG <= (rstag_170to170_bb4_ld_memcoalesce_key_load_0_combined_valid & (rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_1_NO_SHIFT_REG | ~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_1)) & rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_local);
		rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_2_NO_SHIFT_REG <= (rstag_170to170_bb4_ld_memcoalesce_key_load_0_combined_valid & (rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_2_NO_SHIFT_REG | ~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_2)) & rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_local);
		rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_3_NO_SHIFT_REG <= (rstag_170to170_bb4_ld_memcoalesce_key_load_0_combined_valid & (rstag_170to170_bb4_ld_memcoalesce_key_load_0_consumed_3_NO_SHIFT_REG | ~(rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_3)) & rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_0_NO_SHIFT_REG;
 logic [511:0] rnode_200to201_bb4_c0_exit60_c0_exi14_0_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_1_NO_SHIFT_REG;
 logic [511:0] rnode_200to201_bb4_c0_exit60_c0_exi14_1_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_2_NO_SHIFT_REG;
 logic [511:0] rnode_200to201_bb4_c0_exit60_c0_exi14_2_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_3_NO_SHIFT_REG;
 logic [511:0] rnode_200to201_bb4_c0_exit60_c0_exi14_3_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_4_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_4_NO_SHIFT_REG;
 logic [511:0] rnode_200to201_bb4_c0_exit60_c0_exi14_4_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_5_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_5_NO_SHIFT_REG;
 logic [511:0] rnode_200to201_bb4_c0_exit60_c0_exi14_5_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_inputs_ready_NO_SHIFT_REG;
 logic [511:0] rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_0_reg_201_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_0_reg_201_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_out_reg_201_NO_SHIFT_REG;
 logic [511:0] rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_NO_SHIFT_REG),
	.valid_in(rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_0_reg_201_NO_SHIFT_REG),
	.stall_out(rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_0_reg_201_NO_SHIFT_REG),
	.data_out(rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_NO_SHIFT_REG_fa),
	.valid_out({rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_0_NO_SHIFT_REG, rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_1_NO_SHIFT_REG, rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_2_NO_SHIFT_REG, rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_3_NO_SHIFT_REG, rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_4_NO_SHIFT_REG, rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_5_NO_SHIFT_REG}),
	.stall_in({rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_0_NO_SHIFT_REG, rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_1_NO_SHIFT_REG, rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_2_NO_SHIFT_REG, rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_3_NO_SHIFT_REG, rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_4_NO_SHIFT_REG, rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_5_NO_SHIFT_REG})
);

defparam rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_fanout_adaptor.DATA_WIDTH = 512;
defparam rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_fanout_adaptor.NUM_FANOUTS = 6;

acl_data_fifo rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_0_reg_201_NO_SHIFT_REG),
	.valid_out(rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_0_reg_201_NO_SHIFT_REG),
	.stall_out(rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_out_reg_201_NO_SHIFT_REG),
	.data_in(rnode_170to200_bb4_c0_exit60_c0_exi14_0_NO_SHIFT_REG),
	.data_out(rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_NO_SHIFT_REG)
);

defparam rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_fifo.DEPTH = 2;
defparam rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_fifo.DATA_WIDTH = 512;
defparam rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_fifo.IMPL = "ll_reg";

assign rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_inputs_ready_NO_SHIFT_REG = rnode_170to200_bb4_c0_exit60_c0_exi14_0_valid_out_NO_SHIFT_REG;
assign rnode_170to200_bb4_c0_exit60_c0_exi14_0_stall_in_NO_SHIFT_REG = rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_out_reg_201_NO_SHIFT_REG;
assign rnode_200to201_bb4_c0_exit60_c0_exi14_0_NO_SHIFT_REG = rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_NO_SHIFT_REG_fa;
assign rnode_200to201_bb4_c0_exit60_c0_exi14_1_NO_SHIFT_REG = rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_NO_SHIFT_REG_fa;
assign rnode_200to201_bb4_c0_exit60_c0_exi14_2_NO_SHIFT_REG = rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_NO_SHIFT_REG_fa;
assign rnode_200to201_bb4_c0_exit60_c0_exi14_3_NO_SHIFT_REG = rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_NO_SHIFT_REG_fa;
assign rnode_200to201_bb4_c0_exit60_c0_exi14_4_NO_SHIFT_REG = rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_NO_SHIFT_REG_fa;
assign rnode_200to201_bb4_c0_exit60_c0_exi14_5_NO_SHIFT_REG = rnode_200to201_bb4_c0_exit60_c0_exi14_0_reg_201_NO_SHIFT_REG_fa;

// Register node:
//  * latency = 30
//  * capacity = 30
 logic rnode_170to200_bb4_c0_exe767_0_valid_out_NO_SHIFT_REG;
 logic rnode_170to200_bb4_c0_exe767_0_stall_in_NO_SHIFT_REG;
 logic rnode_170to200_bb4_c0_exe767_0_NO_SHIFT_REG;
 logic rnode_170to200_bb4_c0_exe767_0_reg_200_inputs_ready_NO_SHIFT_REG;
 logic rnode_170to200_bb4_c0_exe767_0_reg_200_NO_SHIFT_REG;
 logic rnode_170to200_bb4_c0_exe767_0_valid_out_reg_200_NO_SHIFT_REG;
 logic rnode_170to200_bb4_c0_exe767_0_stall_in_reg_200_NO_SHIFT_REG;
 logic rnode_170to200_bb4_c0_exe767_0_stall_out_reg_200_NO_SHIFT_REG;

acl_data_fifo rnode_170to200_bb4_c0_exe767_0_reg_200_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_170to200_bb4_c0_exe767_0_reg_200_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_170to200_bb4_c0_exe767_0_stall_in_reg_200_NO_SHIFT_REG),
	.valid_out(rnode_170to200_bb4_c0_exe767_0_valid_out_reg_200_NO_SHIFT_REG),
	.stall_out(rnode_170to200_bb4_c0_exe767_0_stall_out_reg_200_NO_SHIFT_REG),
	.data_in(rnode_169to170_bb4_c0_exe767_1_NO_SHIFT_REG),
	.data_out(rnode_170to200_bb4_c0_exe767_0_reg_200_NO_SHIFT_REG)
);

defparam rnode_170to200_bb4_c0_exe767_0_reg_200_fifo.DEPTH = 31;
defparam rnode_170to200_bb4_c0_exe767_0_reg_200_fifo.DATA_WIDTH = 1;
defparam rnode_170to200_bb4_c0_exe767_0_reg_200_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_170to200_bb4_c0_exe767_0_reg_200_fifo.IMPL = "ram";

assign rnode_170to200_bb4_c0_exe767_0_reg_200_inputs_ready_NO_SHIFT_REG = rnode_169to170_bb4_c0_exe767_0_valid_out_1_NO_SHIFT_REG;
assign rnode_169to170_bb4_c0_exe767_0_stall_in_1_NO_SHIFT_REG = rnode_170to200_bb4_c0_exe767_0_stall_out_reg_200_NO_SHIFT_REG;
assign rnode_170to200_bb4_c0_exe767_0_NO_SHIFT_REG = rnode_170to200_bb4_c0_exe767_0_reg_200_NO_SHIFT_REG;
assign rnode_170to200_bb4_c0_exe767_0_stall_in_reg_200_NO_SHIFT_REG = rnode_170to200_bb4_c0_exe767_0_stall_in_NO_SHIFT_REG;
assign rnode_170to200_bb4_c0_exe767_0_valid_out_NO_SHIFT_REG = rnode_170to200_bb4_c0_exe767_0_valid_out_reg_200_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_memcoalesce_key_extrValue_3_stall_local;
wire [7:0] local_bb4_memcoalesce_key_extrValue_3;

assign local_bb4_memcoalesce_key_extrValue_3 = rstag_170to170_bb4_ld_memcoalesce_key_load_0[31:24];

// This section implements an unregistered operation.
// 
wire local_bb4_memcoalesce_key_extrValue_2_stall_local;
wire [7:0] local_bb4_memcoalesce_key_extrValue_2;

assign local_bb4_memcoalesce_key_extrValue_2 = rstag_170to170_bb4_ld_memcoalesce_key_load_0[23:16];

// This section implements an unregistered operation.
// 
wire local_bb4_memcoalesce_key_extrValue_1_stall_local;
wire [7:0] local_bb4_memcoalesce_key_extrValue_1;

assign local_bb4_memcoalesce_key_extrValue_1 = rstag_170to170_bb4_ld_memcoalesce_key_load_0[15:8];

// This section implements an unregistered operation.
// 
wire local_bb4_memcoalesce_key_extrValue_0_stall_local;
wire [7:0] local_bb4_memcoalesce_key_extrValue_0;

assign local_bb4_memcoalesce_key_extrValue_0 = rstag_170to170_bb4_ld_memcoalesce_key_load_0[7:0];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exe363_stall_local;
wire local_bb4_c0_exe363;

assign local_bb4_c0_exe363 = rnode_200to201_bb4_c0_exit60_c0_exi14_0_NO_SHIFT_REG[72];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exe565_stall_local;
wire [31:0] local_bb4_c0_exe565;

assign local_bb4_c0_exe565 = rnode_200to201_bb4_c0_exit60_c0_exi14_1_NO_SHIFT_REG[127:96];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exe9_stall_local;
wire [31:0] local_bb4_c0_exe9;

assign local_bb4_c0_exe9 = rnode_200to201_bb4_c0_exit60_c0_exi14_2_NO_SHIFT_REG[351:320];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exe10_stall_local;
wire [31:0] local_bb4_c0_exe10;

assign local_bb4_c0_exe10 = rnode_200to201_bb4_c0_exit60_c0_exi14_3_NO_SHIFT_REG[383:352];

// This section implements an unregistered operation.
// 
wire local_bb4_c0_exe13_valid_out;
wire local_bb4_c0_exe13_stall_in;
 reg local_bb4_c0_exe13_consumed_0_NO_SHIFT_REG;
wire local_bb4_c0_exe10_valid_out;
wire local_bb4_c0_exe10_stall_in;
 reg local_bb4_c0_exe10_consumed_0_NO_SHIFT_REG;
wire local_bb4_c0_exe9_valid_out;
wire local_bb4_c0_exe9_stall_in;
 reg local_bb4_c0_exe9_consumed_0_NO_SHIFT_REG;
wire local_bb4_c0_exe565_valid_out;
wire local_bb4_c0_exe565_stall_in;
 reg local_bb4_c0_exe565_consumed_0_NO_SHIFT_REG;
wire local_bb4_c0_exe363_valid_out;
wire local_bb4_c0_exe363_stall_in;
 reg local_bb4_c0_exe363_consumed_0_NO_SHIFT_REG;
wire local_bb4_c0_exe13_inputs_ready;
wire local_bb4_c0_exe13_stall_local;
wire local_bb4_c0_exe13;

assign local_bb4_c0_exe13_inputs_ready = (rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_4_NO_SHIFT_REG & rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_3_NO_SHIFT_REG & rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_2_NO_SHIFT_REG & rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_1_NO_SHIFT_REG & rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_0_NO_SHIFT_REG);
assign local_bb4_c0_exe13 = rnode_200to201_bb4_c0_exit60_c0_exi14_4_NO_SHIFT_REG[448];
assign local_bb4_c0_exe13_stall_local = ((local_bb4_c0_exe13_stall_in & ~(local_bb4_c0_exe13_consumed_0_NO_SHIFT_REG)) | (local_bb4_c0_exe10_stall_in & ~(local_bb4_c0_exe10_consumed_0_NO_SHIFT_REG)) | (local_bb4_c0_exe9_stall_in & ~(local_bb4_c0_exe9_consumed_0_NO_SHIFT_REG)) | (local_bb4_c0_exe565_stall_in & ~(local_bb4_c0_exe565_consumed_0_NO_SHIFT_REG)) | (local_bb4_c0_exe363_stall_in & ~(local_bb4_c0_exe363_consumed_0_NO_SHIFT_REG)));
assign local_bb4_c0_exe13_valid_out = (local_bb4_c0_exe13_inputs_ready & ~(local_bb4_c0_exe13_consumed_0_NO_SHIFT_REG));
assign local_bb4_c0_exe10_valid_out = (local_bb4_c0_exe13_inputs_ready & ~(local_bb4_c0_exe10_consumed_0_NO_SHIFT_REG));
assign local_bb4_c0_exe9_valid_out = (local_bb4_c0_exe13_inputs_ready & ~(local_bb4_c0_exe9_consumed_0_NO_SHIFT_REG));
assign local_bb4_c0_exe565_valid_out = (local_bb4_c0_exe13_inputs_ready & ~(local_bb4_c0_exe565_consumed_0_NO_SHIFT_REG));
assign local_bb4_c0_exe363_valid_out = (local_bb4_c0_exe13_inputs_ready & ~(local_bb4_c0_exe363_consumed_0_NO_SHIFT_REG));
assign rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_4_NO_SHIFT_REG = (local_bb4_c0_exe13_stall_local | ~(local_bb4_c0_exe13_inputs_ready));
assign rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_3_NO_SHIFT_REG = (local_bb4_c0_exe13_stall_local | ~(local_bb4_c0_exe13_inputs_ready));
assign rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_2_NO_SHIFT_REG = (local_bb4_c0_exe13_stall_local | ~(local_bb4_c0_exe13_inputs_ready));
assign rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_1_NO_SHIFT_REG = (local_bb4_c0_exe13_stall_local | ~(local_bb4_c0_exe13_inputs_ready));
assign rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_0_NO_SHIFT_REG = (local_bb4_c0_exe13_stall_local | ~(local_bb4_c0_exe13_inputs_ready));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_c0_exe13_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_exe10_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_exe9_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_exe565_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb4_c0_exe363_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb4_c0_exe13_consumed_0_NO_SHIFT_REG <= (local_bb4_c0_exe13_inputs_ready & (local_bb4_c0_exe13_consumed_0_NO_SHIFT_REG | ~(local_bb4_c0_exe13_stall_in)) & local_bb4_c0_exe13_stall_local);
		local_bb4_c0_exe10_consumed_0_NO_SHIFT_REG <= (local_bb4_c0_exe13_inputs_ready & (local_bb4_c0_exe10_consumed_0_NO_SHIFT_REG | ~(local_bb4_c0_exe10_stall_in)) & local_bb4_c0_exe13_stall_local);
		local_bb4_c0_exe9_consumed_0_NO_SHIFT_REG <= (local_bb4_c0_exe13_inputs_ready & (local_bb4_c0_exe9_consumed_0_NO_SHIFT_REG | ~(local_bb4_c0_exe9_stall_in)) & local_bb4_c0_exe13_stall_local);
		local_bb4_c0_exe565_consumed_0_NO_SHIFT_REG <= (local_bb4_c0_exe13_inputs_ready & (local_bb4_c0_exe565_consumed_0_NO_SHIFT_REG | ~(local_bb4_c0_exe565_stall_in)) & local_bb4_c0_exe13_stall_local);
		local_bb4_c0_exe363_consumed_0_NO_SHIFT_REG <= (local_bb4_c0_exe13_inputs_ready & (local_bb4_c0_exe363_consumed_0_NO_SHIFT_REG | ~(local_bb4_c0_exe363_stall_in)) & local_bb4_c0_exe13_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_200to201_bb4_c0_exe767_0_valid_out_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exe767_0_stall_in_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exe767_0_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exe767_0_reg_201_inputs_ready_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exe767_0_reg_201_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exe767_0_valid_out_reg_201_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exe767_0_stall_in_reg_201_NO_SHIFT_REG;
 logic rnode_200to201_bb4_c0_exe767_0_stall_out_reg_201_NO_SHIFT_REG;

acl_data_fifo rnode_200to201_bb4_c0_exe767_0_reg_201_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_200to201_bb4_c0_exe767_0_reg_201_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_200to201_bb4_c0_exe767_0_stall_in_reg_201_NO_SHIFT_REG),
	.valid_out(rnode_200to201_bb4_c0_exe767_0_valid_out_reg_201_NO_SHIFT_REG),
	.stall_out(rnode_200to201_bb4_c0_exe767_0_stall_out_reg_201_NO_SHIFT_REG),
	.data_in(rnode_170to200_bb4_c0_exe767_0_NO_SHIFT_REG),
	.data_out(rnode_200to201_bb4_c0_exe767_0_reg_201_NO_SHIFT_REG)
);

defparam rnode_200to201_bb4_c0_exe767_0_reg_201_fifo.DEPTH = 2;
defparam rnode_200to201_bb4_c0_exe767_0_reg_201_fifo.DATA_WIDTH = 1;
defparam rnode_200to201_bb4_c0_exe767_0_reg_201_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_200to201_bb4_c0_exe767_0_reg_201_fifo.IMPL = "ll_reg";

assign rnode_200to201_bb4_c0_exe767_0_reg_201_inputs_ready_NO_SHIFT_REG = rnode_170to200_bb4_c0_exe767_0_valid_out_NO_SHIFT_REG;
assign rnode_170to200_bb4_c0_exe767_0_stall_in_NO_SHIFT_REG = rnode_200to201_bb4_c0_exe767_0_stall_out_reg_201_NO_SHIFT_REG;
assign rnode_200to201_bb4_c0_exe767_0_NO_SHIFT_REG = rnode_200to201_bb4_c0_exe767_0_reg_201_NO_SHIFT_REG;
assign rnode_200to201_bb4_c0_exe767_0_stall_in_reg_201_NO_SHIFT_REG = rnode_200to201_bb4_c0_exe767_0_stall_in_NO_SHIFT_REG;
assign rnode_200to201_bb4_c0_exe767_0_valid_out_NO_SHIFT_REG = rnode_200to201_bb4_c0_exe767_0_valid_out_reg_201_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb4_conv67_stall_local;
wire [31:0] local_bb4_conv67;

assign local_bb4_conv67[31:8] = 24'h0;
assign local_bb4_conv67[7:0] = local_bb4_memcoalesce_key_extrValue_3;

// This section implements an unregistered operation.
// 
wire local_bb4_conv57_stall_local;
wire [31:0] local_bb4_conv57;

assign local_bb4_conv57[31:8] = 24'h0;
assign local_bb4_conv57[7:0] = local_bb4_memcoalesce_key_extrValue_2;

// This section implements an unregistered operation.
// 
wire local_bb4_conv48_stall_local;
wire [31:0] local_bb4_conv48;

assign local_bb4_conv48[31:8] = 24'h0;
assign local_bb4_conv48[7:0] = local_bb4_memcoalesce_key_extrValue_1;

// This section implements an unregistered operation.
// 
wire local_bb4_conv_stall_local;
wire [31:0] local_bb4_conv;

assign local_bb4_conv[31:8] = 24'h0;
assign local_bb4_conv[7:0] = local_bb4_memcoalesce_key_extrValue_0;

// This section implements an unregistered operation.
// 
wire local_bb4_shl58_stall_local;
wire [31:0] local_bb4_shl58;

assign local_bb4_shl58 = (local_bb4_conv57 << 32'h8);

// This section implements an unregistered operation.
// 
wire local_bb4_shl49_stall_local;
wire [31:0] local_bb4_shl49;

assign local_bb4_shl49 = (local_bb4_conv48 << 32'h10);

// This section implements an unregistered operation.
// 
wire local_bb4_shl_stall_local;
wire [31:0] local_bb4_shl;

assign local_bb4_shl = (local_bb4_conv << 32'h18);

// This section implements an unregistered operation.
// 
wire local_bb4_reduction_1_stall_local;
wire [31:0] local_bb4_reduction_1;

assign local_bb4_reduction_1 = (local_bb4_shl58 | local_bb4_conv67);

// This section implements an unregistered operation.
// 
wire local_bb4_reduction_0_stall_local;
wire [31:0] local_bb4_reduction_0;

assign local_bb4_reduction_0 = (local_bb4_shl49 | local_bb4_shl);

// This section implements an unregistered operation.
// 
wire local_bb4_reduction_2_valid_out;
wire local_bb4_reduction_2_stall_in;
wire local_bb4_reduction_2_inputs_ready;
wire local_bb4_reduction_2_stall_local;
wire [31:0] local_bb4_reduction_2;

assign local_bb4_reduction_2_inputs_ready = (rstag_170to170_bb4_ld_memcoalesce_key_load_0_valid_out_0 & rstag_170to170_bb4_ld_memcoalesce_key_load_0_valid_out_1 & rstag_170to170_bb4_ld_memcoalesce_key_load_0_valid_out_2 & rstag_170to170_bb4_ld_memcoalesce_key_load_0_valid_out_3);
assign local_bb4_reduction_2 = (local_bb4_reduction_0 | local_bb4_reduction_1);
assign local_bb4_reduction_2_valid_out = local_bb4_reduction_2_inputs_ready;
assign local_bb4_reduction_2_stall_local = local_bb4_reduction_2_stall_in;
assign rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_0 = (local_bb4_reduction_2_stall_local | ~(local_bb4_reduction_2_inputs_ready));
assign rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_1 = (local_bb4_reduction_2_stall_local | ~(local_bb4_reduction_2_inputs_ready));
assign rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_2 = (local_bb4_reduction_2_stall_local | ~(local_bb4_reduction_2_inputs_ready));
assign rstag_170to170_bb4_ld_memcoalesce_key_load_0_stall_in_3 = (local_bb4_reduction_2_stall_local | ~(local_bb4_reduction_2_inputs_ready));

// This section implements a registered operation.
// 
wire local_bb4_st_reduction_2_inputs_ready;
 reg local_bb4_st_reduction_2_valid_out_NO_SHIFT_REG;
wire local_bb4_st_reduction_2_stall_in;
wire local_bb4_st_reduction_2_output_regs_ready;
wire local_bb4_st_reduction_2_fu_stall_out;
wire local_bb4_st_reduction_2_fu_valid_out;
wire [31:0] local_bb4_st_reduction_2_lsu_wackout;
 reg local_bb4_st_reduction_2_NO_SHIFT_REG;
wire local_bb4_st_reduction_2_causedstall;

lsu_top lsu_local_bb4_st_reduction_2 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb4_st_reduction_2_fu_stall_out),
	.i_valid(local_bb4_st_reduction_2_inputs_ready),
	.i_address(local_bb4_c0_exe8),
	.i_writedata(local_bb4_reduction_2),
	.i_cmpdata(),
	.i_predicate(rnode_169to170_bb4_c0_exe767_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb4_st_reduction_2_output_regs_ready)),
	.o_valid(local_bb4_st_reduction_2_fu_valid_out),
	.o_readdata(),
	.o_input_fifo_depth(local_bb4_st_reduction_2_input_fifo_depth),
	.o_writeack(local_bb4_st_reduction_2_lsu_wackout),
	.i_atomic_op(3'h0),
	.o_active(local_bb4_st_reduction_2_active),
	.avm_address(avm_local_bb4_st_reduction_2_address),
	.avm_read(avm_local_bb4_st_reduction_2_read),
	.avm_readdata(avm_local_bb4_st_reduction_2_readdata),
	.avm_write(avm_local_bb4_st_reduction_2_write),
	.avm_writeack(avm_local_bb4_st_reduction_2_writeack),
	.avm_burstcount(avm_local_bb4_st_reduction_2_burstcount),
	.avm_writedata(avm_local_bb4_st_reduction_2_writedata),
	.avm_byteenable(avm_local_bb4_st_reduction_2_byteenable),
	.avm_waitrequest(avm_local_bb4_st_reduction_2_waitrequest),
	.avm_readdatavalid(avm_local_bb4_st_reduction_2_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb4_st_reduction_2.AWIDTH = 32;
defparam lsu_local_bb4_st_reduction_2.WIDTH_BYTES = 4;
defparam lsu_local_bb4_st_reduction_2.MWIDTH_BYTES = 64;
defparam lsu_local_bb4_st_reduction_2.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb4_st_reduction_2.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb4_st_reduction_2.READ = 0;
defparam lsu_local_bb4_st_reduction_2.ATOMIC = 0;
defparam lsu_local_bb4_st_reduction_2.WIDTH = 32;
defparam lsu_local_bb4_st_reduction_2.MWIDTH = 512;
defparam lsu_local_bb4_st_reduction_2.ATOMIC_WIDTH = 3;
defparam lsu_local_bb4_st_reduction_2.BURSTCOUNT_WIDTH = 1;
defparam lsu_local_bb4_st_reduction_2.KERNEL_SIDE_MEM_LATENCY = 31;
defparam lsu_local_bb4_st_reduction_2.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb4_st_reduction_2.USE_WRITE_ACK = 0;
defparam lsu_local_bb4_st_reduction_2.ENABLE_BANKED_MEMORY = 1;
defparam lsu_local_bb4_st_reduction_2.ABITS_PER_LMEM_BANK = 7;
defparam lsu_local_bb4_st_reduction_2.NUMBER_BANKS = 4;
defparam lsu_local_bb4_st_reduction_2.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb4_st_reduction_2.USEINPUTFIFO = 1;
defparam lsu_local_bb4_st_reduction_2.USECACHING = 0;
defparam lsu_local_bb4_st_reduction_2.USEOUTPUTFIFO = 1;
defparam lsu_local_bb4_st_reduction_2.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb4_st_reduction_2.HIGH_FMAX = 1;
defparam lsu_local_bb4_st_reduction_2.ADDRSPACE = 5;
defparam lsu_local_bb4_st_reduction_2.STYLE = "PIPELINED";
defparam lsu_local_bb4_st_reduction_2.USE_BYTE_EN = 0;

assign local_bb4_st_reduction_2_inputs_ready = (local_bb4_reduction_2_valid_out & local_bb4_c0_exe8_valid_out & rnode_169to170_bb4_c0_exe767_0_valid_out_0_NO_SHIFT_REG);
assign local_bb4_st_reduction_2_output_regs_ready = (&(~(local_bb4_st_reduction_2_valid_out_NO_SHIFT_REG) | ~(local_bb4_st_reduction_2_stall_in)));
assign local_bb4_reduction_2_stall_in = (local_bb4_st_reduction_2_fu_stall_out | ~(local_bb4_st_reduction_2_inputs_ready));
assign local_bb4_c0_exe8_stall_in = (local_bb4_st_reduction_2_fu_stall_out | ~(local_bb4_st_reduction_2_inputs_ready));
assign rnode_169to170_bb4_c0_exe767_0_stall_in_0_NO_SHIFT_REG = (local_bb4_st_reduction_2_fu_stall_out | ~(local_bb4_st_reduction_2_inputs_ready));
assign local_bb4_st_reduction_2_causedstall = (local_bb4_st_reduction_2_inputs_ready && (local_bb4_st_reduction_2_fu_stall_out && !(~(local_bb4_st_reduction_2_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb4_st_reduction_2_NO_SHIFT_REG <= 'x;
		local_bb4_st_reduction_2_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb4_st_reduction_2_output_regs_ready)
		begin
			local_bb4_st_reduction_2_NO_SHIFT_REG <= local_bb4_st_reduction_2_lsu_wackout;
			local_bb4_st_reduction_2_valid_out_NO_SHIFT_REG <= local_bb4_st_reduction_2_fu_valid_out;
		end
		else
		begin
			if (~(local_bb4_st_reduction_2_stall_in))
			begin
				local_bb4_st_reduction_2_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_201to201_bb4_st_reduction_2_valid_out;
wire rstag_201to201_bb4_st_reduction_2_stall_in;
wire rstag_201to201_bb4_st_reduction_2_inputs_ready;
wire rstag_201to201_bb4_st_reduction_2_stall_local;
 reg rstag_201to201_bb4_st_reduction_2_staging_valid_NO_SHIFT_REG;
wire rstag_201to201_bb4_st_reduction_2_combined_valid;
 reg rstag_201to201_bb4_st_reduction_2_staging_reg_NO_SHIFT_REG;
wire rstag_201to201_bb4_st_reduction_2;

assign rstag_201to201_bb4_st_reduction_2_inputs_ready = local_bb4_st_reduction_2_valid_out_NO_SHIFT_REG;
assign rstag_201to201_bb4_st_reduction_2 = (rstag_201to201_bb4_st_reduction_2_staging_valid_NO_SHIFT_REG ? rstag_201to201_bb4_st_reduction_2_staging_reg_NO_SHIFT_REG : local_bb4_st_reduction_2_NO_SHIFT_REG);
assign rstag_201to201_bb4_st_reduction_2_combined_valid = (rstag_201to201_bb4_st_reduction_2_staging_valid_NO_SHIFT_REG | rstag_201to201_bb4_st_reduction_2_inputs_ready);
assign rstag_201to201_bb4_st_reduction_2_valid_out = rstag_201to201_bb4_st_reduction_2_combined_valid;
assign rstag_201to201_bb4_st_reduction_2_stall_local = rstag_201to201_bb4_st_reduction_2_stall_in;
assign local_bb4_st_reduction_2_stall_in = (|rstag_201to201_bb4_st_reduction_2_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_201to201_bb4_st_reduction_2_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_201to201_bb4_st_reduction_2_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_201to201_bb4_st_reduction_2_stall_local)
		begin
			if (~(rstag_201to201_bb4_st_reduction_2_staging_valid_NO_SHIFT_REG))
			begin
				rstag_201to201_bb4_st_reduction_2_staging_valid_NO_SHIFT_REG <= rstag_201to201_bb4_st_reduction_2_inputs_ready;
			end
		end
		else
		begin
			rstag_201to201_bb4_st_reduction_2_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_201to201_bb4_st_reduction_2_staging_valid_NO_SHIFT_REG))
		begin
			rstag_201to201_bb4_st_reduction_2_staging_reg_NO_SHIFT_REG <= local_bb4_st_reduction_2_NO_SHIFT_REG;
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [511:0] lvb_bb4_c0_exit60_c0_exi14_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb4_c0_exe565_0_reg_NO_SHIFT_REG;
 reg lvb_bb4_c0_exe767_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb4_c0_exe9_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb4_c0_exe10_0_reg_NO_SHIFT_REG;
 reg lvb_bb4_c0_exe13_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb4_c0_exe13_valid_out & local_bb4_c0_exe10_valid_out & local_bb4_c0_exe9_valid_out & local_bb4_c0_exe565_valid_out & local_bb4_c0_exe363_valid_out & rnode_200to201_bb4_c0_exit60_c0_exi14_0_valid_out_5_NO_SHIFT_REG & rnode_200to201_bb4_c0_exe767_0_valid_out_NO_SHIFT_REG & rstag_201to201_bb4_st_reduction_2_valid_out);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb4_c0_exe13_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb4_c0_exe10_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb4_c0_exe9_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb4_c0_exe565_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb4_c0_exe363_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_200to201_bb4_c0_exit60_c0_exi14_0_stall_in_5_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_200to201_bb4_c0_exe767_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_201to201_bb4_st_reduction_2_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb4_c0_exit60_c0_exi14_0 = lvb_bb4_c0_exit60_c0_exi14_0_reg_NO_SHIFT_REG;
assign lvb_bb4_c0_exit60_c0_exi14_1 = lvb_bb4_c0_exit60_c0_exi14_0_reg_NO_SHIFT_REG;
assign lvb_bb4_c0_exe565_0 = lvb_bb4_c0_exe565_0_reg_NO_SHIFT_REG;
assign lvb_bb4_c0_exe565_1 = lvb_bb4_c0_exe565_0_reg_NO_SHIFT_REG;
assign lvb_bb4_c0_exe767_0 = lvb_bb4_c0_exe767_0_reg_NO_SHIFT_REG;
assign lvb_bb4_c0_exe767_1 = lvb_bb4_c0_exe767_0_reg_NO_SHIFT_REG;
assign lvb_bb4_c0_exe9_0 = lvb_bb4_c0_exe9_0_reg_NO_SHIFT_REG;
assign lvb_bb4_c0_exe9_1 = lvb_bb4_c0_exe9_0_reg_NO_SHIFT_REG;
assign lvb_bb4_c0_exe10_0 = lvb_bb4_c0_exe10_0_reg_NO_SHIFT_REG;
assign lvb_bb4_c0_exe10_1 = lvb_bb4_c0_exe10_0_reg_NO_SHIFT_REG;
assign lvb_bb4_c0_exe13_0 = lvb_bb4_c0_exe13_0_reg_NO_SHIFT_REG;
assign lvb_bb4_c0_exe13_1 = lvb_bb4_c0_exe13_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_bb4_c0_exit60_c0_exi14_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb4_c0_exe565_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb4_c0_exe767_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb4_c0_exe9_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb4_c0_exe10_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb4_c0_exe13_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb4_c0_exit60_c0_exi14_0_reg_NO_SHIFT_REG <= rnode_200to201_bb4_c0_exit60_c0_exi14_5_NO_SHIFT_REG;
			lvb_bb4_c0_exe565_0_reg_NO_SHIFT_REG <= local_bb4_c0_exe565;
			lvb_bb4_c0_exe767_0_reg_NO_SHIFT_REG <= rnode_200to201_bb4_c0_exe767_0_NO_SHIFT_REG;
			lvb_bb4_c0_exe9_0_reg_NO_SHIFT_REG <= local_bb4_c0_exe9;
			lvb_bb4_c0_exe10_0_reg_NO_SHIFT_REG <= local_bb4_c0_exe10;
			lvb_bb4_c0_exe13_0_reg_NO_SHIFT_REG <= local_bb4_c0_exe13;
			branch_compare_result_NO_SHIFT_REG <= local_bb4_c0_exe363;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

module sha256_basic_block_5
	(
		input 		clock,
		input 		resetn,
		input [63:0] 		input_key,
		input [31:0] 		input_wii_ld_,
		input [31:0] 		input_wii_mul158,
		input [31:0] 		input_wii__,
		input 		input_wii_cmp166_xor,
		input [63:0] 		input_wii_memcoalesce_digest_bitcast_08,
		input [511:0] 		input_wii_memcoalesce_null_insertValue_0,
		input 		valid_in,
		output 		stall_out,
		input [511:0] 		input_c0_exit60_c0_exi14,
		input [31:0] 		input_c0_exe565,
		input 		input_c0_exe767,
		input [31:0] 		input_c0_exe9,
		input [31:0] 		input_c0_exe10,
		input 		input_c0_exe13,
		output 		valid_out,
		input 		stall_in,
		output [31:0] 		lvb_c0_exe9,
		output [31:0] 		lvb_c0_exe10,
		output [31:0] 		lvb_bb5_c0_exe895,
		input [31:0] 		workgroup_size,
		input 		start,
		input [255:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_readdata,
		input 		avm_local_bb5_ld_memcoalesce_key_load_02_readdatavalid,
		input 		avm_local_bb5_ld_memcoalesce_key_load_02_waitrequest,
		output [29:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_address,
		output 		avm_local_bb5_ld_memcoalesce_key_load_02_read,
		output 		avm_local_bb5_ld_memcoalesce_key_load_02_write,
		input 		avm_local_bb5_ld_memcoalesce_key_load_02_writeack,
		output [255:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_writedata,
		output [31:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_byteenable,
		output [4:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_burstcount,
		output 		local_bb5_ld_memcoalesce_key_load_02_active,
		input 		clock2x,
		input [511:0] 		avm_local_bb5_st_memcoalesce_null_insertValue_0_readdata,
		input 		avm_local_bb5_st_memcoalesce_null_insertValue_0_readdatavalid,
		input 		avm_local_bb5_st_memcoalesce_null_insertValue_0_waitrequest,
		output [31:0] 		avm_local_bb5_st_memcoalesce_null_insertValue_0_address,
		output 		avm_local_bb5_st_memcoalesce_null_insertValue_0_read,
		output 		avm_local_bb5_st_memcoalesce_null_insertValue_0_write,
		input 		avm_local_bb5_st_memcoalesce_null_insertValue_0_writeack,
		output [511:0] 		avm_local_bb5_st_memcoalesce_null_insertValue_0_writedata,
		output [63:0] 		avm_local_bb5_st_memcoalesce_null_insertValue_0_byteenable,
		output 		avm_local_bb5_st_memcoalesce_null_insertValue_0_burstcount,
		output [7:0] 		local_bb5_st_memcoalesce_null_insertValue_0_input_fifo_depth,
		output 		local_bb5_st_memcoalesce_null_insertValue_0_active,
		input [511:0] 		avm_local_bb5_st__113_readdata,
		input 		avm_local_bb5_st__113_readdatavalid,
		input 		avm_local_bb5_st__113_waitrequest,
		output [31:0] 		avm_local_bb5_st__113_address,
		output 		avm_local_bb5_st__113_read,
		output 		avm_local_bb5_st__113_write,
		input 		avm_local_bb5_st__113_writeack,
		output [511:0] 		avm_local_bb5_st__113_writedata,
		output [63:0] 		avm_local_bb5_st__113_byteenable,
		output 		avm_local_bb5_st__113_burstcount,
		output [7:0] 		local_bb5_st__113_input_fifo_depth,
		output 		local_bb5_st__113_active
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_node_stall_in_5;
 reg merge_node_valid_out_5_NO_SHIFT_REG;
wire merge_node_stall_in_6;
 reg merge_node_valid_out_6_NO_SHIFT_REG;
wire merge_node_stall_in_7;
 reg merge_node_valid_out_7_NO_SHIFT_REG;
wire merge_node_stall_in_8;
 reg merge_node_valid_out_8_NO_SHIFT_REG;
wire merge_node_stall_in_9;
 reg merge_node_valid_out_9_NO_SHIFT_REG;
wire merge_node_stall_in_10;
 reg merge_node_valid_out_10_NO_SHIFT_REG;
wire merge_node_stall_in_11;
 reg merge_node_valid_out_11_NO_SHIFT_REG;
wire merge_node_stall_in_12;
 reg merge_node_valid_out_12_NO_SHIFT_REG;
wire merge_node_stall_in_13;
 reg merge_node_valid_out_13_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [511:0] input_c0_exit60_c0_exi14_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe565_staging_reg_NO_SHIFT_REG;
 reg input_c0_exe767_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe9_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_c0_exe10_staging_reg_NO_SHIFT_REG;
 reg input_c0_exe13_staging_reg_NO_SHIFT_REG;
 reg [511:0] local_lvm_c0_exit60_c0_exi14_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe565_NO_SHIFT_REG;
 reg local_lvm_c0_exe767_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe9_NO_SHIFT_REG;
 reg [31:0] local_lvm_c0_exe10_NO_SHIFT_REG;
 reg local_lvm_c0_exe13_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG) | (merge_node_stall_in_5 & merge_node_valid_out_5_NO_SHIFT_REG) | (merge_node_stall_in_6 & merge_node_valid_out_6_NO_SHIFT_REG) | (merge_node_stall_in_7 & merge_node_valid_out_7_NO_SHIFT_REG) | (merge_node_stall_in_8 & merge_node_valid_out_8_NO_SHIFT_REG) | (merge_node_stall_in_9 & merge_node_valid_out_9_NO_SHIFT_REG) | (merge_node_stall_in_10 & merge_node_valid_out_10_NO_SHIFT_REG) | (merge_node_stall_in_11 & merge_node_valid_out_11_NO_SHIFT_REG) | (merge_node_stall_in_12 & merge_node_valid_out_12_NO_SHIFT_REG) | (merge_node_stall_in_13 & merge_node_valid_out_13_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_c0_exit60_c0_exi14_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe565_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe767_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe9_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe10_staging_reg_NO_SHIFT_REG <= 'x;
		input_c0_exe13_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_c0_exit60_c0_exi14_staging_reg_NO_SHIFT_REG <= input_c0_exit60_c0_exi14;
				input_c0_exe565_staging_reg_NO_SHIFT_REG <= input_c0_exe565;
				input_c0_exe767_staging_reg_NO_SHIFT_REG <= input_c0_exe767;
				input_c0_exe9_staging_reg_NO_SHIFT_REG <= input_c0_exe9;
				input_c0_exe10_staging_reg_NO_SHIFT_REG <= input_c0_exe10;
				input_c0_exe13_staging_reg_NO_SHIFT_REG <= input_c0_exe13;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_c0_exit60_c0_exi14_NO_SHIFT_REG <= input_c0_exit60_c0_exi14_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe565_NO_SHIFT_REG <= input_c0_exe565_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe767_NO_SHIFT_REG <= input_c0_exe767_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe9_NO_SHIFT_REG <= input_c0_exe9_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe10_NO_SHIFT_REG <= input_c0_exe10_staging_reg_NO_SHIFT_REG;
					local_lvm_c0_exe13_NO_SHIFT_REG <= input_c0_exe13_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_c0_exit60_c0_exi14_NO_SHIFT_REG <= input_c0_exit60_c0_exi14;
					local_lvm_c0_exe565_NO_SHIFT_REG <= input_c0_exe565;
					local_lvm_c0_exe767_NO_SHIFT_REG <= input_c0_exe767;
					local_lvm_c0_exe9_NO_SHIFT_REG <= input_c0_exe9;
					local_lvm_c0_exe10_NO_SHIFT_REG <= input_c0_exe10;
					local_lvm_c0_exe13_NO_SHIFT_REG <= input_c0_exe13;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_13_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_5_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_6_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_7_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_8_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_9_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_10_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_11_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_12_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_13_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_5))
			begin
				merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_6))
			begin
				merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_7))
			begin
				merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_8))
			begin
				merge_node_valid_out_8_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_9))
			begin
				merge_node_valid_out_9_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_10))
			begin
				merge_node_valid_out_10_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_11))
			begin
				merge_node_valid_out_11_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_12))
			begin
				merge_node_valid_out_12_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_13))
			begin
				merge_node_valid_out_13_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c0_exe14_stall_local;
wire local_bb5_c0_exe14;

assign local_bb5_c0_exe14 = local_lvm_c0_exit60_c0_exi14_NO_SHIFT_REG[456];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exe12_stall_local;
wire [31:0] local_bb5_c0_exe12;

assign local_bb5_c0_exe12 = local_lvm_c0_exit60_c0_exi14_NO_SHIFT_REG[447:416];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exe11_stall_local;
wire [31:0] local_bb5_c0_exe11;

assign local_bb5_c0_exe11 = local_lvm_c0_exit60_c0_exi14_NO_SHIFT_REG[415:384];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exe262_stall_local;
wire local_bb5_c0_exe262;

assign local_bb5_c0_exe262 = local_lvm_c0_exit60_c0_exi14_NO_SHIFT_REG[64];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exe161_stall_local;
wire [31:0] local_bb5_c0_exe161;

assign local_bb5_c0_exe161 = local_lvm_c0_exit60_c0_exi14_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_came_from_if_then31_select_stall_local;
wire local_bb5_came_from_if_then31_select;

assign local_bb5_came_from_if_then31_select = (local_lvm_c0_exe13_NO_SHIFT_REG & local_lvm_c0_exe767_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_eni168_stall_local;
wire [159:0] local_bb5_c0_eni168;

assign local_bb5_c0_eni168[7:0] = 8'bxxxxxxxx;
assign local_bb5_c0_eni168[8] = local_lvm_c0_exe13_NO_SHIFT_REG;
assign local_bb5_c0_eni168[159:9] = 151'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;

// Register node:
//  * latency = 66
//  * capacity = 66
 logic rnode_1to67_memcoalesce_null_insertValue_0_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to67_memcoalesce_null_insertValue_0_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to67_memcoalesce_null_insertValue_0_0_reg_67_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to67_memcoalesce_null_insertValue_0_0_valid_out_reg_67_NO_SHIFT_REG;
 logic rnode_1to67_memcoalesce_null_insertValue_0_0_stall_in_reg_67_NO_SHIFT_REG;
 logic rnode_1to67_memcoalesce_null_insertValue_0_0_stall_out_reg_67_NO_SHIFT_REG;

acl_data_fifo rnode_1to67_memcoalesce_null_insertValue_0_0_reg_67_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to67_memcoalesce_null_insertValue_0_0_reg_67_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to67_memcoalesce_null_insertValue_0_0_stall_in_reg_67_NO_SHIFT_REG),
	.valid_out(rnode_1to67_memcoalesce_null_insertValue_0_0_valid_out_reg_67_NO_SHIFT_REG),
	.stall_out(rnode_1to67_memcoalesce_null_insertValue_0_0_stall_out_reg_67_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to67_memcoalesce_null_insertValue_0_0_reg_67_fifo.DEPTH = 67;
defparam rnode_1to67_memcoalesce_null_insertValue_0_0_reg_67_fifo.DATA_WIDTH = 0;
defparam rnode_1to67_memcoalesce_null_insertValue_0_0_reg_67_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to67_memcoalesce_null_insertValue_0_0_reg_67_fifo.IMPL = "ram";

assign rnode_1to67_memcoalesce_null_insertValue_0_0_reg_67_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_9_NO_SHIFT_REG;
assign merge_node_stall_in_9 = rnode_1to67_memcoalesce_null_insertValue_0_0_stall_out_reg_67_NO_SHIFT_REG;
assign rnode_1to67_memcoalesce_null_insertValue_0_0_stall_in_reg_67_NO_SHIFT_REG = rnode_1to67_memcoalesce_null_insertValue_0_0_stall_in_NO_SHIFT_REG;
assign rnode_1to67_memcoalesce_null_insertValue_0_0_valid_out_NO_SHIFT_REG = rnode_1to67_memcoalesce_null_insertValue_0_0_valid_out_reg_67_NO_SHIFT_REG;

// Register node:
//  * latency = 226
//  * capacity = 226
 logic rnode_1to227_c0_exe13_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to227_c0_exe13_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to227_c0_exe13_0_NO_SHIFT_REG;
 logic rnode_1to227_c0_exe13_0_reg_227_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to227_c0_exe13_0_reg_227_NO_SHIFT_REG;
 logic rnode_1to227_c0_exe13_0_valid_out_reg_227_NO_SHIFT_REG;
 logic rnode_1to227_c0_exe13_0_stall_in_reg_227_NO_SHIFT_REG;
 logic rnode_1to227_c0_exe13_0_stall_out_reg_227_NO_SHIFT_REG;

acl_data_fifo rnode_1to227_c0_exe13_0_reg_227_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to227_c0_exe13_0_reg_227_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to227_c0_exe13_0_stall_in_reg_227_NO_SHIFT_REG),
	.valid_out(rnode_1to227_c0_exe13_0_valid_out_reg_227_NO_SHIFT_REG),
	.stall_out(rnode_1to227_c0_exe13_0_stall_out_reg_227_NO_SHIFT_REG),
	.data_in(local_lvm_c0_exe13_NO_SHIFT_REG),
	.data_out(rnode_1to227_c0_exe13_0_reg_227_NO_SHIFT_REG)
);

defparam rnode_1to227_c0_exe13_0_reg_227_fifo.DEPTH = 227;
defparam rnode_1to227_c0_exe13_0_reg_227_fifo.DATA_WIDTH = 1;
defparam rnode_1to227_c0_exe13_0_reg_227_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to227_c0_exe13_0_reg_227_fifo.IMPL = "ram";

assign rnode_1to227_c0_exe13_0_reg_227_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_10_NO_SHIFT_REG;
assign merge_node_stall_in_10 = rnode_1to227_c0_exe13_0_stall_out_reg_227_NO_SHIFT_REG;
assign rnode_1to227_c0_exe13_0_NO_SHIFT_REG = rnode_1to227_c0_exe13_0_reg_227_NO_SHIFT_REG;
assign rnode_1to227_c0_exe13_0_stall_in_reg_227_NO_SHIFT_REG = rnode_1to227_c0_exe13_0_stall_in_NO_SHIFT_REG;
assign rnode_1to227_c0_exe13_0_valid_out_NO_SHIFT_REG = rnode_1to227_c0_exe13_0_valid_out_reg_227_NO_SHIFT_REG;

// Register node:
//  * latency = 226
//  * capacity = 226
 logic rnode_1to227_mul158_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to227_mul158_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to227_mul158_0_reg_227_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to227_mul158_0_valid_out_reg_227_NO_SHIFT_REG;
 logic rnode_1to227_mul158_0_stall_in_reg_227_NO_SHIFT_REG;
 logic rnode_1to227_mul158_0_stall_out_reg_227_NO_SHIFT_REG;

acl_data_fifo rnode_1to227_mul158_0_reg_227_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to227_mul158_0_reg_227_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to227_mul158_0_stall_in_reg_227_NO_SHIFT_REG),
	.valid_out(rnode_1to227_mul158_0_valid_out_reg_227_NO_SHIFT_REG),
	.stall_out(rnode_1to227_mul158_0_stall_out_reg_227_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to227_mul158_0_reg_227_fifo.DEPTH = 227;
defparam rnode_1to227_mul158_0_reg_227_fifo.DATA_WIDTH = 0;
defparam rnode_1to227_mul158_0_reg_227_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to227_mul158_0_reg_227_fifo.IMPL = "ram";

assign rnode_1to227_mul158_0_reg_227_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_11_NO_SHIFT_REG;
assign merge_node_stall_in_11 = rnode_1to227_mul158_0_stall_out_reg_227_NO_SHIFT_REG;
assign rnode_1to227_mul158_0_stall_in_reg_227_NO_SHIFT_REG = rnode_1to227_mul158_0_stall_in_NO_SHIFT_REG;
assign rnode_1to227_mul158_0_valid_out_NO_SHIFT_REG = rnode_1to227_mul158_0_valid_out_reg_227_NO_SHIFT_REG;

// Register node:
//  * latency = 257
//  * capacity = 257
 logic rnode_1to258_c0_exe9_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to258_c0_exe9_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to258_c0_exe9_0_NO_SHIFT_REG;
 logic rnode_1to258_c0_exe9_0_reg_258_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to258_c0_exe9_0_reg_258_NO_SHIFT_REG;
 logic rnode_1to258_c0_exe9_0_valid_out_reg_258_NO_SHIFT_REG;
 logic rnode_1to258_c0_exe9_0_stall_in_reg_258_NO_SHIFT_REG;
 logic rnode_1to258_c0_exe9_0_stall_out_reg_258_NO_SHIFT_REG;

acl_data_fifo rnode_1to258_c0_exe9_0_reg_258_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to258_c0_exe9_0_reg_258_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to258_c0_exe9_0_stall_in_reg_258_NO_SHIFT_REG),
	.valid_out(rnode_1to258_c0_exe9_0_valid_out_reg_258_NO_SHIFT_REG),
	.stall_out(rnode_1to258_c0_exe9_0_stall_out_reg_258_NO_SHIFT_REG),
	.data_in(local_lvm_c0_exe9_NO_SHIFT_REG),
	.data_out(rnode_1to258_c0_exe9_0_reg_258_NO_SHIFT_REG)
);

defparam rnode_1to258_c0_exe9_0_reg_258_fifo.DEPTH = 258;
defparam rnode_1to258_c0_exe9_0_reg_258_fifo.DATA_WIDTH = 32;
defparam rnode_1to258_c0_exe9_0_reg_258_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to258_c0_exe9_0_reg_258_fifo.IMPL = "ram";

assign rnode_1to258_c0_exe9_0_reg_258_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_12_NO_SHIFT_REG;
assign merge_node_stall_in_12 = rnode_1to258_c0_exe9_0_stall_out_reg_258_NO_SHIFT_REG;
assign rnode_1to258_c0_exe9_0_NO_SHIFT_REG = rnode_1to258_c0_exe9_0_reg_258_NO_SHIFT_REG;
assign rnode_1to258_c0_exe9_0_stall_in_reg_258_NO_SHIFT_REG = rnode_1to258_c0_exe9_0_stall_in_NO_SHIFT_REG;
assign rnode_1to258_c0_exe9_0_valid_out_NO_SHIFT_REG = rnode_1to258_c0_exe9_0_valid_out_reg_258_NO_SHIFT_REG;

// Register node:
//  * latency = 257
//  * capacity = 257
 logic rnode_1to258_c0_exe10_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to258_c0_exe10_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to258_c0_exe10_0_NO_SHIFT_REG;
 logic rnode_1to258_c0_exe10_0_reg_258_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to258_c0_exe10_0_reg_258_NO_SHIFT_REG;
 logic rnode_1to258_c0_exe10_0_valid_out_reg_258_NO_SHIFT_REG;
 logic rnode_1to258_c0_exe10_0_stall_in_reg_258_NO_SHIFT_REG;
 logic rnode_1to258_c0_exe10_0_stall_out_reg_258_NO_SHIFT_REG;

acl_data_fifo rnode_1to258_c0_exe10_0_reg_258_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to258_c0_exe10_0_reg_258_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to258_c0_exe10_0_stall_in_reg_258_NO_SHIFT_REG),
	.valid_out(rnode_1to258_c0_exe10_0_valid_out_reg_258_NO_SHIFT_REG),
	.stall_out(rnode_1to258_c0_exe10_0_stall_out_reg_258_NO_SHIFT_REG),
	.data_in(local_lvm_c0_exe10_NO_SHIFT_REG),
	.data_out(rnode_1to258_c0_exe10_0_reg_258_NO_SHIFT_REG)
);

defparam rnode_1to258_c0_exe10_0_reg_258_fifo.DEPTH = 258;
defparam rnode_1to258_c0_exe10_0_reg_258_fifo.DATA_WIDTH = 32;
defparam rnode_1to258_c0_exe10_0_reg_258_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to258_c0_exe10_0_reg_258_fifo.IMPL = "ram";

assign rnode_1to258_c0_exe10_0_reg_258_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_13_NO_SHIFT_REG;
assign merge_node_stall_in_13 = rnode_1to258_c0_exe10_0_stall_out_reg_258_NO_SHIFT_REG;
assign rnode_1to258_c0_exe10_0_NO_SHIFT_REG = rnode_1to258_c0_exe10_0_reg_258_NO_SHIFT_REG;
assign rnode_1to258_c0_exe10_0_stall_in_reg_258_NO_SHIFT_REG = rnode_1to258_c0_exe10_0_stall_in_NO_SHIFT_REG;
assign rnode_1to258_c0_exe10_0_valid_out_NO_SHIFT_REG = rnode_1to258_c0_exe10_0_valid_out_reg_258_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_smax_stall_local;
wire [31:0] local_bb5_smax;

assign local_bb5_smax = (local_bb5_c0_exe14 ? local_bb5_c0_exe161 : 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_eni269_stall_local;
wire [159:0] local_bb5_c0_eni269;

assign local_bb5_c0_eni269[31:0] = local_bb5_c0_eni168[31:0];
assign local_bb5_c0_eni269[63:32] = local_bb5_c0_exe12;
assign local_bb5_c0_eni269[159:64] = local_bb5_c0_eni168[159:64];

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_67to68_memcoalesce_null_insertValue_0_0_valid_out_NO_SHIFT_REG;
 logic rnode_67to68_memcoalesce_null_insertValue_0_0_stall_in_NO_SHIFT_REG;
 logic rnode_67to68_memcoalesce_null_insertValue_0_0_reg_68_inputs_ready_NO_SHIFT_REG;
 logic rnode_67to68_memcoalesce_null_insertValue_0_0_valid_out_reg_68_NO_SHIFT_REG;
 logic rnode_67to68_memcoalesce_null_insertValue_0_0_stall_in_reg_68_NO_SHIFT_REG;
 logic rnode_67to68_memcoalesce_null_insertValue_0_0_stall_out_reg_68_NO_SHIFT_REG;

acl_data_fifo rnode_67to68_memcoalesce_null_insertValue_0_0_reg_68_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_67to68_memcoalesce_null_insertValue_0_0_reg_68_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_67to68_memcoalesce_null_insertValue_0_0_stall_in_reg_68_NO_SHIFT_REG),
	.valid_out(rnode_67to68_memcoalesce_null_insertValue_0_0_valid_out_reg_68_NO_SHIFT_REG),
	.stall_out(rnode_67to68_memcoalesce_null_insertValue_0_0_stall_out_reg_68_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_67to68_memcoalesce_null_insertValue_0_0_reg_68_fifo.DEPTH = 2;
defparam rnode_67to68_memcoalesce_null_insertValue_0_0_reg_68_fifo.DATA_WIDTH = 0;
defparam rnode_67to68_memcoalesce_null_insertValue_0_0_reg_68_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_67to68_memcoalesce_null_insertValue_0_0_reg_68_fifo.IMPL = "ll_reg";

assign rnode_67to68_memcoalesce_null_insertValue_0_0_reg_68_inputs_ready_NO_SHIFT_REG = rnode_1to67_memcoalesce_null_insertValue_0_0_valid_out_NO_SHIFT_REG;
assign rnode_1to67_memcoalesce_null_insertValue_0_0_stall_in_NO_SHIFT_REG = rnode_67to68_memcoalesce_null_insertValue_0_0_stall_out_reg_68_NO_SHIFT_REG;
assign rnode_67to68_memcoalesce_null_insertValue_0_0_stall_in_reg_68_NO_SHIFT_REG = rnode_67to68_memcoalesce_null_insertValue_0_0_stall_in_NO_SHIFT_REG;
assign rnode_67to68_memcoalesce_null_insertValue_0_0_valid_out_NO_SHIFT_REG = rnode_67to68_memcoalesce_null_insertValue_0_0_valid_out_reg_68_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_227to228_c0_exe13_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_227to228_c0_exe13_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_227to228_c0_exe13_0_NO_SHIFT_REG;
 logic rnode_227to228_c0_exe13_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_227to228_c0_exe13_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_227to228_c0_exe13_1_NO_SHIFT_REG;
 logic rnode_227to228_c0_exe13_0_reg_228_inputs_ready_NO_SHIFT_REG;
 logic rnode_227to228_c0_exe13_0_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_c0_exe13_0_valid_out_0_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_c0_exe13_0_stall_in_0_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_c0_exe13_0_stall_out_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_c0_exe13_0_reg_228_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_227to228_c0_exe13_0_reg_228_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_227to228_c0_exe13_0_reg_228_NO_SHIFT_REG),
	.valid_in(rnode_227to228_c0_exe13_0_valid_out_0_reg_228_NO_SHIFT_REG),
	.stall_out(rnode_227to228_c0_exe13_0_stall_in_0_reg_228_NO_SHIFT_REG),
	.data_out(rnode_227to228_c0_exe13_0_reg_228_NO_SHIFT_REG_fa),
	.valid_out({rnode_227to228_c0_exe13_0_valid_out_0_NO_SHIFT_REG, rnode_227to228_c0_exe13_0_valid_out_1_NO_SHIFT_REG}),
	.stall_in({rnode_227to228_c0_exe13_0_stall_in_0_NO_SHIFT_REG, rnode_227to228_c0_exe13_0_stall_in_1_NO_SHIFT_REG})
);

defparam rnode_227to228_c0_exe13_0_reg_228_fanout_adaptor.DATA_WIDTH = 1;
defparam rnode_227to228_c0_exe13_0_reg_228_fanout_adaptor.NUM_FANOUTS = 2;

acl_data_fifo rnode_227to228_c0_exe13_0_reg_228_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_227to228_c0_exe13_0_reg_228_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_227to228_c0_exe13_0_stall_in_0_reg_228_NO_SHIFT_REG),
	.valid_out(rnode_227to228_c0_exe13_0_valid_out_0_reg_228_NO_SHIFT_REG),
	.stall_out(rnode_227to228_c0_exe13_0_stall_out_reg_228_NO_SHIFT_REG),
	.data_in(rnode_1to227_c0_exe13_0_NO_SHIFT_REG),
	.data_out(rnode_227to228_c0_exe13_0_reg_228_NO_SHIFT_REG)
);

defparam rnode_227to228_c0_exe13_0_reg_228_fifo.DEPTH = 2;
defparam rnode_227to228_c0_exe13_0_reg_228_fifo.DATA_WIDTH = 1;
defparam rnode_227to228_c0_exe13_0_reg_228_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_227to228_c0_exe13_0_reg_228_fifo.IMPL = "ll_reg";

assign rnode_227to228_c0_exe13_0_reg_228_inputs_ready_NO_SHIFT_REG = rnode_1to227_c0_exe13_0_valid_out_NO_SHIFT_REG;
assign rnode_1to227_c0_exe13_0_stall_in_NO_SHIFT_REG = rnode_227to228_c0_exe13_0_stall_out_reg_228_NO_SHIFT_REG;
assign rnode_227to228_c0_exe13_0_NO_SHIFT_REG = rnode_227to228_c0_exe13_0_reg_228_NO_SHIFT_REG_fa;
assign rnode_227to228_c0_exe13_1_NO_SHIFT_REG = rnode_227to228_c0_exe13_0_reg_228_NO_SHIFT_REG_fa;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_227to228_mul158_0_valid_out_NO_SHIFT_REG;
 logic rnode_227to228_mul158_0_stall_in_NO_SHIFT_REG;
 logic rnode_227to228_mul158_0_reg_228_inputs_ready_NO_SHIFT_REG;
 logic rnode_227to228_mul158_0_valid_out_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_mul158_0_stall_in_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_mul158_0_stall_out_reg_228_NO_SHIFT_REG;

acl_data_fifo rnode_227to228_mul158_0_reg_228_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_227to228_mul158_0_reg_228_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_227to228_mul158_0_stall_in_reg_228_NO_SHIFT_REG),
	.valid_out(rnode_227to228_mul158_0_valid_out_reg_228_NO_SHIFT_REG),
	.stall_out(rnode_227to228_mul158_0_stall_out_reg_228_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_227to228_mul158_0_reg_228_fifo.DEPTH = 2;
defparam rnode_227to228_mul158_0_reg_228_fifo.DATA_WIDTH = 0;
defparam rnode_227to228_mul158_0_reg_228_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_227to228_mul158_0_reg_228_fifo.IMPL = "ll_reg";

assign rnode_227to228_mul158_0_reg_228_inputs_ready_NO_SHIFT_REG = rnode_1to227_mul158_0_valid_out_NO_SHIFT_REG;
assign rnode_1to227_mul158_0_stall_in_NO_SHIFT_REG = rnode_227to228_mul158_0_stall_out_reg_228_NO_SHIFT_REG;
assign rnode_227to228_mul158_0_stall_in_reg_228_NO_SHIFT_REG = rnode_227to228_mul158_0_stall_in_NO_SHIFT_REG;
assign rnode_227to228_mul158_0_valid_out_NO_SHIFT_REG = rnode_227to228_mul158_0_valid_out_reg_228_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_258to259_c0_exe9_0_valid_out_NO_SHIFT_REG;
 logic rnode_258to259_c0_exe9_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_258to259_c0_exe9_0_NO_SHIFT_REG;
 logic rnode_258to259_c0_exe9_0_reg_259_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_258to259_c0_exe9_0_reg_259_NO_SHIFT_REG;
 logic rnode_258to259_c0_exe9_0_valid_out_reg_259_NO_SHIFT_REG;
 logic rnode_258to259_c0_exe9_0_stall_in_reg_259_NO_SHIFT_REG;
 logic rnode_258to259_c0_exe9_0_stall_out_reg_259_NO_SHIFT_REG;

acl_data_fifo rnode_258to259_c0_exe9_0_reg_259_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_258to259_c0_exe9_0_reg_259_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_258to259_c0_exe9_0_stall_in_reg_259_NO_SHIFT_REG),
	.valid_out(rnode_258to259_c0_exe9_0_valid_out_reg_259_NO_SHIFT_REG),
	.stall_out(rnode_258to259_c0_exe9_0_stall_out_reg_259_NO_SHIFT_REG),
	.data_in(rnode_1to258_c0_exe9_0_NO_SHIFT_REG),
	.data_out(rnode_258to259_c0_exe9_0_reg_259_NO_SHIFT_REG)
);

defparam rnode_258to259_c0_exe9_0_reg_259_fifo.DEPTH = 2;
defparam rnode_258to259_c0_exe9_0_reg_259_fifo.DATA_WIDTH = 32;
defparam rnode_258to259_c0_exe9_0_reg_259_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_258to259_c0_exe9_0_reg_259_fifo.IMPL = "ll_reg";

assign rnode_258to259_c0_exe9_0_reg_259_inputs_ready_NO_SHIFT_REG = rnode_1to258_c0_exe9_0_valid_out_NO_SHIFT_REG;
assign rnode_1to258_c0_exe9_0_stall_in_NO_SHIFT_REG = rnode_258to259_c0_exe9_0_stall_out_reg_259_NO_SHIFT_REG;
assign rnode_258to259_c0_exe9_0_NO_SHIFT_REG = rnode_258to259_c0_exe9_0_reg_259_NO_SHIFT_REG;
assign rnode_258to259_c0_exe9_0_stall_in_reg_259_NO_SHIFT_REG = rnode_258to259_c0_exe9_0_stall_in_NO_SHIFT_REG;
assign rnode_258to259_c0_exe9_0_valid_out_NO_SHIFT_REG = rnode_258to259_c0_exe9_0_valid_out_reg_259_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_258to259_c0_exe10_0_valid_out_NO_SHIFT_REG;
 logic rnode_258to259_c0_exe10_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_258to259_c0_exe10_0_NO_SHIFT_REG;
 logic rnode_258to259_c0_exe10_0_reg_259_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_258to259_c0_exe10_0_reg_259_NO_SHIFT_REG;
 logic rnode_258to259_c0_exe10_0_valid_out_reg_259_NO_SHIFT_REG;
 logic rnode_258to259_c0_exe10_0_stall_in_reg_259_NO_SHIFT_REG;
 logic rnode_258to259_c0_exe10_0_stall_out_reg_259_NO_SHIFT_REG;

acl_data_fifo rnode_258to259_c0_exe10_0_reg_259_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_258to259_c0_exe10_0_reg_259_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_258to259_c0_exe10_0_stall_in_reg_259_NO_SHIFT_REG),
	.valid_out(rnode_258to259_c0_exe10_0_valid_out_reg_259_NO_SHIFT_REG),
	.stall_out(rnode_258to259_c0_exe10_0_stall_out_reg_259_NO_SHIFT_REG),
	.data_in(rnode_1to258_c0_exe10_0_NO_SHIFT_REG),
	.data_out(rnode_258to259_c0_exe10_0_reg_259_NO_SHIFT_REG)
);

defparam rnode_258to259_c0_exe10_0_reg_259_fifo.DEPTH = 2;
defparam rnode_258to259_c0_exe10_0_reg_259_fifo.DATA_WIDTH = 32;
defparam rnode_258to259_c0_exe10_0_reg_259_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_258to259_c0_exe10_0_reg_259_fifo.IMPL = "ll_reg";

assign rnode_258to259_c0_exe10_0_reg_259_inputs_ready_NO_SHIFT_REG = rnode_1to258_c0_exe10_0_valid_out_NO_SHIFT_REG;
assign rnode_1to258_c0_exe10_0_stall_in_NO_SHIFT_REG = rnode_258to259_c0_exe10_0_stall_out_reg_259_NO_SHIFT_REG;
assign rnode_258to259_c0_exe10_0_NO_SHIFT_REG = rnode_258to259_c0_exe10_0_reg_259_NO_SHIFT_REG;
assign rnode_258to259_c0_exe10_0_stall_in_reg_259_NO_SHIFT_REG = rnode_258to259_c0_exe10_0_stall_in_NO_SHIFT_REG;
assign rnode_258to259_c0_exe10_0_valid_out_NO_SHIFT_REG = rnode_258to259_c0_exe10_0_valid_out_reg_259_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_select111_stall_local;
wire [31:0] local_bb5_select111;

assign local_bb5_select111 = (local_bb5_came_from_if_then31_select ? 32'h0 : local_bb5_smax);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_eni370_stall_local;
wire [159:0] local_bb5_c0_eni370;

assign local_bb5_c0_eni370[63:0] = local_bb5_c0_eni269[63:0];
assign local_bb5_c0_eni370[95:64] = local_lvm_c0_exe565_NO_SHIFT_REG;
assign local_bb5_c0_eni370[159:96] = local_bb5_c0_eni269[159:96];

// This section implements an unregistered operation.
// 
wire local_bb5_mul138_stall_local;
wire [31:0] local_bb5_mul138;

assign local_bb5_mul138 = (local_bb5_select111 << 32'h2);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_eni471_stall_local;
wire [159:0] local_bb5_c0_eni471;

assign local_bb5_c0_eni471[95:0] = local_bb5_c0_eni370[95:0];
assign local_bb5_c0_eni471[96] = local_bb5_c0_exe262;
assign local_bb5_c0_eni471[159:97] = local_bb5_c0_eni370[159:97];

// This section implements an unregistered operation.
// 
wire local_bb5_select111_valid_out_1;
wire local_bb5_select111_stall_in_1;
 reg local_bb5_select111_consumed_1_NO_SHIFT_REG;
wire local_bb5_add139_valid_out;
wire local_bb5_add139_stall_in;
 reg local_bb5_add139_consumed_0_NO_SHIFT_REG;
wire local_bb5_add139_inputs_ready;
wire local_bb5_add139_stall_local;
wire [31:0] local_bb5_add139;

assign local_bb5_add139_inputs_ready = (merge_node_valid_out_0_NO_SHIFT_REG & merge_node_valid_out_4_NO_SHIFT_REG & merge_node_valid_out_5_NO_SHIFT_REG & merge_node_valid_out_8_NO_SHIFT_REG);
assign local_bb5_add139 = (local_bb5_mul138 + local_lvm_c0_exe565_NO_SHIFT_REG);
assign local_bb5_add139_stall_local = ((local_bb5_select111_stall_in_1 & ~(local_bb5_select111_consumed_1_NO_SHIFT_REG)) | (local_bb5_add139_stall_in & ~(local_bb5_add139_consumed_0_NO_SHIFT_REG)));
assign local_bb5_select111_valid_out_1 = (local_bb5_add139_inputs_ready & ~(local_bb5_select111_consumed_1_NO_SHIFT_REG));
assign local_bb5_add139_valid_out = (local_bb5_add139_inputs_ready & ~(local_bb5_add139_consumed_0_NO_SHIFT_REG));
assign merge_node_stall_in_0 = (local_bb5_add139_stall_local | ~(local_bb5_add139_inputs_ready));
assign merge_node_stall_in_4 = (local_bb5_add139_stall_local | ~(local_bb5_add139_inputs_ready));
assign merge_node_stall_in_5 = (local_bb5_add139_stall_local | ~(local_bb5_add139_inputs_ready));
assign merge_node_stall_in_8 = (local_bb5_add139_stall_local | ~(local_bb5_add139_inputs_ready));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_select111_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_add139_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_select111_consumed_1_NO_SHIFT_REG <= (local_bb5_add139_inputs_ready & (local_bb5_select111_consumed_1_NO_SHIFT_REG | ~(local_bb5_select111_stall_in_1)) & local_bb5_add139_stall_local);
		local_bb5_add139_consumed_0_NO_SHIFT_REG <= (local_bb5_add139_inputs_ready & (local_bb5_add139_consumed_0_NO_SHIFT_REG | ~(local_bb5_add139_stall_in)) & local_bb5_add139_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c0_eni572_valid_out;
wire local_bb5_c0_eni572_stall_in;
wire local_bb5_c0_eni572_inputs_ready;
wire local_bb5_c0_eni572_stall_local;
wire [159:0] local_bb5_c0_eni572;

assign local_bb5_c0_eni572_inputs_ready = (merge_node_valid_out_1_NO_SHIFT_REG & merge_node_valid_out_6_NO_SHIFT_REG & merge_node_valid_out_3_NO_SHIFT_REG & merge_node_valid_out_7_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG);
assign local_bb5_c0_eni572[127:0] = local_bb5_c0_eni471[127:0];
assign local_bb5_c0_eni572[159:128] = local_bb5_c0_exe11;
assign local_bb5_c0_eni572_valid_out = local_bb5_c0_eni572_inputs_ready;
assign local_bb5_c0_eni572_stall_local = local_bb5_c0_eni572_stall_in;
assign merge_node_stall_in_1 = (local_bb5_c0_eni572_stall_local | ~(local_bb5_c0_eni572_inputs_ready));
assign merge_node_stall_in_6 = (local_bb5_c0_eni572_stall_local | ~(local_bb5_c0_eni572_inputs_ready));
assign merge_node_stall_in_3 = (local_bb5_c0_eni572_stall_local | ~(local_bb5_c0_eni572_inputs_ready));
assign merge_node_stall_in_7 = (local_bb5_c0_eni572_stall_local | ~(local_bb5_c0_eni572_inputs_ready));
assign merge_node_stall_in_2 = (local_bb5_c0_eni572_stall_local | ~(local_bb5_c0_eni572_inputs_ready));

// Register node:
//  * latency = 225
//  * capacity = 225
 logic rnode_1to226_bb5_select111_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to226_bb5_select111_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to226_bb5_select111_0_NO_SHIFT_REG;
 logic rnode_1to226_bb5_select111_0_reg_226_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to226_bb5_select111_0_reg_226_NO_SHIFT_REG;
 logic rnode_1to226_bb5_select111_0_valid_out_reg_226_NO_SHIFT_REG;
 logic rnode_1to226_bb5_select111_0_stall_in_reg_226_NO_SHIFT_REG;
 logic rnode_1to226_bb5_select111_0_stall_out_reg_226_NO_SHIFT_REG;

acl_data_fifo rnode_1to226_bb5_select111_0_reg_226_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to226_bb5_select111_0_reg_226_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to226_bb5_select111_0_stall_in_reg_226_NO_SHIFT_REG),
	.valid_out(rnode_1to226_bb5_select111_0_valid_out_reg_226_NO_SHIFT_REG),
	.stall_out(rnode_1to226_bb5_select111_0_stall_out_reg_226_NO_SHIFT_REG),
	.data_in(local_bb5_select111),
	.data_out(rnode_1to226_bb5_select111_0_reg_226_NO_SHIFT_REG)
);

defparam rnode_1to226_bb5_select111_0_reg_226_fifo.DEPTH = 226;
defparam rnode_1to226_bb5_select111_0_reg_226_fifo.DATA_WIDTH = 32;
defparam rnode_1to226_bb5_select111_0_reg_226_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to226_bb5_select111_0_reg_226_fifo.IMPL = "ram";

assign rnode_1to226_bb5_select111_0_reg_226_inputs_ready_NO_SHIFT_REG = local_bb5_select111_valid_out_1;
assign local_bb5_select111_stall_in_1 = rnode_1to226_bb5_select111_0_stall_out_reg_226_NO_SHIFT_REG;
assign rnode_1to226_bb5_select111_0_NO_SHIFT_REG = rnode_1to226_bb5_select111_0_reg_226_NO_SHIFT_REG;
assign rnode_1to226_bb5_select111_0_stall_in_reg_226_NO_SHIFT_REG = rnode_1to226_bb5_select111_0_stall_in_NO_SHIFT_REG;
assign rnode_1to226_bb5_select111_0_valid_out_NO_SHIFT_REG = rnode_1to226_bb5_select111_0_valid_out_reg_226_NO_SHIFT_REG;

// Register node:
//  * latency = 66
//  * capacity = 66
 logic rnode_1to67_bb5_add139_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to67_bb5_add139_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to67_bb5_add139_0_NO_SHIFT_REG;
 logic rnode_1to67_bb5_add139_0_reg_67_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to67_bb5_add139_0_reg_67_NO_SHIFT_REG;
 logic rnode_1to67_bb5_add139_0_valid_out_reg_67_NO_SHIFT_REG;
 logic rnode_1to67_bb5_add139_0_stall_in_reg_67_NO_SHIFT_REG;
 logic rnode_1to67_bb5_add139_0_stall_out_reg_67_NO_SHIFT_REG;

acl_data_fifo rnode_1to67_bb5_add139_0_reg_67_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to67_bb5_add139_0_reg_67_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to67_bb5_add139_0_stall_in_reg_67_NO_SHIFT_REG),
	.valid_out(rnode_1to67_bb5_add139_0_valid_out_reg_67_NO_SHIFT_REG),
	.stall_out(rnode_1to67_bb5_add139_0_stall_out_reg_67_NO_SHIFT_REG),
	.data_in(local_bb5_add139),
	.data_out(rnode_1to67_bb5_add139_0_reg_67_NO_SHIFT_REG)
);

defparam rnode_1to67_bb5_add139_0_reg_67_fifo.DEPTH = 67;
defparam rnode_1to67_bb5_add139_0_reg_67_fifo.DATA_WIDTH = 32;
defparam rnode_1to67_bb5_add139_0_reg_67_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to67_bb5_add139_0_reg_67_fifo.IMPL = "ram";

assign rnode_1to67_bb5_add139_0_reg_67_inputs_ready_NO_SHIFT_REG = local_bb5_add139_valid_out;
assign local_bb5_add139_stall_in = rnode_1to67_bb5_add139_0_stall_out_reg_67_NO_SHIFT_REG;
assign rnode_1to67_bb5_add139_0_NO_SHIFT_REG = rnode_1to67_bb5_add139_0_reg_67_NO_SHIFT_REG;
assign rnode_1to67_bb5_add139_0_stall_in_reg_67_NO_SHIFT_REG = rnode_1to67_bb5_add139_0_stall_in_NO_SHIFT_REG;
assign rnode_1to67_bb5_add139_0_valid_out_NO_SHIFT_REG = rnode_1to67_bb5_add139_0_valid_out_reg_67_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb5_c0_enter73_c0_eni572_inputs_ready;
 reg local_bb5_c0_enter73_c0_eni572_valid_out_0_NO_SHIFT_REG;
wire local_bb5_c0_enter73_c0_eni572_stall_in_0;
 reg local_bb5_c0_enter73_c0_eni572_valid_out_1_NO_SHIFT_REG;
wire local_bb5_c0_enter73_c0_eni572_stall_in_1;
 reg local_bb5_c0_enter73_c0_eni572_valid_out_2_NO_SHIFT_REG;
wire local_bb5_c0_enter73_c0_eni572_stall_in_2;
 reg local_bb5_c0_enter73_c0_eni572_valid_out_3_NO_SHIFT_REG;
wire local_bb5_c0_enter73_c0_eni572_stall_in_3;
 reg local_bb5_c0_enter73_c0_eni572_valid_out_4_NO_SHIFT_REG;
wire local_bb5_c0_enter73_c0_eni572_stall_in_4;
wire local_bb5_c0_enter73_c0_eni572_output_regs_ready;
 reg [159:0] local_bb5_c0_enter73_c0_eni572_NO_SHIFT_REG;
wire local_bb5_c0_enter73_c0_eni572_input_accepted;
wire local_bb5_c0_exit87_c0_exi886_entry_stall;
wire local_bb5_c0_exit87_c0_exi886_output_regs_ready;
wire [62:0] local_bb5_c0_exit87_c0_exi886_valid_bits;
wire local_bb5_c0_exit87_c0_exi886_phases;
wire local_bb5_c0_enter73_c0_eni572_inc_pipelined_thread;
wire local_bb5_c0_enter73_c0_eni572_dec_pipelined_thread;
wire local_bb5_c0_enter73_c0_eni572_causedstall;

assign local_bb5_c0_enter73_c0_eni572_inputs_ready = local_bb5_c0_eni572_valid_out;
assign local_bb5_c0_enter73_c0_eni572_output_regs_ready = 1'b1;
assign local_bb5_c0_enter73_c0_eni572_input_accepted = (local_bb5_c0_enter73_c0_eni572_inputs_ready && !(local_bb5_c0_exit87_c0_exi886_entry_stall));
assign local_bb5_c0_enter73_c0_eni572_inc_pipelined_thread = 1'b1;
assign local_bb5_c0_enter73_c0_eni572_dec_pipelined_thread = ~(1'b0);
assign local_bb5_c0_eni572_stall_in = ((~(local_bb5_c0_enter73_c0_eni572_inputs_ready) | local_bb5_c0_exit87_c0_exi886_entry_stall) | ~(1'b1));
assign local_bb5_c0_enter73_c0_eni572_causedstall = (1'b1 && ((~(local_bb5_c0_enter73_c0_eni572_inputs_ready) | local_bb5_c0_exit87_c0_exi886_entry_stall) && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_c0_enter73_c0_eni572_NO_SHIFT_REG <= 'x;
		local_bb5_c0_enter73_c0_eni572_valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_c0_enter73_c0_eni572_valid_out_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_c0_enter73_c0_eni572_valid_out_2_NO_SHIFT_REG <= 1'b0;
		local_bb5_c0_enter73_c0_eni572_valid_out_3_NO_SHIFT_REG <= 1'b0;
		local_bb5_c0_enter73_c0_eni572_valid_out_4_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_c0_enter73_c0_eni572_output_regs_ready)
		begin
			local_bb5_c0_enter73_c0_eni572_NO_SHIFT_REG <= local_bb5_c0_eni572;
			local_bb5_c0_enter73_c0_eni572_valid_out_0_NO_SHIFT_REG <= 1'b1;
			local_bb5_c0_enter73_c0_eni572_valid_out_1_NO_SHIFT_REG <= 1'b1;
			local_bb5_c0_enter73_c0_eni572_valid_out_2_NO_SHIFT_REG <= 1'b1;
			local_bb5_c0_enter73_c0_eni572_valid_out_3_NO_SHIFT_REG <= 1'b1;
			local_bb5_c0_enter73_c0_eni572_valid_out_4_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb5_c0_enter73_c0_eni572_stall_in_0))
			begin
				local_bb5_c0_enter73_c0_eni572_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c0_enter73_c0_eni572_stall_in_1))
			begin
				local_bb5_c0_enter73_c0_eni572_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c0_enter73_c0_eni572_stall_in_2))
			begin
				local_bb5_c0_enter73_c0_eni572_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c0_enter73_c0_eni572_stall_in_3))
			begin
				local_bb5_c0_enter73_c0_eni572_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c0_enter73_c0_eni572_stall_in_4))
			begin
				local_bb5_c0_enter73_c0_eni572_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_226to227_bb5_select111_0_valid_out_NO_SHIFT_REG;
 logic rnode_226to227_bb5_select111_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_226to227_bb5_select111_0_NO_SHIFT_REG;
 logic rnode_226to227_bb5_select111_0_reg_227_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_226to227_bb5_select111_0_reg_227_NO_SHIFT_REG;
 logic rnode_226to227_bb5_select111_0_valid_out_reg_227_NO_SHIFT_REG;
 logic rnode_226to227_bb5_select111_0_stall_in_reg_227_NO_SHIFT_REG;
 logic rnode_226to227_bb5_select111_0_stall_out_reg_227_NO_SHIFT_REG;

acl_data_fifo rnode_226to227_bb5_select111_0_reg_227_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_226to227_bb5_select111_0_reg_227_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_226to227_bb5_select111_0_stall_in_reg_227_NO_SHIFT_REG),
	.valid_out(rnode_226to227_bb5_select111_0_valid_out_reg_227_NO_SHIFT_REG),
	.stall_out(rnode_226to227_bb5_select111_0_stall_out_reg_227_NO_SHIFT_REG),
	.data_in(rnode_1to226_bb5_select111_0_NO_SHIFT_REG),
	.data_out(rnode_226to227_bb5_select111_0_reg_227_NO_SHIFT_REG)
);

defparam rnode_226to227_bb5_select111_0_reg_227_fifo.DEPTH = 2;
defparam rnode_226to227_bb5_select111_0_reg_227_fifo.DATA_WIDTH = 32;
defparam rnode_226to227_bb5_select111_0_reg_227_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_226to227_bb5_select111_0_reg_227_fifo.IMPL = "ll_reg";

assign rnode_226to227_bb5_select111_0_reg_227_inputs_ready_NO_SHIFT_REG = rnode_1to226_bb5_select111_0_valid_out_NO_SHIFT_REG;
assign rnode_1to226_bb5_select111_0_stall_in_NO_SHIFT_REG = rnode_226to227_bb5_select111_0_stall_out_reg_227_NO_SHIFT_REG;
assign rnode_226to227_bb5_select111_0_NO_SHIFT_REG = rnode_226to227_bb5_select111_0_reg_227_NO_SHIFT_REG;
assign rnode_226to227_bb5_select111_0_stall_in_reg_227_NO_SHIFT_REG = rnode_226to227_bb5_select111_0_stall_in_NO_SHIFT_REG;
assign rnode_226to227_bb5_select111_0_valid_out_NO_SHIFT_REG = rnode_226to227_bb5_select111_0_valid_out_reg_227_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_67to68_bb5_add139_0_valid_out_NO_SHIFT_REG;
 logic rnode_67to68_bb5_add139_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_67to68_bb5_add139_0_NO_SHIFT_REG;
 logic rnode_67to68_bb5_add139_0_reg_68_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_67to68_bb5_add139_0_reg_68_NO_SHIFT_REG;
 logic rnode_67to68_bb5_add139_0_valid_out_reg_68_NO_SHIFT_REG;
 logic rnode_67to68_bb5_add139_0_stall_in_reg_68_NO_SHIFT_REG;
 logic rnode_67to68_bb5_add139_0_stall_out_reg_68_NO_SHIFT_REG;

acl_data_fifo rnode_67to68_bb5_add139_0_reg_68_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_67to68_bb5_add139_0_reg_68_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_67to68_bb5_add139_0_stall_in_reg_68_NO_SHIFT_REG),
	.valid_out(rnode_67to68_bb5_add139_0_valid_out_reg_68_NO_SHIFT_REG),
	.stall_out(rnode_67to68_bb5_add139_0_stall_out_reg_68_NO_SHIFT_REG),
	.data_in(rnode_1to67_bb5_add139_0_NO_SHIFT_REG),
	.data_out(rnode_67to68_bb5_add139_0_reg_68_NO_SHIFT_REG)
);

defparam rnode_67to68_bb5_add139_0_reg_68_fifo.DEPTH = 2;
defparam rnode_67to68_bb5_add139_0_reg_68_fifo.DATA_WIDTH = 32;
defparam rnode_67to68_bb5_add139_0_reg_68_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_67to68_bb5_add139_0_reg_68_fifo.IMPL = "ll_reg";

assign rnode_67to68_bb5_add139_0_reg_68_inputs_ready_NO_SHIFT_REG = rnode_1to67_bb5_add139_0_valid_out_NO_SHIFT_REG;
assign rnode_1to67_bb5_add139_0_stall_in_NO_SHIFT_REG = rnode_67to68_bb5_add139_0_stall_out_reg_68_NO_SHIFT_REG;
assign rnode_67to68_bb5_add139_0_NO_SHIFT_REG = rnode_67to68_bb5_add139_0_reg_68_NO_SHIFT_REG;
assign rnode_67to68_bb5_add139_0_stall_in_reg_68_NO_SHIFT_REG = rnode_67to68_bb5_add139_0_stall_in_NO_SHIFT_REG;
assign rnode_67to68_bb5_add139_0_valid_out_NO_SHIFT_REG = rnode_67to68_bb5_add139_0_valid_out_reg_68_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_c0_ene174_stall_local;
wire local_bb5_c0_ene174;

assign local_bb5_c0_ene174 = local_bb5_c0_enter73_c0_eni572_NO_SHIFT_REG[8];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_ene275_stall_local;
wire [31:0] local_bb5_c0_ene275;

assign local_bb5_c0_ene275 = local_bb5_c0_enter73_c0_eni572_NO_SHIFT_REG[63:32];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_ene376_stall_local;
wire [31:0] local_bb5_c0_ene376;

assign local_bb5_c0_ene376 = local_bb5_c0_enter73_c0_eni572_NO_SHIFT_REG[95:64];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_ene477_stall_local;
wire local_bb5_c0_ene477;

assign local_bb5_c0_ene477 = local_bb5_c0_enter73_c0_eni572_NO_SHIFT_REG[96];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_ene578_stall_local;
wire [31:0] local_bb5_c0_ene578;

assign local_bb5_c0_ene578 = local_bb5_c0_enter73_c0_eni572_NO_SHIFT_REG[159:128];

// This section implements an unregistered operation.
// 
wire local_bb5_idxprom144_valid_out;
wire local_bb5_idxprom144_stall_in;
wire local_bb5_idxprom144_inputs_ready;
wire local_bb5_idxprom144_stall_local;
wire [63:0] local_bb5_idxprom144;

assign local_bb5_idxprom144_inputs_ready = rnode_226to227_bb5_select111_0_valid_out_NO_SHIFT_REG;
assign local_bb5_idxprom144[32] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[33] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[34] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[35] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[36] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[37] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[38] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[39] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[40] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[41] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[42] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[43] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[44] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[45] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[46] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[47] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[48] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[49] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[50] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[51] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[52] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[53] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[54] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[55] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[56] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[57] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[58] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[59] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[60] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[61] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[62] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[63] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom144[31:0] = rnode_226to227_bb5_select111_0_NO_SHIFT_REG;
assign local_bb5_idxprom144_valid_out = local_bb5_idxprom144_inputs_ready;
assign local_bb5_idxprom144_stall_local = local_bb5_idxprom144_stall_in;
assign rnode_226to227_bb5_select111_0_stall_in_NO_SHIFT_REG = (|local_bb5_idxprom144_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb5_idxprom140_stall_local;
wire [63:0] local_bb5_idxprom140;

assign local_bb5_idxprom140[32] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[33] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[34] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[35] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[36] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[37] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[38] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[39] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[40] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[41] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[42] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[43] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[44] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[45] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[46] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[47] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[48] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[49] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[50] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[51] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[52] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[53] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[54] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[55] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[56] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[57] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[58] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[59] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[60] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[61] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[62] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[63] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG[31];
assign local_bb5_idxprom140[31:0] = rnode_67to68_bb5_add139_0_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_not_cmp30_phi_decision135_select_stall_local;
wire local_bb5_not_cmp30_phi_decision135_select;

assign local_bb5_not_cmp30_phi_decision135_select = (local_bb5_c0_ene174 ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5_tobool_i_stall_local;
wire local_bb5_tobool_i;

assign local_bb5_tobool_i = ($signed(local_bb5_c0_ene275) < $signed(32'h0));

// This section implements an unregistered operation.
// 
wire local_bb5_add_i_stall_local;
wire [31:0] local_bb5_add_i;

assign local_bb5_add_i = (32'h0 - local_bb5_c0_ene275);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp155_stall_local;
wire local_bb5_cmp155;

assign local_bb5_cmp155 = ($signed(local_bb5_c0_ene376) < $signed(32'h38));

// This section implements an unregistered operation.
// 
wire local_bb5_cmp162_stall_local;
wire local_bb5_cmp162;

assign local_bb5_cmp162 = ($signed(local_bb5_c0_ene376) < $signed(32'h0));

// This section implements a registered operation.
// 
wire local_bb5_arrayidx145_inputs_ready;
 reg local_bb5_arrayidx145_valid_out_NO_SHIFT_REG;
wire local_bb5_arrayidx145_stall_in;
wire local_bb5_arrayidx145_output_regs_ready;
 reg [31:0] local_bb5_arrayidx145_NO_SHIFT_REG;
wire [31:0] local_bb5_arrayidx145_op_wire;
wire local_bb5_arrayidx145_causedstall;

assign local_bb5_arrayidx145_inputs_ready = local_bb5_idxprom144_valid_out;
assign local_bb5_arrayidx145_output_regs_ready = (&(~(local_bb5_arrayidx145_valid_out_NO_SHIFT_REG) | ~(local_bb5_arrayidx145_stall_in)));
assign local_bb5_arrayidx145_op_wire = (64'h0 + (local_bb5_idxprom144 << 6'h2));
assign local_bb5_idxprom144_stall_in = (~(local_bb5_arrayidx145_output_regs_ready) | ~(local_bb5_arrayidx145_inputs_ready));
assign local_bb5_arrayidx145_causedstall = (local_bb5_arrayidx145_inputs_ready && (~(local_bb5_arrayidx145_output_regs_ready) && !(~(local_bb5_arrayidx145_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_arrayidx145_NO_SHIFT_REG <= 'x;
		local_bb5_arrayidx145_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_arrayidx145_output_regs_ready)
		begin
			local_bb5_arrayidx145_NO_SHIFT_REG <= local_bb5_arrayidx145_op_wire;
			local_bb5_arrayidx145_valid_out_NO_SHIFT_REG <= local_bb5_arrayidx145_inputs_ready;
		end
		else
		begin
			if (~(local_bb5_arrayidx145_stall_in))
			begin
				local_bb5_arrayidx145_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_arrayidx141_stall_local;
wire [63:0] local_bb5_arrayidx141;

assign local_bb5_arrayidx141 = (input_key + local_bb5_idxprom140);

// This section implements an unregistered operation.
// 
wire local_bb5_add_N_i_stall_local;
wire [31:0] local_bb5_add_N_i;

assign local_bb5_add_N_i = (local_bb5_tobool_i ? local_bb5_add_i : local_bb5_c0_ene275);

// This section implements an unregistered operation.
// 
wire local_bb5_and122_stall_local;
wire local_bb5_and122;

assign local_bb5_and122 = (local_bb5_cmp155 & local_bb5_c0_ene174);

// This section implements an unregistered operation.
// 
wire local_bb5__123_stall_local;
wire local_bb5__123;

assign local_bb5__123 = (local_bb5_c0_ene174 & local_bb5_cmp155);

// This section implements an unregistered operation.
// 
wire local_bb5_and126_stall_local;
wire local_bb5_and126;

assign local_bb5_and126 = (local_bb5_cmp162 & local_bb5_not_cmp30_phi_decision135_select);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp162_not156_stall_local;
wire local_bb5_cmp162_not156;

assign local_bb5_cmp162_not156 = (local_bb5_cmp162 ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5__112_valid_out;
wire local_bb5__112_stall_in;
wire local_bb5__112_inputs_ready;
wire local_bb5__112_stall_local;
wire [31:0] local_bb5__112;

assign local_bb5__112_inputs_ready = (local_bb5_arrayidx145_valid_out_NO_SHIFT_REG & rnode_227to228_c0_exe13_0_valid_out_0_NO_SHIFT_REG);
assign local_bb5__112 = (rnode_227to228_c0_exe13_0_NO_SHIFT_REG ? local_bb5_arrayidx145_NO_SHIFT_REG : 64'h3C);
assign local_bb5__112_valid_out = local_bb5__112_inputs_ready;
assign local_bb5__112_stall_local = local_bb5__112_stall_in;
assign local_bb5_arrayidx145_stall_in = (local_bb5__112_stall_local | ~(local_bb5__112_inputs_ready));
assign rnode_227to228_c0_exe13_0_stall_in_0_NO_SHIFT_REG = (local_bb5__112_stall_local | ~(local_bb5__112_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb5_memcoalesce_key_bitcast_01_valid_out;
wire local_bb5_memcoalesce_key_bitcast_01_stall_in;
wire local_bb5_memcoalesce_key_bitcast_01_inputs_ready;
wire local_bb5_memcoalesce_key_bitcast_01_stall_local;
wire [63:0] local_bb5_memcoalesce_key_bitcast_01;

assign local_bb5_memcoalesce_key_bitcast_01_inputs_ready = rnode_67to68_bb5_add139_0_valid_out_NO_SHIFT_REG;
assign local_bb5_memcoalesce_key_bitcast_01 = local_bb5_arrayidx141;
assign local_bb5_memcoalesce_key_bitcast_01_valid_out = local_bb5_memcoalesce_key_bitcast_01_inputs_ready;
assign local_bb5_memcoalesce_key_bitcast_01_stall_local = local_bb5_memcoalesce_key_bitcast_01_stall_in;
assign rnode_67to68_bb5_add139_0_stall_in_NO_SHIFT_REG = (|local_bb5_memcoalesce_key_bitcast_01_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb5_and124_stall_local;
wire local_bb5_and124;

assign local_bb5_and124 = (local_bb5__123 & local_bb5_c0_ene477);

// This section implements an unregistered operation.
// 
wire local_bb5_or131_stall_local;
wire local_bb5_or131;

assign local_bb5_or131 = (local_bb5_and126 | local_bb5_c0_ene174);

// This section implements an unregistered operation.
// 
wire local_bb5_select106_stall_local;
wire [31:0] local_bb5_select106;

assign local_bb5_select106 = (local_bb5_and126 ? local_bb5_c0_ene578 : local_bb5_c0_ene275);

// This section implements an unregistered operation.
// 
wire local_bb5_and126_xor_stall_local;
wire local_bb5_and126_xor;

assign local_bb5_and126_xor = (local_bb5_c0_ene174 | local_bb5_cmp162_not156);

// This section implements an unregistered operation.
// 
wire local_bb5_from_if_else161107_stall_local;
wire local_bb5_from_if_else161107;

assign local_bb5_from_if_else161107 = (local_bb5_not_cmp30_phi_decision135_select & local_bb5_cmp162_not156);

// This section implements a staging register.
// 
wire rstag_228to228_bb5__112_valid_out;
wire rstag_228to228_bb5__112_stall_in;
wire rstag_228to228_bb5__112_inputs_ready;
wire rstag_228to228_bb5__112_stall_local;
 reg rstag_228to228_bb5__112_staging_valid_NO_SHIFT_REG;
wire rstag_228to228_bb5__112_combined_valid;
 reg [31:0] rstag_228to228_bb5__112_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_228to228_bb5__112;

assign rstag_228to228_bb5__112_inputs_ready = local_bb5__112_valid_out;
assign rstag_228to228_bb5__112 = (rstag_228to228_bb5__112_staging_valid_NO_SHIFT_REG ? rstag_228to228_bb5__112_staging_reg_NO_SHIFT_REG : local_bb5__112);
assign rstag_228to228_bb5__112_combined_valid = (rstag_228to228_bb5__112_staging_valid_NO_SHIFT_REG | rstag_228to228_bb5__112_inputs_ready);
assign rstag_228to228_bb5__112_valid_out = rstag_228to228_bb5__112_combined_valid;
assign rstag_228to228_bb5__112_stall_local = rstag_228to228_bb5__112_stall_in;
assign local_bb5__112_stall_in = (|rstag_228to228_bb5__112_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_228to228_bb5__112_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_228to228_bb5__112_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_228to228_bb5__112_stall_local)
		begin
			if (~(rstag_228to228_bb5__112_staging_valid_NO_SHIFT_REG))
			begin
				rstag_228to228_bb5__112_staging_valid_NO_SHIFT_REG <= rstag_228to228_bb5__112_inputs_ready;
			end
		end
		else
		begin
			rstag_228to228_bb5__112_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_228to228_bb5__112_staging_valid_NO_SHIFT_REG))
		begin
			rstag_228to228_bb5__112_staging_reg_NO_SHIFT_REG <= local_bb5__112;
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_or125_stall_local;
wire local_bb5_or125;

assign local_bb5_or125 = (local_bb5_and122 | local_bb5_and124);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_ene174_valid_out_5;
wire local_bb5_c0_ene174_stall_in_5;
 reg local_bb5_c0_ene174_consumed_5_NO_SHIFT_REG;
wire local_bb5_not_cmp30_phi_decision135_select_valid_out_2;
wire local_bb5_not_cmp30_phi_decision135_select_stall_in_2;
 reg local_bb5_not_cmp30_phi_decision135_select_consumed_2_NO_SHIFT_REG;
wire local_bb5_and126_xor_valid_out;
wire local_bb5_and126_xor_stall_in;
 reg local_bb5_and126_xor_consumed_0_NO_SHIFT_REG;
wire local_bb5_or131_valid_out;
wire local_bb5_or131_stall_in;
 reg local_bb5_or131_consumed_0_NO_SHIFT_REG;
wire local_bb5_or125_valid_out;
wire local_bb5_or125_stall_in;
 reg local_bb5_or125_consumed_0_NO_SHIFT_REG;
wire local_bb5_tobool_i_valid_out_1;
wire local_bb5_tobool_i_stall_in_1;
 reg local_bb5_tobool_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_add_N_i_valid_out;
wire local_bb5_add_N_i_stall_in;
 reg local_bb5_add_N_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_select108_valid_out;
wire local_bb5_select108_stall_in;
 reg local_bb5_select108_consumed_0_NO_SHIFT_REG;
wire local_bb5_select108_inputs_ready;
wire local_bb5_select108_stall_local;
wire [31:0] local_bb5_select108;

assign local_bb5_select108_inputs_ready = (local_bb5_c0_enter73_c0_eni572_valid_out_0_NO_SHIFT_REG & local_bb5_c0_enter73_c0_eni572_valid_out_3_NO_SHIFT_REG & local_bb5_c0_enter73_c0_eni572_valid_out_2_NO_SHIFT_REG & local_bb5_c0_enter73_c0_eni572_valid_out_1_NO_SHIFT_REG & local_bb5_c0_enter73_c0_eni572_valid_out_4_NO_SHIFT_REG);
assign local_bb5_select108 = (local_bb5_from_if_else161107 ? local_bb5_c0_ene578 : local_bb5_select106);
assign local_bb5_c0_ene174_valid_out_5 = 1'b1;
assign local_bb5_not_cmp30_phi_decision135_select_valid_out_2 = 1'b1;
assign local_bb5_and126_xor_valid_out = 1'b1;
assign local_bb5_or131_valid_out = 1'b1;
assign local_bb5_or125_valid_out = 1'b1;
assign local_bb5_tobool_i_valid_out_1 = 1'b1;
assign local_bb5_add_N_i_valid_out = 1'b1;
assign local_bb5_select108_valid_out = 1'b1;
assign local_bb5_c0_enter73_c0_eni572_stall_in_0 = 1'b0;
assign local_bb5_c0_enter73_c0_eni572_stall_in_3 = 1'b0;
assign local_bb5_c0_enter73_c0_eni572_stall_in_2 = 1'b0;
assign local_bb5_c0_enter73_c0_eni572_stall_in_1 = 1'b0;
assign local_bb5_c0_enter73_c0_eni572_stall_in_4 = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_c0_ene174_consumed_5_NO_SHIFT_REG <= 1'b0;
		local_bb5_not_cmp30_phi_decision135_select_consumed_2_NO_SHIFT_REG <= 1'b0;
		local_bb5_and126_xor_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_or131_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_or125_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_tobool_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_add_N_i_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_select108_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_c0_ene174_consumed_5_NO_SHIFT_REG <= (local_bb5_select108_inputs_ready & (local_bb5_c0_ene174_consumed_5_NO_SHIFT_REG | ~(local_bb5_c0_ene174_stall_in_5)) & local_bb5_select108_stall_local);
		local_bb5_not_cmp30_phi_decision135_select_consumed_2_NO_SHIFT_REG <= (local_bb5_select108_inputs_ready & (local_bb5_not_cmp30_phi_decision135_select_consumed_2_NO_SHIFT_REG | ~(local_bb5_not_cmp30_phi_decision135_select_stall_in_2)) & local_bb5_select108_stall_local);
		local_bb5_and126_xor_consumed_0_NO_SHIFT_REG <= (local_bb5_select108_inputs_ready & (local_bb5_and126_xor_consumed_0_NO_SHIFT_REG | ~(local_bb5_and126_xor_stall_in)) & local_bb5_select108_stall_local);
		local_bb5_or131_consumed_0_NO_SHIFT_REG <= (local_bb5_select108_inputs_ready & (local_bb5_or131_consumed_0_NO_SHIFT_REG | ~(local_bb5_or131_stall_in)) & local_bb5_select108_stall_local);
		local_bb5_or125_consumed_0_NO_SHIFT_REG <= (local_bb5_select108_inputs_ready & (local_bb5_or125_consumed_0_NO_SHIFT_REG | ~(local_bb5_or125_stall_in)) & local_bb5_select108_stall_local);
		local_bb5_tobool_i_consumed_1_NO_SHIFT_REG <= (local_bb5_select108_inputs_ready & (local_bb5_tobool_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_tobool_i_stall_in_1)) & local_bb5_select108_stall_local);
		local_bb5_add_N_i_consumed_0_NO_SHIFT_REG <= (local_bb5_select108_inputs_ready & (local_bb5_add_N_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_add_N_i_stall_in)) & local_bb5_select108_stall_local);
		local_bb5_select108_consumed_0_NO_SHIFT_REG <= (local_bb5_select108_inputs_ready & (local_bb5_select108_consumed_0_NO_SHIFT_REG | ~(local_bb5_select108_stall_in)) & local_bb5_select108_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_c0_ene174_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c0_ene174_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c0_ene174_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c0_ene174_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c0_ene174_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c0_ene174_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c0_ene174_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_c0_ene174_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_c0_ene174_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_c0_ene174_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_c0_ene174_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_c0_ene174_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_c0_ene174_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb5_c0_ene174),
	.data_out(rnode_2to3_bb5_c0_ene174_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_c0_ene174_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_c0_ene174_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb5_c0_ene174_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_c0_ene174_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_c0_ene174_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_c0_ene174_stall_in_5 = 1'b0;
assign rnode_2to3_bb5_c0_ene174_0_NO_SHIFT_REG = rnode_2to3_bb5_c0_ene174_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_c0_ene174_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb5_c0_ene174_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb5_not_cmp30_phi_decision135_select),
	.data_out(rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_not_cmp30_phi_decision135_select_stall_in_2 = 1'b0;
assign rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_NO_SHIFT_REG = rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_and126_xor_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_and126_xor_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb5_and126_xor_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_and126_xor_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb5_and126_xor_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_and126_xor_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_and126_xor_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_and126_xor_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_and126_xor_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_and126_xor_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_and126_xor_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_and126_xor_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_and126_xor_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb5_and126_xor),
	.data_out(rnode_2to3_bb5_and126_xor_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_and126_xor_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_and126_xor_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb5_and126_xor_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_and126_xor_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_and126_xor_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_and126_xor_stall_in = 1'b0;
assign rnode_2to3_bb5_and126_xor_0_NO_SHIFT_REG = rnode_2to3_bb5_and126_xor_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_and126_xor_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb5_and126_xor_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_or131_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or131_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or131_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or131_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or131_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or131_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or131_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or131_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_or131_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_or131_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_or131_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_or131_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_or131_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb5_or131),
	.data_out(rnode_2to3_bb5_or131_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_or131_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_or131_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb5_or131_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_or131_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_or131_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or131_stall_in = 1'b0;
assign rnode_2to3_bb5_or131_0_NO_SHIFT_REG = rnode_2to3_bb5_or131_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_or131_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb5_or131_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_or125_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or125_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or125_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or125_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or125_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or125_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or125_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_or125_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_or125_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_or125_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_or125_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_or125_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_or125_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb5_or125),
	.data_out(rnode_2to3_bb5_or125_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_or125_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_or125_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb5_or125_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_or125_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_or125_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or125_stall_in = 1'b0;
assign rnode_2to3_bb5_or125_0_NO_SHIFT_REG = rnode_2to3_bb5_or125_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_or125_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb5_or125_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_tobool_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_tobool_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to3_bb5_tobool_i_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_tobool_i_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to3_bb5_tobool_i_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_tobool_i_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_tobool_i_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_tobool_i_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_tobool_i_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_tobool_i_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_tobool_i_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_tobool_i_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_tobool_i_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb5_tobool_i),
	.data_out(rnode_2to3_bb5_tobool_i_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_tobool_i_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_tobool_i_0_reg_3_fifo.DATA_WIDTH = 1;
defparam rnode_2to3_bb5_tobool_i_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_tobool_i_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_tobool_i_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_tobool_i_stall_in_1 = 1'b0;
assign rnode_2to3_bb5_tobool_i_0_NO_SHIFT_REG = rnode_2to3_bb5_tobool_i_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_tobool_i_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb5_tobool_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements a registered operation.
// 
wire local_bb5_conv_i_i_inputs_ready;
 reg local_bb5_conv_i_i_valid_out_0_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_0;
 reg local_bb5_conv_i_i_valid_out_1_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_1;
 reg local_bb5_conv_i_i_valid_out_2_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_2;
 reg local_bb5_conv_i_i_valid_out_3_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_3;
 reg local_bb5_conv_i_i_valid_out_4_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_4;
 reg local_bb5_conv_i_i_valid_out_5_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_5;
 reg local_bb5_conv_i_i_valid_out_6_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_6;
 reg local_bb5_conv_i_i_valid_out_7_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_7;
 reg local_bb5_conv_i_i_valid_out_8_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_8;
 reg local_bb5_conv_i_i_valid_out_9_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_9;
 reg local_bb5_conv_i_i_valid_out_10_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_10;
 reg local_bb5_conv_i_i_valid_out_11_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_11;
 reg local_bb5_conv_i_i_valid_out_12_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_12;
 reg local_bb5_conv_i_i_valid_out_13_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_13;
 reg local_bb5_conv_i_i_valid_out_14_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_14;
 reg local_bb5_conv_i_i_valid_out_15_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_15;
 reg local_bb5_conv_i_i_valid_out_16_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_16;
 reg local_bb5_conv_i_i_valid_out_17_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_17;
 reg local_bb5_conv_i_i_valid_out_18_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_18;
 reg local_bb5_conv_i_i_valid_out_19_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_19;
 reg local_bb5_conv_i_i_valid_out_20_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_20;
 reg local_bb5_conv_i_i_valid_out_21_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_21;
 reg local_bb5_conv_i_i_valid_out_22_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_22;
 reg local_bb5_conv_i_i_valid_out_23_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_23;
 reg local_bb5_conv_i_i_valid_out_24_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_24;
 reg local_bb5_conv_i_i_valid_out_25_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_25;
 reg local_bb5_conv_i_i_valid_out_26_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_26;
 reg local_bb5_conv_i_i_valid_out_27_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_27;
 reg local_bb5_conv_i_i_valid_out_28_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_28;
 reg local_bb5_conv_i_i_valid_out_29_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_29;
 reg local_bb5_conv_i_i_valid_out_30_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_30;
 reg local_bb5_conv_i_i_valid_out_31_NO_SHIFT_REG;
wire local_bb5_conv_i_i_stall_in_31;
wire local_bb5_conv_i_i_output_regs_ready;
 reg [63:0] local_bb5_conv_i_i_NO_SHIFT_REG;
wire local_bb5_conv_i_i_causedstall;

assign local_bb5_conv_i_i_inputs_ready = 1'b1;
assign local_bb5_conv_i_i_output_regs_ready = 1'b1;
assign local_bb5_add_N_i_stall_in = 1'b0;
assign local_bb5_conv_i_i_causedstall = (1'b1 && (1'b0 && !(1'b0)));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_conv_i_i_NO_SHIFT_REG <= 'x;
		local_bb5_conv_i_i_valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_2_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_3_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_4_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_5_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_6_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_7_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_8_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_9_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_10_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_11_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_12_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_13_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_14_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_15_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_16_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_17_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_18_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_19_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_20_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_21_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_22_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_23_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_24_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_25_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_26_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_27_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_28_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_29_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_30_NO_SHIFT_REG <= 1'b0;
		local_bb5_conv_i_i_valid_out_31_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_conv_i_i_output_regs_ready)
		begin
			local_bb5_conv_i_i_NO_SHIFT_REG <= local_bb5_add_N_i;
			local_bb5_conv_i_i_valid_out_0_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_1_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_2_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_3_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_4_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_5_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_6_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_7_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_8_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_9_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_10_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_11_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_12_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_13_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_14_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_15_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_16_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_17_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_18_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_19_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_20_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_21_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_22_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_23_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_24_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_25_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_26_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_27_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_28_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_29_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_30_NO_SHIFT_REG <= 1'b1;
			local_bb5_conv_i_i_valid_out_31_NO_SHIFT_REG <= 1'b1;
		end
		else
		begin
			if (~(local_bb5_conv_i_i_stall_in_0))
			begin
				local_bb5_conv_i_i_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_1))
			begin
				local_bb5_conv_i_i_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_2))
			begin
				local_bb5_conv_i_i_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_3))
			begin
				local_bb5_conv_i_i_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_4))
			begin
				local_bb5_conv_i_i_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_5))
			begin
				local_bb5_conv_i_i_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_6))
			begin
				local_bb5_conv_i_i_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_7))
			begin
				local_bb5_conv_i_i_valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_8))
			begin
				local_bb5_conv_i_i_valid_out_8_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_9))
			begin
				local_bb5_conv_i_i_valid_out_9_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_10))
			begin
				local_bb5_conv_i_i_valid_out_10_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_11))
			begin
				local_bb5_conv_i_i_valid_out_11_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_12))
			begin
				local_bb5_conv_i_i_valid_out_12_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_13))
			begin
				local_bb5_conv_i_i_valid_out_13_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_14))
			begin
				local_bb5_conv_i_i_valid_out_14_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_15))
			begin
				local_bb5_conv_i_i_valid_out_15_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_16))
			begin
				local_bb5_conv_i_i_valid_out_16_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_17))
			begin
				local_bb5_conv_i_i_valid_out_17_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_18))
			begin
				local_bb5_conv_i_i_valid_out_18_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_19))
			begin
				local_bb5_conv_i_i_valid_out_19_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_20))
			begin
				local_bb5_conv_i_i_valid_out_20_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_21))
			begin
				local_bb5_conv_i_i_valid_out_21_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_22))
			begin
				local_bb5_conv_i_i_valid_out_22_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_23))
			begin
				local_bb5_conv_i_i_valid_out_23_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_24))
			begin
				local_bb5_conv_i_i_valid_out_24_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_25))
			begin
				local_bb5_conv_i_i_valid_out_25_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_26))
			begin
				local_bb5_conv_i_i_valid_out_26_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_27))
			begin
				local_bb5_conv_i_i_valid_out_27_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_28))
			begin
				local_bb5_conv_i_i_valid_out_28_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_29))
			begin
				local_bb5_conv_i_i_valid_out_29_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_30))
			begin
				local_bb5_conv_i_i_valid_out_30_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_conv_i_i_stall_in_31))
			begin
				local_bb5_conv_i_i_valid_out_31_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb5_select108_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to3_bb5_select108_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_select108_0_NO_SHIFT_REG;
 logic rnode_2to3_bb5_select108_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to3_bb5_select108_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_select108_0_valid_out_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_select108_0_stall_in_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb5_select108_0_stall_out_reg_3_NO_SHIFT_REG;

acl_data_fifo rnode_2to3_bb5_select108_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb5_select108_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb5_select108_0_stall_in_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb5_select108_0_valid_out_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb5_select108_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(local_bb5_select108),
	.data_out(rnode_2to3_bb5_select108_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb5_select108_0_reg_3_fifo.DEPTH = 1;
defparam rnode_2to3_bb5_select108_0_reg_3_fifo.DATA_WIDTH = 32;
defparam rnode_2to3_bb5_select108_0_reg_3_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_2to3_bb5_select108_0_reg_3_fifo.IMPL = "shift_reg";

assign rnode_2to3_bb5_select108_0_reg_3_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_select108_stall_in = 1'b0;
assign rnode_2to3_bb5_select108_0_NO_SHIFT_REG = rnode_2to3_bb5_select108_0_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb5_select108_0_stall_in_reg_3_NO_SHIFT_REG = 1'b0;
assign rnode_2to3_bb5_select108_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 58
//  * capacity = 58
 logic rnode_3to61_bb5_c0_ene174_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to61_bb5_c0_ene174_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to61_bb5_c0_ene174_0_NO_SHIFT_REG;
 logic rnode_3to61_bb5_c0_ene174_0_reg_61_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to61_bb5_c0_ene174_0_reg_61_NO_SHIFT_REG;
 logic rnode_3to61_bb5_c0_ene174_0_valid_out_reg_61_NO_SHIFT_REG;
 logic rnode_3to61_bb5_c0_ene174_0_stall_in_reg_61_NO_SHIFT_REG;
 logic rnode_3to61_bb5_c0_ene174_0_stall_out_reg_61_NO_SHIFT_REG;

acl_data_fifo rnode_3to61_bb5_c0_ene174_0_reg_61_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to61_bb5_c0_ene174_0_reg_61_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to61_bb5_c0_ene174_0_stall_in_reg_61_NO_SHIFT_REG),
	.valid_out(rnode_3to61_bb5_c0_ene174_0_valid_out_reg_61_NO_SHIFT_REG),
	.stall_out(rnode_3to61_bb5_c0_ene174_0_stall_out_reg_61_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_c0_ene174_0_NO_SHIFT_REG),
	.data_out(rnode_3to61_bb5_c0_ene174_0_reg_61_NO_SHIFT_REG)
);

defparam rnode_3to61_bb5_c0_ene174_0_reg_61_fifo.DEPTH = 58;
defparam rnode_3to61_bb5_c0_ene174_0_reg_61_fifo.DATA_WIDTH = 1;
defparam rnode_3to61_bb5_c0_ene174_0_reg_61_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to61_bb5_c0_ene174_0_reg_61_fifo.IMPL = "shift_reg";

assign rnode_3to61_bb5_c0_ene174_0_reg_61_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_c0_ene174_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to61_bb5_c0_ene174_0_NO_SHIFT_REG = rnode_3to61_bb5_c0_ene174_0_reg_61_NO_SHIFT_REG;
assign rnode_3to61_bb5_c0_ene174_0_stall_in_reg_61_NO_SHIFT_REG = 1'b0;
assign rnode_3to61_bb5_c0_ene174_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 58
//  * capacity = 58
 logic rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_NO_SHIFT_REG;
 logic rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_reg_61_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_reg_61_NO_SHIFT_REG;
 logic rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_valid_out_reg_61_NO_SHIFT_REG;
 logic rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_stall_in_reg_61_NO_SHIFT_REG;
 logic rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_stall_out_reg_61_NO_SHIFT_REG;

acl_data_fifo rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_reg_61_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_reg_61_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_stall_in_reg_61_NO_SHIFT_REG),
	.valid_out(rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_valid_out_reg_61_NO_SHIFT_REG),
	.stall_out(rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_stall_out_reg_61_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_NO_SHIFT_REG),
	.data_out(rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_reg_61_NO_SHIFT_REG)
);

defparam rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_reg_61_fifo.DEPTH = 58;
defparam rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_reg_61_fifo.DATA_WIDTH = 1;
defparam rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_reg_61_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_reg_61_fifo.IMPL = "shift_reg";

assign rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_reg_61_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_not_cmp30_phi_decision135_select_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_NO_SHIFT_REG = rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_reg_61_NO_SHIFT_REG;
assign rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_stall_in_reg_61_NO_SHIFT_REG = 1'b0;
assign rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 59
//  * capacity = 59
 logic rnode_3to62_bb5_and126_xor_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to62_bb5_and126_xor_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to62_bb5_and126_xor_0_NO_SHIFT_REG;
 logic rnode_3to62_bb5_and126_xor_0_reg_62_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to62_bb5_and126_xor_0_reg_62_NO_SHIFT_REG;
 logic rnode_3to62_bb5_and126_xor_0_valid_out_reg_62_NO_SHIFT_REG;
 logic rnode_3to62_bb5_and126_xor_0_stall_in_reg_62_NO_SHIFT_REG;
 logic rnode_3to62_bb5_and126_xor_0_stall_out_reg_62_NO_SHIFT_REG;

acl_data_fifo rnode_3to62_bb5_and126_xor_0_reg_62_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to62_bb5_and126_xor_0_reg_62_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to62_bb5_and126_xor_0_stall_in_reg_62_NO_SHIFT_REG),
	.valid_out(rnode_3to62_bb5_and126_xor_0_valid_out_reg_62_NO_SHIFT_REG),
	.stall_out(rnode_3to62_bb5_and126_xor_0_stall_out_reg_62_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_and126_xor_0_NO_SHIFT_REG),
	.data_out(rnode_3to62_bb5_and126_xor_0_reg_62_NO_SHIFT_REG)
);

defparam rnode_3to62_bb5_and126_xor_0_reg_62_fifo.DEPTH = 59;
defparam rnode_3to62_bb5_and126_xor_0_reg_62_fifo.DATA_WIDTH = 1;
defparam rnode_3to62_bb5_and126_xor_0_reg_62_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to62_bb5_and126_xor_0_reg_62_fifo.IMPL = "shift_reg";

assign rnode_3to62_bb5_and126_xor_0_reg_62_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_and126_xor_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to62_bb5_and126_xor_0_NO_SHIFT_REG = rnode_3to62_bb5_and126_xor_0_reg_62_NO_SHIFT_REG;
assign rnode_3to62_bb5_and126_xor_0_stall_in_reg_62_NO_SHIFT_REG = 1'b0;
assign rnode_3to62_bb5_and126_xor_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 59
//  * capacity = 59
 logic rnode_3to62_bb5_or131_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or131_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or131_0_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or131_0_reg_62_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or131_0_reg_62_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or131_0_valid_out_reg_62_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or131_0_stall_in_reg_62_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or131_0_stall_out_reg_62_NO_SHIFT_REG;

acl_data_fifo rnode_3to62_bb5_or131_0_reg_62_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to62_bb5_or131_0_reg_62_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to62_bb5_or131_0_stall_in_reg_62_NO_SHIFT_REG),
	.valid_out(rnode_3to62_bb5_or131_0_valid_out_reg_62_NO_SHIFT_REG),
	.stall_out(rnode_3to62_bb5_or131_0_stall_out_reg_62_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_or131_0_NO_SHIFT_REG),
	.data_out(rnode_3to62_bb5_or131_0_reg_62_NO_SHIFT_REG)
);

defparam rnode_3to62_bb5_or131_0_reg_62_fifo.DEPTH = 59;
defparam rnode_3to62_bb5_or131_0_reg_62_fifo.DATA_WIDTH = 1;
defparam rnode_3to62_bb5_or131_0_reg_62_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to62_bb5_or131_0_reg_62_fifo.IMPL = "shift_reg";

assign rnode_3to62_bb5_or131_0_reg_62_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_or131_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to62_bb5_or131_0_NO_SHIFT_REG = rnode_3to62_bb5_or131_0_reg_62_NO_SHIFT_REG;
assign rnode_3to62_bb5_or131_0_stall_in_reg_62_NO_SHIFT_REG = 1'b0;
assign rnode_3to62_bb5_or131_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 59
//  * capacity = 59
 logic rnode_3to62_bb5_or125_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or125_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or125_0_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or125_0_reg_62_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or125_0_reg_62_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or125_0_valid_out_reg_62_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or125_0_stall_in_reg_62_NO_SHIFT_REG;
 logic rnode_3to62_bb5_or125_0_stall_out_reg_62_NO_SHIFT_REG;

acl_data_fifo rnode_3to62_bb5_or125_0_reg_62_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to62_bb5_or125_0_reg_62_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to62_bb5_or125_0_stall_in_reg_62_NO_SHIFT_REG),
	.valid_out(rnode_3to62_bb5_or125_0_valid_out_reg_62_NO_SHIFT_REG),
	.stall_out(rnode_3to62_bb5_or125_0_stall_out_reg_62_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_or125_0_NO_SHIFT_REG),
	.data_out(rnode_3to62_bb5_or125_0_reg_62_NO_SHIFT_REG)
);

defparam rnode_3to62_bb5_or125_0_reg_62_fifo.DEPTH = 59;
defparam rnode_3to62_bb5_or125_0_reg_62_fifo.DATA_WIDTH = 1;
defparam rnode_3to62_bb5_or125_0_reg_62_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to62_bb5_or125_0_reg_62_fifo.IMPL = "shift_reg";

assign rnode_3to62_bb5_or125_0_reg_62_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_or125_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to62_bb5_or125_0_NO_SHIFT_REG = rnode_3to62_bb5_or125_0_reg_62_NO_SHIFT_REG;
assign rnode_3to62_bb5_or125_0_stall_in_reg_62_NO_SHIFT_REG = 1'b0;
assign rnode_3to62_bb5_or125_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 57
//  * capacity = 57
 logic rnode_3to60_bb5_tobool_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to60_bb5_tobool_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to60_bb5_tobool_i_0_NO_SHIFT_REG;
 logic rnode_3to60_bb5_tobool_i_0_reg_60_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to60_bb5_tobool_i_0_reg_60_NO_SHIFT_REG;
 logic rnode_3to60_bb5_tobool_i_0_valid_out_reg_60_NO_SHIFT_REG;
 logic rnode_3to60_bb5_tobool_i_0_stall_in_reg_60_NO_SHIFT_REG;
 logic rnode_3to60_bb5_tobool_i_0_stall_out_reg_60_NO_SHIFT_REG;

acl_data_fifo rnode_3to60_bb5_tobool_i_0_reg_60_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to60_bb5_tobool_i_0_reg_60_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to60_bb5_tobool_i_0_stall_in_reg_60_NO_SHIFT_REG),
	.valid_out(rnode_3to60_bb5_tobool_i_0_valid_out_reg_60_NO_SHIFT_REG),
	.stall_out(rnode_3to60_bb5_tobool_i_0_stall_out_reg_60_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_tobool_i_0_NO_SHIFT_REG),
	.data_out(rnode_3to60_bb5_tobool_i_0_reg_60_NO_SHIFT_REG)
);

defparam rnode_3to60_bb5_tobool_i_0_reg_60_fifo.DEPTH = 57;
defparam rnode_3to60_bb5_tobool_i_0_reg_60_fifo.DATA_WIDTH = 1;
defparam rnode_3to60_bb5_tobool_i_0_reg_60_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to60_bb5_tobool_i_0_reg_60_fifo.IMPL = "shift_reg";

assign rnode_3to60_bb5_tobool_i_0_reg_60_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_tobool_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to60_bb5_tobool_i_0_NO_SHIFT_REG = rnode_3to60_bb5_tobool_i_0_reg_60_NO_SHIFT_REG;
assign rnode_3to60_bb5_tobool_i_0_stall_in_reg_60_NO_SHIFT_REG = 1'b0;
assign rnode_3to60_bb5_tobool_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_var__stall_local;
wire [63:0] local_bb5_var_;

assign local_bb5_var_ = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h1E);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u6_stall_local;
wire [63:0] local_bb5_var__u6;

assign local_bb5_var__u6 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h1E);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u7_stall_local;
wire [63:0] local_bb5_var__u7;

assign local_bb5_var__u7 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h1D);

// This section implements an unregistered operation.
// 
wire local_bb5_var__u8_valid_out;
wire local_bb5_var__u8_stall_in;
wire local_bb5_var__u8_inputs_ready;
wire local_bb5_var__u8_stall_local;
wire [63:0] local_bb5_var__u8;

assign local_bb5_var__u8_inputs_ready = local_bb5_conv_i_i_valid_out_3_NO_SHIFT_REG;
assign local_bb5_var__u8 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h1C);
assign local_bb5_var__u8_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_3 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u9_valid_out;
wire local_bb5_var__u9_stall_in;
wire local_bb5_var__u9_inputs_ready;
wire local_bb5_var__u9_stall_local;
wire [63:0] local_bb5_var__u9;

assign local_bb5_var__u9_inputs_ready = local_bb5_conv_i_i_valid_out_4_NO_SHIFT_REG;
assign local_bb5_var__u9 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h1B);
assign local_bb5_var__u9_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_4 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u10_valid_out;
wire local_bb5_var__u10_stall_in;
wire local_bb5_var__u10_inputs_ready;
wire local_bb5_var__u10_stall_local;
wire [63:0] local_bb5_var__u10;

assign local_bb5_var__u10_inputs_ready = local_bb5_conv_i_i_valid_out_5_NO_SHIFT_REG;
assign local_bb5_var__u10 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h1A);
assign local_bb5_var__u10_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_5 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u11_valid_out;
wire local_bb5_var__u11_stall_in;
wire local_bb5_var__u11_inputs_ready;
wire local_bb5_var__u11_stall_local;
wire [63:0] local_bb5_var__u11;

assign local_bb5_var__u11_inputs_ready = local_bb5_conv_i_i_valid_out_6_NO_SHIFT_REG;
assign local_bb5_var__u11 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h19);
assign local_bb5_var__u11_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_6 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u12_valid_out;
wire local_bb5_var__u12_stall_in;
wire local_bb5_var__u12_inputs_ready;
wire local_bb5_var__u12_stall_local;
wire [63:0] local_bb5_var__u12;

assign local_bb5_var__u12_inputs_ready = local_bb5_conv_i_i_valid_out_7_NO_SHIFT_REG;
assign local_bb5_var__u12 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h18);
assign local_bb5_var__u12_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_7 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u13_valid_out;
wire local_bb5_var__u13_stall_in;
wire local_bb5_var__u13_inputs_ready;
wire local_bb5_var__u13_stall_local;
wire [63:0] local_bb5_var__u13;

assign local_bb5_var__u13_inputs_ready = local_bb5_conv_i_i_valid_out_8_NO_SHIFT_REG;
assign local_bb5_var__u13 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h17);
assign local_bb5_var__u13_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_8 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u14_valid_out;
wire local_bb5_var__u14_stall_in;
wire local_bb5_var__u14_inputs_ready;
wire local_bb5_var__u14_stall_local;
wire [63:0] local_bb5_var__u14;

assign local_bb5_var__u14_inputs_ready = local_bb5_conv_i_i_valid_out_9_NO_SHIFT_REG;
assign local_bb5_var__u14 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h16);
assign local_bb5_var__u14_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_9 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u15_valid_out;
wire local_bb5_var__u15_stall_in;
wire local_bb5_var__u15_inputs_ready;
wire local_bb5_var__u15_stall_local;
wire [63:0] local_bb5_var__u15;

assign local_bb5_var__u15_inputs_ready = local_bb5_conv_i_i_valid_out_10_NO_SHIFT_REG;
assign local_bb5_var__u15 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h15);
assign local_bb5_var__u15_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_10 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u16_valid_out;
wire local_bb5_var__u16_stall_in;
wire local_bb5_var__u16_inputs_ready;
wire local_bb5_var__u16_stall_local;
wire [63:0] local_bb5_var__u16;

assign local_bb5_var__u16_inputs_ready = local_bb5_conv_i_i_valid_out_11_NO_SHIFT_REG;
assign local_bb5_var__u16 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h14);
assign local_bb5_var__u16_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_11 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u17_valid_out;
wire local_bb5_var__u17_stall_in;
wire local_bb5_var__u17_inputs_ready;
wire local_bb5_var__u17_stall_local;
wire [63:0] local_bb5_var__u17;

assign local_bb5_var__u17_inputs_ready = local_bb5_conv_i_i_valid_out_12_NO_SHIFT_REG;
assign local_bb5_var__u17 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h13);
assign local_bb5_var__u17_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_12 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u18_valid_out;
wire local_bb5_var__u18_stall_in;
wire local_bb5_var__u18_inputs_ready;
wire local_bb5_var__u18_stall_local;
wire [63:0] local_bb5_var__u18;

assign local_bb5_var__u18_inputs_ready = local_bb5_conv_i_i_valid_out_13_NO_SHIFT_REG;
assign local_bb5_var__u18 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h12);
assign local_bb5_var__u18_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_13 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u19_valid_out;
wire local_bb5_var__u19_stall_in;
wire local_bb5_var__u19_inputs_ready;
wire local_bb5_var__u19_stall_local;
wire [63:0] local_bb5_var__u19;

assign local_bb5_var__u19_inputs_ready = local_bb5_conv_i_i_valid_out_14_NO_SHIFT_REG;
assign local_bb5_var__u19 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h11);
assign local_bb5_var__u19_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_14 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u20_valid_out;
wire local_bb5_var__u20_stall_in;
wire local_bb5_var__u20_inputs_ready;
wire local_bb5_var__u20_stall_local;
wire [63:0] local_bb5_var__u20;

assign local_bb5_var__u20_inputs_ready = local_bb5_conv_i_i_valid_out_15_NO_SHIFT_REG;
assign local_bb5_var__u20 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h10);
assign local_bb5_var__u20_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_15 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u21_valid_out;
wire local_bb5_var__u21_stall_in;
wire local_bb5_var__u21_inputs_ready;
wire local_bb5_var__u21_stall_local;
wire [63:0] local_bb5_var__u21;

assign local_bb5_var__u21_inputs_ready = local_bb5_conv_i_i_valid_out_16_NO_SHIFT_REG;
assign local_bb5_var__u21 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'hF);
assign local_bb5_var__u21_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_16 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u22_valid_out;
wire local_bb5_var__u22_stall_in;
wire local_bb5_var__u22_inputs_ready;
wire local_bb5_var__u22_stall_local;
wire [63:0] local_bb5_var__u22;

assign local_bb5_var__u22_inputs_ready = local_bb5_conv_i_i_valid_out_17_NO_SHIFT_REG;
assign local_bb5_var__u22 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'hE);
assign local_bb5_var__u22_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_17 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u23_valid_out;
wire local_bb5_var__u23_stall_in;
wire local_bb5_var__u23_inputs_ready;
wire local_bb5_var__u23_stall_local;
wire [63:0] local_bb5_var__u23;

assign local_bb5_var__u23_inputs_ready = local_bb5_conv_i_i_valid_out_18_NO_SHIFT_REG;
assign local_bb5_var__u23 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'hD);
assign local_bb5_var__u23_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_18 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u24_valid_out;
wire local_bb5_var__u24_stall_in;
wire local_bb5_var__u24_inputs_ready;
wire local_bb5_var__u24_stall_local;
wire [63:0] local_bb5_var__u24;

assign local_bb5_var__u24_inputs_ready = local_bb5_conv_i_i_valid_out_19_NO_SHIFT_REG;
assign local_bb5_var__u24 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'hC);
assign local_bb5_var__u24_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_19 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u25_valid_out;
wire local_bb5_var__u25_stall_in;
wire local_bb5_var__u25_inputs_ready;
wire local_bb5_var__u25_stall_local;
wire [63:0] local_bb5_var__u25;

assign local_bb5_var__u25_inputs_ready = local_bb5_conv_i_i_valid_out_20_NO_SHIFT_REG;
assign local_bb5_var__u25 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'hB);
assign local_bb5_var__u25_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_20 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u26_valid_out;
wire local_bb5_var__u26_stall_in;
wire local_bb5_var__u26_inputs_ready;
wire local_bb5_var__u26_stall_local;
wire [63:0] local_bb5_var__u26;

assign local_bb5_var__u26_inputs_ready = local_bb5_conv_i_i_valid_out_21_NO_SHIFT_REG;
assign local_bb5_var__u26 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'hA);
assign local_bb5_var__u26_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_21 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u27_valid_out;
wire local_bb5_var__u27_stall_in;
wire local_bb5_var__u27_inputs_ready;
wire local_bb5_var__u27_stall_local;
wire [63:0] local_bb5_var__u27;

assign local_bb5_var__u27_inputs_ready = local_bb5_conv_i_i_valid_out_22_NO_SHIFT_REG;
assign local_bb5_var__u27 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h9);
assign local_bb5_var__u27_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_22 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u28_valid_out;
wire local_bb5_var__u28_stall_in;
wire local_bb5_var__u28_inputs_ready;
wire local_bb5_var__u28_stall_local;
wire [63:0] local_bb5_var__u28;

assign local_bb5_var__u28_inputs_ready = local_bb5_conv_i_i_valid_out_23_NO_SHIFT_REG;
assign local_bb5_var__u28 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h8);
assign local_bb5_var__u28_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_23 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u29_valid_out;
wire local_bb5_var__u29_stall_in;
wire local_bb5_var__u29_inputs_ready;
wire local_bb5_var__u29_stall_local;
wire [63:0] local_bb5_var__u29;

assign local_bb5_var__u29_inputs_ready = local_bb5_conv_i_i_valid_out_24_NO_SHIFT_REG;
assign local_bb5_var__u29 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h7);
assign local_bb5_var__u29_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_24 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u30_valid_out;
wire local_bb5_var__u30_stall_in;
wire local_bb5_var__u30_inputs_ready;
wire local_bb5_var__u30_stall_local;
wire [63:0] local_bb5_var__u30;

assign local_bb5_var__u30_inputs_ready = local_bb5_conv_i_i_valid_out_25_NO_SHIFT_REG;
assign local_bb5_var__u30 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h6);
assign local_bb5_var__u30_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_25 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u31_valid_out;
wire local_bb5_var__u31_stall_in;
wire local_bb5_var__u31_inputs_ready;
wire local_bb5_var__u31_stall_local;
wire [63:0] local_bb5_var__u31;

assign local_bb5_var__u31_inputs_ready = local_bb5_conv_i_i_valid_out_26_NO_SHIFT_REG;
assign local_bb5_var__u31 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h5);
assign local_bb5_var__u31_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_26 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u32_valid_out;
wire local_bb5_var__u32_stall_in;
wire local_bb5_var__u32_inputs_ready;
wire local_bb5_var__u32_stall_local;
wire [63:0] local_bb5_var__u32;

assign local_bb5_var__u32_inputs_ready = local_bb5_conv_i_i_valid_out_27_NO_SHIFT_REG;
assign local_bb5_var__u32 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h4);
assign local_bb5_var__u32_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_27 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u33_valid_out;
wire local_bb5_var__u33_stall_in;
wire local_bb5_var__u33_inputs_ready;
wire local_bb5_var__u33_stall_local;
wire [63:0] local_bb5_var__u33;

assign local_bb5_var__u33_inputs_ready = local_bb5_conv_i_i_valid_out_28_NO_SHIFT_REG;
assign local_bb5_var__u33 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h3);
assign local_bb5_var__u33_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_28 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u34_valid_out;
wire local_bb5_var__u34_stall_in;
wire local_bb5_var__u34_inputs_ready;
wire local_bb5_var__u34_stall_local;
wire [63:0] local_bb5_var__u34;

assign local_bb5_var__u34_inputs_ready = local_bb5_conv_i_i_valid_out_29_NO_SHIFT_REG;
assign local_bb5_var__u34 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h2);
assign local_bb5_var__u34_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_29 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_var__u35_valid_out;
wire local_bb5_var__u35_stall_in;
wire local_bb5_var__u35_inputs_ready;
wire local_bb5_var__u35_stall_local;
wire [63:0] local_bb5_var__u35;

assign local_bb5_var__u35_inputs_ready = local_bb5_conv_i_i_valid_out_30_NO_SHIFT_REG;
assign local_bb5_var__u35 = (local_bb5_conv_i_i_NO_SHIFT_REG >> 64'h1);
assign local_bb5_var__u35_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_30 = 1'b0;

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_31_i_valid_out;
wire local_bb5_and_i_i_31_i_stall_in;
wire local_bb5_and_i_i_31_i_inputs_ready;
wire local_bb5_and_i_i_31_i_stall_local;
wire [63:0] local_bb5_and_i_i_31_i;

assign local_bb5_and_i_i_31_i_inputs_ready = local_bb5_conv_i_i_valid_out_31_NO_SHIFT_REG;
assign local_bb5_and_i_i_31_i = (local_bb5_conv_i_i_NO_SHIFT_REG & 64'h1);
assign local_bb5_and_i_i_31_i_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_31 = 1'b0;

// Register node:
//  * latency = 59
//  * capacity = 59
 logic rnode_3to62_bb5_select108_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to62_bb5_select108_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_3to62_bb5_select108_0_NO_SHIFT_REG;
 logic rnode_3to62_bb5_select108_0_reg_62_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_3to62_bb5_select108_0_reg_62_NO_SHIFT_REG;
 logic rnode_3to62_bb5_select108_0_valid_out_reg_62_NO_SHIFT_REG;
 logic rnode_3to62_bb5_select108_0_stall_in_reg_62_NO_SHIFT_REG;
 logic rnode_3to62_bb5_select108_0_stall_out_reg_62_NO_SHIFT_REG;

acl_data_fifo rnode_3to62_bb5_select108_0_reg_62_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to62_bb5_select108_0_reg_62_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to62_bb5_select108_0_stall_in_reg_62_NO_SHIFT_REG),
	.valid_out(rnode_3to62_bb5_select108_0_valid_out_reg_62_NO_SHIFT_REG),
	.stall_out(rnode_3to62_bb5_select108_0_stall_out_reg_62_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb5_select108_0_NO_SHIFT_REG),
	.data_out(rnode_3to62_bb5_select108_0_reg_62_NO_SHIFT_REG)
);

defparam rnode_3to62_bb5_select108_0_reg_62_fifo.DEPTH = 59;
defparam rnode_3to62_bb5_select108_0_reg_62_fifo.DATA_WIDTH = 32;
defparam rnode_3to62_bb5_select108_0_reg_62_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to62_bb5_select108_0_reg_62_fifo.IMPL = "shift_reg";

assign rnode_3to62_bb5_select108_0_reg_62_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_2to3_bb5_select108_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to62_bb5_select108_0_NO_SHIFT_REG = rnode_3to62_bb5_select108_0_reg_62_NO_SHIFT_REG;
assign rnode_3to62_bb5_select108_0_stall_in_reg_62_NO_SHIFT_REG = 1'b0;
assign rnode_3to62_bb5_select108_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_61to62_bb5_c0_ene174_0_valid_out_NO_SHIFT_REG;
 logic rnode_61to62_bb5_c0_ene174_0_stall_in_NO_SHIFT_REG;
 logic rnode_61to62_bb5_c0_ene174_0_NO_SHIFT_REG;
 logic rnode_61to62_bb5_c0_ene174_0_reg_62_inputs_ready_NO_SHIFT_REG;
 logic rnode_61to62_bb5_c0_ene174_0_reg_62_NO_SHIFT_REG;
 logic rnode_61to62_bb5_c0_ene174_0_valid_out_reg_62_NO_SHIFT_REG;
 logic rnode_61to62_bb5_c0_ene174_0_stall_in_reg_62_NO_SHIFT_REG;
 logic rnode_61to62_bb5_c0_ene174_0_stall_out_reg_62_NO_SHIFT_REG;

acl_data_fifo rnode_61to62_bb5_c0_ene174_0_reg_62_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_61to62_bb5_c0_ene174_0_reg_62_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_61to62_bb5_c0_ene174_0_stall_in_reg_62_NO_SHIFT_REG),
	.valid_out(rnode_61to62_bb5_c0_ene174_0_valid_out_reg_62_NO_SHIFT_REG),
	.stall_out(rnode_61to62_bb5_c0_ene174_0_stall_out_reg_62_NO_SHIFT_REG),
	.data_in(rnode_3to61_bb5_c0_ene174_0_NO_SHIFT_REG),
	.data_out(rnode_61to62_bb5_c0_ene174_0_reg_62_NO_SHIFT_REG)
);

defparam rnode_61to62_bb5_c0_ene174_0_reg_62_fifo.DEPTH = 1;
defparam rnode_61to62_bb5_c0_ene174_0_reg_62_fifo.DATA_WIDTH = 1;
defparam rnode_61to62_bb5_c0_ene174_0_reg_62_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_61to62_bb5_c0_ene174_0_reg_62_fifo.IMPL = "shift_reg";

assign rnode_61to62_bb5_c0_ene174_0_reg_62_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to61_bb5_c0_ene174_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_61to62_bb5_c0_ene174_0_NO_SHIFT_REG = rnode_61to62_bb5_c0_ene174_0_reg_62_NO_SHIFT_REG;
assign rnode_61to62_bb5_c0_ene174_0_stall_in_reg_62_NO_SHIFT_REG = 1'b0;
assign rnode_61to62_bb5_c0_ene174_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_NO_SHIFT_REG;
 logic rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_61to62_bb5_not_cmp30_phi_decision135_select_1_NO_SHIFT_REG;
 logic rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_reg_62_inputs_ready_NO_SHIFT_REG;
 logic rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_reg_62_NO_SHIFT_REG;
 logic rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_valid_out_0_reg_62_NO_SHIFT_REG;
 logic rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_stall_in_0_reg_62_NO_SHIFT_REG;
 logic rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_stall_out_reg_62_NO_SHIFT_REG;

acl_data_fifo rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_reg_62_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_reg_62_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_stall_in_0_reg_62_NO_SHIFT_REG),
	.valid_out(rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_valid_out_0_reg_62_NO_SHIFT_REG),
	.stall_out(rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_stall_out_reg_62_NO_SHIFT_REG),
	.data_in(rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_NO_SHIFT_REG),
	.data_out(rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_reg_62_NO_SHIFT_REG)
);

defparam rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_reg_62_fifo.DEPTH = 1;
defparam rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_reg_62_fifo.DATA_WIDTH = 1;
defparam rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_reg_62_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_reg_62_fifo.IMPL = "shift_reg";

assign rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_reg_62_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to61_bb5_not_cmp30_phi_decision135_select_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_stall_in_0_reg_62_NO_SHIFT_REG = 1'b0;
assign rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_NO_SHIFT_REG = rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_reg_62_NO_SHIFT_REG;
assign rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_61to62_bb5_not_cmp30_phi_decision135_select_1_NO_SHIFT_REG = rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_reg_62_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_62to63_bb5_and126_xor_0_valid_out_NO_SHIFT_REG;
 logic rnode_62to63_bb5_and126_xor_0_stall_in_NO_SHIFT_REG;
 logic rnode_62to63_bb5_and126_xor_0_NO_SHIFT_REG;
 logic rnode_62to63_bb5_and126_xor_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic rnode_62to63_bb5_and126_xor_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_and126_xor_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_and126_xor_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_and126_xor_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_62to63_bb5_and126_xor_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_62to63_bb5_and126_xor_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_62to63_bb5_and126_xor_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_62to63_bb5_and126_xor_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_62to63_bb5_and126_xor_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(rnode_3to62_bb5_and126_xor_0_NO_SHIFT_REG),
	.data_out(rnode_62to63_bb5_and126_xor_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_62to63_bb5_and126_xor_0_reg_63_fifo.DEPTH = 1;
defparam rnode_62to63_bb5_and126_xor_0_reg_63_fifo.DATA_WIDTH = 1;
defparam rnode_62to63_bb5_and126_xor_0_reg_63_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_62to63_bb5_and126_xor_0_reg_63_fifo.IMPL = "shift_reg";

assign rnode_62to63_bb5_and126_xor_0_reg_63_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to62_bb5_and126_xor_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_and126_xor_0_NO_SHIFT_REG = rnode_62to63_bb5_and126_xor_0_reg_63_NO_SHIFT_REG;
assign rnode_62to63_bb5_and126_xor_0_stall_in_reg_63_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_and126_xor_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_62to63_bb5_or131_0_valid_out_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or131_0_stall_in_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or131_0_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or131_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or131_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or131_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or131_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or131_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_62to63_bb5_or131_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_62to63_bb5_or131_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_62to63_bb5_or131_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_62to63_bb5_or131_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_62to63_bb5_or131_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(rnode_3to62_bb5_or131_0_NO_SHIFT_REG),
	.data_out(rnode_62to63_bb5_or131_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_62to63_bb5_or131_0_reg_63_fifo.DEPTH = 1;
defparam rnode_62to63_bb5_or131_0_reg_63_fifo.DATA_WIDTH = 1;
defparam rnode_62to63_bb5_or131_0_reg_63_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_62to63_bb5_or131_0_reg_63_fifo.IMPL = "shift_reg";

assign rnode_62to63_bb5_or131_0_reg_63_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to62_bb5_or131_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_or131_0_NO_SHIFT_REG = rnode_62to63_bb5_or131_0_reg_63_NO_SHIFT_REG;
assign rnode_62to63_bb5_or131_0_stall_in_reg_63_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_or131_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_62to63_bb5_or125_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or125_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or125_0_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or125_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or125_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or125_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or125_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or125_0_valid_out_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or125_0_stall_in_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or125_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_62to63_bb5_or125_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_62to63_bb5_or125_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_62to63_bb5_or125_0_stall_in_0_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_62to63_bb5_or125_0_valid_out_0_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_62to63_bb5_or125_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(rnode_3to62_bb5_or125_0_NO_SHIFT_REG),
	.data_out(rnode_62to63_bb5_or125_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_62to63_bb5_or125_0_reg_63_fifo.DEPTH = 1;
defparam rnode_62to63_bb5_or125_0_reg_63_fifo.DATA_WIDTH = 1;
defparam rnode_62to63_bb5_or125_0_reg_63_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_62to63_bb5_or125_0_reg_63_fifo.IMPL = "shift_reg";

assign rnode_62to63_bb5_or125_0_reg_63_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to62_bb5_or125_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_or125_0_stall_in_0_reg_63_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_or125_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_62to63_bb5_or125_0_NO_SHIFT_REG = rnode_62to63_bb5_or125_0_reg_63_NO_SHIFT_REG;
assign rnode_62to63_bb5_or125_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_62to63_bb5_or125_1_NO_SHIFT_REG = rnode_62to63_bb5_or125_0_reg_63_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_60to61_bb5_tobool_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_60to61_bb5_tobool_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_60to61_bb5_tobool_i_0_NO_SHIFT_REG;
 logic rnode_60to61_bb5_tobool_i_0_reg_61_inputs_ready_NO_SHIFT_REG;
 logic rnode_60to61_bb5_tobool_i_0_reg_61_NO_SHIFT_REG;
 logic rnode_60to61_bb5_tobool_i_0_valid_out_reg_61_NO_SHIFT_REG;
 logic rnode_60to61_bb5_tobool_i_0_stall_in_reg_61_NO_SHIFT_REG;
 logic rnode_60to61_bb5_tobool_i_0_stall_out_reg_61_NO_SHIFT_REG;

acl_data_fifo rnode_60to61_bb5_tobool_i_0_reg_61_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_60to61_bb5_tobool_i_0_reg_61_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_60to61_bb5_tobool_i_0_stall_in_reg_61_NO_SHIFT_REG),
	.valid_out(rnode_60to61_bb5_tobool_i_0_valid_out_reg_61_NO_SHIFT_REG),
	.stall_out(rnode_60to61_bb5_tobool_i_0_stall_out_reg_61_NO_SHIFT_REG),
	.data_in(rnode_3to60_bb5_tobool_i_0_NO_SHIFT_REG),
	.data_out(rnode_60to61_bb5_tobool_i_0_reg_61_NO_SHIFT_REG)
);

defparam rnode_60to61_bb5_tobool_i_0_reg_61_fifo.DEPTH = 1;
defparam rnode_60to61_bb5_tobool_i_0_reg_61_fifo.DATA_WIDTH = 1;
defparam rnode_60to61_bb5_tobool_i_0_reg_61_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_60to61_bb5_tobool_i_0_reg_61_fifo.IMPL = "shift_reg";

assign rnode_60to61_bb5_tobool_i_0_reg_61_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to60_bb5_tobool_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_60to61_bb5_tobool_i_0_NO_SHIFT_REG = rnode_60to61_bb5_tobool_i_0_reg_61_NO_SHIFT_REG;
assign rnode_60to61_bb5_tobool_i_0_stall_in_reg_61_NO_SHIFT_REG = 1'b0;
assign rnode_60to61_bb5_tobool_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_1_i_stall_local;
wire [63:0] local_bb5_shl_i_i_1_i;

assign local_bb5_shl_i_i_1_i = (local_bb5_var_ & 64'h2);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_1_i_stall_local;
wire [63:0] local_bb5_and_i_i_1_i;

assign local_bb5_and_i_i_1_i = (local_bb5_var__u6 & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_2_i_stall_local;
wire [63:0] local_bb5_and_i_i_2_i;

assign local_bb5_and_i_i_2_i = (local_bb5_var__u7 & 64'h1);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u8_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u8_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u8_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u8_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u8_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u8_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u8_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u8_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u8_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u8_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u8_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u8_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u8_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u8),
	.data_out(rnode_3to4_bb5_var__u8_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u8_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u8_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u8_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u8_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u8_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u8_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u8_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u8_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u8_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u8_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u9_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u9_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u9_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u9_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u9_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u9_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u9_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u9_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u9_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u9_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u9_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u9_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u9_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u9),
	.data_out(rnode_3to4_bb5_var__u9_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u9_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u9_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u9_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u9_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u9_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u9_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u9_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u9_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u9_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u9_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u10_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u10_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u10_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u10_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u10_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u10_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u10_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u10_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u10_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u10_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u10_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u10_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u10_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u10),
	.data_out(rnode_3to4_bb5_var__u10_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u10_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u10_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u10_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u10_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u10_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u10_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u10_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u10_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u10_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u10_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u11_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u11_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u11_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u11_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u11_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u11_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u11_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u11_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u11_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u11_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u11_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u11_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u11_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u11),
	.data_out(rnode_3to4_bb5_var__u11_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u11_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u11_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u11_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u11_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u11_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u11_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u11_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u11_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u11_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u11_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u12_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u12_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u12_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u12_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u12_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u12_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u12_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u12_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u12_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u12_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u12_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u12_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u12_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u12),
	.data_out(rnode_3to4_bb5_var__u12_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u12_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u12_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u12_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u12_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u12_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u12_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u12_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u12_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u12_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u12_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u13_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u13_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u13_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u13_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u13_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u13_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u13_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u13_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u13_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u13_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u13_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u13_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u13_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u13),
	.data_out(rnode_3to4_bb5_var__u13_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u13_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u13_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u13_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u13_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u13_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u13_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u13_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u13_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u13_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u13_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u14_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u14_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u14_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u14_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u14_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u14_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u14_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u14_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u14_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u14_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u14_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u14_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u14_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u14),
	.data_out(rnode_3to4_bb5_var__u14_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u14_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u14_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u14_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u14_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u14_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u14_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u14_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u14_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u14_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u14_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u15_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u15_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u15_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u15_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u15_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u15_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u15_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u15_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u15_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u15_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u15_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u15_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u15_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u15),
	.data_out(rnode_3to4_bb5_var__u15_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u15_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u15_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u15_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u15_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u15_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u15_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u15_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u15_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u15_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u15_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u16_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u16_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u16_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u16_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u16_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u16_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u16_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u16_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u16_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u16_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u16_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u16_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u16_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u16),
	.data_out(rnode_3to4_bb5_var__u16_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u16_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u16_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u16_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u16_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u16_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u16_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u16_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u16_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u16_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u16_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u17_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u17_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u17_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u17_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u17_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u17_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u17_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u17_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u17_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u17_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u17_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u17_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u17_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u17),
	.data_out(rnode_3to4_bb5_var__u17_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u17_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u17_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u17_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u17_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u17_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u17_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u17_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u17_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u17_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u17_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u18_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u18_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u18_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u18_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u18_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u18_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u18_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u18_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u18_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u18_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u18_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u18_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u18_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u18),
	.data_out(rnode_3to4_bb5_var__u18_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u18_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u18_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u18_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u18_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u18_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u18_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u18_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u18_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u18_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u18_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u19_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u19_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u19_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u19_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u19_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u19_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u19_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u19_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u19_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u19_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u19_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u19_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u19_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u19),
	.data_out(rnode_3to4_bb5_var__u19_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u19_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u19_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u19_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u19_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u19_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u19_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u19_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u19_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u19_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u19_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u20_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u20_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u20_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u20_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u20_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u20_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u20_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u20_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u20_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u20_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u20_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u20_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u20_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u20),
	.data_out(rnode_3to4_bb5_var__u20_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u20_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u20_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u20_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u20_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u20_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u20_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u20_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u20_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u20_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u20_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u21_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u21_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u21_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u21_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u21_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u21_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u21_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u21_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u21_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u21_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u21_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u21_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u21_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u21),
	.data_out(rnode_3to4_bb5_var__u21_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u21_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u21_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u21_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u21_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u21_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u21_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u21_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u21_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u21_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u21_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u22_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u22_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u22_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u22_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u22_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u22_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u22_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u22_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u22_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u22_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u22_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u22_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u22_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u22),
	.data_out(rnode_3to4_bb5_var__u22_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u22_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u22_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u22_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u22_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u22_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u22_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u22_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u22_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u22_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u22_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u23_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u23_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u23_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u23_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u23_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u23_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u23_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u23_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u23_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u23_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u23_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u23_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u23_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u23),
	.data_out(rnode_3to4_bb5_var__u23_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u23_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u23_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u23_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u23_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u23_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u23_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u23_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u23_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u23_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u23_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u24_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u24_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u24_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u24_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u24_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u24_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u24_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u24_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u24_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u24_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u24_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u24_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u24_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u24),
	.data_out(rnode_3to4_bb5_var__u24_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u24_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u24_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u24_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u24_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u24_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u24_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u24_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u24_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u24_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u24_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u25_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u25_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u25_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u25_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u25_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u25_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u25_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u25_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u25_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u25_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u25_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u25_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u25_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u25),
	.data_out(rnode_3to4_bb5_var__u25_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u25_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u25_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u25_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u25_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u25_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u25_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u25_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u25_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u25_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u25_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u26_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u26_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u26_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u26_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u26_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u26_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u26_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u26_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u26_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u26_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u26_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u26_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u26_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u26),
	.data_out(rnode_3to4_bb5_var__u26_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u26_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u26_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u26_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u26_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u26_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u26_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u26_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u26_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u26_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u26_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u27_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u27_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u27_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u27_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u27_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u27_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u27_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u27_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u27_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u27_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u27_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u27_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u27_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u27),
	.data_out(rnode_3to4_bb5_var__u27_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u27_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u27_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u27_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u27_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u27_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u27_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u27_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u27_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u27_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u27_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u28_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u28_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u28_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u28_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u28_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u28_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u28_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u28_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u28_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u28_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u28_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u28_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u28_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u28),
	.data_out(rnode_3to4_bb5_var__u28_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u28_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u28_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u28_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u28_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u28_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u28_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u28_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u28_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u28_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u28_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u29_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u29_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u29_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u29_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u29_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u29_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u29_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u29_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u29_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u29_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u29_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u29_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u29_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u29),
	.data_out(rnode_3to4_bb5_var__u29_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u29_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u29_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u29_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u29_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u29_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u29_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u29_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u29_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u29_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u29_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u30_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u30_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u30_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u30_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u30_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u30_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u30_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u30_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u30_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u30_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u30_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u30_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u30_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u30),
	.data_out(rnode_3to4_bb5_var__u30_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u30_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u30_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u30_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u30_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u30_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u30_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u30_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u30_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u30_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u30_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u31_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u31_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u31_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u31_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u31_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u31_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u31_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u31_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u31_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u31_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u31_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u31_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u31_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u31),
	.data_out(rnode_3to4_bb5_var__u31_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u31_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u31_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u31_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u31_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u31_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u31_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u31_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u31_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u31_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u31_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u32_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u32_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u32_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u32_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u32_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u32_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u32_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u32_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u32_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u32_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u32_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u32_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u32_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u32),
	.data_out(rnode_3to4_bb5_var__u32_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u32_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u32_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u32_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u32_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u32_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u32_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u32_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u32_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u32_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u32_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u33_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u33_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u33_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u33_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u33_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u33_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u33_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u33_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u33_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u33_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u33_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u33_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u33_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u33),
	.data_out(rnode_3to4_bb5_var__u33_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u33_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u33_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u33_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u33_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u33_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u33_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u33_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u33_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u33_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u33_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u34_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u34_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u34_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u34_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u34_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u34_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u34_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u34_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u34_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u34_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u34_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u34_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u34_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u34),
	.data_out(rnode_3to4_bb5_var__u34_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u34_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u34_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u34_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u34_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u34_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u34_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u34_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u34_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u34_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u34_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_var__u35_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u35_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u35_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u35_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_var__u35_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u35_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u35_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_var__u35_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_var__u35_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_var__u35_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_var__u35_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_var__u35_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_var__u35_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_var__u35),
	.data_out(rnode_3to4_bb5_var__u35_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_var__u35_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_var__u35_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_var__u35_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_var__u35_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_var__u35_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_var__u35_stall_in = 1'b0;
assign rnode_3to4_bb5_var__u35_0_NO_SHIFT_REG = rnode_3to4_bb5_var__u35_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_var__u35_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_var__u35_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_and_i_i_31_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_and_i_i_31_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_and_i_i_31_i_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_and_i_i_31_i_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_and_i_i_31_i_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_and_i_i_31_i_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_and_i_i_31_i_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_and_i_i_31_i_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_and_i_i_31_i_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_and_i_i_31_i_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_and_i_i_31_i_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_and_i_i_31_i_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_and_i_i_31_i_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_and_i_i_31_i),
	.data_out(rnode_3to4_bb5_and_i_i_31_i_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_and_i_i_31_i_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_and_i_i_31_i_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_and_i_i_31_i_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_and_i_i_31_i_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_and_i_i_31_i_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_and_i_i_31_i_stall_in = 1'b0;
assign rnode_3to4_bb5_and_i_i_31_i_0_NO_SHIFT_REG = rnode_3to4_bb5_and_i_i_31_i_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_and_i_i_31_i_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_and_i_i_31_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_62to63_bb5_select108_0_valid_out_NO_SHIFT_REG;
 logic rnode_62to63_bb5_select108_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_62to63_bb5_select108_0_NO_SHIFT_REG;
 logic rnode_62to63_bb5_select108_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_62to63_bb5_select108_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_select108_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_select108_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_select108_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_62to63_bb5_select108_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_62to63_bb5_select108_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_62to63_bb5_select108_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_62to63_bb5_select108_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_62to63_bb5_select108_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(rnode_3to62_bb5_select108_0_NO_SHIFT_REG),
	.data_out(rnode_62to63_bb5_select108_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_62to63_bb5_select108_0_reg_63_fifo.DEPTH = 1;
defparam rnode_62to63_bb5_select108_0_reg_63_fifo.DATA_WIDTH = 32;
defparam rnode_62to63_bb5_select108_0_reg_63_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_62to63_bb5_select108_0_reg_63_fifo.IMPL = "shift_reg";

assign rnode_62to63_bb5_select108_0_reg_63_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to62_bb5_select108_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_select108_0_NO_SHIFT_REG = rnode_62to63_bb5_select108_0_reg_63_NO_SHIFT_REG;
assign rnode_62to63_bb5_select108_0_stall_in_reg_63_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_select108_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_valid_out_NO_SHIFT_REG;
 logic rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_stall_in_NO_SHIFT_REG;
 logic rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_NO_SHIFT_REG;
 logic rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(rnode_61to62_bb5_not_cmp30_phi_decision135_select_1_NO_SHIFT_REG),
	.data_out(rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_reg_63_fifo.DEPTH = 1;
defparam rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_reg_63_fifo.DATA_WIDTH = 1;
defparam rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_reg_63_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_reg_63_fifo.IMPL = "shift_reg";

assign rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_reg_63_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_NO_SHIFT_REG = rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_reg_63_NO_SHIFT_REG;
assign rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_stall_in_reg_63_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_and126_xor_or_stall_local;
wire local_bb5_and126_xor_or;

assign local_bb5_and126_xor_or = (input_wii_cmp166_xor | rnode_62to63_bb5_and126_xor_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_or131_xor_stall_local;
wire local_bb5_or131_xor;

assign local_bb5_or131_xor = (rnode_62to63_bb5_or131_0_NO_SHIFT_REG ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5_or125_xor_stall_local;
wire local_bb5_or125_xor;

assign local_bb5_or125_xor = (rnode_62to63_bb5_or125_0_NO_SHIFT_REG ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5_memcoalesce_null_select_byte_en_1_stall_local;
wire [63:0] local_bb5_memcoalesce_null_select_byte_en_1;

assign local_bb5_memcoalesce_null_select_byte_en_1[1] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[2] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[3] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[4] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[5] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[6] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[7] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[8] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[9] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[10] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[11] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[12] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[13] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[14] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[15] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[16] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[17] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[18] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[19] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[20] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[21] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[22] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[23] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[24] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[25] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[26] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[27] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[28] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[29] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[30] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[31] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[32] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[33] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[34] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[35] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[36] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[37] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[38] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[39] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[40] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[41] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[42] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[43] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[44] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[45] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[46] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[47] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[48] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[49] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[50] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[51] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[52] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[53] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[54] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[55] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[56] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[57] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[58] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[59] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[60] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[61] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[62] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[63] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;
assign local_bb5_memcoalesce_null_select_byte_en_1[0] = rnode_62to63_bb5_or125_1_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_1_i_stall_local;
wire [63:0] local_bb5_or_i_i_1_i;

assign local_bb5_or_i_i_1_i = (local_bb5_shl_i_i_1_i | local_bb5_and_i_i_1_i);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_3_i_stall_local;
wire [63:0] local_bb5_and_i_i_3_i;

assign local_bb5_and_i_i_3_i = (rnode_3to4_bb5_var__u8_0_NO_SHIFT_REG & 64'h1);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb5_var__u9_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb5_var__u9_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to5_bb5_var__u9_0_NO_SHIFT_REG;
 logic rnode_4to5_bb5_var__u9_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to5_bb5_var__u9_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_var__u9_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_var__u9_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_var__u9_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb5_var__u9_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb5_var__u9_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb5_var__u9_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb5_var__u9_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb5_var__u9_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u9_0_NO_SHIFT_REG),
	.data_out(rnode_4to5_bb5_var__u9_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb5_var__u9_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb5_var__u9_0_reg_5_fifo.DATA_WIDTH = 64;
defparam rnode_4to5_bb5_var__u9_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb5_var__u9_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb5_var__u9_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u9_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_var__u9_0_NO_SHIFT_REG = rnode_4to5_bb5_var__u9_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb5_var__u9_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_var__u9_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 3
//  * capacity = 3
 logic rnode_4to7_bb5_var__u10_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to7_bb5_var__u10_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to7_bb5_var__u10_0_NO_SHIFT_REG;
 logic rnode_4to7_bb5_var__u10_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to7_bb5_var__u10_0_reg_7_NO_SHIFT_REG;
 logic rnode_4to7_bb5_var__u10_0_valid_out_reg_7_NO_SHIFT_REG;
 logic rnode_4to7_bb5_var__u10_0_stall_in_reg_7_NO_SHIFT_REG;
 logic rnode_4to7_bb5_var__u10_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_4to7_bb5_var__u10_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to7_bb5_var__u10_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to7_bb5_var__u10_0_stall_in_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_4to7_bb5_var__u10_0_valid_out_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_4to7_bb5_var__u10_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u10_0_NO_SHIFT_REG),
	.data_out(rnode_4to7_bb5_var__u10_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_4to7_bb5_var__u10_0_reg_7_fifo.DEPTH = 3;
defparam rnode_4to7_bb5_var__u10_0_reg_7_fifo.DATA_WIDTH = 64;
defparam rnode_4to7_bb5_var__u10_0_reg_7_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to7_bb5_var__u10_0_reg_7_fifo.IMPL = "shift_reg";

assign rnode_4to7_bb5_var__u10_0_reg_7_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u10_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to7_bb5_var__u10_0_NO_SHIFT_REG = rnode_4to7_bb5_var__u10_0_reg_7_NO_SHIFT_REG;
assign rnode_4to7_bb5_var__u10_0_stall_in_reg_7_NO_SHIFT_REG = 1'b0;
assign rnode_4to7_bb5_var__u10_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 5
//  * capacity = 5
 logic rnode_4to9_bb5_var__u11_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to9_bb5_var__u11_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to9_bb5_var__u11_0_NO_SHIFT_REG;
 logic rnode_4to9_bb5_var__u11_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to9_bb5_var__u11_0_reg_9_NO_SHIFT_REG;
 logic rnode_4to9_bb5_var__u11_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_4to9_bb5_var__u11_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_4to9_bb5_var__u11_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_4to9_bb5_var__u11_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to9_bb5_var__u11_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to9_bb5_var__u11_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_4to9_bb5_var__u11_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_4to9_bb5_var__u11_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u11_0_NO_SHIFT_REG),
	.data_out(rnode_4to9_bb5_var__u11_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_4to9_bb5_var__u11_0_reg_9_fifo.DEPTH = 5;
defparam rnode_4to9_bb5_var__u11_0_reg_9_fifo.DATA_WIDTH = 64;
defparam rnode_4to9_bb5_var__u11_0_reg_9_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to9_bb5_var__u11_0_reg_9_fifo.IMPL = "shift_reg";

assign rnode_4to9_bb5_var__u11_0_reg_9_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u11_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to9_bb5_var__u11_0_NO_SHIFT_REG = rnode_4to9_bb5_var__u11_0_reg_9_NO_SHIFT_REG;
assign rnode_4to9_bb5_var__u11_0_stall_in_reg_9_NO_SHIFT_REG = 1'b0;
assign rnode_4to9_bb5_var__u11_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 7
//  * capacity = 7
 logic rnode_4to11_bb5_var__u12_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to11_bb5_var__u12_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to11_bb5_var__u12_0_NO_SHIFT_REG;
 logic rnode_4to11_bb5_var__u12_0_reg_11_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to11_bb5_var__u12_0_reg_11_NO_SHIFT_REG;
 logic rnode_4to11_bb5_var__u12_0_valid_out_reg_11_NO_SHIFT_REG;
 logic rnode_4to11_bb5_var__u12_0_stall_in_reg_11_NO_SHIFT_REG;
 logic rnode_4to11_bb5_var__u12_0_stall_out_reg_11_NO_SHIFT_REG;

acl_data_fifo rnode_4to11_bb5_var__u12_0_reg_11_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to11_bb5_var__u12_0_reg_11_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to11_bb5_var__u12_0_stall_in_reg_11_NO_SHIFT_REG),
	.valid_out(rnode_4to11_bb5_var__u12_0_valid_out_reg_11_NO_SHIFT_REG),
	.stall_out(rnode_4to11_bb5_var__u12_0_stall_out_reg_11_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u12_0_NO_SHIFT_REG),
	.data_out(rnode_4to11_bb5_var__u12_0_reg_11_NO_SHIFT_REG)
);

defparam rnode_4to11_bb5_var__u12_0_reg_11_fifo.DEPTH = 7;
defparam rnode_4to11_bb5_var__u12_0_reg_11_fifo.DATA_WIDTH = 64;
defparam rnode_4to11_bb5_var__u12_0_reg_11_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to11_bb5_var__u12_0_reg_11_fifo.IMPL = "shift_reg";

assign rnode_4to11_bb5_var__u12_0_reg_11_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u12_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to11_bb5_var__u12_0_NO_SHIFT_REG = rnode_4to11_bb5_var__u12_0_reg_11_NO_SHIFT_REG;
assign rnode_4to11_bb5_var__u12_0_stall_in_reg_11_NO_SHIFT_REG = 1'b0;
assign rnode_4to11_bb5_var__u12_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 9
//  * capacity = 9
 logic rnode_4to13_bb5_var__u13_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to13_bb5_var__u13_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to13_bb5_var__u13_0_NO_SHIFT_REG;
 logic rnode_4to13_bb5_var__u13_0_reg_13_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to13_bb5_var__u13_0_reg_13_NO_SHIFT_REG;
 logic rnode_4to13_bb5_var__u13_0_valid_out_reg_13_NO_SHIFT_REG;
 logic rnode_4to13_bb5_var__u13_0_stall_in_reg_13_NO_SHIFT_REG;
 logic rnode_4to13_bb5_var__u13_0_stall_out_reg_13_NO_SHIFT_REG;

acl_data_fifo rnode_4to13_bb5_var__u13_0_reg_13_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to13_bb5_var__u13_0_reg_13_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to13_bb5_var__u13_0_stall_in_reg_13_NO_SHIFT_REG),
	.valid_out(rnode_4to13_bb5_var__u13_0_valid_out_reg_13_NO_SHIFT_REG),
	.stall_out(rnode_4to13_bb5_var__u13_0_stall_out_reg_13_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u13_0_NO_SHIFT_REG),
	.data_out(rnode_4to13_bb5_var__u13_0_reg_13_NO_SHIFT_REG)
);

defparam rnode_4to13_bb5_var__u13_0_reg_13_fifo.DEPTH = 9;
defparam rnode_4to13_bb5_var__u13_0_reg_13_fifo.DATA_WIDTH = 64;
defparam rnode_4to13_bb5_var__u13_0_reg_13_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to13_bb5_var__u13_0_reg_13_fifo.IMPL = "shift_reg";

assign rnode_4to13_bb5_var__u13_0_reg_13_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u13_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to13_bb5_var__u13_0_NO_SHIFT_REG = rnode_4to13_bb5_var__u13_0_reg_13_NO_SHIFT_REG;
assign rnode_4to13_bb5_var__u13_0_stall_in_reg_13_NO_SHIFT_REG = 1'b0;
assign rnode_4to13_bb5_var__u13_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 11
//  * capacity = 11
 logic rnode_4to15_bb5_var__u14_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to15_bb5_var__u14_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to15_bb5_var__u14_0_NO_SHIFT_REG;
 logic rnode_4to15_bb5_var__u14_0_reg_15_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to15_bb5_var__u14_0_reg_15_NO_SHIFT_REG;
 logic rnode_4to15_bb5_var__u14_0_valid_out_reg_15_NO_SHIFT_REG;
 logic rnode_4to15_bb5_var__u14_0_stall_in_reg_15_NO_SHIFT_REG;
 logic rnode_4to15_bb5_var__u14_0_stall_out_reg_15_NO_SHIFT_REG;

acl_data_fifo rnode_4to15_bb5_var__u14_0_reg_15_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to15_bb5_var__u14_0_reg_15_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to15_bb5_var__u14_0_stall_in_reg_15_NO_SHIFT_REG),
	.valid_out(rnode_4to15_bb5_var__u14_0_valid_out_reg_15_NO_SHIFT_REG),
	.stall_out(rnode_4to15_bb5_var__u14_0_stall_out_reg_15_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u14_0_NO_SHIFT_REG),
	.data_out(rnode_4to15_bb5_var__u14_0_reg_15_NO_SHIFT_REG)
);

defparam rnode_4to15_bb5_var__u14_0_reg_15_fifo.DEPTH = 11;
defparam rnode_4to15_bb5_var__u14_0_reg_15_fifo.DATA_WIDTH = 64;
defparam rnode_4to15_bb5_var__u14_0_reg_15_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to15_bb5_var__u14_0_reg_15_fifo.IMPL = "shift_reg";

assign rnode_4to15_bb5_var__u14_0_reg_15_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u14_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to15_bb5_var__u14_0_NO_SHIFT_REG = rnode_4to15_bb5_var__u14_0_reg_15_NO_SHIFT_REG;
assign rnode_4to15_bb5_var__u14_0_stall_in_reg_15_NO_SHIFT_REG = 1'b0;
assign rnode_4to15_bb5_var__u14_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 13
//  * capacity = 13
 logic rnode_4to17_bb5_var__u15_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to17_bb5_var__u15_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to17_bb5_var__u15_0_NO_SHIFT_REG;
 logic rnode_4to17_bb5_var__u15_0_reg_17_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to17_bb5_var__u15_0_reg_17_NO_SHIFT_REG;
 logic rnode_4to17_bb5_var__u15_0_valid_out_reg_17_NO_SHIFT_REG;
 logic rnode_4to17_bb5_var__u15_0_stall_in_reg_17_NO_SHIFT_REG;
 logic rnode_4to17_bb5_var__u15_0_stall_out_reg_17_NO_SHIFT_REG;

acl_data_fifo rnode_4to17_bb5_var__u15_0_reg_17_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to17_bb5_var__u15_0_reg_17_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to17_bb5_var__u15_0_stall_in_reg_17_NO_SHIFT_REG),
	.valid_out(rnode_4to17_bb5_var__u15_0_valid_out_reg_17_NO_SHIFT_REG),
	.stall_out(rnode_4to17_bb5_var__u15_0_stall_out_reg_17_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u15_0_NO_SHIFT_REG),
	.data_out(rnode_4to17_bb5_var__u15_0_reg_17_NO_SHIFT_REG)
);

defparam rnode_4to17_bb5_var__u15_0_reg_17_fifo.DEPTH = 13;
defparam rnode_4to17_bb5_var__u15_0_reg_17_fifo.DATA_WIDTH = 64;
defparam rnode_4to17_bb5_var__u15_0_reg_17_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to17_bb5_var__u15_0_reg_17_fifo.IMPL = "shift_reg";

assign rnode_4to17_bb5_var__u15_0_reg_17_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u15_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to17_bb5_var__u15_0_NO_SHIFT_REG = rnode_4to17_bb5_var__u15_0_reg_17_NO_SHIFT_REG;
assign rnode_4to17_bb5_var__u15_0_stall_in_reg_17_NO_SHIFT_REG = 1'b0;
assign rnode_4to17_bb5_var__u15_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 15
//  * capacity = 15
 logic rnode_4to19_bb5_var__u16_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to19_bb5_var__u16_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to19_bb5_var__u16_0_NO_SHIFT_REG;
 logic rnode_4to19_bb5_var__u16_0_reg_19_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to19_bb5_var__u16_0_reg_19_NO_SHIFT_REG;
 logic rnode_4to19_bb5_var__u16_0_valid_out_reg_19_NO_SHIFT_REG;
 logic rnode_4to19_bb5_var__u16_0_stall_in_reg_19_NO_SHIFT_REG;
 logic rnode_4to19_bb5_var__u16_0_stall_out_reg_19_NO_SHIFT_REG;

acl_data_fifo rnode_4to19_bb5_var__u16_0_reg_19_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to19_bb5_var__u16_0_reg_19_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to19_bb5_var__u16_0_stall_in_reg_19_NO_SHIFT_REG),
	.valid_out(rnode_4to19_bb5_var__u16_0_valid_out_reg_19_NO_SHIFT_REG),
	.stall_out(rnode_4to19_bb5_var__u16_0_stall_out_reg_19_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u16_0_NO_SHIFT_REG),
	.data_out(rnode_4to19_bb5_var__u16_0_reg_19_NO_SHIFT_REG)
);

defparam rnode_4to19_bb5_var__u16_0_reg_19_fifo.DEPTH = 15;
defparam rnode_4to19_bb5_var__u16_0_reg_19_fifo.DATA_WIDTH = 64;
defparam rnode_4to19_bb5_var__u16_0_reg_19_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to19_bb5_var__u16_0_reg_19_fifo.IMPL = "shift_reg";

assign rnode_4to19_bb5_var__u16_0_reg_19_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u16_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to19_bb5_var__u16_0_NO_SHIFT_REG = rnode_4to19_bb5_var__u16_0_reg_19_NO_SHIFT_REG;
assign rnode_4to19_bb5_var__u16_0_stall_in_reg_19_NO_SHIFT_REG = 1'b0;
assign rnode_4to19_bb5_var__u16_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 17
//  * capacity = 17
 logic rnode_4to21_bb5_var__u17_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to21_bb5_var__u17_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to21_bb5_var__u17_0_NO_SHIFT_REG;
 logic rnode_4to21_bb5_var__u17_0_reg_21_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to21_bb5_var__u17_0_reg_21_NO_SHIFT_REG;
 logic rnode_4to21_bb5_var__u17_0_valid_out_reg_21_NO_SHIFT_REG;
 logic rnode_4to21_bb5_var__u17_0_stall_in_reg_21_NO_SHIFT_REG;
 logic rnode_4to21_bb5_var__u17_0_stall_out_reg_21_NO_SHIFT_REG;

acl_data_fifo rnode_4to21_bb5_var__u17_0_reg_21_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to21_bb5_var__u17_0_reg_21_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to21_bb5_var__u17_0_stall_in_reg_21_NO_SHIFT_REG),
	.valid_out(rnode_4to21_bb5_var__u17_0_valid_out_reg_21_NO_SHIFT_REG),
	.stall_out(rnode_4to21_bb5_var__u17_0_stall_out_reg_21_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u17_0_NO_SHIFT_REG),
	.data_out(rnode_4to21_bb5_var__u17_0_reg_21_NO_SHIFT_REG)
);

defparam rnode_4to21_bb5_var__u17_0_reg_21_fifo.DEPTH = 17;
defparam rnode_4to21_bb5_var__u17_0_reg_21_fifo.DATA_WIDTH = 64;
defparam rnode_4to21_bb5_var__u17_0_reg_21_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to21_bb5_var__u17_0_reg_21_fifo.IMPL = "shift_reg";

assign rnode_4to21_bb5_var__u17_0_reg_21_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u17_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to21_bb5_var__u17_0_NO_SHIFT_REG = rnode_4to21_bb5_var__u17_0_reg_21_NO_SHIFT_REG;
assign rnode_4to21_bb5_var__u17_0_stall_in_reg_21_NO_SHIFT_REG = 1'b0;
assign rnode_4to21_bb5_var__u17_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 19
//  * capacity = 19
 logic rnode_4to23_bb5_var__u18_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to23_bb5_var__u18_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to23_bb5_var__u18_0_NO_SHIFT_REG;
 logic rnode_4to23_bb5_var__u18_0_reg_23_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to23_bb5_var__u18_0_reg_23_NO_SHIFT_REG;
 logic rnode_4to23_bb5_var__u18_0_valid_out_reg_23_NO_SHIFT_REG;
 logic rnode_4to23_bb5_var__u18_0_stall_in_reg_23_NO_SHIFT_REG;
 logic rnode_4to23_bb5_var__u18_0_stall_out_reg_23_NO_SHIFT_REG;

acl_data_fifo rnode_4to23_bb5_var__u18_0_reg_23_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to23_bb5_var__u18_0_reg_23_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to23_bb5_var__u18_0_stall_in_reg_23_NO_SHIFT_REG),
	.valid_out(rnode_4to23_bb5_var__u18_0_valid_out_reg_23_NO_SHIFT_REG),
	.stall_out(rnode_4to23_bb5_var__u18_0_stall_out_reg_23_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u18_0_NO_SHIFT_REG),
	.data_out(rnode_4to23_bb5_var__u18_0_reg_23_NO_SHIFT_REG)
);

defparam rnode_4to23_bb5_var__u18_0_reg_23_fifo.DEPTH = 19;
defparam rnode_4to23_bb5_var__u18_0_reg_23_fifo.DATA_WIDTH = 64;
defparam rnode_4to23_bb5_var__u18_0_reg_23_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to23_bb5_var__u18_0_reg_23_fifo.IMPL = "shift_reg";

assign rnode_4to23_bb5_var__u18_0_reg_23_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u18_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to23_bb5_var__u18_0_NO_SHIFT_REG = rnode_4to23_bb5_var__u18_0_reg_23_NO_SHIFT_REG;
assign rnode_4to23_bb5_var__u18_0_stall_in_reg_23_NO_SHIFT_REG = 1'b0;
assign rnode_4to23_bb5_var__u18_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 21
//  * capacity = 21
 logic rnode_4to25_bb5_var__u19_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to25_bb5_var__u19_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to25_bb5_var__u19_0_NO_SHIFT_REG;
 logic rnode_4to25_bb5_var__u19_0_reg_25_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to25_bb5_var__u19_0_reg_25_NO_SHIFT_REG;
 logic rnode_4to25_bb5_var__u19_0_valid_out_reg_25_NO_SHIFT_REG;
 logic rnode_4to25_bb5_var__u19_0_stall_in_reg_25_NO_SHIFT_REG;
 logic rnode_4to25_bb5_var__u19_0_stall_out_reg_25_NO_SHIFT_REG;

acl_data_fifo rnode_4to25_bb5_var__u19_0_reg_25_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to25_bb5_var__u19_0_reg_25_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to25_bb5_var__u19_0_stall_in_reg_25_NO_SHIFT_REG),
	.valid_out(rnode_4to25_bb5_var__u19_0_valid_out_reg_25_NO_SHIFT_REG),
	.stall_out(rnode_4to25_bb5_var__u19_0_stall_out_reg_25_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u19_0_NO_SHIFT_REG),
	.data_out(rnode_4to25_bb5_var__u19_0_reg_25_NO_SHIFT_REG)
);

defparam rnode_4to25_bb5_var__u19_0_reg_25_fifo.DEPTH = 21;
defparam rnode_4to25_bb5_var__u19_0_reg_25_fifo.DATA_WIDTH = 64;
defparam rnode_4to25_bb5_var__u19_0_reg_25_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to25_bb5_var__u19_0_reg_25_fifo.IMPL = "shift_reg";

assign rnode_4to25_bb5_var__u19_0_reg_25_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u19_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to25_bb5_var__u19_0_NO_SHIFT_REG = rnode_4to25_bb5_var__u19_0_reg_25_NO_SHIFT_REG;
assign rnode_4to25_bb5_var__u19_0_stall_in_reg_25_NO_SHIFT_REG = 1'b0;
assign rnode_4to25_bb5_var__u19_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 23
//  * capacity = 23
 logic rnode_4to27_bb5_var__u20_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to27_bb5_var__u20_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to27_bb5_var__u20_0_NO_SHIFT_REG;
 logic rnode_4to27_bb5_var__u20_0_reg_27_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to27_bb5_var__u20_0_reg_27_NO_SHIFT_REG;
 logic rnode_4to27_bb5_var__u20_0_valid_out_reg_27_NO_SHIFT_REG;
 logic rnode_4to27_bb5_var__u20_0_stall_in_reg_27_NO_SHIFT_REG;
 logic rnode_4to27_bb5_var__u20_0_stall_out_reg_27_NO_SHIFT_REG;

acl_data_fifo rnode_4to27_bb5_var__u20_0_reg_27_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to27_bb5_var__u20_0_reg_27_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to27_bb5_var__u20_0_stall_in_reg_27_NO_SHIFT_REG),
	.valid_out(rnode_4to27_bb5_var__u20_0_valid_out_reg_27_NO_SHIFT_REG),
	.stall_out(rnode_4to27_bb5_var__u20_0_stall_out_reg_27_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u20_0_NO_SHIFT_REG),
	.data_out(rnode_4to27_bb5_var__u20_0_reg_27_NO_SHIFT_REG)
);

defparam rnode_4to27_bb5_var__u20_0_reg_27_fifo.DEPTH = 23;
defparam rnode_4to27_bb5_var__u20_0_reg_27_fifo.DATA_WIDTH = 64;
defparam rnode_4to27_bb5_var__u20_0_reg_27_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to27_bb5_var__u20_0_reg_27_fifo.IMPL = "shift_reg";

assign rnode_4to27_bb5_var__u20_0_reg_27_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u20_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to27_bb5_var__u20_0_NO_SHIFT_REG = rnode_4to27_bb5_var__u20_0_reg_27_NO_SHIFT_REG;
assign rnode_4to27_bb5_var__u20_0_stall_in_reg_27_NO_SHIFT_REG = 1'b0;
assign rnode_4to27_bb5_var__u20_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 25
//  * capacity = 25
 logic rnode_4to29_bb5_var__u21_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to29_bb5_var__u21_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to29_bb5_var__u21_0_NO_SHIFT_REG;
 logic rnode_4to29_bb5_var__u21_0_reg_29_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to29_bb5_var__u21_0_reg_29_NO_SHIFT_REG;
 logic rnode_4to29_bb5_var__u21_0_valid_out_reg_29_NO_SHIFT_REG;
 logic rnode_4to29_bb5_var__u21_0_stall_in_reg_29_NO_SHIFT_REG;
 logic rnode_4to29_bb5_var__u21_0_stall_out_reg_29_NO_SHIFT_REG;

acl_data_fifo rnode_4to29_bb5_var__u21_0_reg_29_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to29_bb5_var__u21_0_reg_29_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to29_bb5_var__u21_0_stall_in_reg_29_NO_SHIFT_REG),
	.valid_out(rnode_4to29_bb5_var__u21_0_valid_out_reg_29_NO_SHIFT_REG),
	.stall_out(rnode_4to29_bb5_var__u21_0_stall_out_reg_29_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u21_0_NO_SHIFT_REG),
	.data_out(rnode_4to29_bb5_var__u21_0_reg_29_NO_SHIFT_REG)
);

defparam rnode_4to29_bb5_var__u21_0_reg_29_fifo.DEPTH = 25;
defparam rnode_4to29_bb5_var__u21_0_reg_29_fifo.DATA_WIDTH = 64;
defparam rnode_4to29_bb5_var__u21_0_reg_29_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to29_bb5_var__u21_0_reg_29_fifo.IMPL = "shift_reg";

assign rnode_4to29_bb5_var__u21_0_reg_29_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u21_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to29_bb5_var__u21_0_NO_SHIFT_REG = rnode_4to29_bb5_var__u21_0_reg_29_NO_SHIFT_REG;
assign rnode_4to29_bb5_var__u21_0_stall_in_reg_29_NO_SHIFT_REG = 1'b0;
assign rnode_4to29_bb5_var__u21_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 27
//  * capacity = 27
 logic rnode_4to31_bb5_var__u22_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to31_bb5_var__u22_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to31_bb5_var__u22_0_NO_SHIFT_REG;
 logic rnode_4to31_bb5_var__u22_0_reg_31_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to31_bb5_var__u22_0_reg_31_NO_SHIFT_REG;
 logic rnode_4to31_bb5_var__u22_0_valid_out_reg_31_NO_SHIFT_REG;
 logic rnode_4to31_bb5_var__u22_0_stall_in_reg_31_NO_SHIFT_REG;
 logic rnode_4to31_bb5_var__u22_0_stall_out_reg_31_NO_SHIFT_REG;

acl_data_fifo rnode_4to31_bb5_var__u22_0_reg_31_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to31_bb5_var__u22_0_reg_31_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to31_bb5_var__u22_0_stall_in_reg_31_NO_SHIFT_REG),
	.valid_out(rnode_4to31_bb5_var__u22_0_valid_out_reg_31_NO_SHIFT_REG),
	.stall_out(rnode_4to31_bb5_var__u22_0_stall_out_reg_31_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u22_0_NO_SHIFT_REG),
	.data_out(rnode_4to31_bb5_var__u22_0_reg_31_NO_SHIFT_REG)
);

defparam rnode_4to31_bb5_var__u22_0_reg_31_fifo.DEPTH = 27;
defparam rnode_4to31_bb5_var__u22_0_reg_31_fifo.DATA_WIDTH = 64;
defparam rnode_4to31_bb5_var__u22_0_reg_31_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to31_bb5_var__u22_0_reg_31_fifo.IMPL = "shift_reg";

assign rnode_4to31_bb5_var__u22_0_reg_31_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u22_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to31_bb5_var__u22_0_NO_SHIFT_REG = rnode_4to31_bb5_var__u22_0_reg_31_NO_SHIFT_REG;
assign rnode_4to31_bb5_var__u22_0_stall_in_reg_31_NO_SHIFT_REG = 1'b0;
assign rnode_4to31_bb5_var__u22_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 29
//  * capacity = 29
 logic rnode_4to33_bb5_var__u23_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to33_bb5_var__u23_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to33_bb5_var__u23_0_NO_SHIFT_REG;
 logic rnode_4to33_bb5_var__u23_0_reg_33_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to33_bb5_var__u23_0_reg_33_NO_SHIFT_REG;
 logic rnode_4to33_bb5_var__u23_0_valid_out_reg_33_NO_SHIFT_REG;
 logic rnode_4to33_bb5_var__u23_0_stall_in_reg_33_NO_SHIFT_REG;
 logic rnode_4to33_bb5_var__u23_0_stall_out_reg_33_NO_SHIFT_REG;

acl_data_fifo rnode_4to33_bb5_var__u23_0_reg_33_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to33_bb5_var__u23_0_reg_33_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to33_bb5_var__u23_0_stall_in_reg_33_NO_SHIFT_REG),
	.valid_out(rnode_4to33_bb5_var__u23_0_valid_out_reg_33_NO_SHIFT_REG),
	.stall_out(rnode_4to33_bb5_var__u23_0_stall_out_reg_33_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u23_0_NO_SHIFT_REG),
	.data_out(rnode_4to33_bb5_var__u23_0_reg_33_NO_SHIFT_REG)
);

defparam rnode_4to33_bb5_var__u23_0_reg_33_fifo.DEPTH = 29;
defparam rnode_4to33_bb5_var__u23_0_reg_33_fifo.DATA_WIDTH = 64;
defparam rnode_4to33_bb5_var__u23_0_reg_33_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to33_bb5_var__u23_0_reg_33_fifo.IMPL = "shift_reg";

assign rnode_4to33_bb5_var__u23_0_reg_33_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u23_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to33_bb5_var__u23_0_NO_SHIFT_REG = rnode_4to33_bb5_var__u23_0_reg_33_NO_SHIFT_REG;
assign rnode_4to33_bb5_var__u23_0_stall_in_reg_33_NO_SHIFT_REG = 1'b0;
assign rnode_4to33_bb5_var__u23_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 31
//  * capacity = 31
 logic rnode_4to35_bb5_var__u24_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to35_bb5_var__u24_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to35_bb5_var__u24_0_NO_SHIFT_REG;
 logic rnode_4to35_bb5_var__u24_0_reg_35_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to35_bb5_var__u24_0_reg_35_NO_SHIFT_REG;
 logic rnode_4to35_bb5_var__u24_0_valid_out_reg_35_NO_SHIFT_REG;
 logic rnode_4to35_bb5_var__u24_0_stall_in_reg_35_NO_SHIFT_REG;
 logic rnode_4to35_bb5_var__u24_0_stall_out_reg_35_NO_SHIFT_REG;

acl_data_fifo rnode_4to35_bb5_var__u24_0_reg_35_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to35_bb5_var__u24_0_reg_35_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to35_bb5_var__u24_0_stall_in_reg_35_NO_SHIFT_REG),
	.valid_out(rnode_4to35_bb5_var__u24_0_valid_out_reg_35_NO_SHIFT_REG),
	.stall_out(rnode_4to35_bb5_var__u24_0_stall_out_reg_35_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u24_0_NO_SHIFT_REG),
	.data_out(rnode_4to35_bb5_var__u24_0_reg_35_NO_SHIFT_REG)
);

defparam rnode_4to35_bb5_var__u24_0_reg_35_fifo.DEPTH = 31;
defparam rnode_4to35_bb5_var__u24_0_reg_35_fifo.DATA_WIDTH = 64;
defparam rnode_4to35_bb5_var__u24_0_reg_35_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to35_bb5_var__u24_0_reg_35_fifo.IMPL = "shift_reg";

assign rnode_4to35_bb5_var__u24_0_reg_35_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u24_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to35_bb5_var__u24_0_NO_SHIFT_REG = rnode_4to35_bb5_var__u24_0_reg_35_NO_SHIFT_REG;
assign rnode_4to35_bb5_var__u24_0_stall_in_reg_35_NO_SHIFT_REG = 1'b0;
assign rnode_4to35_bb5_var__u24_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 33
//  * capacity = 33
 logic rnode_4to37_bb5_var__u25_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to37_bb5_var__u25_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to37_bb5_var__u25_0_NO_SHIFT_REG;
 logic rnode_4to37_bb5_var__u25_0_reg_37_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to37_bb5_var__u25_0_reg_37_NO_SHIFT_REG;
 logic rnode_4to37_bb5_var__u25_0_valid_out_reg_37_NO_SHIFT_REG;
 logic rnode_4to37_bb5_var__u25_0_stall_in_reg_37_NO_SHIFT_REG;
 logic rnode_4to37_bb5_var__u25_0_stall_out_reg_37_NO_SHIFT_REG;

acl_data_fifo rnode_4to37_bb5_var__u25_0_reg_37_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to37_bb5_var__u25_0_reg_37_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to37_bb5_var__u25_0_stall_in_reg_37_NO_SHIFT_REG),
	.valid_out(rnode_4to37_bb5_var__u25_0_valid_out_reg_37_NO_SHIFT_REG),
	.stall_out(rnode_4to37_bb5_var__u25_0_stall_out_reg_37_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u25_0_NO_SHIFT_REG),
	.data_out(rnode_4to37_bb5_var__u25_0_reg_37_NO_SHIFT_REG)
);

defparam rnode_4to37_bb5_var__u25_0_reg_37_fifo.DEPTH = 33;
defparam rnode_4to37_bb5_var__u25_0_reg_37_fifo.DATA_WIDTH = 64;
defparam rnode_4to37_bb5_var__u25_0_reg_37_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to37_bb5_var__u25_0_reg_37_fifo.IMPL = "shift_reg";

assign rnode_4to37_bb5_var__u25_0_reg_37_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u25_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to37_bb5_var__u25_0_NO_SHIFT_REG = rnode_4to37_bb5_var__u25_0_reg_37_NO_SHIFT_REG;
assign rnode_4to37_bb5_var__u25_0_stall_in_reg_37_NO_SHIFT_REG = 1'b0;
assign rnode_4to37_bb5_var__u25_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 35
//  * capacity = 35
 logic rnode_4to39_bb5_var__u26_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to39_bb5_var__u26_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to39_bb5_var__u26_0_NO_SHIFT_REG;
 logic rnode_4to39_bb5_var__u26_0_reg_39_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to39_bb5_var__u26_0_reg_39_NO_SHIFT_REG;
 logic rnode_4to39_bb5_var__u26_0_valid_out_reg_39_NO_SHIFT_REG;
 logic rnode_4to39_bb5_var__u26_0_stall_in_reg_39_NO_SHIFT_REG;
 logic rnode_4to39_bb5_var__u26_0_stall_out_reg_39_NO_SHIFT_REG;

acl_data_fifo rnode_4to39_bb5_var__u26_0_reg_39_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to39_bb5_var__u26_0_reg_39_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to39_bb5_var__u26_0_stall_in_reg_39_NO_SHIFT_REG),
	.valid_out(rnode_4to39_bb5_var__u26_0_valid_out_reg_39_NO_SHIFT_REG),
	.stall_out(rnode_4to39_bb5_var__u26_0_stall_out_reg_39_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u26_0_NO_SHIFT_REG),
	.data_out(rnode_4to39_bb5_var__u26_0_reg_39_NO_SHIFT_REG)
);

defparam rnode_4to39_bb5_var__u26_0_reg_39_fifo.DEPTH = 35;
defparam rnode_4to39_bb5_var__u26_0_reg_39_fifo.DATA_WIDTH = 64;
defparam rnode_4to39_bb5_var__u26_0_reg_39_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to39_bb5_var__u26_0_reg_39_fifo.IMPL = "shift_reg";

assign rnode_4to39_bb5_var__u26_0_reg_39_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u26_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to39_bb5_var__u26_0_NO_SHIFT_REG = rnode_4to39_bb5_var__u26_0_reg_39_NO_SHIFT_REG;
assign rnode_4to39_bb5_var__u26_0_stall_in_reg_39_NO_SHIFT_REG = 1'b0;
assign rnode_4to39_bb5_var__u26_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 37
//  * capacity = 37
 logic rnode_4to41_bb5_var__u27_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to41_bb5_var__u27_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to41_bb5_var__u27_0_NO_SHIFT_REG;
 logic rnode_4to41_bb5_var__u27_0_reg_41_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to41_bb5_var__u27_0_reg_41_NO_SHIFT_REG;
 logic rnode_4to41_bb5_var__u27_0_valid_out_reg_41_NO_SHIFT_REG;
 logic rnode_4to41_bb5_var__u27_0_stall_in_reg_41_NO_SHIFT_REG;
 logic rnode_4to41_bb5_var__u27_0_stall_out_reg_41_NO_SHIFT_REG;

acl_data_fifo rnode_4to41_bb5_var__u27_0_reg_41_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to41_bb5_var__u27_0_reg_41_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to41_bb5_var__u27_0_stall_in_reg_41_NO_SHIFT_REG),
	.valid_out(rnode_4to41_bb5_var__u27_0_valid_out_reg_41_NO_SHIFT_REG),
	.stall_out(rnode_4to41_bb5_var__u27_0_stall_out_reg_41_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u27_0_NO_SHIFT_REG),
	.data_out(rnode_4to41_bb5_var__u27_0_reg_41_NO_SHIFT_REG)
);

defparam rnode_4to41_bb5_var__u27_0_reg_41_fifo.DEPTH = 37;
defparam rnode_4to41_bb5_var__u27_0_reg_41_fifo.DATA_WIDTH = 64;
defparam rnode_4to41_bb5_var__u27_0_reg_41_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to41_bb5_var__u27_0_reg_41_fifo.IMPL = "shift_reg";

assign rnode_4to41_bb5_var__u27_0_reg_41_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u27_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to41_bb5_var__u27_0_NO_SHIFT_REG = rnode_4to41_bb5_var__u27_0_reg_41_NO_SHIFT_REG;
assign rnode_4to41_bb5_var__u27_0_stall_in_reg_41_NO_SHIFT_REG = 1'b0;
assign rnode_4to41_bb5_var__u27_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 39
//  * capacity = 39
 logic rnode_4to43_bb5_var__u28_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to43_bb5_var__u28_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to43_bb5_var__u28_0_NO_SHIFT_REG;
 logic rnode_4to43_bb5_var__u28_0_reg_43_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to43_bb5_var__u28_0_reg_43_NO_SHIFT_REG;
 logic rnode_4to43_bb5_var__u28_0_valid_out_reg_43_NO_SHIFT_REG;
 logic rnode_4to43_bb5_var__u28_0_stall_in_reg_43_NO_SHIFT_REG;
 logic rnode_4to43_bb5_var__u28_0_stall_out_reg_43_NO_SHIFT_REG;

acl_data_fifo rnode_4to43_bb5_var__u28_0_reg_43_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to43_bb5_var__u28_0_reg_43_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to43_bb5_var__u28_0_stall_in_reg_43_NO_SHIFT_REG),
	.valid_out(rnode_4to43_bb5_var__u28_0_valid_out_reg_43_NO_SHIFT_REG),
	.stall_out(rnode_4to43_bb5_var__u28_0_stall_out_reg_43_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u28_0_NO_SHIFT_REG),
	.data_out(rnode_4to43_bb5_var__u28_0_reg_43_NO_SHIFT_REG)
);

defparam rnode_4to43_bb5_var__u28_0_reg_43_fifo.DEPTH = 39;
defparam rnode_4to43_bb5_var__u28_0_reg_43_fifo.DATA_WIDTH = 64;
defparam rnode_4to43_bb5_var__u28_0_reg_43_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to43_bb5_var__u28_0_reg_43_fifo.IMPL = "shift_reg";

assign rnode_4to43_bb5_var__u28_0_reg_43_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u28_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to43_bb5_var__u28_0_NO_SHIFT_REG = rnode_4to43_bb5_var__u28_0_reg_43_NO_SHIFT_REG;
assign rnode_4to43_bb5_var__u28_0_stall_in_reg_43_NO_SHIFT_REG = 1'b0;
assign rnode_4to43_bb5_var__u28_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 41
//  * capacity = 41
 logic rnode_4to45_bb5_var__u29_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to45_bb5_var__u29_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to45_bb5_var__u29_0_NO_SHIFT_REG;
 logic rnode_4to45_bb5_var__u29_0_reg_45_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to45_bb5_var__u29_0_reg_45_NO_SHIFT_REG;
 logic rnode_4to45_bb5_var__u29_0_valid_out_reg_45_NO_SHIFT_REG;
 logic rnode_4to45_bb5_var__u29_0_stall_in_reg_45_NO_SHIFT_REG;
 logic rnode_4to45_bb5_var__u29_0_stall_out_reg_45_NO_SHIFT_REG;

acl_data_fifo rnode_4to45_bb5_var__u29_0_reg_45_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to45_bb5_var__u29_0_reg_45_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to45_bb5_var__u29_0_stall_in_reg_45_NO_SHIFT_REG),
	.valid_out(rnode_4to45_bb5_var__u29_0_valid_out_reg_45_NO_SHIFT_REG),
	.stall_out(rnode_4to45_bb5_var__u29_0_stall_out_reg_45_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u29_0_NO_SHIFT_REG),
	.data_out(rnode_4to45_bb5_var__u29_0_reg_45_NO_SHIFT_REG)
);

defparam rnode_4to45_bb5_var__u29_0_reg_45_fifo.DEPTH = 41;
defparam rnode_4to45_bb5_var__u29_0_reg_45_fifo.DATA_WIDTH = 64;
defparam rnode_4to45_bb5_var__u29_0_reg_45_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to45_bb5_var__u29_0_reg_45_fifo.IMPL = "shift_reg";

assign rnode_4to45_bb5_var__u29_0_reg_45_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u29_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to45_bb5_var__u29_0_NO_SHIFT_REG = rnode_4to45_bb5_var__u29_0_reg_45_NO_SHIFT_REG;
assign rnode_4to45_bb5_var__u29_0_stall_in_reg_45_NO_SHIFT_REG = 1'b0;
assign rnode_4to45_bb5_var__u29_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 43
//  * capacity = 43
 logic rnode_4to47_bb5_var__u30_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to47_bb5_var__u30_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to47_bb5_var__u30_0_NO_SHIFT_REG;
 logic rnode_4to47_bb5_var__u30_0_reg_47_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to47_bb5_var__u30_0_reg_47_NO_SHIFT_REG;
 logic rnode_4to47_bb5_var__u30_0_valid_out_reg_47_NO_SHIFT_REG;
 logic rnode_4to47_bb5_var__u30_0_stall_in_reg_47_NO_SHIFT_REG;
 logic rnode_4to47_bb5_var__u30_0_stall_out_reg_47_NO_SHIFT_REG;

acl_data_fifo rnode_4to47_bb5_var__u30_0_reg_47_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to47_bb5_var__u30_0_reg_47_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to47_bb5_var__u30_0_stall_in_reg_47_NO_SHIFT_REG),
	.valid_out(rnode_4to47_bb5_var__u30_0_valid_out_reg_47_NO_SHIFT_REG),
	.stall_out(rnode_4to47_bb5_var__u30_0_stall_out_reg_47_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u30_0_NO_SHIFT_REG),
	.data_out(rnode_4to47_bb5_var__u30_0_reg_47_NO_SHIFT_REG)
);

defparam rnode_4to47_bb5_var__u30_0_reg_47_fifo.DEPTH = 43;
defparam rnode_4to47_bb5_var__u30_0_reg_47_fifo.DATA_WIDTH = 64;
defparam rnode_4to47_bb5_var__u30_0_reg_47_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to47_bb5_var__u30_0_reg_47_fifo.IMPL = "shift_reg";

assign rnode_4to47_bb5_var__u30_0_reg_47_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u30_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to47_bb5_var__u30_0_NO_SHIFT_REG = rnode_4to47_bb5_var__u30_0_reg_47_NO_SHIFT_REG;
assign rnode_4to47_bb5_var__u30_0_stall_in_reg_47_NO_SHIFT_REG = 1'b0;
assign rnode_4to47_bb5_var__u30_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 45
//  * capacity = 45
 logic rnode_4to49_bb5_var__u31_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to49_bb5_var__u31_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to49_bb5_var__u31_0_NO_SHIFT_REG;
 logic rnode_4to49_bb5_var__u31_0_reg_49_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to49_bb5_var__u31_0_reg_49_NO_SHIFT_REG;
 logic rnode_4to49_bb5_var__u31_0_valid_out_reg_49_NO_SHIFT_REG;
 logic rnode_4to49_bb5_var__u31_0_stall_in_reg_49_NO_SHIFT_REG;
 logic rnode_4to49_bb5_var__u31_0_stall_out_reg_49_NO_SHIFT_REG;

acl_data_fifo rnode_4to49_bb5_var__u31_0_reg_49_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to49_bb5_var__u31_0_reg_49_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to49_bb5_var__u31_0_stall_in_reg_49_NO_SHIFT_REG),
	.valid_out(rnode_4to49_bb5_var__u31_0_valid_out_reg_49_NO_SHIFT_REG),
	.stall_out(rnode_4to49_bb5_var__u31_0_stall_out_reg_49_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u31_0_NO_SHIFT_REG),
	.data_out(rnode_4to49_bb5_var__u31_0_reg_49_NO_SHIFT_REG)
);

defparam rnode_4to49_bb5_var__u31_0_reg_49_fifo.DEPTH = 45;
defparam rnode_4to49_bb5_var__u31_0_reg_49_fifo.DATA_WIDTH = 64;
defparam rnode_4to49_bb5_var__u31_0_reg_49_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to49_bb5_var__u31_0_reg_49_fifo.IMPL = "shift_reg";

assign rnode_4to49_bb5_var__u31_0_reg_49_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u31_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to49_bb5_var__u31_0_NO_SHIFT_REG = rnode_4to49_bb5_var__u31_0_reg_49_NO_SHIFT_REG;
assign rnode_4to49_bb5_var__u31_0_stall_in_reg_49_NO_SHIFT_REG = 1'b0;
assign rnode_4to49_bb5_var__u31_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 47
//  * capacity = 47
 logic rnode_4to51_bb5_var__u32_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to51_bb5_var__u32_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to51_bb5_var__u32_0_NO_SHIFT_REG;
 logic rnode_4to51_bb5_var__u32_0_reg_51_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to51_bb5_var__u32_0_reg_51_NO_SHIFT_REG;
 logic rnode_4to51_bb5_var__u32_0_valid_out_reg_51_NO_SHIFT_REG;
 logic rnode_4to51_bb5_var__u32_0_stall_in_reg_51_NO_SHIFT_REG;
 logic rnode_4to51_bb5_var__u32_0_stall_out_reg_51_NO_SHIFT_REG;

acl_data_fifo rnode_4to51_bb5_var__u32_0_reg_51_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to51_bb5_var__u32_0_reg_51_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to51_bb5_var__u32_0_stall_in_reg_51_NO_SHIFT_REG),
	.valid_out(rnode_4to51_bb5_var__u32_0_valid_out_reg_51_NO_SHIFT_REG),
	.stall_out(rnode_4to51_bb5_var__u32_0_stall_out_reg_51_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u32_0_NO_SHIFT_REG),
	.data_out(rnode_4to51_bb5_var__u32_0_reg_51_NO_SHIFT_REG)
);

defparam rnode_4to51_bb5_var__u32_0_reg_51_fifo.DEPTH = 47;
defparam rnode_4to51_bb5_var__u32_0_reg_51_fifo.DATA_WIDTH = 64;
defparam rnode_4to51_bb5_var__u32_0_reg_51_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to51_bb5_var__u32_0_reg_51_fifo.IMPL = "shift_reg";

assign rnode_4to51_bb5_var__u32_0_reg_51_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u32_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to51_bb5_var__u32_0_NO_SHIFT_REG = rnode_4to51_bb5_var__u32_0_reg_51_NO_SHIFT_REG;
assign rnode_4to51_bb5_var__u32_0_stall_in_reg_51_NO_SHIFT_REG = 1'b0;
assign rnode_4to51_bb5_var__u32_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 49
//  * capacity = 49
 logic rnode_4to53_bb5_var__u33_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to53_bb5_var__u33_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to53_bb5_var__u33_0_NO_SHIFT_REG;
 logic rnode_4to53_bb5_var__u33_0_reg_53_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to53_bb5_var__u33_0_reg_53_NO_SHIFT_REG;
 logic rnode_4to53_bb5_var__u33_0_valid_out_reg_53_NO_SHIFT_REG;
 logic rnode_4to53_bb5_var__u33_0_stall_in_reg_53_NO_SHIFT_REG;
 logic rnode_4to53_bb5_var__u33_0_stall_out_reg_53_NO_SHIFT_REG;

acl_data_fifo rnode_4to53_bb5_var__u33_0_reg_53_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to53_bb5_var__u33_0_reg_53_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to53_bb5_var__u33_0_stall_in_reg_53_NO_SHIFT_REG),
	.valid_out(rnode_4to53_bb5_var__u33_0_valid_out_reg_53_NO_SHIFT_REG),
	.stall_out(rnode_4to53_bb5_var__u33_0_stall_out_reg_53_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u33_0_NO_SHIFT_REG),
	.data_out(rnode_4to53_bb5_var__u33_0_reg_53_NO_SHIFT_REG)
);

defparam rnode_4to53_bb5_var__u33_0_reg_53_fifo.DEPTH = 49;
defparam rnode_4to53_bb5_var__u33_0_reg_53_fifo.DATA_WIDTH = 64;
defparam rnode_4to53_bb5_var__u33_0_reg_53_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to53_bb5_var__u33_0_reg_53_fifo.IMPL = "shift_reg";

assign rnode_4to53_bb5_var__u33_0_reg_53_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u33_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to53_bb5_var__u33_0_NO_SHIFT_REG = rnode_4to53_bb5_var__u33_0_reg_53_NO_SHIFT_REG;
assign rnode_4to53_bb5_var__u33_0_stall_in_reg_53_NO_SHIFT_REG = 1'b0;
assign rnode_4to53_bb5_var__u33_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 51
//  * capacity = 51
 logic rnode_4to55_bb5_var__u34_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to55_bb5_var__u34_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to55_bb5_var__u34_0_NO_SHIFT_REG;
 logic rnode_4to55_bb5_var__u34_0_reg_55_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to55_bb5_var__u34_0_reg_55_NO_SHIFT_REG;
 logic rnode_4to55_bb5_var__u34_0_valid_out_reg_55_NO_SHIFT_REG;
 logic rnode_4to55_bb5_var__u34_0_stall_in_reg_55_NO_SHIFT_REG;
 logic rnode_4to55_bb5_var__u34_0_stall_out_reg_55_NO_SHIFT_REG;

acl_data_fifo rnode_4to55_bb5_var__u34_0_reg_55_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to55_bb5_var__u34_0_reg_55_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to55_bb5_var__u34_0_stall_in_reg_55_NO_SHIFT_REG),
	.valid_out(rnode_4to55_bb5_var__u34_0_valid_out_reg_55_NO_SHIFT_REG),
	.stall_out(rnode_4to55_bb5_var__u34_0_stall_out_reg_55_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u34_0_NO_SHIFT_REG),
	.data_out(rnode_4to55_bb5_var__u34_0_reg_55_NO_SHIFT_REG)
);

defparam rnode_4to55_bb5_var__u34_0_reg_55_fifo.DEPTH = 51;
defparam rnode_4to55_bb5_var__u34_0_reg_55_fifo.DATA_WIDTH = 64;
defparam rnode_4to55_bb5_var__u34_0_reg_55_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to55_bb5_var__u34_0_reg_55_fifo.IMPL = "shift_reg";

assign rnode_4to55_bb5_var__u34_0_reg_55_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u34_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to55_bb5_var__u34_0_NO_SHIFT_REG = rnode_4to55_bb5_var__u34_0_reg_55_NO_SHIFT_REG;
assign rnode_4to55_bb5_var__u34_0_stall_in_reg_55_NO_SHIFT_REG = 1'b0;
assign rnode_4to55_bb5_var__u34_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 53
//  * capacity = 53
 logic rnode_4to57_bb5_var__u35_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to57_bb5_var__u35_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to57_bb5_var__u35_0_NO_SHIFT_REG;
 logic rnode_4to57_bb5_var__u35_0_reg_57_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to57_bb5_var__u35_0_reg_57_NO_SHIFT_REG;
 logic rnode_4to57_bb5_var__u35_0_valid_out_reg_57_NO_SHIFT_REG;
 logic rnode_4to57_bb5_var__u35_0_stall_in_reg_57_NO_SHIFT_REG;
 logic rnode_4to57_bb5_var__u35_0_stall_out_reg_57_NO_SHIFT_REG;

acl_data_fifo rnode_4to57_bb5_var__u35_0_reg_57_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to57_bb5_var__u35_0_reg_57_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to57_bb5_var__u35_0_stall_in_reg_57_NO_SHIFT_REG),
	.valid_out(rnode_4to57_bb5_var__u35_0_valid_out_reg_57_NO_SHIFT_REG),
	.stall_out(rnode_4to57_bb5_var__u35_0_stall_out_reg_57_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_var__u35_0_NO_SHIFT_REG),
	.data_out(rnode_4to57_bb5_var__u35_0_reg_57_NO_SHIFT_REG)
);

defparam rnode_4to57_bb5_var__u35_0_reg_57_fifo.DEPTH = 53;
defparam rnode_4to57_bb5_var__u35_0_reg_57_fifo.DATA_WIDTH = 64;
defparam rnode_4to57_bb5_var__u35_0_reg_57_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to57_bb5_var__u35_0_reg_57_fifo.IMPL = "shift_reg";

assign rnode_4to57_bb5_var__u35_0_reg_57_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_var__u35_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to57_bb5_var__u35_0_NO_SHIFT_REG = rnode_4to57_bb5_var__u35_0_reg_57_NO_SHIFT_REG;
assign rnode_4to57_bb5_var__u35_0_stall_in_reg_57_NO_SHIFT_REG = 1'b0;
assign rnode_4to57_bb5_var__u35_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 55
//  * capacity = 55
 logic rnode_4to59_bb5_and_i_i_31_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to59_bb5_and_i_i_31_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to59_bb5_and_i_i_31_i_0_NO_SHIFT_REG;
 logic rnode_4to59_bb5_and_i_i_31_i_0_reg_59_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to59_bb5_and_i_i_31_i_0_reg_59_NO_SHIFT_REG;
 logic rnode_4to59_bb5_and_i_i_31_i_0_valid_out_reg_59_NO_SHIFT_REG;
 logic rnode_4to59_bb5_and_i_i_31_i_0_stall_in_reg_59_NO_SHIFT_REG;
 logic rnode_4to59_bb5_and_i_i_31_i_0_stall_out_reg_59_NO_SHIFT_REG;

acl_data_fifo rnode_4to59_bb5_and_i_i_31_i_0_reg_59_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to59_bb5_and_i_i_31_i_0_reg_59_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to59_bb5_and_i_i_31_i_0_stall_in_reg_59_NO_SHIFT_REG),
	.valid_out(rnode_4to59_bb5_and_i_i_31_i_0_valid_out_reg_59_NO_SHIFT_REG),
	.stall_out(rnode_4to59_bb5_and_i_i_31_i_0_stall_out_reg_59_NO_SHIFT_REG),
	.data_in(rnode_3to4_bb5_and_i_i_31_i_0_NO_SHIFT_REG),
	.data_out(rnode_4to59_bb5_and_i_i_31_i_0_reg_59_NO_SHIFT_REG)
);

defparam rnode_4to59_bb5_and_i_i_31_i_0_reg_59_fifo.DEPTH = 55;
defparam rnode_4to59_bb5_and_i_i_31_i_0_reg_59_fifo.DATA_WIDTH = 64;
defparam rnode_4to59_bb5_and_i_i_31_i_0_reg_59_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to59_bb5_and_i_i_31_i_0_reg_59_fifo.IMPL = "shift_reg";

assign rnode_4to59_bb5_and_i_i_31_i_0_reg_59_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_3to4_bb5_and_i_i_31_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to59_bb5_and_i_i_31_i_0_NO_SHIFT_REG = rnode_4to59_bb5_and_i_i_31_i_0_reg_59_NO_SHIFT_REG;
assign rnode_4to59_bb5_and_i_i_31_i_0_stall_in_reg_59_NO_SHIFT_REG = 1'b0;
assign rnode_4to59_bb5_and_i_i_31_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_not_and126_xor_or_stall_local;
wire local_bb5_not_and126_xor_or;

assign local_bb5_not_and126_xor_or = (local_bb5_and126_xor_or ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5_and126_xor_or_and_stall_local;
wire local_bb5_and126_xor_or_and;

assign local_bb5_and126_xor_or_and = (local_bb5_and126_xor_or & local_bb5_or125_xor);

// This section implements an unregistered operation.
// 
wire local_bb5_memcoalesce_null_shift_byte_en_1_stall_local;
wire [63:0] local_bb5_memcoalesce_null_shift_byte_en_1;

assign local_bb5_memcoalesce_null_shift_byte_en_1 = (local_bb5_memcoalesce_null_select_byte_en_1 << 64'h3C);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_2_i_stall_local;
wire [63:0] local_bb5_shl_i_i_2_i;

assign local_bb5_shl_i_i_2_i = (local_bb5_or_i_i_1_i << 64'h1);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb5_var__u9_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to6_bb5_var__u9_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_5to6_bb5_var__u9_0_NO_SHIFT_REG;
 logic rnode_5to6_bb5_var__u9_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_5to6_bb5_var__u9_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_var__u9_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_var__u9_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_var__u9_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb5_var__u9_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb5_var__u9_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb5_var__u9_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb5_var__u9_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb5_var__u9_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(rnode_4to5_bb5_var__u9_0_NO_SHIFT_REG),
	.data_out(rnode_5to6_bb5_var__u9_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb5_var__u9_0_reg_6_fifo.DEPTH = 1;
defparam rnode_5to6_bb5_var__u9_0_reg_6_fifo.DATA_WIDTH = 64;
defparam rnode_5to6_bb5_var__u9_0_reg_6_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_5to6_bb5_var__u9_0_reg_6_fifo.IMPL = "shift_reg";

assign rnode_5to6_bb5_var__u9_0_reg_6_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to5_bb5_var__u9_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_5to6_bb5_var__u9_0_NO_SHIFT_REG = rnode_5to6_bb5_var__u9_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb5_var__u9_0_stall_in_reg_6_NO_SHIFT_REG = 1'b0;
assign rnode_5to6_bb5_var__u9_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_7to8_bb5_var__u10_0_valid_out_NO_SHIFT_REG;
 logic rnode_7to8_bb5_var__u10_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_7to8_bb5_var__u10_0_NO_SHIFT_REG;
 logic rnode_7to8_bb5_var__u10_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_7to8_bb5_var__u10_0_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb5_var__u10_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb5_var__u10_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb5_var__u10_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_7to8_bb5_var__u10_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to8_bb5_var__u10_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to8_bb5_var__u10_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_7to8_bb5_var__u10_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_7to8_bb5_var__u10_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(rnode_4to7_bb5_var__u10_0_NO_SHIFT_REG),
	.data_out(rnode_7to8_bb5_var__u10_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_7to8_bb5_var__u10_0_reg_8_fifo.DEPTH = 1;
defparam rnode_7to8_bb5_var__u10_0_reg_8_fifo.DATA_WIDTH = 64;
defparam rnode_7to8_bb5_var__u10_0_reg_8_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_7to8_bb5_var__u10_0_reg_8_fifo.IMPL = "shift_reg";

assign rnode_7to8_bb5_var__u10_0_reg_8_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to7_bb5_var__u10_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_7to8_bb5_var__u10_0_NO_SHIFT_REG = rnode_7to8_bb5_var__u10_0_reg_8_NO_SHIFT_REG;
assign rnode_7to8_bb5_var__u10_0_stall_in_reg_8_NO_SHIFT_REG = 1'b0;
assign rnode_7to8_bb5_var__u10_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_9to10_bb5_var__u11_0_valid_out_NO_SHIFT_REG;
 logic rnode_9to10_bb5_var__u11_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_9to10_bb5_var__u11_0_NO_SHIFT_REG;
 logic rnode_9to10_bb5_var__u11_0_reg_10_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_9to10_bb5_var__u11_0_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb5_var__u11_0_valid_out_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb5_var__u11_0_stall_in_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb5_var__u11_0_stall_out_reg_10_NO_SHIFT_REG;

acl_data_fifo rnode_9to10_bb5_var__u11_0_reg_10_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_9to10_bb5_var__u11_0_reg_10_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_9to10_bb5_var__u11_0_stall_in_reg_10_NO_SHIFT_REG),
	.valid_out(rnode_9to10_bb5_var__u11_0_valid_out_reg_10_NO_SHIFT_REG),
	.stall_out(rnode_9to10_bb5_var__u11_0_stall_out_reg_10_NO_SHIFT_REG),
	.data_in(rnode_4to9_bb5_var__u11_0_NO_SHIFT_REG),
	.data_out(rnode_9to10_bb5_var__u11_0_reg_10_NO_SHIFT_REG)
);

defparam rnode_9to10_bb5_var__u11_0_reg_10_fifo.DEPTH = 1;
defparam rnode_9to10_bb5_var__u11_0_reg_10_fifo.DATA_WIDTH = 64;
defparam rnode_9to10_bb5_var__u11_0_reg_10_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_9to10_bb5_var__u11_0_reg_10_fifo.IMPL = "shift_reg";

assign rnode_9to10_bb5_var__u11_0_reg_10_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to9_bb5_var__u11_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_9to10_bb5_var__u11_0_NO_SHIFT_REG = rnode_9to10_bb5_var__u11_0_reg_10_NO_SHIFT_REG;
assign rnode_9to10_bb5_var__u11_0_stall_in_reg_10_NO_SHIFT_REG = 1'b0;
assign rnode_9to10_bb5_var__u11_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_11to12_bb5_var__u12_0_valid_out_NO_SHIFT_REG;
 logic rnode_11to12_bb5_var__u12_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_11to12_bb5_var__u12_0_NO_SHIFT_REG;
 logic rnode_11to12_bb5_var__u12_0_reg_12_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_11to12_bb5_var__u12_0_reg_12_NO_SHIFT_REG;
 logic rnode_11to12_bb5_var__u12_0_valid_out_reg_12_NO_SHIFT_REG;
 logic rnode_11to12_bb5_var__u12_0_stall_in_reg_12_NO_SHIFT_REG;
 logic rnode_11to12_bb5_var__u12_0_stall_out_reg_12_NO_SHIFT_REG;

acl_data_fifo rnode_11to12_bb5_var__u12_0_reg_12_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_11to12_bb5_var__u12_0_reg_12_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_11to12_bb5_var__u12_0_stall_in_reg_12_NO_SHIFT_REG),
	.valid_out(rnode_11to12_bb5_var__u12_0_valid_out_reg_12_NO_SHIFT_REG),
	.stall_out(rnode_11to12_bb5_var__u12_0_stall_out_reg_12_NO_SHIFT_REG),
	.data_in(rnode_4to11_bb5_var__u12_0_NO_SHIFT_REG),
	.data_out(rnode_11to12_bb5_var__u12_0_reg_12_NO_SHIFT_REG)
);

defparam rnode_11to12_bb5_var__u12_0_reg_12_fifo.DEPTH = 1;
defparam rnode_11to12_bb5_var__u12_0_reg_12_fifo.DATA_WIDTH = 64;
defparam rnode_11to12_bb5_var__u12_0_reg_12_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_11to12_bb5_var__u12_0_reg_12_fifo.IMPL = "shift_reg";

assign rnode_11to12_bb5_var__u12_0_reg_12_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to11_bb5_var__u12_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_11to12_bb5_var__u12_0_NO_SHIFT_REG = rnode_11to12_bb5_var__u12_0_reg_12_NO_SHIFT_REG;
assign rnode_11to12_bb5_var__u12_0_stall_in_reg_12_NO_SHIFT_REG = 1'b0;
assign rnode_11to12_bb5_var__u12_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_13to14_bb5_var__u13_0_valid_out_NO_SHIFT_REG;
 logic rnode_13to14_bb5_var__u13_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_13to14_bb5_var__u13_0_NO_SHIFT_REG;
 logic rnode_13to14_bb5_var__u13_0_reg_14_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_13to14_bb5_var__u13_0_reg_14_NO_SHIFT_REG;
 logic rnode_13to14_bb5_var__u13_0_valid_out_reg_14_NO_SHIFT_REG;
 logic rnode_13to14_bb5_var__u13_0_stall_in_reg_14_NO_SHIFT_REG;
 logic rnode_13to14_bb5_var__u13_0_stall_out_reg_14_NO_SHIFT_REG;

acl_data_fifo rnode_13to14_bb5_var__u13_0_reg_14_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_13to14_bb5_var__u13_0_reg_14_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_13to14_bb5_var__u13_0_stall_in_reg_14_NO_SHIFT_REG),
	.valid_out(rnode_13to14_bb5_var__u13_0_valid_out_reg_14_NO_SHIFT_REG),
	.stall_out(rnode_13to14_bb5_var__u13_0_stall_out_reg_14_NO_SHIFT_REG),
	.data_in(rnode_4to13_bb5_var__u13_0_NO_SHIFT_REG),
	.data_out(rnode_13to14_bb5_var__u13_0_reg_14_NO_SHIFT_REG)
);

defparam rnode_13to14_bb5_var__u13_0_reg_14_fifo.DEPTH = 1;
defparam rnode_13to14_bb5_var__u13_0_reg_14_fifo.DATA_WIDTH = 64;
defparam rnode_13to14_bb5_var__u13_0_reg_14_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_13to14_bb5_var__u13_0_reg_14_fifo.IMPL = "shift_reg";

assign rnode_13to14_bb5_var__u13_0_reg_14_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to13_bb5_var__u13_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_13to14_bb5_var__u13_0_NO_SHIFT_REG = rnode_13to14_bb5_var__u13_0_reg_14_NO_SHIFT_REG;
assign rnode_13to14_bb5_var__u13_0_stall_in_reg_14_NO_SHIFT_REG = 1'b0;
assign rnode_13to14_bb5_var__u13_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_15to16_bb5_var__u14_0_valid_out_NO_SHIFT_REG;
 logic rnode_15to16_bb5_var__u14_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_15to16_bb5_var__u14_0_NO_SHIFT_REG;
 logic rnode_15to16_bb5_var__u14_0_reg_16_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_15to16_bb5_var__u14_0_reg_16_NO_SHIFT_REG;
 logic rnode_15to16_bb5_var__u14_0_valid_out_reg_16_NO_SHIFT_REG;
 logic rnode_15to16_bb5_var__u14_0_stall_in_reg_16_NO_SHIFT_REG;
 logic rnode_15to16_bb5_var__u14_0_stall_out_reg_16_NO_SHIFT_REG;

acl_data_fifo rnode_15to16_bb5_var__u14_0_reg_16_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_15to16_bb5_var__u14_0_reg_16_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_15to16_bb5_var__u14_0_stall_in_reg_16_NO_SHIFT_REG),
	.valid_out(rnode_15to16_bb5_var__u14_0_valid_out_reg_16_NO_SHIFT_REG),
	.stall_out(rnode_15to16_bb5_var__u14_0_stall_out_reg_16_NO_SHIFT_REG),
	.data_in(rnode_4to15_bb5_var__u14_0_NO_SHIFT_REG),
	.data_out(rnode_15to16_bb5_var__u14_0_reg_16_NO_SHIFT_REG)
);

defparam rnode_15to16_bb5_var__u14_0_reg_16_fifo.DEPTH = 1;
defparam rnode_15to16_bb5_var__u14_0_reg_16_fifo.DATA_WIDTH = 64;
defparam rnode_15to16_bb5_var__u14_0_reg_16_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_15to16_bb5_var__u14_0_reg_16_fifo.IMPL = "shift_reg";

assign rnode_15to16_bb5_var__u14_0_reg_16_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to15_bb5_var__u14_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_15to16_bb5_var__u14_0_NO_SHIFT_REG = rnode_15to16_bb5_var__u14_0_reg_16_NO_SHIFT_REG;
assign rnode_15to16_bb5_var__u14_0_stall_in_reg_16_NO_SHIFT_REG = 1'b0;
assign rnode_15to16_bb5_var__u14_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_17to18_bb5_var__u15_0_valid_out_NO_SHIFT_REG;
 logic rnode_17to18_bb5_var__u15_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_17to18_bb5_var__u15_0_NO_SHIFT_REG;
 logic rnode_17to18_bb5_var__u15_0_reg_18_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_17to18_bb5_var__u15_0_reg_18_NO_SHIFT_REG;
 logic rnode_17to18_bb5_var__u15_0_valid_out_reg_18_NO_SHIFT_REG;
 logic rnode_17to18_bb5_var__u15_0_stall_in_reg_18_NO_SHIFT_REG;
 logic rnode_17to18_bb5_var__u15_0_stall_out_reg_18_NO_SHIFT_REG;

acl_data_fifo rnode_17to18_bb5_var__u15_0_reg_18_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_17to18_bb5_var__u15_0_reg_18_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_17to18_bb5_var__u15_0_stall_in_reg_18_NO_SHIFT_REG),
	.valid_out(rnode_17to18_bb5_var__u15_0_valid_out_reg_18_NO_SHIFT_REG),
	.stall_out(rnode_17to18_bb5_var__u15_0_stall_out_reg_18_NO_SHIFT_REG),
	.data_in(rnode_4to17_bb5_var__u15_0_NO_SHIFT_REG),
	.data_out(rnode_17to18_bb5_var__u15_0_reg_18_NO_SHIFT_REG)
);

defparam rnode_17to18_bb5_var__u15_0_reg_18_fifo.DEPTH = 1;
defparam rnode_17to18_bb5_var__u15_0_reg_18_fifo.DATA_WIDTH = 64;
defparam rnode_17to18_bb5_var__u15_0_reg_18_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_17to18_bb5_var__u15_0_reg_18_fifo.IMPL = "shift_reg";

assign rnode_17to18_bb5_var__u15_0_reg_18_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to17_bb5_var__u15_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_17to18_bb5_var__u15_0_NO_SHIFT_REG = rnode_17to18_bb5_var__u15_0_reg_18_NO_SHIFT_REG;
assign rnode_17to18_bb5_var__u15_0_stall_in_reg_18_NO_SHIFT_REG = 1'b0;
assign rnode_17to18_bb5_var__u15_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_19to20_bb5_var__u16_0_valid_out_NO_SHIFT_REG;
 logic rnode_19to20_bb5_var__u16_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_19to20_bb5_var__u16_0_NO_SHIFT_REG;
 logic rnode_19to20_bb5_var__u16_0_reg_20_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_19to20_bb5_var__u16_0_reg_20_NO_SHIFT_REG;
 logic rnode_19to20_bb5_var__u16_0_valid_out_reg_20_NO_SHIFT_REG;
 logic rnode_19to20_bb5_var__u16_0_stall_in_reg_20_NO_SHIFT_REG;
 logic rnode_19to20_bb5_var__u16_0_stall_out_reg_20_NO_SHIFT_REG;

acl_data_fifo rnode_19to20_bb5_var__u16_0_reg_20_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_19to20_bb5_var__u16_0_reg_20_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_19to20_bb5_var__u16_0_stall_in_reg_20_NO_SHIFT_REG),
	.valid_out(rnode_19to20_bb5_var__u16_0_valid_out_reg_20_NO_SHIFT_REG),
	.stall_out(rnode_19to20_bb5_var__u16_0_stall_out_reg_20_NO_SHIFT_REG),
	.data_in(rnode_4to19_bb5_var__u16_0_NO_SHIFT_REG),
	.data_out(rnode_19to20_bb5_var__u16_0_reg_20_NO_SHIFT_REG)
);

defparam rnode_19to20_bb5_var__u16_0_reg_20_fifo.DEPTH = 1;
defparam rnode_19to20_bb5_var__u16_0_reg_20_fifo.DATA_WIDTH = 64;
defparam rnode_19to20_bb5_var__u16_0_reg_20_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_19to20_bb5_var__u16_0_reg_20_fifo.IMPL = "shift_reg";

assign rnode_19to20_bb5_var__u16_0_reg_20_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to19_bb5_var__u16_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_19to20_bb5_var__u16_0_NO_SHIFT_REG = rnode_19to20_bb5_var__u16_0_reg_20_NO_SHIFT_REG;
assign rnode_19to20_bb5_var__u16_0_stall_in_reg_20_NO_SHIFT_REG = 1'b0;
assign rnode_19to20_bb5_var__u16_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_21to22_bb5_var__u17_0_valid_out_NO_SHIFT_REG;
 logic rnode_21to22_bb5_var__u17_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_21to22_bb5_var__u17_0_NO_SHIFT_REG;
 logic rnode_21to22_bb5_var__u17_0_reg_22_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_21to22_bb5_var__u17_0_reg_22_NO_SHIFT_REG;
 logic rnode_21to22_bb5_var__u17_0_valid_out_reg_22_NO_SHIFT_REG;
 logic rnode_21to22_bb5_var__u17_0_stall_in_reg_22_NO_SHIFT_REG;
 logic rnode_21to22_bb5_var__u17_0_stall_out_reg_22_NO_SHIFT_REG;

acl_data_fifo rnode_21to22_bb5_var__u17_0_reg_22_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_21to22_bb5_var__u17_0_reg_22_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_21to22_bb5_var__u17_0_stall_in_reg_22_NO_SHIFT_REG),
	.valid_out(rnode_21to22_bb5_var__u17_0_valid_out_reg_22_NO_SHIFT_REG),
	.stall_out(rnode_21to22_bb5_var__u17_0_stall_out_reg_22_NO_SHIFT_REG),
	.data_in(rnode_4to21_bb5_var__u17_0_NO_SHIFT_REG),
	.data_out(rnode_21to22_bb5_var__u17_0_reg_22_NO_SHIFT_REG)
);

defparam rnode_21to22_bb5_var__u17_0_reg_22_fifo.DEPTH = 1;
defparam rnode_21to22_bb5_var__u17_0_reg_22_fifo.DATA_WIDTH = 64;
defparam rnode_21to22_bb5_var__u17_0_reg_22_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_21to22_bb5_var__u17_0_reg_22_fifo.IMPL = "shift_reg";

assign rnode_21to22_bb5_var__u17_0_reg_22_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to21_bb5_var__u17_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_21to22_bb5_var__u17_0_NO_SHIFT_REG = rnode_21to22_bb5_var__u17_0_reg_22_NO_SHIFT_REG;
assign rnode_21to22_bb5_var__u17_0_stall_in_reg_22_NO_SHIFT_REG = 1'b0;
assign rnode_21to22_bb5_var__u17_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_23to24_bb5_var__u18_0_valid_out_NO_SHIFT_REG;
 logic rnode_23to24_bb5_var__u18_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_23to24_bb5_var__u18_0_NO_SHIFT_REG;
 logic rnode_23to24_bb5_var__u18_0_reg_24_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_23to24_bb5_var__u18_0_reg_24_NO_SHIFT_REG;
 logic rnode_23to24_bb5_var__u18_0_valid_out_reg_24_NO_SHIFT_REG;
 logic rnode_23to24_bb5_var__u18_0_stall_in_reg_24_NO_SHIFT_REG;
 logic rnode_23to24_bb5_var__u18_0_stall_out_reg_24_NO_SHIFT_REG;

acl_data_fifo rnode_23to24_bb5_var__u18_0_reg_24_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_23to24_bb5_var__u18_0_reg_24_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_23to24_bb5_var__u18_0_stall_in_reg_24_NO_SHIFT_REG),
	.valid_out(rnode_23to24_bb5_var__u18_0_valid_out_reg_24_NO_SHIFT_REG),
	.stall_out(rnode_23to24_bb5_var__u18_0_stall_out_reg_24_NO_SHIFT_REG),
	.data_in(rnode_4to23_bb5_var__u18_0_NO_SHIFT_REG),
	.data_out(rnode_23to24_bb5_var__u18_0_reg_24_NO_SHIFT_REG)
);

defparam rnode_23to24_bb5_var__u18_0_reg_24_fifo.DEPTH = 1;
defparam rnode_23to24_bb5_var__u18_0_reg_24_fifo.DATA_WIDTH = 64;
defparam rnode_23to24_bb5_var__u18_0_reg_24_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_23to24_bb5_var__u18_0_reg_24_fifo.IMPL = "shift_reg";

assign rnode_23to24_bb5_var__u18_0_reg_24_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to23_bb5_var__u18_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_23to24_bb5_var__u18_0_NO_SHIFT_REG = rnode_23to24_bb5_var__u18_0_reg_24_NO_SHIFT_REG;
assign rnode_23to24_bb5_var__u18_0_stall_in_reg_24_NO_SHIFT_REG = 1'b0;
assign rnode_23to24_bb5_var__u18_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_25to26_bb5_var__u19_0_valid_out_NO_SHIFT_REG;
 logic rnode_25to26_bb5_var__u19_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_25to26_bb5_var__u19_0_NO_SHIFT_REG;
 logic rnode_25to26_bb5_var__u19_0_reg_26_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_25to26_bb5_var__u19_0_reg_26_NO_SHIFT_REG;
 logic rnode_25to26_bb5_var__u19_0_valid_out_reg_26_NO_SHIFT_REG;
 logic rnode_25to26_bb5_var__u19_0_stall_in_reg_26_NO_SHIFT_REG;
 logic rnode_25to26_bb5_var__u19_0_stall_out_reg_26_NO_SHIFT_REG;

acl_data_fifo rnode_25to26_bb5_var__u19_0_reg_26_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_25to26_bb5_var__u19_0_reg_26_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_25to26_bb5_var__u19_0_stall_in_reg_26_NO_SHIFT_REG),
	.valid_out(rnode_25to26_bb5_var__u19_0_valid_out_reg_26_NO_SHIFT_REG),
	.stall_out(rnode_25to26_bb5_var__u19_0_stall_out_reg_26_NO_SHIFT_REG),
	.data_in(rnode_4to25_bb5_var__u19_0_NO_SHIFT_REG),
	.data_out(rnode_25to26_bb5_var__u19_0_reg_26_NO_SHIFT_REG)
);

defparam rnode_25to26_bb5_var__u19_0_reg_26_fifo.DEPTH = 1;
defparam rnode_25to26_bb5_var__u19_0_reg_26_fifo.DATA_WIDTH = 64;
defparam rnode_25to26_bb5_var__u19_0_reg_26_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_25to26_bb5_var__u19_0_reg_26_fifo.IMPL = "shift_reg";

assign rnode_25to26_bb5_var__u19_0_reg_26_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to25_bb5_var__u19_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_25to26_bb5_var__u19_0_NO_SHIFT_REG = rnode_25to26_bb5_var__u19_0_reg_26_NO_SHIFT_REG;
assign rnode_25to26_bb5_var__u19_0_stall_in_reg_26_NO_SHIFT_REG = 1'b0;
assign rnode_25to26_bb5_var__u19_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_27to28_bb5_var__u20_0_valid_out_NO_SHIFT_REG;
 logic rnode_27to28_bb5_var__u20_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_27to28_bb5_var__u20_0_NO_SHIFT_REG;
 logic rnode_27to28_bb5_var__u20_0_reg_28_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_27to28_bb5_var__u20_0_reg_28_NO_SHIFT_REG;
 logic rnode_27to28_bb5_var__u20_0_valid_out_reg_28_NO_SHIFT_REG;
 logic rnode_27to28_bb5_var__u20_0_stall_in_reg_28_NO_SHIFT_REG;
 logic rnode_27to28_bb5_var__u20_0_stall_out_reg_28_NO_SHIFT_REG;

acl_data_fifo rnode_27to28_bb5_var__u20_0_reg_28_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_27to28_bb5_var__u20_0_reg_28_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_27to28_bb5_var__u20_0_stall_in_reg_28_NO_SHIFT_REG),
	.valid_out(rnode_27to28_bb5_var__u20_0_valid_out_reg_28_NO_SHIFT_REG),
	.stall_out(rnode_27to28_bb5_var__u20_0_stall_out_reg_28_NO_SHIFT_REG),
	.data_in(rnode_4to27_bb5_var__u20_0_NO_SHIFT_REG),
	.data_out(rnode_27to28_bb5_var__u20_0_reg_28_NO_SHIFT_REG)
);

defparam rnode_27to28_bb5_var__u20_0_reg_28_fifo.DEPTH = 1;
defparam rnode_27to28_bb5_var__u20_0_reg_28_fifo.DATA_WIDTH = 64;
defparam rnode_27to28_bb5_var__u20_0_reg_28_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_27to28_bb5_var__u20_0_reg_28_fifo.IMPL = "shift_reg";

assign rnode_27to28_bb5_var__u20_0_reg_28_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to27_bb5_var__u20_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_27to28_bb5_var__u20_0_NO_SHIFT_REG = rnode_27to28_bb5_var__u20_0_reg_28_NO_SHIFT_REG;
assign rnode_27to28_bb5_var__u20_0_stall_in_reg_28_NO_SHIFT_REG = 1'b0;
assign rnode_27to28_bb5_var__u20_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_29to30_bb5_var__u21_0_valid_out_NO_SHIFT_REG;
 logic rnode_29to30_bb5_var__u21_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_29to30_bb5_var__u21_0_NO_SHIFT_REG;
 logic rnode_29to30_bb5_var__u21_0_reg_30_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_29to30_bb5_var__u21_0_reg_30_NO_SHIFT_REG;
 logic rnode_29to30_bb5_var__u21_0_valid_out_reg_30_NO_SHIFT_REG;
 logic rnode_29to30_bb5_var__u21_0_stall_in_reg_30_NO_SHIFT_REG;
 logic rnode_29to30_bb5_var__u21_0_stall_out_reg_30_NO_SHIFT_REG;

acl_data_fifo rnode_29to30_bb5_var__u21_0_reg_30_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_29to30_bb5_var__u21_0_reg_30_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_29to30_bb5_var__u21_0_stall_in_reg_30_NO_SHIFT_REG),
	.valid_out(rnode_29to30_bb5_var__u21_0_valid_out_reg_30_NO_SHIFT_REG),
	.stall_out(rnode_29to30_bb5_var__u21_0_stall_out_reg_30_NO_SHIFT_REG),
	.data_in(rnode_4to29_bb5_var__u21_0_NO_SHIFT_REG),
	.data_out(rnode_29to30_bb5_var__u21_0_reg_30_NO_SHIFT_REG)
);

defparam rnode_29to30_bb5_var__u21_0_reg_30_fifo.DEPTH = 1;
defparam rnode_29to30_bb5_var__u21_0_reg_30_fifo.DATA_WIDTH = 64;
defparam rnode_29to30_bb5_var__u21_0_reg_30_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_29to30_bb5_var__u21_0_reg_30_fifo.IMPL = "shift_reg";

assign rnode_29to30_bb5_var__u21_0_reg_30_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to29_bb5_var__u21_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_29to30_bb5_var__u21_0_NO_SHIFT_REG = rnode_29to30_bb5_var__u21_0_reg_30_NO_SHIFT_REG;
assign rnode_29to30_bb5_var__u21_0_stall_in_reg_30_NO_SHIFT_REG = 1'b0;
assign rnode_29to30_bb5_var__u21_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_31to32_bb5_var__u22_0_valid_out_NO_SHIFT_REG;
 logic rnode_31to32_bb5_var__u22_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_31to32_bb5_var__u22_0_NO_SHIFT_REG;
 logic rnode_31to32_bb5_var__u22_0_reg_32_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_31to32_bb5_var__u22_0_reg_32_NO_SHIFT_REG;
 logic rnode_31to32_bb5_var__u22_0_valid_out_reg_32_NO_SHIFT_REG;
 logic rnode_31to32_bb5_var__u22_0_stall_in_reg_32_NO_SHIFT_REG;
 logic rnode_31to32_bb5_var__u22_0_stall_out_reg_32_NO_SHIFT_REG;

acl_data_fifo rnode_31to32_bb5_var__u22_0_reg_32_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_31to32_bb5_var__u22_0_reg_32_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_31to32_bb5_var__u22_0_stall_in_reg_32_NO_SHIFT_REG),
	.valid_out(rnode_31to32_bb5_var__u22_0_valid_out_reg_32_NO_SHIFT_REG),
	.stall_out(rnode_31to32_bb5_var__u22_0_stall_out_reg_32_NO_SHIFT_REG),
	.data_in(rnode_4to31_bb5_var__u22_0_NO_SHIFT_REG),
	.data_out(rnode_31to32_bb5_var__u22_0_reg_32_NO_SHIFT_REG)
);

defparam rnode_31to32_bb5_var__u22_0_reg_32_fifo.DEPTH = 1;
defparam rnode_31to32_bb5_var__u22_0_reg_32_fifo.DATA_WIDTH = 64;
defparam rnode_31to32_bb5_var__u22_0_reg_32_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_31to32_bb5_var__u22_0_reg_32_fifo.IMPL = "shift_reg";

assign rnode_31to32_bb5_var__u22_0_reg_32_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to31_bb5_var__u22_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_31to32_bb5_var__u22_0_NO_SHIFT_REG = rnode_31to32_bb5_var__u22_0_reg_32_NO_SHIFT_REG;
assign rnode_31to32_bb5_var__u22_0_stall_in_reg_32_NO_SHIFT_REG = 1'b0;
assign rnode_31to32_bb5_var__u22_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_33to34_bb5_var__u23_0_valid_out_NO_SHIFT_REG;
 logic rnode_33to34_bb5_var__u23_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_33to34_bb5_var__u23_0_NO_SHIFT_REG;
 logic rnode_33to34_bb5_var__u23_0_reg_34_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_33to34_bb5_var__u23_0_reg_34_NO_SHIFT_REG;
 logic rnode_33to34_bb5_var__u23_0_valid_out_reg_34_NO_SHIFT_REG;
 logic rnode_33to34_bb5_var__u23_0_stall_in_reg_34_NO_SHIFT_REG;
 logic rnode_33to34_bb5_var__u23_0_stall_out_reg_34_NO_SHIFT_REG;

acl_data_fifo rnode_33to34_bb5_var__u23_0_reg_34_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_33to34_bb5_var__u23_0_reg_34_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_33to34_bb5_var__u23_0_stall_in_reg_34_NO_SHIFT_REG),
	.valid_out(rnode_33to34_bb5_var__u23_0_valid_out_reg_34_NO_SHIFT_REG),
	.stall_out(rnode_33to34_bb5_var__u23_0_stall_out_reg_34_NO_SHIFT_REG),
	.data_in(rnode_4to33_bb5_var__u23_0_NO_SHIFT_REG),
	.data_out(rnode_33to34_bb5_var__u23_0_reg_34_NO_SHIFT_REG)
);

defparam rnode_33to34_bb5_var__u23_0_reg_34_fifo.DEPTH = 1;
defparam rnode_33to34_bb5_var__u23_0_reg_34_fifo.DATA_WIDTH = 64;
defparam rnode_33to34_bb5_var__u23_0_reg_34_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_33to34_bb5_var__u23_0_reg_34_fifo.IMPL = "shift_reg";

assign rnode_33to34_bb5_var__u23_0_reg_34_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to33_bb5_var__u23_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_33to34_bb5_var__u23_0_NO_SHIFT_REG = rnode_33to34_bb5_var__u23_0_reg_34_NO_SHIFT_REG;
assign rnode_33to34_bb5_var__u23_0_stall_in_reg_34_NO_SHIFT_REG = 1'b0;
assign rnode_33to34_bb5_var__u23_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_35to36_bb5_var__u24_0_valid_out_NO_SHIFT_REG;
 logic rnode_35to36_bb5_var__u24_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_35to36_bb5_var__u24_0_NO_SHIFT_REG;
 logic rnode_35to36_bb5_var__u24_0_reg_36_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_35to36_bb5_var__u24_0_reg_36_NO_SHIFT_REG;
 logic rnode_35to36_bb5_var__u24_0_valid_out_reg_36_NO_SHIFT_REG;
 logic rnode_35to36_bb5_var__u24_0_stall_in_reg_36_NO_SHIFT_REG;
 logic rnode_35to36_bb5_var__u24_0_stall_out_reg_36_NO_SHIFT_REG;

acl_data_fifo rnode_35to36_bb5_var__u24_0_reg_36_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_35to36_bb5_var__u24_0_reg_36_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_35to36_bb5_var__u24_0_stall_in_reg_36_NO_SHIFT_REG),
	.valid_out(rnode_35to36_bb5_var__u24_0_valid_out_reg_36_NO_SHIFT_REG),
	.stall_out(rnode_35to36_bb5_var__u24_0_stall_out_reg_36_NO_SHIFT_REG),
	.data_in(rnode_4to35_bb5_var__u24_0_NO_SHIFT_REG),
	.data_out(rnode_35to36_bb5_var__u24_0_reg_36_NO_SHIFT_REG)
);

defparam rnode_35to36_bb5_var__u24_0_reg_36_fifo.DEPTH = 1;
defparam rnode_35to36_bb5_var__u24_0_reg_36_fifo.DATA_WIDTH = 64;
defparam rnode_35to36_bb5_var__u24_0_reg_36_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_35to36_bb5_var__u24_0_reg_36_fifo.IMPL = "shift_reg";

assign rnode_35to36_bb5_var__u24_0_reg_36_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to35_bb5_var__u24_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_35to36_bb5_var__u24_0_NO_SHIFT_REG = rnode_35to36_bb5_var__u24_0_reg_36_NO_SHIFT_REG;
assign rnode_35to36_bb5_var__u24_0_stall_in_reg_36_NO_SHIFT_REG = 1'b0;
assign rnode_35to36_bb5_var__u24_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_37to38_bb5_var__u25_0_valid_out_NO_SHIFT_REG;
 logic rnode_37to38_bb5_var__u25_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_37to38_bb5_var__u25_0_NO_SHIFT_REG;
 logic rnode_37to38_bb5_var__u25_0_reg_38_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_37to38_bb5_var__u25_0_reg_38_NO_SHIFT_REG;
 logic rnode_37to38_bb5_var__u25_0_valid_out_reg_38_NO_SHIFT_REG;
 logic rnode_37to38_bb5_var__u25_0_stall_in_reg_38_NO_SHIFT_REG;
 logic rnode_37to38_bb5_var__u25_0_stall_out_reg_38_NO_SHIFT_REG;

acl_data_fifo rnode_37to38_bb5_var__u25_0_reg_38_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_37to38_bb5_var__u25_0_reg_38_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_37to38_bb5_var__u25_0_stall_in_reg_38_NO_SHIFT_REG),
	.valid_out(rnode_37to38_bb5_var__u25_0_valid_out_reg_38_NO_SHIFT_REG),
	.stall_out(rnode_37to38_bb5_var__u25_0_stall_out_reg_38_NO_SHIFT_REG),
	.data_in(rnode_4to37_bb5_var__u25_0_NO_SHIFT_REG),
	.data_out(rnode_37to38_bb5_var__u25_0_reg_38_NO_SHIFT_REG)
);

defparam rnode_37to38_bb5_var__u25_0_reg_38_fifo.DEPTH = 1;
defparam rnode_37to38_bb5_var__u25_0_reg_38_fifo.DATA_WIDTH = 64;
defparam rnode_37to38_bb5_var__u25_0_reg_38_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_37to38_bb5_var__u25_0_reg_38_fifo.IMPL = "shift_reg";

assign rnode_37to38_bb5_var__u25_0_reg_38_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to37_bb5_var__u25_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_37to38_bb5_var__u25_0_NO_SHIFT_REG = rnode_37to38_bb5_var__u25_0_reg_38_NO_SHIFT_REG;
assign rnode_37to38_bb5_var__u25_0_stall_in_reg_38_NO_SHIFT_REG = 1'b0;
assign rnode_37to38_bb5_var__u25_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_39to40_bb5_var__u26_0_valid_out_NO_SHIFT_REG;
 logic rnode_39to40_bb5_var__u26_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_39to40_bb5_var__u26_0_NO_SHIFT_REG;
 logic rnode_39to40_bb5_var__u26_0_reg_40_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_39to40_bb5_var__u26_0_reg_40_NO_SHIFT_REG;
 logic rnode_39to40_bb5_var__u26_0_valid_out_reg_40_NO_SHIFT_REG;
 logic rnode_39to40_bb5_var__u26_0_stall_in_reg_40_NO_SHIFT_REG;
 logic rnode_39to40_bb5_var__u26_0_stall_out_reg_40_NO_SHIFT_REG;

acl_data_fifo rnode_39to40_bb5_var__u26_0_reg_40_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_39to40_bb5_var__u26_0_reg_40_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_39to40_bb5_var__u26_0_stall_in_reg_40_NO_SHIFT_REG),
	.valid_out(rnode_39to40_bb5_var__u26_0_valid_out_reg_40_NO_SHIFT_REG),
	.stall_out(rnode_39to40_bb5_var__u26_0_stall_out_reg_40_NO_SHIFT_REG),
	.data_in(rnode_4to39_bb5_var__u26_0_NO_SHIFT_REG),
	.data_out(rnode_39to40_bb5_var__u26_0_reg_40_NO_SHIFT_REG)
);

defparam rnode_39to40_bb5_var__u26_0_reg_40_fifo.DEPTH = 1;
defparam rnode_39to40_bb5_var__u26_0_reg_40_fifo.DATA_WIDTH = 64;
defparam rnode_39to40_bb5_var__u26_0_reg_40_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_39to40_bb5_var__u26_0_reg_40_fifo.IMPL = "shift_reg";

assign rnode_39to40_bb5_var__u26_0_reg_40_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to39_bb5_var__u26_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_39to40_bb5_var__u26_0_NO_SHIFT_REG = rnode_39to40_bb5_var__u26_0_reg_40_NO_SHIFT_REG;
assign rnode_39to40_bb5_var__u26_0_stall_in_reg_40_NO_SHIFT_REG = 1'b0;
assign rnode_39to40_bb5_var__u26_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_41to42_bb5_var__u27_0_valid_out_NO_SHIFT_REG;
 logic rnode_41to42_bb5_var__u27_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_41to42_bb5_var__u27_0_NO_SHIFT_REG;
 logic rnode_41to42_bb5_var__u27_0_reg_42_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_41to42_bb5_var__u27_0_reg_42_NO_SHIFT_REG;
 logic rnode_41to42_bb5_var__u27_0_valid_out_reg_42_NO_SHIFT_REG;
 logic rnode_41to42_bb5_var__u27_0_stall_in_reg_42_NO_SHIFT_REG;
 logic rnode_41to42_bb5_var__u27_0_stall_out_reg_42_NO_SHIFT_REG;

acl_data_fifo rnode_41to42_bb5_var__u27_0_reg_42_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_41to42_bb5_var__u27_0_reg_42_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_41to42_bb5_var__u27_0_stall_in_reg_42_NO_SHIFT_REG),
	.valid_out(rnode_41to42_bb5_var__u27_0_valid_out_reg_42_NO_SHIFT_REG),
	.stall_out(rnode_41to42_bb5_var__u27_0_stall_out_reg_42_NO_SHIFT_REG),
	.data_in(rnode_4to41_bb5_var__u27_0_NO_SHIFT_REG),
	.data_out(rnode_41to42_bb5_var__u27_0_reg_42_NO_SHIFT_REG)
);

defparam rnode_41to42_bb5_var__u27_0_reg_42_fifo.DEPTH = 1;
defparam rnode_41to42_bb5_var__u27_0_reg_42_fifo.DATA_WIDTH = 64;
defparam rnode_41to42_bb5_var__u27_0_reg_42_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_41to42_bb5_var__u27_0_reg_42_fifo.IMPL = "shift_reg";

assign rnode_41to42_bb5_var__u27_0_reg_42_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to41_bb5_var__u27_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_41to42_bb5_var__u27_0_NO_SHIFT_REG = rnode_41to42_bb5_var__u27_0_reg_42_NO_SHIFT_REG;
assign rnode_41to42_bb5_var__u27_0_stall_in_reg_42_NO_SHIFT_REG = 1'b0;
assign rnode_41to42_bb5_var__u27_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_43to44_bb5_var__u28_0_valid_out_NO_SHIFT_REG;
 logic rnode_43to44_bb5_var__u28_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_43to44_bb5_var__u28_0_NO_SHIFT_REG;
 logic rnode_43to44_bb5_var__u28_0_reg_44_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_43to44_bb5_var__u28_0_reg_44_NO_SHIFT_REG;
 logic rnode_43to44_bb5_var__u28_0_valid_out_reg_44_NO_SHIFT_REG;
 logic rnode_43to44_bb5_var__u28_0_stall_in_reg_44_NO_SHIFT_REG;
 logic rnode_43to44_bb5_var__u28_0_stall_out_reg_44_NO_SHIFT_REG;

acl_data_fifo rnode_43to44_bb5_var__u28_0_reg_44_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_43to44_bb5_var__u28_0_reg_44_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_43to44_bb5_var__u28_0_stall_in_reg_44_NO_SHIFT_REG),
	.valid_out(rnode_43to44_bb5_var__u28_0_valid_out_reg_44_NO_SHIFT_REG),
	.stall_out(rnode_43to44_bb5_var__u28_0_stall_out_reg_44_NO_SHIFT_REG),
	.data_in(rnode_4to43_bb5_var__u28_0_NO_SHIFT_REG),
	.data_out(rnode_43to44_bb5_var__u28_0_reg_44_NO_SHIFT_REG)
);

defparam rnode_43to44_bb5_var__u28_0_reg_44_fifo.DEPTH = 1;
defparam rnode_43to44_bb5_var__u28_0_reg_44_fifo.DATA_WIDTH = 64;
defparam rnode_43to44_bb5_var__u28_0_reg_44_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_43to44_bb5_var__u28_0_reg_44_fifo.IMPL = "shift_reg";

assign rnode_43to44_bb5_var__u28_0_reg_44_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to43_bb5_var__u28_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_43to44_bb5_var__u28_0_NO_SHIFT_REG = rnode_43to44_bb5_var__u28_0_reg_44_NO_SHIFT_REG;
assign rnode_43to44_bb5_var__u28_0_stall_in_reg_44_NO_SHIFT_REG = 1'b0;
assign rnode_43to44_bb5_var__u28_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_45to46_bb5_var__u29_0_valid_out_NO_SHIFT_REG;
 logic rnode_45to46_bb5_var__u29_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_45to46_bb5_var__u29_0_NO_SHIFT_REG;
 logic rnode_45to46_bb5_var__u29_0_reg_46_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_45to46_bb5_var__u29_0_reg_46_NO_SHIFT_REG;
 logic rnode_45to46_bb5_var__u29_0_valid_out_reg_46_NO_SHIFT_REG;
 logic rnode_45to46_bb5_var__u29_0_stall_in_reg_46_NO_SHIFT_REG;
 logic rnode_45to46_bb5_var__u29_0_stall_out_reg_46_NO_SHIFT_REG;

acl_data_fifo rnode_45to46_bb5_var__u29_0_reg_46_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_45to46_bb5_var__u29_0_reg_46_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_45to46_bb5_var__u29_0_stall_in_reg_46_NO_SHIFT_REG),
	.valid_out(rnode_45to46_bb5_var__u29_0_valid_out_reg_46_NO_SHIFT_REG),
	.stall_out(rnode_45to46_bb5_var__u29_0_stall_out_reg_46_NO_SHIFT_REG),
	.data_in(rnode_4to45_bb5_var__u29_0_NO_SHIFT_REG),
	.data_out(rnode_45to46_bb5_var__u29_0_reg_46_NO_SHIFT_REG)
);

defparam rnode_45to46_bb5_var__u29_0_reg_46_fifo.DEPTH = 1;
defparam rnode_45to46_bb5_var__u29_0_reg_46_fifo.DATA_WIDTH = 64;
defparam rnode_45to46_bb5_var__u29_0_reg_46_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_45to46_bb5_var__u29_0_reg_46_fifo.IMPL = "shift_reg";

assign rnode_45to46_bb5_var__u29_0_reg_46_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to45_bb5_var__u29_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_45to46_bb5_var__u29_0_NO_SHIFT_REG = rnode_45to46_bb5_var__u29_0_reg_46_NO_SHIFT_REG;
assign rnode_45to46_bb5_var__u29_0_stall_in_reg_46_NO_SHIFT_REG = 1'b0;
assign rnode_45to46_bb5_var__u29_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_47to48_bb5_var__u30_0_valid_out_NO_SHIFT_REG;
 logic rnode_47to48_bb5_var__u30_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_47to48_bb5_var__u30_0_NO_SHIFT_REG;
 logic rnode_47to48_bb5_var__u30_0_reg_48_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_47to48_bb5_var__u30_0_reg_48_NO_SHIFT_REG;
 logic rnode_47to48_bb5_var__u30_0_valid_out_reg_48_NO_SHIFT_REG;
 logic rnode_47to48_bb5_var__u30_0_stall_in_reg_48_NO_SHIFT_REG;
 logic rnode_47to48_bb5_var__u30_0_stall_out_reg_48_NO_SHIFT_REG;

acl_data_fifo rnode_47to48_bb5_var__u30_0_reg_48_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_47to48_bb5_var__u30_0_reg_48_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_47to48_bb5_var__u30_0_stall_in_reg_48_NO_SHIFT_REG),
	.valid_out(rnode_47to48_bb5_var__u30_0_valid_out_reg_48_NO_SHIFT_REG),
	.stall_out(rnode_47to48_bb5_var__u30_0_stall_out_reg_48_NO_SHIFT_REG),
	.data_in(rnode_4to47_bb5_var__u30_0_NO_SHIFT_REG),
	.data_out(rnode_47to48_bb5_var__u30_0_reg_48_NO_SHIFT_REG)
);

defparam rnode_47to48_bb5_var__u30_0_reg_48_fifo.DEPTH = 1;
defparam rnode_47to48_bb5_var__u30_0_reg_48_fifo.DATA_WIDTH = 64;
defparam rnode_47to48_bb5_var__u30_0_reg_48_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_47to48_bb5_var__u30_0_reg_48_fifo.IMPL = "shift_reg";

assign rnode_47to48_bb5_var__u30_0_reg_48_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to47_bb5_var__u30_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_47to48_bb5_var__u30_0_NO_SHIFT_REG = rnode_47to48_bb5_var__u30_0_reg_48_NO_SHIFT_REG;
assign rnode_47to48_bb5_var__u30_0_stall_in_reg_48_NO_SHIFT_REG = 1'b0;
assign rnode_47to48_bb5_var__u30_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_49to50_bb5_var__u31_0_valid_out_NO_SHIFT_REG;
 logic rnode_49to50_bb5_var__u31_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_49to50_bb5_var__u31_0_NO_SHIFT_REG;
 logic rnode_49to50_bb5_var__u31_0_reg_50_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_49to50_bb5_var__u31_0_reg_50_NO_SHIFT_REG;
 logic rnode_49to50_bb5_var__u31_0_valid_out_reg_50_NO_SHIFT_REG;
 logic rnode_49to50_bb5_var__u31_0_stall_in_reg_50_NO_SHIFT_REG;
 logic rnode_49to50_bb5_var__u31_0_stall_out_reg_50_NO_SHIFT_REG;

acl_data_fifo rnode_49to50_bb5_var__u31_0_reg_50_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_49to50_bb5_var__u31_0_reg_50_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_49to50_bb5_var__u31_0_stall_in_reg_50_NO_SHIFT_REG),
	.valid_out(rnode_49to50_bb5_var__u31_0_valid_out_reg_50_NO_SHIFT_REG),
	.stall_out(rnode_49to50_bb5_var__u31_0_stall_out_reg_50_NO_SHIFT_REG),
	.data_in(rnode_4to49_bb5_var__u31_0_NO_SHIFT_REG),
	.data_out(rnode_49to50_bb5_var__u31_0_reg_50_NO_SHIFT_REG)
);

defparam rnode_49to50_bb5_var__u31_0_reg_50_fifo.DEPTH = 1;
defparam rnode_49to50_bb5_var__u31_0_reg_50_fifo.DATA_WIDTH = 64;
defparam rnode_49to50_bb5_var__u31_0_reg_50_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_49to50_bb5_var__u31_0_reg_50_fifo.IMPL = "shift_reg";

assign rnode_49to50_bb5_var__u31_0_reg_50_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to49_bb5_var__u31_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_49to50_bb5_var__u31_0_NO_SHIFT_REG = rnode_49to50_bb5_var__u31_0_reg_50_NO_SHIFT_REG;
assign rnode_49to50_bb5_var__u31_0_stall_in_reg_50_NO_SHIFT_REG = 1'b0;
assign rnode_49to50_bb5_var__u31_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_51to52_bb5_var__u32_0_valid_out_NO_SHIFT_REG;
 logic rnode_51to52_bb5_var__u32_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_51to52_bb5_var__u32_0_NO_SHIFT_REG;
 logic rnode_51to52_bb5_var__u32_0_reg_52_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_51to52_bb5_var__u32_0_reg_52_NO_SHIFT_REG;
 logic rnode_51to52_bb5_var__u32_0_valid_out_reg_52_NO_SHIFT_REG;
 logic rnode_51to52_bb5_var__u32_0_stall_in_reg_52_NO_SHIFT_REG;
 logic rnode_51to52_bb5_var__u32_0_stall_out_reg_52_NO_SHIFT_REG;

acl_data_fifo rnode_51to52_bb5_var__u32_0_reg_52_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_51to52_bb5_var__u32_0_reg_52_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_51to52_bb5_var__u32_0_stall_in_reg_52_NO_SHIFT_REG),
	.valid_out(rnode_51to52_bb5_var__u32_0_valid_out_reg_52_NO_SHIFT_REG),
	.stall_out(rnode_51to52_bb5_var__u32_0_stall_out_reg_52_NO_SHIFT_REG),
	.data_in(rnode_4to51_bb5_var__u32_0_NO_SHIFT_REG),
	.data_out(rnode_51to52_bb5_var__u32_0_reg_52_NO_SHIFT_REG)
);

defparam rnode_51to52_bb5_var__u32_0_reg_52_fifo.DEPTH = 1;
defparam rnode_51to52_bb5_var__u32_0_reg_52_fifo.DATA_WIDTH = 64;
defparam rnode_51to52_bb5_var__u32_0_reg_52_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_51to52_bb5_var__u32_0_reg_52_fifo.IMPL = "shift_reg";

assign rnode_51to52_bb5_var__u32_0_reg_52_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to51_bb5_var__u32_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_51to52_bb5_var__u32_0_NO_SHIFT_REG = rnode_51to52_bb5_var__u32_0_reg_52_NO_SHIFT_REG;
assign rnode_51to52_bb5_var__u32_0_stall_in_reg_52_NO_SHIFT_REG = 1'b0;
assign rnode_51to52_bb5_var__u32_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_53to54_bb5_var__u33_0_valid_out_NO_SHIFT_REG;
 logic rnode_53to54_bb5_var__u33_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_53to54_bb5_var__u33_0_NO_SHIFT_REG;
 logic rnode_53to54_bb5_var__u33_0_reg_54_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_53to54_bb5_var__u33_0_reg_54_NO_SHIFT_REG;
 logic rnode_53to54_bb5_var__u33_0_valid_out_reg_54_NO_SHIFT_REG;
 logic rnode_53to54_bb5_var__u33_0_stall_in_reg_54_NO_SHIFT_REG;
 logic rnode_53to54_bb5_var__u33_0_stall_out_reg_54_NO_SHIFT_REG;

acl_data_fifo rnode_53to54_bb5_var__u33_0_reg_54_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_53to54_bb5_var__u33_0_reg_54_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_53to54_bb5_var__u33_0_stall_in_reg_54_NO_SHIFT_REG),
	.valid_out(rnode_53to54_bb5_var__u33_0_valid_out_reg_54_NO_SHIFT_REG),
	.stall_out(rnode_53to54_bb5_var__u33_0_stall_out_reg_54_NO_SHIFT_REG),
	.data_in(rnode_4to53_bb5_var__u33_0_NO_SHIFT_REG),
	.data_out(rnode_53to54_bb5_var__u33_0_reg_54_NO_SHIFT_REG)
);

defparam rnode_53to54_bb5_var__u33_0_reg_54_fifo.DEPTH = 1;
defparam rnode_53to54_bb5_var__u33_0_reg_54_fifo.DATA_WIDTH = 64;
defparam rnode_53to54_bb5_var__u33_0_reg_54_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_53to54_bb5_var__u33_0_reg_54_fifo.IMPL = "shift_reg";

assign rnode_53to54_bb5_var__u33_0_reg_54_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to53_bb5_var__u33_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_53to54_bb5_var__u33_0_NO_SHIFT_REG = rnode_53to54_bb5_var__u33_0_reg_54_NO_SHIFT_REG;
assign rnode_53to54_bb5_var__u33_0_stall_in_reg_54_NO_SHIFT_REG = 1'b0;
assign rnode_53to54_bb5_var__u33_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_55to56_bb5_var__u34_0_valid_out_NO_SHIFT_REG;
 logic rnode_55to56_bb5_var__u34_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_55to56_bb5_var__u34_0_NO_SHIFT_REG;
 logic rnode_55to56_bb5_var__u34_0_reg_56_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_55to56_bb5_var__u34_0_reg_56_NO_SHIFT_REG;
 logic rnode_55to56_bb5_var__u34_0_valid_out_reg_56_NO_SHIFT_REG;
 logic rnode_55to56_bb5_var__u34_0_stall_in_reg_56_NO_SHIFT_REG;
 logic rnode_55to56_bb5_var__u34_0_stall_out_reg_56_NO_SHIFT_REG;

acl_data_fifo rnode_55to56_bb5_var__u34_0_reg_56_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_55to56_bb5_var__u34_0_reg_56_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_55to56_bb5_var__u34_0_stall_in_reg_56_NO_SHIFT_REG),
	.valid_out(rnode_55to56_bb5_var__u34_0_valid_out_reg_56_NO_SHIFT_REG),
	.stall_out(rnode_55to56_bb5_var__u34_0_stall_out_reg_56_NO_SHIFT_REG),
	.data_in(rnode_4to55_bb5_var__u34_0_NO_SHIFT_REG),
	.data_out(rnode_55to56_bb5_var__u34_0_reg_56_NO_SHIFT_REG)
);

defparam rnode_55to56_bb5_var__u34_0_reg_56_fifo.DEPTH = 1;
defparam rnode_55to56_bb5_var__u34_0_reg_56_fifo.DATA_WIDTH = 64;
defparam rnode_55to56_bb5_var__u34_0_reg_56_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_55to56_bb5_var__u34_0_reg_56_fifo.IMPL = "shift_reg";

assign rnode_55to56_bb5_var__u34_0_reg_56_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to55_bb5_var__u34_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_55to56_bb5_var__u34_0_NO_SHIFT_REG = rnode_55to56_bb5_var__u34_0_reg_56_NO_SHIFT_REG;
assign rnode_55to56_bb5_var__u34_0_stall_in_reg_56_NO_SHIFT_REG = 1'b0;
assign rnode_55to56_bb5_var__u34_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_57to58_bb5_var__u35_0_valid_out_NO_SHIFT_REG;
 logic rnode_57to58_bb5_var__u35_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_57to58_bb5_var__u35_0_NO_SHIFT_REG;
 logic rnode_57to58_bb5_var__u35_0_reg_58_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_57to58_bb5_var__u35_0_reg_58_NO_SHIFT_REG;
 logic rnode_57to58_bb5_var__u35_0_valid_out_reg_58_NO_SHIFT_REG;
 logic rnode_57to58_bb5_var__u35_0_stall_in_reg_58_NO_SHIFT_REG;
 logic rnode_57to58_bb5_var__u35_0_stall_out_reg_58_NO_SHIFT_REG;

acl_data_fifo rnode_57to58_bb5_var__u35_0_reg_58_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_57to58_bb5_var__u35_0_reg_58_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_57to58_bb5_var__u35_0_stall_in_reg_58_NO_SHIFT_REG),
	.valid_out(rnode_57to58_bb5_var__u35_0_valid_out_reg_58_NO_SHIFT_REG),
	.stall_out(rnode_57to58_bb5_var__u35_0_stall_out_reg_58_NO_SHIFT_REG),
	.data_in(rnode_4to57_bb5_var__u35_0_NO_SHIFT_REG),
	.data_out(rnode_57to58_bb5_var__u35_0_reg_58_NO_SHIFT_REG)
);

defparam rnode_57to58_bb5_var__u35_0_reg_58_fifo.DEPTH = 1;
defparam rnode_57to58_bb5_var__u35_0_reg_58_fifo.DATA_WIDTH = 64;
defparam rnode_57to58_bb5_var__u35_0_reg_58_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_57to58_bb5_var__u35_0_reg_58_fifo.IMPL = "shift_reg";

assign rnode_57to58_bb5_var__u35_0_reg_58_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to57_bb5_var__u35_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_57to58_bb5_var__u35_0_NO_SHIFT_REG = rnode_57to58_bb5_var__u35_0_reg_58_NO_SHIFT_REG;
assign rnode_57to58_bb5_var__u35_0_stall_in_reg_58_NO_SHIFT_REG = 1'b0;
assign rnode_57to58_bb5_var__u35_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_59to60_bb5_and_i_i_31_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_59to60_bb5_and_i_i_31_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_59to60_bb5_and_i_i_31_i_0_NO_SHIFT_REG;
 logic rnode_59to60_bb5_and_i_i_31_i_0_reg_60_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_59to60_bb5_and_i_i_31_i_0_reg_60_NO_SHIFT_REG;
 logic rnode_59to60_bb5_and_i_i_31_i_0_valid_out_reg_60_NO_SHIFT_REG;
 logic rnode_59to60_bb5_and_i_i_31_i_0_stall_in_reg_60_NO_SHIFT_REG;
 logic rnode_59to60_bb5_and_i_i_31_i_0_stall_out_reg_60_NO_SHIFT_REG;

acl_data_fifo rnode_59to60_bb5_and_i_i_31_i_0_reg_60_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_59to60_bb5_and_i_i_31_i_0_reg_60_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_59to60_bb5_and_i_i_31_i_0_stall_in_reg_60_NO_SHIFT_REG),
	.valid_out(rnode_59to60_bb5_and_i_i_31_i_0_valid_out_reg_60_NO_SHIFT_REG),
	.stall_out(rnode_59to60_bb5_and_i_i_31_i_0_stall_out_reg_60_NO_SHIFT_REG),
	.data_in(rnode_4to59_bb5_and_i_i_31_i_0_NO_SHIFT_REG),
	.data_out(rnode_59to60_bb5_and_i_i_31_i_0_reg_60_NO_SHIFT_REG)
);

defparam rnode_59to60_bb5_and_i_i_31_i_0_reg_60_fifo.DEPTH = 1;
defparam rnode_59to60_bb5_and_i_i_31_i_0_reg_60_fifo.DATA_WIDTH = 64;
defparam rnode_59to60_bb5_and_i_i_31_i_0_reg_60_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_59to60_bb5_and_i_i_31_i_0_reg_60_fifo.IMPL = "shift_reg";

assign rnode_59to60_bb5_and_i_i_31_i_0_reg_60_inputs_ready_NO_SHIFT_REG = 1'b1;
assign rnode_4to59_bb5_and_i_i_31_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_59to60_bb5_and_i_i_31_i_0_NO_SHIFT_REG = rnode_59to60_bb5_and_i_i_31_i_0_reg_60_NO_SHIFT_REG;
assign rnode_59to60_bb5_and_i_i_31_i_0_stall_in_reg_60_NO_SHIFT_REG = 1'b0;
assign rnode_59to60_bb5_and_i_i_31_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_memcoalesce_null_select_byte_en_0_stall_local;
wire [63:0] local_bb5_memcoalesce_null_select_byte_en_0;

assign local_bb5_memcoalesce_null_select_byte_en_0[1] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[2] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[3] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[4] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[5] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[6] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[7] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[8] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[9] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[10] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[11] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[12] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[13] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[14] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[15] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[16] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[17] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[18] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[19] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[20] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[21] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[22] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[23] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[24] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[25] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[26] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[27] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[28] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[29] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[30] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[31] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[32] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[33] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[34] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[35] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[36] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[37] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[38] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[39] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[40] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[41] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[42] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[43] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[44] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[45] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[46] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[47] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[48] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[49] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[50] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[51] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[52] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[53] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[54] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[55] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[56] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[57] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[58] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[59] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[60] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[61] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[62] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[63] = local_bb5_not_and126_xor_or;
assign local_bb5_memcoalesce_null_select_byte_en_0[0] = local_bb5_not_and126_xor_or;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_2_i_stall_local;
wire [63:0] local_bb5_or_i_i_2_i;

assign local_bb5_or_i_i_2_i = (local_bb5_shl_i_i_2_i | local_bb5_and_i_i_2_i);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_4_i_stall_local;
wire [63:0] local_bb5_and_i_i_4_i;

assign local_bb5_and_i_i_4_i = (rnode_5to6_bb5_var__u9_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_5_i_stall_local;
wire [63:0] local_bb5_and_i_i_5_i;

assign local_bb5_and_i_i_5_i = (rnode_7to8_bb5_var__u10_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_6_i_stall_local;
wire [63:0] local_bb5_and_i_i_6_i;

assign local_bb5_and_i_i_6_i = (rnode_9to10_bb5_var__u11_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_7_i_stall_local;
wire [63:0] local_bb5_and_i_i_7_i;

assign local_bb5_and_i_i_7_i = (rnode_11to12_bb5_var__u12_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_8_i_stall_local;
wire [63:0] local_bb5_and_i_i_8_i;

assign local_bb5_and_i_i_8_i = (rnode_13to14_bb5_var__u13_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_9_i_stall_local;
wire [63:0] local_bb5_and_i_i_9_i;

assign local_bb5_and_i_i_9_i = (rnode_15to16_bb5_var__u14_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_10_i_stall_local;
wire [63:0] local_bb5_and_i_i_10_i;

assign local_bb5_and_i_i_10_i = (rnode_17to18_bb5_var__u15_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_11_i_stall_local;
wire [63:0] local_bb5_and_i_i_11_i;

assign local_bb5_and_i_i_11_i = (rnode_19to20_bb5_var__u16_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_12_i_stall_local;
wire [63:0] local_bb5_and_i_i_12_i;

assign local_bb5_and_i_i_12_i = (rnode_21to22_bb5_var__u17_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_13_i_stall_local;
wire [63:0] local_bb5_and_i_i_13_i;

assign local_bb5_and_i_i_13_i = (rnode_23to24_bb5_var__u18_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_14_i_stall_local;
wire [63:0] local_bb5_and_i_i_14_i;

assign local_bb5_and_i_i_14_i = (rnode_25to26_bb5_var__u19_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_15_i_stall_local;
wire [63:0] local_bb5_and_i_i_15_i;

assign local_bb5_and_i_i_15_i = (rnode_27to28_bb5_var__u20_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_16_i_stall_local;
wire [63:0] local_bb5_and_i_i_16_i;

assign local_bb5_and_i_i_16_i = (rnode_29to30_bb5_var__u21_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_17_i_stall_local;
wire [63:0] local_bb5_and_i_i_17_i;

assign local_bb5_and_i_i_17_i = (rnode_31to32_bb5_var__u22_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_18_i_stall_local;
wire [63:0] local_bb5_and_i_i_18_i;

assign local_bb5_and_i_i_18_i = (rnode_33to34_bb5_var__u23_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_19_i_stall_local;
wire [63:0] local_bb5_and_i_i_19_i;

assign local_bb5_and_i_i_19_i = (rnode_35to36_bb5_var__u24_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_20_i_stall_local;
wire [63:0] local_bb5_and_i_i_20_i;

assign local_bb5_and_i_i_20_i = (rnode_37to38_bb5_var__u25_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_21_i_stall_local;
wire [63:0] local_bb5_and_i_i_21_i;

assign local_bb5_and_i_i_21_i = (rnode_39to40_bb5_var__u26_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_22_i_stall_local;
wire [63:0] local_bb5_and_i_i_22_i;

assign local_bb5_and_i_i_22_i = (rnode_41to42_bb5_var__u27_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_23_i_stall_local;
wire [63:0] local_bb5_and_i_i_23_i;

assign local_bb5_and_i_i_23_i = (rnode_43to44_bb5_var__u28_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_24_i_stall_local;
wire [63:0] local_bb5_and_i_i_24_i;

assign local_bb5_and_i_i_24_i = (rnode_45to46_bb5_var__u29_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_25_i_stall_local;
wire [63:0] local_bb5_and_i_i_25_i;

assign local_bb5_and_i_i_25_i = (rnode_47to48_bb5_var__u30_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_26_i_stall_local;
wire [63:0] local_bb5_and_i_i_26_i;

assign local_bb5_and_i_i_26_i = (rnode_49to50_bb5_var__u31_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_27_i_stall_local;
wire [63:0] local_bb5_and_i_i_27_i;

assign local_bb5_and_i_i_27_i = (rnode_51to52_bb5_var__u32_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_28_i_stall_local;
wire [63:0] local_bb5_and_i_i_28_i;

assign local_bb5_and_i_i_28_i = (rnode_53to54_bb5_var__u33_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_29_i_stall_local;
wire [63:0] local_bb5_and_i_i_29_i;

assign local_bb5_and_i_i_29_i = (rnode_55to56_bb5_var__u34_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_and_i_i_30_i_stall_local;
wire [63:0] local_bb5_and_i_i_30_i;

assign local_bb5_and_i_i_30_i = (rnode_57to58_bb5_var__u35_0_NO_SHIFT_REG & 64'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_memcoalesce_null_cast_byte_en_0_stall_local;
wire [63:0] local_bb5_memcoalesce_null_cast_byte_en_0;

assign local_bb5_memcoalesce_null_cast_byte_en_0 = (local_bb5_memcoalesce_null_select_byte_en_0 & 64'hF);

// This section implements an unregistered operation.
// 
wire local_bb5_cmp3_i_i_2_i_stall_local;
wire local_bb5_cmp3_i_i_2_i;

assign local_bb5_cmp3_i_i_2_i = (local_bb5_or_i_i_2_i > 64'h3);

// This section implements an unregistered operation.
// 
wire local_bb5_memcoalesce_null_or_byte_en_1_stall_local;
wire [63:0] local_bb5_memcoalesce_null_or_byte_en_1;

assign local_bb5_memcoalesce_null_or_byte_en_1 = (local_bb5_memcoalesce_null_cast_byte_en_0 | local_bb5_memcoalesce_null_shift_byte_en_1);

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_2_i_stall_local;
wire [63:0] local_bb5_cond_i_i_2_i;

assign local_bb5_cond_i_i_2_i = (local_bb5_cmp3_i_i_2_i ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_2_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_2_i;

assign local_bb5_sub4_i_i_2_i = (local_bb5_or_i_i_2_i - local_bb5_cond_i_i_2_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_3_i_valid_out;
wire local_bb5_shl_i_i_3_i_stall_in;
wire local_bb5_shl_i_i_3_i_inputs_ready;
wire local_bb5_shl_i_i_3_i_stall_local;
wire [63:0] local_bb5_shl_i_i_3_i;

assign local_bb5_shl_i_i_3_i_inputs_ready = (local_bb5_conv_i_i_valid_out_0_NO_SHIFT_REG & local_bb5_conv_i_i_valid_out_1_NO_SHIFT_REG & local_bb5_conv_i_i_valid_out_2_NO_SHIFT_REG);
assign local_bb5_shl_i_i_3_i = (local_bb5_sub4_i_i_2_i << 64'h1);
assign local_bb5_shl_i_i_3_i_valid_out = 1'b1;
assign local_bb5_conv_i_i_stall_in_0 = 1'b0;
assign local_bb5_conv_i_i_stall_in_1 = 1'b0;
assign local_bb5_conv_i_i_stall_in_2 = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_3to4_bb5_shl_i_i_3_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to4_bb5_shl_i_i_3_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_shl_i_i_3_i_0_NO_SHIFT_REG;
 logic rnode_3to4_bb5_shl_i_i_3_i_0_reg_4_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to4_bb5_shl_i_i_3_i_0_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_shl_i_i_3_i_0_valid_out_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_shl_i_i_3_i_0_stall_in_reg_4_NO_SHIFT_REG;
 logic rnode_3to4_bb5_shl_i_i_3_i_0_stall_out_reg_4_NO_SHIFT_REG;

acl_data_fifo rnode_3to4_bb5_shl_i_i_3_i_0_reg_4_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to4_bb5_shl_i_i_3_i_0_reg_4_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to4_bb5_shl_i_i_3_i_0_stall_in_reg_4_NO_SHIFT_REG),
	.valid_out(rnode_3to4_bb5_shl_i_i_3_i_0_valid_out_reg_4_NO_SHIFT_REG),
	.stall_out(rnode_3to4_bb5_shl_i_i_3_i_0_stall_out_reg_4_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_3_i),
	.data_out(rnode_3to4_bb5_shl_i_i_3_i_0_reg_4_NO_SHIFT_REG)
);

defparam rnode_3to4_bb5_shl_i_i_3_i_0_reg_4_fifo.DEPTH = 1;
defparam rnode_3to4_bb5_shl_i_i_3_i_0_reg_4_fifo.DATA_WIDTH = 64;
defparam rnode_3to4_bb5_shl_i_i_3_i_0_reg_4_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_3to4_bb5_shl_i_i_3_i_0_reg_4_fifo.IMPL = "shift_reg";

assign rnode_3to4_bb5_shl_i_i_3_i_0_reg_4_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_3_i_stall_in = 1'b0;
assign rnode_3to4_bb5_shl_i_i_3_i_0_NO_SHIFT_REG = rnode_3to4_bb5_shl_i_i_3_i_0_reg_4_NO_SHIFT_REG;
assign rnode_3to4_bb5_shl_i_i_3_i_0_stall_in_reg_4_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_shl_i_i_3_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_3_i_stall_local;
wire [63:0] local_bb5_or_i_i_3_i;

assign local_bb5_or_i_i_3_i = (rnode_3to4_bb5_shl_i_i_3_i_0_NO_SHIFT_REG | local_bb5_and_i_i_3_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_3_i_valid_out_1;
wire local_bb5_or_i_i_3_i_stall_in_1;
 reg local_bb5_or_i_i_3_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_3_i_valid_out;
wire local_bb5_cmp3_i_i_3_i_stall_in;
 reg local_bb5_cmp3_i_i_3_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_3_i_inputs_ready;
wire local_bb5_cmp3_i_i_3_i_stall_local;
wire local_bb5_cmp3_i_i_3_i;

assign local_bb5_cmp3_i_i_3_i_inputs_ready = (rnode_3to4_bb5_var__u8_0_valid_out_NO_SHIFT_REG & rnode_3to4_bb5_shl_i_i_3_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_3_i = (local_bb5_or_i_i_3_i > 64'h3);
assign local_bb5_or_i_i_3_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_3_i_valid_out = 1'b1;
assign rnode_3to4_bb5_var__u8_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_3to4_bb5_shl_i_i_3_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_3_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_3_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_3_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_3_i_inputs_ready & (local_bb5_or_i_i_3_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_3_i_stall_in_1)) & local_bb5_cmp3_i_i_3_i_stall_local);
		local_bb5_cmp3_i_i_3_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_3_i_inputs_ready & (local_bb5_cmp3_i_i_3_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_3_i_stall_in)) & local_bb5_cmp3_i_i_3_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb5_or_i_i_3_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb5_or_i_i_3_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_4to5_bb5_or_i_i_3_i_0_NO_SHIFT_REG;
 logic rnode_4to5_bb5_or_i_i_3_i_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_4to5_bb5_or_i_i_3_i_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_or_i_i_3_i_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_or_i_i_3_i_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_or_i_i_3_i_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb5_or_i_i_3_i_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb5_or_i_i_3_i_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb5_or_i_i_3_i_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb5_or_i_i_3_i_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb5_or_i_i_3_i_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_3_i),
	.data_out(rnode_4to5_bb5_or_i_i_3_i_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb5_or_i_i_3_i_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb5_or_i_i_3_i_0_reg_5_fifo.DATA_WIDTH = 64;
defparam rnode_4to5_bb5_or_i_i_3_i_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb5_or_i_i_3_i_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb5_or_i_i_3_i_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_3_i_stall_in_1 = 1'b0;
assign rnode_4to5_bb5_or_i_i_3_i_0_NO_SHIFT_REG = rnode_4to5_bb5_or_i_i_3_i_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb5_or_i_i_3_i_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_or_i_i_3_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_4to5_bb5_cmp3_i_i_3_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_4to5_bb5_cmp3_i_i_3_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_4to5_bb5_cmp3_i_i_3_i_0_NO_SHIFT_REG;
 logic rnode_4to5_bb5_cmp3_i_i_3_i_0_reg_5_inputs_ready_NO_SHIFT_REG;
 logic rnode_4to5_bb5_cmp3_i_i_3_i_0_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_cmp3_i_i_3_i_0_valid_out_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_cmp3_i_i_3_i_0_stall_in_reg_5_NO_SHIFT_REG;
 logic rnode_4to5_bb5_cmp3_i_i_3_i_0_stall_out_reg_5_NO_SHIFT_REG;

acl_data_fifo rnode_4to5_bb5_cmp3_i_i_3_i_0_reg_5_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_4to5_bb5_cmp3_i_i_3_i_0_reg_5_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_4to5_bb5_cmp3_i_i_3_i_0_stall_in_reg_5_NO_SHIFT_REG),
	.valid_out(rnode_4to5_bb5_cmp3_i_i_3_i_0_valid_out_reg_5_NO_SHIFT_REG),
	.stall_out(rnode_4to5_bb5_cmp3_i_i_3_i_0_stall_out_reg_5_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_3_i),
	.data_out(rnode_4to5_bb5_cmp3_i_i_3_i_0_reg_5_NO_SHIFT_REG)
);

defparam rnode_4to5_bb5_cmp3_i_i_3_i_0_reg_5_fifo.DEPTH = 1;
defparam rnode_4to5_bb5_cmp3_i_i_3_i_0_reg_5_fifo.DATA_WIDTH = 1;
defparam rnode_4to5_bb5_cmp3_i_i_3_i_0_reg_5_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_4to5_bb5_cmp3_i_i_3_i_0_reg_5_fifo.IMPL = "shift_reg";

assign rnode_4to5_bb5_cmp3_i_i_3_i_0_reg_5_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_3_i_stall_in = 1'b0;
assign rnode_4to5_bb5_cmp3_i_i_3_i_0_NO_SHIFT_REG = rnode_4to5_bb5_cmp3_i_i_3_i_0_reg_5_NO_SHIFT_REG;
assign rnode_4to5_bb5_cmp3_i_i_3_i_0_stall_in_reg_5_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_cmp3_i_i_3_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_3_i_stall_local;
wire [63:0] local_bb5_cond_i_i_3_i;

assign local_bb5_cond_i_i_3_i = (rnode_4to5_bb5_cmp3_i_i_3_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_3_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_3_i;

assign local_bb5_sub4_i_i_3_i = (rnode_4to5_bb5_or_i_i_3_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_3_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_4_i_valid_out;
wire local_bb5_shl_i_i_4_i_stall_in;
wire local_bb5_shl_i_i_4_i_inputs_ready;
wire local_bb5_shl_i_i_4_i_stall_local;
wire [63:0] local_bb5_shl_i_i_4_i;

assign local_bb5_shl_i_i_4_i_inputs_ready = (rnode_4to5_bb5_or_i_i_3_i_0_valid_out_NO_SHIFT_REG & rnode_4to5_bb5_cmp3_i_i_3_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_4_i = (local_bb5_sub4_i_i_3_i << 64'h1);
assign local_bb5_shl_i_i_4_i_valid_out = 1'b1;
assign rnode_4to5_bb5_or_i_i_3_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_4to5_bb5_cmp3_i_i_3_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_5to6_bb5_shl_i_i_4_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_5to6_bb5_shl_i_i_4_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_5to6_bb5_shl_i_i_4_i_0_NO_SHIFT_REG;
 logic rnode_5to6_bb5_shl_i_i_4_i_0_reg_6_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_5to6_bb5_shl_i_i_4_i_0_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_shl_i_i_4_i_0_valid_out_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_shl_i_i_4_i_0_stall_in_reg_6_NO_SHIFT_REG;
 logic rnode_5to6_bb5_shl_i_i_4_i_0_stall_out_reg_6_NO_SHIFT_REG;

acl_data_fifo rnode_5to6_bb5_shl_i_i_4_i_0_reg_6_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_5to6_bb5_shl_i_i_4_i_0_reg_6_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_5to6_bb5_shl_i_i_4_i_0_stall_in_reg_6_NO_SHIFT_REG),
	.valid_out(rnode_5to6_bb5_shl_i_i_4_i_0_valid_out_reg_6_NO_SHIFT_REG),
	.stall_out(rnode_5to6_bb5_shl_i_i_4_i_0_stall_out_reg_6_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_4_i),
	.data_out(rnode_5to6_bb5_shl_i_i_4_i_0_reg_6_NO_SHIFT_REG)
);

defparam rnode_5to6_bb5_shl_i_i_4_i_0_reg_6_fifo.DEPTH = 1;
defparam rnode_5to6_bb5_shl_i_i_4_i_0_reg_6_fifo.DATA_WIDTH = 64;
defparam rnode_5to6_bb5_shl_i_i_4_i_0_reg_6_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_5to6_bb5_shl_i_i_4_i_0_reg_6_fifo.IMPL = "shift_reg";

assign rnode_5to6_bb5_shl_i_i_4_i_0_reg_6_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_4_i_stall_in = 1'b0;
assign rnode_5to6_bb5_shl_i_i_4_i_0_NO_SHIFT_REG = rnode_5to6_bb5_shl_i_i_4_i_0_reg_6_NO_SHIFT_REG;
assign rnode_5to6_bb5_shl_i_i_4_i_0_stall_in_reg_6_NO_SHIFT_REG = 1'b0;
assign rnode_5to6_bb5_shl_i_i_4_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_4_i_stall_local;
wire [63:0] local_bb5_or_i_i_4_i;

assign local_bb5_or_i_i_4_i = (rnode_5to6_bb5_shl_i_i_4_i_0_NO_SHIFT_REG | local_bb5_and_i_i_4_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_4_i_valid_out_1;
wire local_bb5_or_i_i_4_i_stall_in_1;
 reg local_bb5_or_i_i_4_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_4_i_valid_out;
wire local_bb5_cmp3_i_i_4_i_stall_in;
 reg local_bb5_cmp3_i_i_4_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_4_i_inputs_ready;
wire local_bb5_cmp3_i_i_4_i_stall_local;
wire local_bb5_cmp3_i_i_4_i;

assign local_bb5_cmp3_i_i_4_i_inputs_ready = (rnode_5to6_bb5_var__u9_0_valid_out_NO_SHIFT_REG & rnode_5to6_bb5_shl_i_i_4_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_4_i = (local_bb5_or_i_i_4_i > 64'h3);
assign local_bb5_or_i_i_4_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_4_i_valid_out = 1'b1;
assign rnode_5to6_bb5_var__u9_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_5to6_bb5_shl_i_i_4_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_4_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_4_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_4_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_4_i_inputs_ready & (local_bb5_or_i_i_4_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_4_i_stall_in_1)) & local_bb5_cmp3_i_i_4_i_stall_local);
		local_bb5_cmp3_i_i_4_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_4_i_inputs_ready & (local_bb5_cmp3_i_i_4_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_4_i_stall_in)) & local_bb5_cmp3_i_i_4_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_6to7_bb5_or_i_i_4_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to7_bb5_or_i_i_4_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_6to7_bb5_or_i_i_4_i_0_NO_SHIFT_REG;
 logic rnode_6to7_bb5_or_i_i_4_i_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_6to7_bb5_or_i_i_4_i_0_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_or_i_i_4_i_0_valid_out_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_or_i_i_4_i_0_stall_in_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_or_i_i_4_i_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_6to7_bb5_or_i_i_4_i_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to7_bb5_or_i_i_4_i_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to7_bb5_or_i_i_4_i_0_stall_in_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_6to7_bb5_or_i_i_4_i_0_valid_out_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_6to7_bb5_or_i_i_4_i_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_4_i),
	.data_out(rnode_6to7_bb5_or_i_i_4_i_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_6to7_bb5_or_i_i_4_i_0_reg_7_fifo.DEPTH = 1;
defparam rnode_6to7_bb5_or_i_i_4_i_0_reg_7_fifo.DATA_WIDTH = 64;
defparam rnode_6to7_bb5_or_i_i_4_i_0_reg_7_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_6to7_bb5_or_i_i_4_i_0_reg_7_fifo.IMPL = "shift_reg";

assign rnode_6to7_bb5_or_i_i_4_i_0_reg_7_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_4_i_stall_in_1 = 1'b0;
assign rnode_6to7_bb5_or_i_i_4_i_0_NO_SHIFT_REG = rnode_6to7_bb5_or_i_i_4_i_0_reg_7_NO_SHIFT_REG;
assign rnode_6to7_bb5_or_i_i_4_i_0_stall_in_reg_7_NO_SHIFT_REG = 1'b0;
assign rnode_6to7_bb5_or_i_i_4_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_6to7_bb5_cmp3_i_i_4_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_6to7_bb5_cmp3_i_i_4_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_6to7_bb5_cmp3_i_i_4_i_0_NO_SHIFT_REG;
 logic rnode_6to7_bb5_cmp3_i_i_4_i_0_reg_7_inputs_ready_NO_SHIFT_REG;
 logic rnode_6to7_bb5_cmp3_i_i_4_i_0_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_cmp3_i_i_4_i_0_valid_out_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_cmp3_i_i_4_i_0_stall_in_reg_7_NO_SHIFT_REG;
 logic rnode_6to7_bb5_cmp3_i_i_4_i_0_stall_out_reg_7_NO_SHIFT_REG;

acl_data_fifo rnode_6to7_bb5_cmp3_i_i_4_i_0_reg_7_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_6to7_bb5_cmp3_i_i_4_i_0_reg_7_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_6to7_bb5_cmp3_i_i_4_i_0_stall_in_reg_7_NO_SHIFT_REG),
	.valid_out(rnode_6to7_bb5_cmp3_i_i_4_i_0_valid_out_reg_7_NO_SHIFT_REG),
	.stall_out(rnode_6to7_bb5_cmp3_i_i_4_i_0_stall_out_reg_7_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_4_i),
	.data_out(rnode_6to7_bb5_cmp3_i_i_4_i_0_reg_7_NO_SHIFT_REG)
);

defparam rnode_6to7_bb5_cmp3_i_i_4_i_0_reg_7_fifo.DEPTH = 1;
defparam rnode_6to7_bb5_cmp3_i_i_4_i_0_reg_7_fifo.DATA_WIDTH = 1;
defparam rnode_6to7_bb5_cmp3_i_i_4_i_0_reg_7_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_6to7_bb5_cmp3_i_i_4_i_0_reg_7_fifo.IMPL = "shift_reg";

assign rnode_6to7_bb5_cmp3_i_i_4_i_0_reg_7_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_4_i_stall_in = 1'b0;
assign rnode_6to7_bb5_cmp3_i_i_4_i_0_NO_SHIFT_REG = rnode_6to7_bb5_cmp3_i_i_4_i_0_reg_7_NO_SHIFT_REG;
assign rnode_6to7_bb5_cmp3_i_i_4_i_0_stall_in_reg_7_NO_SHIFT_REG = 1'b0;
assign rnode_6to7_bb5_cmp3_i_i_4_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_4_i_stall_local;
wire [63:0] local_bb5_cond_i_i_4_i;

assign local_bb5_cond_i_i_4_i = (rnode_6to7_bb5_cmp3_i_i_4_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_4_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_4_i;

assign local_bb5_sub4_i_i_4_i = (rnode_6to7_bb5_or_i_i_4_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_4_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_5_i_valid_out;
wire local_bb5_shl_i_i_5_i_stall_in;
wire local_bb5_shl_i_i_5_i_inputs_ready;
wire local_bb5_shl_i_i_5_i_stall_local;
wire [63:0] local_bb5_shl_i_i_5_i;

assign local_bb5_shl_i_i_5_i_inputs_ready = (rnode_6to7_bb5_or_i_i_4_i_0_valid_out_NO_SHIFT_REG & rnode_6to7_bb5_cmp3_i_i_4_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_5_i = (local_bb5_sub4_i_i_4_i << 64'h1);
assign local_bb5_shl_i_i_5_i_valid_out = 1'b1;
assign rnode_6to7_bb5_or_i_i_4_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_6to7_bb5_cmp3_i_i_4_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_7to8_bb5_shl_i_i_5_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_7to8_bb5_shl_i_i_5_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_7to8_bb5_shl_i_i_5_i_0_NO_SHIFT_REG;
 logic rnode_7to8_bb5_shl_i_i_5_i_0_reg_8_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_7to8_bb5_shl_i_i_5_i_0_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb5_shl_i_i_5_i_0_valid_out_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb5_shl_i_i_5_i_0_stall_in_reg_8_NO_SHIFT_REG;
 logic rnode_7to8_bb5_shl_i_i_5_i_0_stall_out_reg_8_NO_SHIFT_REG;

acl_data_fifo rnode_7to8_bb5_shl_i_i_5_i_0_reg_8_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_7to8_bb5_shl_i_i_5_i_0_reg_8_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_7to8_bb5_shl_i_i_5_i_0_stall_in_reg_8_NO_SHIFT_REG),
	.valid_out(rnode_7to8_bb5_shl_i_i_5_i_0_valid_out_reg_8_NO_SHIFT_REG),
	.stall_out(rnode_7to8_bb5_shl_i_i_5_i_0_stall_out_reg_8_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_5_i),
	.data_out(rnode_7to8_bb5_shl_i_i_5_i_0_reg_8_NO_SHIFT_REG)
);

defparam rnode_7to8_bb5_shl_i_i_5_i_0_reg_8_fifo.DEPTH = 1;
defparam rnode_7to8_bb5_shl_i_i_5_i_0_reg_8_fifo.DATA_WIDTH = 64;
defparam rnode_7to8_bb5_shl_i_i_5_i_0_reg_8_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_7to8_bb5_shl_i_i_5_i_0_reg_8_fifo.IMPL = "shift_reg";

assign rnode_7to8_bb5_shl_i_i_5_i_0_reg_8_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_5_i_stall_in = 1'b0;
assign rnode_7to8_bb5_shl_i_i_5_i_0_NO_SHIFT_REG = rnode_7to8_bb5_shl_i_i_5_i_0_reg_8_NO_SHIFT_REG;
assign rnode_7to8_bb5_shl_i_i_5_i_0_stall_in_reg_8_NO_SHIFT_REG = 1'b0;
assign rnode_7to8_bb5_shl_i_i_5_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_5_i_stall_local;
wire [63:0] local_bb5_or_i_i_5_i;

assign local_bb5_or_i_i_5_i = (rnode_7to8_bb5_shl_i_i_5_i_0_NO_SHIFT_REG | local_bb5_and_i_i_5_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_5_i_valid_out_1;
wire local_bb5_or_i_i_5_i_stall_in_1;
 reg local_bb5_or_i_i_5_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_5_i_valid_out;
wire local_bb5_cmp3_i_i_5_i_stall_in;
 reg local_bb5_cmp3_i_i_5_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_5_i_inputs_ready;
wire local_bb5_cmp3_i_i_5_i_stall_local;
wire local_bb5_cmp3_i_i_5_i;

assign local_bb5_cmp3_i_i_5_i_inputs_ready = (rnode_7to8_bb5_var__u10_0_valid_out_NO_SHIFT_REG & rnode_7to8_bb5_shl_i_i_5_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_5_i = (local_bb5_or_i_i_5_i > 64'h3);
assign local_bb5_or_i_i_5_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_5_i_valid_out = 1'b1;
assign rnode_7to8_bb5_var__u10_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_7to8_bb5_shl_i_i_5_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_5_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_5_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_5_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_5_i_inputs_ready & (local_bb5_or_i_i_5_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_5_i_stall_in_1)) & local_bb5_cmp3_i_i_5_i_stall_local);
		local_bb5_cmp3_i_i_5_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_5_i_inputs_ready & (local_bb5_cmp3_i_i_5_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_5_i_stall_in)) & local_bb5_cmp3_i_i_5_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_8to9_bb5_or_i_i_5_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_8to9_bb5_or_i_i_5_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_8to9_bb5_or_i_i_5_i_0_NO_SHIFT_REG;
 logic rnode_8to9_bb5_or_i_i_5_i_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_8to9_bb5_or_i_i_5_i_0_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb5_or_i_i_5_i_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb5_or_i_i_5_i_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb5_or_i_i_5_i_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_8to9_bb5_or_i_i_5_i_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to9_bb5_or_i_i_5_i_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to9_bb5_or_i_i_5_i_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_8to9_bb5_or_i_i_5_i_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_8to9_bb5_or_i_i_5_i_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_5_i),
	.data_out(rnode_8to9_bb5_or_i_i_5_i_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_8to9_bb5_or_i_i_5_i_0_reg_9_fifo.DEPTH = 1;
defparam rnode_8to9_bb5_or_i_i_5_i_0_reg_9_fifo.DATA_WIDTH = 64;
defparam rnode_8to9_bb5_or_i_i_5_i_0_reg_9_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_8to9_bb5_or_i_i_5_i_0_reg_9_fifo.IMPL = "shift_reg";

assign rnode_8to9_bb5_or_i_i_5_i_0_reg_9_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_5_i_stall_in_1 = 1'b0;
assign rnode_8to9_bb5_or_i_i_5_i_0_NO_SHIFT_REG = rnode_8to9_bb5_or_i_i_5_i_0_reg_9_NO_SHIFT_REG;
assign rnode_8to9_bb5_or_i_i_5_i_0_stall_in_reg_9_NO_SHIFT_REG = 1'b0;
assign rnode_8to9_bb5_or_i_i_5_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_8to9_bb5_cmp3_i_i_5_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_8to9_bb5_cmp3_i_i_5_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_8to9_bb5_cmp3_i_i_5_i_0_NO_SHIFT_REG;
 logic rnode_8to9_bb5_cmp3_i_i_5_i_0_reg_9_inputs_ready_NO_SHIFT_REG;
 logic rnode_8to9_bb5_cmp3_i_i_5_i_0_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb5_cmp3_i_i_5_i_0_valid_out_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb5_cmp3_i_i_5_i_0_stall_in_reg_9_NO_SHIFT_REG;
 logic rnode_8to9_bb5_cmp3_i_i_5_i_0_stall_out_reg_9_NO_SHIFT_REG;

acl_data_fifo rnode_8to9_bb5_cmp3_i_i_5_i_0_reg_9_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_8to9_bb5_cmp3_i_i_5_i_0_reg_9_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_8to9_bb5_cmp3_i_i_5_i_0_stall_in_reg_9_NO_SHIFT_REG),
	.valid_out(rnode_8to9_bb5_cmp3_i_i_5_i_0_valid_out_reg_9_NO_SHIFT_REG),
	.stall_out(rnode_8to9_bb5_cmp3_i_i_5_i_0_stall_out_reg_9_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_5_i),
	.data_out(rnode_8to9_bb5_cmp3_i_i_5_i_0_reg_9_NO_SHIFT_REG)
);

defparam rnode_8to9_bb5_cmp3_i_i_5_i_0_reg_9_fifo.DEPTH = 1;
defparam rnode_8to9_bb5_cmp3_i_i_5_i_0_reg_9_fifo.DATA_WIDTH = 1;
defparam rnode_8to9_bb5_cmp3_i_i_5_i_0_reg_9_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_8to9_bb5_cmp3_i_i_5_i_0_reg_9_fifo.IMPL = "shift_reg";

assign rnode_8to9_bb5_cmp3_i_i_5_i_0_reg_9_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_5_i_stall_in = 1'b0;
assign rnode_8to9_bb5_cmp3_i_i_5_i_0_NO_SHIFT_REG = rnode_8to9_bb5_cmp3_i_i_5_i_0_reg_9_NO_SHIFT_REG;
assign rnode_8to9_bb5_cmp3_i_i_5_i_0_stall_in_reg_9_NO_SHIFT_REG = 1'b0;
assign rnode_8to9_bb5_cmp3_i_i_5_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_5_i_stall_local;
wire [63:0] local_bb5_cond_i_i_5_i;

assign local_bb5_cond_i_i_5_i = (rnode_8to9_bb5_cmp3_i_i_5_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_5_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_5_i;

assign local_bb5_sub4_i_i_5_i = (rnode_8to9_bb5_or_i_i_5_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_5_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_6_i_valid_out;
wire local_bb5_shl_i_i_6_i_stall_in;
wire local_bb5_shl_i_i_6_i_inputs_ready;
wire local_bb5_shl_i_i_6_i_stall_local;
wire [63:0] local_bb5_shl_i_i_6_i;

assign local_bb5_shl_i_i_6_i_inputs_ready = (rnode_8to9_bb5_or_i_i_5_i_0_valid_out_NO_SHIFT_REG & rnode_8to9_bb5_cmp3_i_i_5_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_6_i = (local_bb5_sub4_i_i_5_i << 64'h1);
assign local_bb5_shl_i_i_6_i_valid_out = 1'b1;
assign rnode_8to9_bb5_or_i_i_5_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_8to9_bb5_cmp3_i_i_5_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_9to10_bb5_shl_i_i_6_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_9to10_bb5_shl_i_i_6_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_9to10_bb5_shl_i_i_6_i_0_NO_SHIFT_REG;
 logic rnode_9to10_bb5_shl_i_i_6_i_0_reg_10_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_9to10_bb5_shl_i_i_6_i_0_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb5_shl_i_i_6_i_0_valid_out_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb5_shl_i_i_6_i_0_stall_in_reg_10_NO_SHIFT_REG;
 logic rnode_9to10_bb5_shl_i_i_6_i_0_stall_out_reg_10_NO_SHIFT_REG;

acl_data_fifo rnode_9to10_bb5_shl_i_i_6_i_0_reg_10_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_9to10_bb5_shl_i_i_6_i_0_reg_10_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_9to10_bb5_shl_i_i_6_i_0_stall_in_reg_10_NO_SHIFT_REG),
	.valid_out(rnode_9to10_bb5_shl_i_i_6_i_0_valid_out_reg_10_NO_SHIFT_REG),
	.stall_out(rnode_9to10_bb5_shl_i_i_6_i_0_stall_out_reg_10_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_6_i),
	.data_out(rnode_9to10_bb5_shl_i_i_6_i_0_reg_10_NO_SHIFT_REG)
);

defparam rnode_9to10_bb5_shl_i_i_6_i_0_reg_10_fifo.DEPTH = 1;
defparam rnode_9to10_bb5_shl_i_i_6_i_0_reg_10_fifo.DATA_WIDTH = 64;
defparam rnode_9to10_bb5_shl_i_i_6_i_0_reg_10_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_9to10_bb5_shl_i_i_6_i_0_reg_10_fifo.IMPL = "shift_reg";

assign rnode_9to10_bb5_shl_i_i_6_i_0_reg_10_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_6_i_stall_in = 1'b0;
assign rnode_9to10_bb5_shl_i_i_6_i_0_NO_SHIFT_REG = rnode_9to10_bb5_shl_i_i_6_i_0_reg_10_NO_SHIFT_REG;
assign rnode_9to10_bb5_shl_i_i_6_i_0_stall_in_reg_10_NO_SHIFT_REG = 1'b0;
assign rnode_9to10_bb5_shl_i_i_6_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_6_i_stall_local;
wire [63:0] local_bb5_or_i_i_6_i;

assign local_bb5_or_i_i_6_i = (rnode_9to10_bb5_shl_i_i_6_i_0_NO_SHIFT_REG | local_bb5_and_i_i_6_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_6_i_valid_out_1;
wire local_bb5_or_i_i_6_i_stall_in_1;
 reg local_bb5_or_i_i_6_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_6_i_valid_out;
wire local_bb5_cmp3_i_i_6_i_stall_in;
 reg local_bb5_cmp3_i_i_6_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_6_i_inputs_ready;
wire local_bb5_cmp3_i_i_6_i_stall_local;
wire local_bb5_cmp3_i_i_6_i;

assign local_bb5_cmp3_i_i_6_i_inputs_ready = (rnode_9to10_bb5_var__u11_0_valid_out_NO_SHIFT_REG & rnode_9to10_bb5_shl_i_i_6_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_6_i = (local_bb5_or_i_i_6_i > 64'h3);
assign local_bb5_or_i_i_6_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_6_i_valid_out = 1'b1;
assign rnode_9to10_bb5_var__u11_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_9to10_bb5_shl_i_i_6_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_6_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_6_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_6_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_6_i_inputs_ready & (local_bb5_or_i_i_6_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_6_i_stall_in_1)) & local_bb5_cmp3_i_i_6_i_stall_local);
		local_bb5_cmp3_i_i_6_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_6_i_inputs_ready & (local_bb5_cmp3_i_i_6_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_6_i_stall_in)) & local_bb5_cmp3_i_i_6_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_10to11_bb5_or_i_i_6_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_10to11_bb5_or_i_i_6_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_10to11_bb5_or_i_i_6_i_0_NO_SHIFT_REG;
 logic rnode_10to11_bb5_or_i_i_6_i_0_reg_11_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_10to11_bb5_or_i_i_6_i_0_reg_11_NO_SHIFT_REG;
 logic rnode_10to11_bb5_or_i_i_6_i_0_valid_out_reg_11_NO_SHIFT_REG;
 logic rnode_10to11_bb5_or_i_i_6_i_0_stall_in_reg_11_NO_SHIFT_REG;
 logic rnode_10to11_bb5_or_i_i_6_i_0_stall_out_reg_11_NO_SHIFT_REG;

acl_data_fifo rnode_10to11_bb5_or_i_i_6_i_0_reg_11_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_10to11_bb5_or_i_i_6_i_0_reg_11_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_10to11_bb5_or_i_i_6_i_0_stall_in_reg_11_NO_SHIFT_REG),
	.valid_out(rnode_10to11_bb5_or_i_i_6_i_0_valid_out_reg_11_NO_SHIFT_REG),
	.stall_out(rnode_10to11_bb5_or_i_i_6_i_0_stall_out_reg_11_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_6_i),
	.data_out(rnode_10to11_bb5_or_i_i_6_i_0_reg_11_NO_SHIFT_REG)
);

defparam rnode_10to11_bb5_or_i_i_6_i_0_reg_11_fifo.DEPTH = 1;
defparam rnode_10to11_bb5_or_i_i_6_i_0_reg_11_fifo.DATA_WIDTH = 64;
defparam rnode_10to11_bb5_or_i_i_6_i_0_reg_11_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_10to11_bb5_or_i_i_6_i_0_reg_11_fifo.IMPL = "shift_reg";

assign rnode_10to11_bb5_or_i_i_6_i_0_reg_11_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_6_i_stall_in_1 = 1'b0;
assign rnode_10to11_bb5_or_i_i_6_i_0_NO_SHIFT_REG = rnode_10to11_bb5_or_i_i_6_i_0_reg_11_NO_SHIFT_REG;
assign rnode_10to11_bb5_or_i_i_6_i_0_stall_in_reg_11_NO_SHIFT_REG = 1'b0;
assign rnode_10to11_bb5_or_i_i_6_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_10to11_bb5_cmp3_i_i_6_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_10to11_bb5_cmp3_i_i_6_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_10to11_bb5_cmp3_i_i_6_i_0_NO_SHIFT_REG;
 logic rnode_10to11_bb5_cmp3_i_i_6_i_0_reg_11_inputs_ready_NO_SHIFT_REG;
 logic rnode_10to11_bb5_cmp3_i_i_6_i_0_reg_11_NO_SHIFT_REG;
 logic rnode_10to11_bb5_cmp3_i_i_6_i_0_valid_out_reg_11_NO_SHIFT_REG;
 logic rnode_10to11_bb5_cmp3_i_i_6_i_0_stall_in_reg_11_NO_SHIFT_REG;
 logic rnode_10to11_bb5_cmp3_i_i_6_i_0_stall_out_reg_11_NO_SHIFT_REG;

acl_data_fifo rnode_10to11_bb5_cmp3_i_i_6_i_0_reg_11_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_10to11_bb5_cmp3_i_i_6_i_0_reg_11_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_10to11_bb5_cmp3_i_i_6_i_0_stall_in_reg_11_NO_SHIFT_REG),
	.valid_out(rnode_10to11_bb5_cmp3_i_i_6_i_0_valid_out_reg_11_NO_SHIFT_REG),
	.stall_out(rnode_10to11_bb5_cmp3_i_i_6_i_0_stall_out_reg_11_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_6_i),
	.data_out(rnode_10to11_bb5_cmp3_i_i_6_i_0_reg_11_NO_SHIFT_REG)
);

defparam rnode_10to11_bb5_cmp3_i_i_6_i_0_reg_11_fifo.DEPTH = 1;
defparam rnode_10to11_bb5_cmp3_i_i_6_i_0_reg_11_fifo.DATA_WIDTH = 1;
defparam rnode_10to11_bb5_cmp3_i_i_6_i_0_reg_11_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_10to11_bb5_cmp3_i_i_6_i_0_reg_11_fifo.IMPL = "shift_reg";

assign rnode_10to11_bb5_cmp3_i_i_6_i_0_reg_11_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_6_i_stall_in = 1'b0;
assign rnode_10to11_bb5_cmp3_i_i_6_i_0_NO_SHIFT_REG = rnode_10to11_bb5_cmp3_i_i_6_i_0_reg_11_NO_SHIFT_REG;
assign rnode_10to11_bb5_cmp3_i_i_6_i_0_stall_in_reg_11_NO_SHIFT_REG = 1'b0;
assign rnode_10to11_bb5_cmp3_i_i_6_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_6_i_stall_local;
wire [63:0] local_bb5_cond_i_i_6_i;

assign local_bb5_cond_i_i_6_i = (rnode_10to11_bb5_cmp3_i_i_6_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_6_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_6_i;

assign local_bb5_sub4_i_i_6_i = (rnode_10to11_bb5_or_i_i_6_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_6_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_7_i_valid_out;
wire local_bb5_shl_i_i_7_i_stall_in;
wire local_bb5_shl_i_i_7_i_inputs_ready;
wire local_bb5_shl_i_i_7_i_stall_local;
wire [63:0] local_bb5_shl_i_i_7_i;

assign local_bb5_shl_i_i_7_i_inputs_ready = (rnode_10to11_bb5_or_i_i_6_i_0_valid_out_NO_SHIFT_REG & rnode_10to11_bb5_cmp3_i_i_6_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_7_i = (local_bb5_sub4_i_i_6_i << 64'h1);
assign local_bb5_shl_i_i_7_i_valid_out = 1'b1;
assign rnode_10to11_bb5_or_i_i_6_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_10to11_bb5_cmp3_i_i_6_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_11to12_bb5_shl_i_i_7_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_11to12_bb5_shl_i_i_7_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_11to12_bb5_shl_i_i_7_i_0_NO_SHIFT_REG;
 logic rnode_11to12_bb5_shl_i_i_7_i_0_reg_12_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_11to12_bb5_shl_i_i_7_i_0_reg_12_NO_SHIFT_REG;
 logic rnode_11to12_bb5_shl_i_i_7_i_0_valid_out_reg_12_NO_SHIFT_REG;
 logic rnode_11to12_bb5_shl_i_i_7_i_0_stall_in_reg_12_NO_SHIFT_REG;
 logic rnode_11to12_bb5_shl_i_i_7_i_0_stall_out_reg_12_NO_SHIFT_REG;

acl_data_fifo rnode_11to12_bb5_shl_i_i_7_i_0_reg_12_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_11to12_bb5_shl_i_i_7_i_0_reg_12_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_11to12_bb5_shl_i_i_7_i_0_stall_in_reg_12_NO_SHIFT_REG),
	.valid_out(rnode_11to12_bb5_shl_i_i_7_i_0_valid_out_reg_12_NO_SHIFT_REG),
	.stall_out(rnode_11to12_bb5_shl_i_i_7_i_0_stall_out_reg_12_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_7_i),
	.data_out(rnode_11to12_bb5_shl_i_i_7_i_0_reg_12_NO_SHIFT_REG)
);

defparam rnode_11to12_bb5_shl_i_i_7_i_0_reg_12_fifo.DEPTH = 1;
defparam rnode_11to12_bb5_shl_i_i_7_i_0_reg_12_fifo.DATA_WIDTH = 64;
defparam rnode_11to12_bb5_shl_i_i_7_i_0_reg_12_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_11to12_bb5_shl_i_i_7_i_0_reg_12_fifo.IMPL = "shift_reg";

assign rnode_11to12_bb5_shl_i_i_7_i_0_reg_12_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_7_i_stall_in = 1'b0;
assign rnode_11to12_bb5_shl_i_i_7_i_0_NO_SHIFT_REG = rnode_11to12_bb5_shl_i_i_7_i_0_reg_12_NO_SHIFT_REG;
assign rnode_11to12_bb5_shl_i_i_7_i_0_stall_in_reg_12_NO_SHIFT_REG = 1'b0;
assign rnode_11to12_bb5_shl_i_i_7_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_7_i_stall_local;
wire [63:0] local_bb5_or_i_i_7_i;

assign local_bb5_or_i_i_7_i = (rnode_11to12_bb5_shl_i_i_7_i_0_NO_SHIFT_REG | local_bb5_and_i_i_7_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_7_i_valid_out_1;
wire local_bb5_or_i_i_7_i_stall_in_1;
 reg local_bb5_or_i_i_7_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_7_i_valid_out;
wire local_bb5_cmp3_i_i_7_i_stall_in;
 reg local_bb5_cmp3_i_i_7_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_7_i_inputs_ready;
wire local_bb5_cmp3_i_i_7_i_stall_local;
wire local_bb5_cmp3_i_i_7_i;

assign local_bb5_cmp3_i_i_7_i_inputs_ready = (rnode_11to12_bb5_var__u12_0_valid_out_NO_SHIFT_REG & rnode_11to12_bb5_shl_i_i_7_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_7_i = (local_bb5_or_i_i_7_i > 64'h3);
assign local_bb5_or_i_i_7_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_7_i_valid_out = 1'b1;
assign rnode_11to12_bb5_var__u12_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_11to12_bb5_shl_i_i_7_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_7_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_7_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_7_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_7_i_inputs_ready & (local_bb5_or_i_i_7_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_7_i_stall_in_1)) & local_bb5_cmp3_i_i_7_i_stall_local);
		local_bb5_cmp3_i_i_7_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_7_i_inputs_ready & (local_bb5_cmp3_i_i_7_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_7_i_stall_in)) & local_bb5_cmp3_i_i_7_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_12to13_bb5_or_i_i_7_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_12to13_bb5_or_i_i_7_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_12to13_bb5_or_i_i_7_i_0_NO_SHIFT_REG;
 logic rnode_12to13_bb5_or_i_i_7_i_0_reg_13_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_12to13_bb5_or_i_i_7_i_0_reg_13_NO_SHIFT_REG;
 logic rnode_12to13_bb5_or_i_i_7_i_0_valid_out_reg_13_NO_SHIFT_REG;
 logic rnode_12to13_bb5_or_i_i_7_i_0_stall_in_reg_13_NO_SHIFT_REG;
 logic rnode_12to13_bb5_or_i_i_7_i_0_stall_out_reg_13_NO_SHIFT_REG;

acl_data_fifo rnode_12to13_bb5_or_i_i_7_i_0_reg_13_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_12to13_bb5_or_i_i_7_i_0_reg_13_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_12to13_bb5_or_i_i_7_i_0_stall_in_reg_13_NO_SHIFT_REG),
	.valid_out(rnode_12to13_bb5_or_i_i_7_i_0_valid_out_reg_13_NO_SHIFT_REG),
	.stall_out(rnode_12to13_bb5_or_i_i_7_i_0_stall_out_reg_13_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_7_i),
	.data_out(rnode_12to13_bb5_or_i_i_7_i_0_reg_13_NO_SHIFT_REG)
);

defparam rnode_12to13_bb5_or_i_i_7_i_0_reg_13_fifo.DEPTH = 1;
defparam rnode_12to13_bb5_or_i_i_7_i_0_reg_13_fifo.DATA_WIDTH = 64;
defparam rnode_12to13_bb5_or_i_i_7_i_0_reg_13_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_12to13_bb5_or_i_i_7_i_0_reg_13_fifo.IMPL = "shift_reg";

assign rnode_12to13_bb5_or_i_i_7_i_0_reg_13_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_7_i_stall_in_1 = 1'b0;
assign rnode_12to13_bb5_or_i_i_7_i_0_NO_SHIFT_REG = rnode_12to13_bb5_or_i_i_7_i_0_reg_13_NO_SHIFT_REG;
assign rnode_12to13_bb5_or_i_i_7_i_0_stall_in_reg_13_NO_SHIFT_REG = 1'b0;
assign rnode_12to13_bb5_or_i_i_7_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_12to13_bb5_cmp3_i_i_7_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_12to13_bb5_cmp3_i_i_7_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_12to13_bb5_cmp3_i_i_7_i_0_NO_SHIFT_REG;
 logic rnode_12to13_bb5_cmp3_i_i_7_i_0_reg_13_inputs_ready_NO_SHIFT_REG;
 logic rnode_12to13_bb5_cmp3_i_i_7_i_0_reg_13_NO_SHIFT_REG;
 logic rnode_12to13_bb5_cmp3_i_i_7_i_0_valid_out_reg_13_NO_SHIFT_REG;
 logic rnode_12to13_bb5_cmp3_i_i_7_i_0_stall_in_reg_13_NO_SHIFT_REG;
 logic rnode_12to13_bb5_cmp3_i_i_7_i_0_stall_out_reg_13_NO_SHIFT_REG;

acl_data_fifo rnode_12to13_bb5_cmp3_i_i_7_i_0_reg_13_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_12to13_bb5_cmp3_i_i_7_i_0_reg_13_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_12to13_bb5_cmp3_i_i_7_i_0_stall_in_reg_13_NO_SHIFT_REG),
	.valid_out(rnode_12to13_bb5_cmp3_i_i_7_i_0_valid_out_reg_13_NO_SHIFT_REG),
	.stall_out(rnode_12to13_bb5_cmp3_i_i_7_i_0_stall_out_reg_13_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_7_i),
	.data_out(rnode_12to13_bb5_cmp3_i_i_7_i_0_reg_13_NO_SHIFT_REG)
);

defparam rnode_12to13_bb5_cmp3_i_i_7_i_0_reg_13_fifo.DEPTH = 1;
defparam rnode_12to13_bb5_cmp3_i_i_7_i_0_reg_13_fifo.DATA_WIDTH = 1;
defparam rnode_12to13_bb5_cmp3_i_i_7_i_0_reg_13_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_12to13_bb5_cmp3_i_i_7_i_0_reg_13_fifo.IMPL = "shift_reg";

assign rnode_12to13_bb5_cmp3_i_i_7_i_0_reg_13_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_7_i_stall_in = 1'b0;
assign rnode_12to13_bb5_cmp3_i_i_7_i_0_NO_SHIFT_REG = rnode_12to13_bb5_cmp3_i_i_7_i_0_reg_13_NO_SHIFT_REG;
assign rnode_12to13_bb5_cmp3_i_i_7_i_0_stall_in_reg_13_NO_SHIFT_REG = 1'b0;
assign rnode_12to13_bb5_cmp3_i_i_7_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_7_i_stall_local;
wire [63:0] local_bb5_cond_i_i_7_i;

assign local_bb5_cond_i_i_7_i = (rnode_12to13_bb5_cmp3_i_i_7_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_7_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_7_i;

assign local_bb5_sub4_i_i_7_i = (rnode_12to13_bb5_or_i_i_7_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_7_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_8_i_valid_out;
wire local_bb5_shl_i_i_8_i_stall_in;
wire local_bb5_shl_i_i_8_i_inputs_ready;
wire local_bb5_shl_i_i_8_i_stall_local;
wire [63:0] local_bb5_shl_i_i_8_i;

assign local_bb5_shl_i_i_8_i_inputs_ready = (rnode_12to13_bb5_or_i_i_7_i_0_valid_out_NO_SHIFT_REG & rnode_12to13_bb5_cmp3_i_i_7_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_8_i = (local_bb5_sub4_i_i_7_i << 64'h1);
assign local_bb5_shl_i_i_8_i_valid_out = 1'b1;
assign rnode_12to13_bb5_or_i_i_7_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_12to13_bb5_cmp3_i_i_7_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_13to14_bb5_shl_i_i_8_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_13to14_bb5_shl_i_i_8_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_13to14_bb5_shl_i_i_8_i_0_NO_SHIFT_REG;
 logic rnode_13to14_bb5_shl_i_i_8_i_0_reg_14_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_13to14_bb5_shl_i_i_8_i_0_reg_14_NO_SHIFT_REG;
 logic rnode_13to14_bb5_shl_i_i_8_i_0_valid_out_reg_14_NO_SHIFT_REG;
 logic rnode_13to14_bb5_shl_i_i_8_i_0_stall_in_reg_14_NO_SHIFT_REG;
 logic rnode_13to14_bb5_shl_i_i_8_i_0_stall_out_reg_14_NO_SHIFT_REG;

acl_data_fifo rnode_13to14_bb5_shl_i_i_8_i_0_reg_14_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_13to14_bb5_shl_i_i_8_i_0_reg_14_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_13to14_bb5_shl_i_i_8_i_0_stall_in_reg_14_NO_SHIFT_REG),
	.valid_out(rnode_13to14_bb5_shl_i_i_8_i_0_valid_out_reg_14_NO_SHIFT_REG),
	.stall_out(rnode_13to14_bb5_shl_i_i_8_i_0_stall_out_reg_14_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_8_i),
	.data_out(rnode_13to14_bb5_shl_i_i_8_i_0_reg_14_NO_SHIFT_REG)
);

defparam rnode_13to14_bb5_shl_i_i_8_i_0_reg_14_fifo.DEPTH = 1;
defparam rnode_13to14_bb5_shl_i_i_8_i_0_reg_14_fifo.DATA_WIDTH = 64;
defparam rnode_13to14_bb5_shl_i_i_8_i_0_reg_14_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_13to14_bb5_shl_i_i_8_i_0_reg_14_fifo.IMPL = "shift_reg";

assign rnode_13to14_bb5_shl_i_i_8_i_0_reg_14_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_8_i_stall_in = 1'b0;
assign rnode_13to14_bb5_shl_i_i_8_i_0_NO_SHIFT_REG = rnode_13to14_bb5_shl_i_i_8_i_0_reg_14_NO_SHIFT_REG;
assign rnode_13to14_bb5_shl_i_i_8_i_0_stall_in_reg_14_NO_SHIFT_REG = 1'b0;
assign rnode_13to14_bb5_shl_i_i_8_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_8_i_stall_local;
wire [63:0] local_bb5_or_i_i_8_i;

assign local_bb5_or_i_i_8_i = (rnode_13to14_bb5_shl_i_i_8_i_0_NO_SHIFT_REG | local_bb5_and_i_i_8_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_8_i_valid_out_1;
wire local_bb5_or_i_i_8_i_stall_in_1;
 reg local_bb5_or_i_i_8_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_8_i_valid_out;
wire local_bb5_cmp3_i_i_8_i_stall_in;
 reg local_bb5_cmp3_i_i_8_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_8_i_inputs_ready;
wire local_bb5_cmp3_i_i_8_i_stall_local;
wire local_bb5_cmp3_i_i_8_i;

assign local_bb5_cmp3_i_i_8_i_inputs_ready = (rnode_13to14_bb5_var__u13_0_valid_out_NO_SHIFT_REG & rnode_13to14_bb5_shl_i_i_8_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_8_i = (local_bb5_or_i_i_8_i > 64'h3);
assign local_bb5_or_i_i_8_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_8_i_valid_out = 1'b1;
assign rnode_13to14_bb5_var__u13_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_13to14_bb5_shl_i_i_8_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_8_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_8_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_8_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_8_i_inputs_ready & (local_bb5_or_i_i_8_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_8_i_stall_in_1)) & local_bb5_cmp3_i_i_8_i_stall_local);
		local_bb5_cmp3_i_i_8_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_8_i_inputs_ready & (local_bb5_cmp3_i_i_8_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_8_i_stall_in)) & local_bb5_cmp3_i_i_8_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_14to15_bb5_or_i_i_8_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_14to15_bb5_or_i_i_8_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_14to15_bb5_or_i_i_8_i_0_NO_SHIFT_REG;
 logic rnode_14to15_bb5_or_i_i_8_i_0_reg_15_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_14to15_bb5_or_i_i_8_i_0_reg_15_NO_SHIFT_REG;
 logic rnode_14to15_bb5_or_i_i_8_i_0_valid_out_reg_15_NO_SHIFT_REG;
 logic rnode_14to15_bb5_or_i_i_8_i_0_stall_in_reg_15_NO_SHIFT_REG;
 logic rnode_14to15_bb5_or_i_i_8_i_0_stall_out_reg_15_NO_SHIFT_REG;

acl_data_fifo rnode_14to15_bb5_or_i_i_8_i_0_reg_15_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_14to15_bb5_or_i_i_8_i_0_reg_15_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_14to15_bb5_or_i_i_8_i_0_stall_in_reg_15_NO_SHIFT_REG),
	.valid_out(rnode_14to15_bb5_or_i_i_8_i_0_valid_out_reg_15_NO_SHIFT_REG),
	.stall_out(rnode_14to15_bb5_or_i_i_8_i_0_stall_out_reg_15_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_8_i),
	.data_out(rnode_14to15_bb5_or_i_i_8_i_0_reg_15_NO_SHIFT_REG)
);

defparam rnode_14to15_bb5_or_i_i_8_i_0_reg_15_fifo.DEPTH = 1;
defparam rnode_14to15_bb5_or_i_i_8_i_0_reg_15_fifo.DATA_WIDTH = 64;
defparam rnode_14to15_bb5_or_i_i_8_i_0_reg_15_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_14to15_bb5_or_i_i_8_i_0_reg_15_fifo.IMPL = "shift_reg";

assign rnode_14to15_bb5_or_i_i_8_i_0_reg_15_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_8_i_stall_in_1 = 1'b0;
assign rnode_14to15_bb5_or_i_i_8_i_0_NO_SHIFT_REG = rnode_14to15_bb5_or_i_i_8_i_0_reg_15_NO_SHIFT_REG;
assign rnode_14to15_bb5_or_i_i_8_i_0_stall_in_reg_15_NO_SHIFT_REG = 1'b0;
assign rnode_14to15_bb5_or_i_i_8_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_14to15_bb5_cmp3_i_i_8_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_14to15_bb5_cmp3_i_i_8_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_14to15_bb5_cmp3_i_i_8_i_0_NO_SHIFT_REG;
 logic rnode_14to15_bb5_cmp3_i_i_8_i_0_reg_15_inputs_ready_NO_SHIFT_REG;
 logic rnode_14to15_bb5_cmp3_i_i_8_i_0_reg_15_NO_SHIFT_REG;
 logic rnode_14to15_bb5_cmp3_i_i_8_i_0_valid_out_reg_15_NO_SHIFT_REG;
 logic rnode_14to15_bb5_cmp3_i_i_8_i_0_stall_in_reg_15_NO_SHIFT_REG;
 logic rnode_14to15_bb5_cmp3_i_i_8_i_0_stall_out_reg_15_NO_SHIFT_REG;

acl_data_fifo rnode_14to15_bb5_cmp3_i_i_8_i_0_reg_15_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_14to15_bb5_cmp3_i_i_8_i_0_reg_15_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_14to15_bb5_cmp3_i_i_8_i_0_stall_in_reg_15_NO_SHIFT_REG),
	.valid_out(rnode_14to15_bb5_cmp3_i_i_8_i_0_valid_out_reg_15_NO_SHIFT_REG),
	.stall_out(rnode_14to15_bb5_cmp3_i_i_8_i_0_stall_out_reg_15_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_8_i),
	.data_out(rnode_14to15_bb5_cmp3_i_i_8_i_0_reg_15_NO_SHIFT_REG)
);

defparam rnode_14to15_bb5_cmp3_i_i_8_i_0_reg_15_fifo.DEPTH = 1;
defparam rnode_14to15_bb5_cmp3_i_i_8_i_0_reg_15_fifo.DATA_WIDTH = 1;
defparam rnode_14to15_bb5_cmp3_i_i_8_i_0_reg_15_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_14to15_bb5_cmp3_i_i_8_i_0_reg_15_fifo.IMPL = "shift_reg";

assign rnode_14to15_bb5_cmp3_i_i_8_i_0_reg_15_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_8_i_stall_in = 1'b0;
assign rnode_14to15_bb5_cmp3_i_i_8_i_0_NO_SHIFT_REG = rnode_14to15_bb5_cmp3_i_i_8_i_0_reg_15_NO_SHIFT_REG;
assign rnode_14to15_bb5_cmp3_i_i_8_i_0_stall_in_reg_15_NO_SHIFT_REG = 1'b0;
assign rnode_14to15_bb5_cmp3_i_i_8_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_8_i_stall_local;
wire [63:0] local_bb5_cond_i_i_8_i;

assign local_bb5_cond_i_i_8_i = (rnode_14to15_bb5_cmp3_i_i_8_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_8_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_8_i;

assign local_bb5_sub4_i_i_8_i = (rnode_14to15_bb5_or_i_i_8_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_8_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_9_i_valid_out;
wire local_bb5_shl_i_i_9_i_stall_in;
wire local_bb5_shl_i_i_9_i_inputs_ready;
wire local_bb5_shl_i_i_9_i_stall_local;
wire [63:0] local_bb5_shl_i_i_9_i;

assign local_bb5_shl_i_i_9_i_inputs_ready = (rnode_14to15_bb5_or_i_i_8_i_0_valid_out_NO_SHIFT_REG & rnode_14to15_bb5_cmp3_i_i_8_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_9_i = (local_bb5_sub4_i_i_8_i << 64'h1);
assign local_bb5_shl_i_i_9_i_valid_out = 1'b1;
assign rnode_14to15_bb5_or_i_i_8_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_14to15_bb5_cmp3_i_i_8_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_15to16_bb5_shl_i_i_9_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_15to16_bb5_shl_i_i_9_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_15to16_bb5_shl_i_i_9_i_0_NO_SHIFT_REG;
 logic rnode_15to16_bb5_shl_i_i_9_i_0_reg_16_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_15to16_bb5_shl_i_i_9_i_0_reg_16_NO_SHIFT_REG;
 logic rnode_15to16_bb5_shl_i_i_9_i_0_valid_out_reg_16_NO_SHIFT_REG;
 logic rnode_15to16_bb5_shl_i_i_9_i_0_stall_in_reg_16_NO_SHIFT_REG;
 logic rnode_15to16_bb5_shl_i_i_9_i_0_stall_out_reg_16_NO_SHIFT_REG;

acl_data_fifo rnode_15to16_bb5_shl_i_i_9_i_0_reg_16_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_15to16_bb5_shl_i_i_9_i_0_reg_16_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_15to16_bb5_shl_i_i_9_i_0_stall_in_reg_16_NO_SHIFT_REG),
	.valid_out(rnode_15to16_bb5_shl_i_i_9_i_0_valid_out_reg_16_NO_SHIFT_REG),
	.stall_out(rnode_15to16_bb5_shl_i_i_9_i_0_stall_out_reg_16_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_9_i),
	.data_out(rnode_15to16_bb5_shl_i_i_9_i_0_reg_16_NO_SHIFT_REG)
);

defparam rnode_15to16_bb5_shl_i_i_9_i_0_reg_16_fifo.DEPTH = 1;
defparam rnode_15to16_bb5_shl_i_i_9_i_0_reg_16_fifo.DATA_WIDTH = 64;
defparam rnode_15to16_bb5_shl_i_i_9_i_0_reg_16_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_15to16_bb5_shl_i_i_9_i_0_reg_16_fifo.IMPL = "shift_reg";

assign rnode_15to16_bb5_shl_i_i_9_i_0_reg_16_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_9_i_stall_in = 1'b0;
assign rnode_15to16_bb5_shl_i_i_9_i_0_NO_SHIFT_REG = rnode_15to16_bb5_shl_i_i_9_i_0_reg_16_NO_SHIFT_REG;
assign rnode_15to16_bb5_shl_i_i_9_i_0_stall_in_reg_16_NO_SHIFT_REG = 1'b0;
assign rnode_15to16_bb5_shl_i_i_9_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_9_i_stall_local;
wire [63:0] local_bb5_or_i_i_9_i;

assign local_bb5_or_i_i_9_i = (rnode_15to16_bb5_shl_i_i_9_i_0_NO_SHIFT_REG | local_bb5_and_i_i_9_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_9_i_valid_out_1;
wire local_bb5_or_i_i_9_i_stall_in_1;
 reg local_bb5_or_i_i_9_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_9_i_valid_out;
wire local_bb5_cmp3_i_i_9_i_stall_in;
 reg local_bb5_cmp3_i_i_9_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_9_i_inputs_ready;
wire local_bb5_cmp3_i_i_9_i_stall_local;
wire local_bb5_cmp3_i_i_9_i;

assign local_bb5_cmp3_i_i_9_i_inputs_ready = (rnode_15to16_bb5_var__u14_0_valid_out_NO_SHIFT_REG & rnode_15to16_bb5_shl_i_i_9_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_9_i = (local_bb5_or_i_i_9_i > 64'h3);
assign local_bb5_or_i_i_9_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_9_i_valid_out = 1'b1;
assign rnode_15to16_bb5_var__u14_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_15to16_bb5_shl_i_i_9_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_9_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_9_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_9_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_9_i_inputs_ready & (local_bb5_or_i_i_9_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_9_i_stall_in_1)) & local_bb5_cmp3_i_i_9_i_stall_local);
		local_bb5_cmp3_i_i_9_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_9_i_inputs_ready & (local_bb5_cmp3_i_i_9_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_9_i_stall_in)) & local_bb5_cmp3_i_i_9_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_16to17_bb5_or_i_i_9_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_16to17_bb5_or_i_i_9_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_16to17_bb5_or_i_i_9_i_0_NO_SHIFT_REG;
 logic rnode_16to17_bb5_or_i_i_9_i_0_reg_17_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_16to17_bb5_or_i_i_9_i_0_reg_17_NO_SHIFT_REG;
 logic rnode_16to17_bb5_or_i_i_9_i_0_valid_out_reg_17_NO_SHIFT_REG;
 logic rnode_16to17_bb5_or_i_i_9_i_0_stall_in_reg_17_NO_SHIFT_REG;
 logic rnode_16to17_bb5_or_i_i_9_i_0_stall_out_reg_17_NO_SHIFT_REG;

acl_data_fifo rnode_16to17_bb5_or_i_i_9_i_0_reg_17_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_16to17_bb5_or_i_i_9_i_0_reg_17_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_16to17_bb5_or_i_i_9_i_0_stall_in_reg_17_NO_SHIFT_REG),
	.valid_out(rnode_16to17_bb5_or_i_i_9_i_0_valid_out_reg_17_NO_SHIFT_REG),
	.stall_out(rnode_16to17_bb5_or_i_i_9_i_0_stall_out_reg_17_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_9_i),
	.data_out(rnode_16to17_bb5_or_i_i_9_i_0_reg_17_NO_SHIFT_REG)
);

defparam rnode_16to17_bb5_or_i_i_9_i_0_reg_17_fifo.DEPTH = 1;
defparam rnode_16to17_bb5_or_i_i_9_i_0_reg_17_fifo.DATA_WIDTH = 64;
defparam rnode_16to17_bb5_or_i_i_9_i_0_reg_17_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_16to17_bb5_or_i_i_9_i_0_reg_17_fifo.IMPL = "shift_reg";

assign rnode_16to17_bb5_or_i_i_9_i_0_reg_17_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_9_i_stall_in_1 = 1'b0;
assign rnode_16to17_bb5_or_i_i_9_i_0_NO_SHIFT_REG = rnode_16to17_bb5_or_i_i_9_i_0_reg_17_NO_SHIFT_REG;
assign rnode_16to17_bb5_or_i_i_9_i_0_stall_in_reg_17_NO_SHIFT_REG = 1'b0;
assign rnode_16to17_bb5_or_i_i_9_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_16to17_bb5_cmp3_i_i_9_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_16to17_bb5_cmp3_i_i_9_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_16to17_bb5_cmp3_i_i_9_i_0_NO_SHIFT_REG;
 logic rnode_16to17_bb5_cmp3_i_i_9_i_0_reg_17_inputs_ready_NO_SHIFT_REG;
 logic rnode_16to17_bb5_cmp3_i_i_9_i_0_reg_17_NO_SHIFT_REG;
 logic rnode_16to17_bb5_cmp3_i_i_9_i_0_valid_out_reg_17_NO_SHIFT_REG;
 logic rnode_16to17_bb5_cmp3_i_i_9_i_0_stall_in_reg_17_NO_SHIFT_REG;
 logic rnode_16to17_bb5_cmp3_i_i_9_i_0_stall_out_reg_17_NO_SHIFT_REG;

acl_data_fifo rnode_16to17_bb5_cmp3_i_i_9_i_0_reg_17_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_16to17_bb5_cmp3_i_i_9_i_0_reg_17_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_16to17_bb5_cmp3_i_i_9_i_0_stall_in_reg_17_NO_SHIFT_REG),
	.valid_out(rnode_16to17_bb5_cmp3_i_i_9_i_0_valid_out_reg_17_NO_SHIFT_REG),
	.stall_out(rnode_16to17_bb5_cmp3_i_i_9_i_0_stall_out_reg_17_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_9_i),
	.data_out(rnode_16to17_bb5_cmp3_i_i_9_i_0_reg_17_NO_SHIFT_REG)
);

defparam rnode_16to17_bb5_cmp3_i_i_9_i_0_reg_17_fifo.DEPTH = 1;
defparam rnode_16to17_bb5_cmp3_i_i_9_i_0_reg_17_fifo.DATA_WIDTH = 1;
defparam rnode_16to17_bb5_cmp3_i_i_9_i_0_reg_17_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_16to17_bb5_cmp3_i_i_9_i_0_reg_17_fifo.IMPL = "shift_reg";

assign rnode_16to17_bb5_cmp3_i_i_9_i_0_reg_17_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_9_i_stall_in = 1'b0;
assign rnode_16to17_bb5_cmp3_i_i_9_i_0_NO_SHIFT_REG = rnode_16to17_bb5_cmp3_i_i_9_i_0_reg_17_NO_SHIFT_REG;
assign rnode_16to17_bb5_cmp3_i_i_9_i_0_stall_in_reg_17_NO_SHIFT_REG = 1'b0;
assign rnode_16to17_bb5_cmp3_i_i_9_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_9_i_stall_local;
wire [63:0] local_bb5_cond_i_i_9_i;

assign local_bb5_cond_i_i_9_i = (rnode_16to17_bb5_cmp3_i_i_9_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_9_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_9_i;

assign local_bb5_sub4_i_i_9_i = (rnode_16to17_bb5_or_i_i_9_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_9_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_10_i_valid_out;
wire local_bb5_shl_i_i_10_i_stall_in;
wire local_bb5_shl_i_i_10_i_inputs_ready;
wire local_bb5_shl_i_i_10_i_stall_local;
wire [63:0] local_bb5_shl_i_i_10_i;

assign local_bb5_shl_i_i_10_i_inputs_ready = (rnode_16to17_bb5_or_i_i_9_i_0_valid_out_NO_SHIFT_REG & rnode_16to17_bb5_cmp3_i_i_9_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_10_i = (local_bb5_sub4_i_i_9_i << 64'h1);
assign local_bb5_shl_i_i_10_i_valid_out = 1'b1;
assign rnode_16to17_bb5_or_i_i_9_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_16to17_bb5_cmp3_i_i_9_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_17to18_bb5_shl_i_i_10_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_17to18_bb5_shl_i_i_10_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_17to18_bb5_shl_i_i_10_i_0_NO_SHIFT_REG;
 logic rnode_17to18_bb5_shl_i_i_10_i_0_reg_18_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_17to18_bb5_shl_i_i_10_i_0_reg_18_NO_SHIFT_REG;
 logic rnode_17to18_bb5_shl_i_i_10_i_0_valid_out_reg_18_NO_SHIFT_REG;
 logic rnode_17to18_bb5_shl_i_i_10_i_0_stall_in_reg_18_NO_SHIFT_REG;
 logic rnode_17to18_bb5_shl_i_i_10_i_0_stall_out_reg_18_NO_SHIFT_REG;

acl_data_fifo rnode_17to18_bb5_shl_i_i_10_i_0_reg_18_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_17to18_bb5_shl_i_i_10_i_0_reg_18_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_17to18_bb5_shl_i_i_10_i_0_stall_in_reg_18_NO_SHIFT_REG),
	.valid_out(rnode_17to18_bb5_shl_i_i_10_i_0_valid_out_reg_18_NO_SHIFT_REG),
	.stall_out(rnode_17to18_bb5_shl_i_i_10_i_0_stall_out_reg_18_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_10_i),
	.data_out(rnode_17to18_bb5_shl_i_i_10_i_0_reg_18_NO_SHIFT_REG)
);

defparam rnode_17to18_bb5_shl_i_i_10_i_0_reg_18_fifo.DEPTH = 1;
defparam rnode_17to18_bb5_shl_i_i_10_i_0_reg_18_fifo.DATA_WIDTH = 64;
defparam rnode_17to18_bb5_shl_i_i_10_i_0_reg_18_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_17to18_bb5_shl_i_i_10_i_0_reg_18_fifo.IMPL = "shift_reg";

assign rnode_17to18_bb5_shl_i_i_10_i_0_reg_18_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_10_i_stall_in = 1'b0;
assign rnode_17to18_bb5_shl_i_i_10_i_0_NO_SHIFT_REG = rnode_17to18_bb5_shl_i_i_10_i_0_reg_18_NO_SHIFT_REG;
assign rnode_17to18_bb5_shl_i_i_10_i_0_stall_in_reg_18_NO_SHIFT_REG = 1'b0;
assign rnode_17to18_bb5_shl_i_i_10_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_10_i_stall_local;
wire [63:0] local_bb5_or_i_i_10_i;

assign local_bb5_or_i_i_10_i = (rnode_17to18_bb5_shl_i_i_10_i_0_NO_SHIFT_REG | local_bb5_and_i_i_10_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_10_i_valid_out_1;
wire local_bb5_or_i_i_10_i_stall_in_1;
 reg local_bb5_or_i_i_10_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_10_i_valid_out;
wire local_bb5_cmp3_i_i_10_i_stall_in;
 reg local_bb5_cmp3_i_i_10_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_10_i_inputs_ready;
wire local_bb5_cmp3_i_i_10_i_stall_local;
wire local_bb5_cmp3_i_i_10_i;

assign local_bb5_cmp3_i_i_10_i_inputs_ready = (rnode_17to18_bb5_var__u15_0_valid_out_NO_SHIFT_REG & rnode_17to18_bb5_shl_i_i_10_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_10_i = (local_bb5_or_i_i_10_i > 64'h3);
assign local_bb5_or_i_i_10_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_10_i_valid_out = 1'b1;
assign rnode_17to18_bb5_var__u15_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_17to18_bb5_shl_i_i_10_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_10_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_10_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_10_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_10_i_inputs_ready & (local_bb5_or_i_i_10_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_10_i_stall_in_1)) & local_bb5_cmp3_i_i_10_i_stall_local);
		local_bb5_cmp3_i_i_10_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_10_i_inputs_ready & (local_bb5_cmp3_i_i_10_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_10_i_stall_in)) & local_bb5_cmp3_i_i_10_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_18to19_bb5_or_i_i_10_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_18to19_bb5_or_i_i_10_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_18to19_bb5_or_i_i_10_i_0_NO_SHIFT_REG;
 logic rnode_18to19_bb5_or_i_i_10_i_0_reg_19_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_18to19_bb5_or_i_i_10_i_0_reg_19_NO_SHIFT_REG;
 logic rnode_18to19_bb5_or_i_i_10_i_0_valid_out_reg_19_NO_SHIFT_REG;
 logic rnode_18to19_bb5_or_i_i_10_i_0_stall_in_reg_19_NO_SHIFT_REG;
 logic rnode_18to19_bb5_or_i_i_10_i_0_stall_out_reg_19_NO_SHIFT_REG;

acl_data_fifo rnode_18to19_bb5_or_i_i_10_i_0_reg_19_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_18to19_bb5_or_i_i_10_i_0_reg_19_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_18to19_bb5_or_i_i_10_i_0_stall_in_reg_19_NO_SHIFT_REG),
	.valid_out(rnode_18to19_bb5_or_i_i_10_i_0_valid_out_reg_19_NO_SHIFT_REG),
	.stall_out(rnode_18to19_bb5_or_i_i_10_i_0_stall_out_reg_19_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_10_i),
	.data_out(rnode_18to19_bb5_or_i_i_10_i_0_reg_19_NO_SHIFT_REG)
);

defparam rnode_18to19_bb5_or_i_i_10_i_0_reg_19_fifo.DEPTH = 1;
defparam rnode_18to19_bb5_or_i_i_10_i_0_reg_19_fifo.DATA_WIDTH = 64;
defparam rnode_18to19_bb5_or_i_i_10_i_0_reg_19_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_18to19_bb5_or_i_i_10_i_0_reg_19_fifo.IMPL = "shift_reg";

assign rnode_18to19_bb5_or_i_i_10_i_0_reg_19_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_10_i_stall_in_1 = 1'b0;
assign rnode_18to19_bb5_or_i_i_10_i_0_NO_SHIFT_REG = rnode_18to19_bb5_or_i_i_10_i_0_reg_19_NO_SHIFT_REG;
assign rnode_18to19_bb5_or_i_i_10_i_0_stall_in_reg_19_NO_SHIFT_REG = 1'b0;
assign rnode_18to19_bb5_or_i_i_10_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_18to19_bb5_cmp3_i_i_10_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_18to19_bb5_cmp3_i_i_10_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_18to19_bb5_cmp3_i_i_10_i_0_NO_SHIFT_REG;
 logic rnode_18to19_bb5_cmp3_i_i_10_i_0_reg_19_inputs_ready_NO_SHIFT_REG;
 logic rnode_18to19_bb5_cmp3_i_i_10_i_0_reg_19_NO_SHIFT_REG;
 logic rnode_18to19_bb5_cmp3_i_i_10_i_0_valid_out_reg_19_NO_SHIFT_REG;
 logic rnode_18to19_bb5_cmp3_i_i_10_i_0_stall_in_reg_19_NO_SHIFT_REG;
 logic rnode_18to19_bb5_cmp3_i_i_10_i_0_stall_out_reg_19_NO_SHIFT_REG;

acl_data_fifo rnode_18to19_bb5_cmp3_i_i_10_i_0_reg_19_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_18to19_bb5_cmp3_i_i_10_i_0_reg_19_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_18to19_bb5_cmp3_i_i_10_i_0_stall_in_reg_19_NO_SHIFT_REG),
	.valid_out(rnode_18to19_bb5_cmp3_i_i_10_i_0_valid_out_reg_19_NO_SHIFT_REG),
	.stall_out(rnode_18to19_bb5_cmp3_i_i_10_i_0_stall_out_reg_19_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_10_i),
	.data_out(rnode_18to19_bb5_cmp3_i_i_10_i_0_reg_19_NO_SHIFT_REG)
);

defparam rnode_18to19_bb5_cmp3_i_i_10_i_0_reg_19_fifo.DEPTH = 1;
defparam rnode_18to19_bb5_cmp3_i_i_10_i_0_reg_19_fifo.DATA_WIDTH = 1;
defparam rnode_18to19_bb5_cmp3_i_i_10_i_0_reg_19_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_18to19_bb5_cmp3_i_i_10_i_0_reg_19_fifo.IMPL = "shift_reg";

assign rnode_18to19_bb5_cmp3_i_i_10_i_0_reg_19_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_10_i_stall_in = 1'b0;
assign rnode_18to19_bb5_cmp3_i_i_10_i_0_NO_SHIFT_REG = rnode_18to19_bb5_cmp3_i_i_10_i_0_reg_19_NO_SHIFT_REG;
assign rnode_18to19_bb5_cmp3_i_i_10_i_0_stall_in_reg_19_NO_SHIFT_REG = 1'b0;
assign rnode_18to19_bb5_cmp3_i_i_10_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_10_i_stall_local;
wire [63:0] local_bb5_cond_i_i_10_i;

assign local_bb5_cond_i_i_10_i = (rnode_18to19_bb5_cmp3_i_i_10_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_10_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_10_i;

assign local_bb5_sub4_i_i_10_i = (rnode_18to19_bb5_or_i_i_10_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_10_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_11_i_valid_out;
wire local_bb5_shl_i_i_11_i_stall_in;
wire local_bb5_shl_i_i_11_i_inputs_ready;
wire local_bb5_shl_i_i_11_i_stall_local;
wire [63:0] local_bb5_shl_i_i_11_i;

assign local_bb5_shl_i_i_11_i_inputs_ready = (rnode_18to19_bb5_or_i_i_10_i_0_valid_out_NO_SHIFT_REG & rnode_18to19_bb5_cmp3_i_i_10_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_11_i = (local_bb5_sub4_i_i_10_i << 64'h1);
assign local_bb5_shl_i_i_11_i_valid_out = 1'b1;
assign rnode_18to19_bb5_or_i_i_10_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_18to19_bb5_cmp3_i_i_10_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_19to20_bb5_shl_i_i_11_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_19to20_bb5_shl_i_i_11_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_19to20_bb5_shl_i_i_11_i_0_NO_SHIFT_REG;
 logic rnode_19to20_bb5_shl_i_i_11_i_0_reg_20_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_19to20_bb5_shl_i_i_11_i_0_reg_20_NO_SHIFT_REG;
 logic rnode_19to20_bb5_shl_i_i_11_i_0_valid_out_reg_20_NO_SHIFT_REG;
 logic rnode_19to20_bb5_shl_i_i_11_i_0_stall_in_reg_20_NO_SHIFT_REG;
 logic rnode_19to20_bb5_shl_i_i_11_i_0_stall_out_reg_20_NO_SHIFT_REG;

acl_data_fifo rnode_19to20_bb5_shl_i_i_11_i_0_reg_20_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_19to20_bb5_shl_i_i_11_i_0_reg_20_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_19to20_bb5_shl_i_i_11_i_0_stall_in_reg_20_NO_SHIFT_REG),
	.valid_out(rnode_19to20_bb5_shl_i_i_11_i_0_valid_out_reg_20_NO_SHIFT_REG),
	.stall_out(rnode_19to20_bb5_shl_i_i_11_i_0_stall_out_reg_20_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_11_i),
	.data_out(rnode_19to20_bb5_shl_i_i_11_i_0_reg_20_NO_SHIFT_REG)
);

defparam rnode_19to20_bb5_shl_i_i_11_i_0_reg_20_fifo.DEPTH = 1;
defparam rnode_19to20_bb5_shl_i_i_11_i_0_reg_20_fifo.DATA_WIDTH = 64;
defparam rnode_19to20_bb5_shl_i_i_11_i_0_reg_20_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_19to20_bb5_shl_i_i_11_i_0_reg_20_fifo.IMPL = "shift_reg";

assign rnode_19to20_bb5_shl_i_i_11_i_0_reg_20_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_11_i_stall_in = 1'b0;
assign rnode_19to20_bb5_shl_i_i_11_i_0_NO_SHIFT_REG = rnode_19to20_bb5_shl_i_i_11_i_0_reg_20_NO_SHIFT_REG;
assign rnode_19to20_bb5_shl_i_i_11_i_0_stall_in_reg_20_NO_SHIFT_REG = 1'b0;
assign rnode_19to20_bb5_shl_i_i_11_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_11_i_stall_local;
wire [63:0] local_bb5_or_i_i_11_i;

assign local_bb5_or_i_i_11_i = (rnode_19to20_bb5_shl_i_i_11_i_0_NO_SHIFT_REG | local_bb5_and_i_i_11_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_11_i_valid_out_1;
wire local_bb5_or_i_i_11_i_stall_in_1;
 reg local_bb5_or_i_i_11_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_11_i_valid_out;
wire local_bb5_cmp3_i_i_11_i_stall_in;
 reg local_bb5_cmp3_i_i_11_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_11_i_inputs_ready;
wire local_bb5_cmp3_i_i_11_i_stall_local;
wire local_bb5_cmp3_i_i_11_i;

assign local_bb5_cmp3_i_i_11_i_inputs_ready = (rnode_19to20_bb5_var__u16_0_valid_out_NO_SHIFT_REG & rnode_19to20_bb5_shl_i_i_11_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_11_i = (local_bb5_or_i_i_11_i > 64'h3);
assign local_bb5_or_i_i_11_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_11_i_valid_out = 1'b1;
assign rnode_19to20_bb5_var__u16_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_19to20_bb5_shl_i_i_11_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_11_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_11_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_11_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_11_i_inputs_ready & (local_bb5_or_i_i_11_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_11_i_stall_in_1)) & local_bb5_cmp3_i_i_11_i_stall_local);
		local_bb5_cmp3_i_i_11_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_11_i_inputs_ready & (local_bb5_cmp3_i_i_11_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_11_i_stall_in)) & local_bb5_cmp3_i_i_11_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_20to21_bb5_or_i_i_11_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_20to21_bb5_or_i_i_11_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_20to21_bb5_or_i_i_11_i_0_NO_SHIFT_REG;
 logic rnode_20to21_bb5_or_i_i_11_i_0_reg_21_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_20to21_bb5_or_i_i_11_i_0_reg_21_NO_SHIFT_REG;
 logic rnode_20to21_bb5_or_i_i_11_i_0_valid_out_reg_21_NO_SHIFT_REG;
 logic rnode_20to21_bb5_or_i_i_11_i_0_stall_in_reg_21_NO_SHIFT_REG;
 logic rnode_20to21_bb5_or_i_i_11_i_0_stall_out_reg_21_NO_SHIFT_REG;

acl_data_fifo rnode_20to21_bb5_or_i_i_11_i_0_reg_21_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_20to21_bb5_or_i_i_11_i_0_reg_21_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_20to21_bb5_or_i_i_11_i_0_stall_in_reg_21_NO_SHIFT_REG),
	.valid_out(rnode_20to21_bb5_or_i_i_11_i_0_valid_out_reg_21_NO_SHIFT_REG),
	.stall_out(rnode_20to21_bb5_or_i_i_11_i_0_stall_out_reg_21_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_11_i),
	.data_out(rnode_20to21_bb5_or_i_i_11_i_0_reg_21_NO_SHIFT_REG)
);

defparam rnode_20to21_bb5_or_i_i_11_i_0_reg_21_fifo.DEPTH = 1;
defparam rnode_20to21_bb5_or_i_i_11_i_0_reg_21_fifo.DATA_WIDTH = 64;
defparam rnode_20to21_bb5_or_i_i_11_i_0_reg_21_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_20to21_bb5_or_i_i_11_i_0_reg_21_fifo.IMPL = "shift_reg";

assign rnode_20to21_bb5_or_i_i_11_i_0_reg_21_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_11_i_stall_in_1 = 1'b0;
assign rnode_20to21_bb5_or_i_i_11_i_0_NO_SHIFT_REG = rnode_20to21_bb5_or_i_i_11_i_0_reg_21_NO_SHIFT_REG;
assign rnode_20to21_bb5_or_i_i_11_i_0_stall_in_reg_21_NO_SHIFT_REG = 1'b0;
assign rnode_20to21_bb5_or_i_i_11_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_20to21_bb5_cmp3_i_i_11_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_20to21_bb5_cmp3_i_i_11_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_20to21_bb5_cmp3_i_i_11_i_0_NO_SHIFT_REG;
 logic rnode_20to21_bb5_cmp3_i_i_11_i_0_reg_21_inputs_ready_NO_SHIFT_REG;
 logic rnode_20to21_bb5_cmp3_i_i_11_i_0_reg_21_NO_SHIFT_REG;
 logic rnode_20to21_bb5_cmp3_i_i_11_i_0_valid_out_reg_21_NO_SHIFT_REG;
 logic rnode_20to21_bb5_cmp3_i_i_11_i_0_stall_in_reg_21_NO_SHIFT_REG;
 logic rnode_20to21_bb5_cmp3_i_i_11_i_0_stall_out_reg_21_NO_SHIFT_REG;

acl_data_fifo rnode_20to21_bb5_cmp3_i_i_11_i_0_reg_21_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_20to21_bb5_cmp3_i_i_11_i_0_reg_21_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_20to21_bb5_cmp3_i_i_11_i_0_stall_in_reg_21_NO_SHIFT_REG),
	.valid_out(rnode_20to21_bb5_cmp3_i_i_11_i_0_valid_out_reg_21_NO_SHIFT_REG),
	.stall_out(rnode_20to21_bb5_cmp3_i_i_11_i_0_stall_out_reg_21_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_11_i),
	.data_out(rnode_20to21_bb5_cmp3_i_i_11_i_0_reg_21_NO_SHIFT_REG)
);

defparam rnode_20to21_bb5_cmp3_i_i_11_i_0_reg_21_fifo.DEPTH = 1;
defparam rnode_20to21_bb5_cmp3_i_i_11_i_0_reg_21_fifo.DATA_WIDTH = 1;
defparam rnode_20to21_bb5_cmp3_i_i_11_i_0_reg_21_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_20to21_bb5_cmp3_i_i_11_i_0_reg_21_fifo.IMPL = "shift_reg";

assign rnode_20to21_bb5_cmp3_i_i_11_i_0_reg_21_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_11_i_stall_in = 1'b0;
assign rnode_20to21_bb5_cmp3_i_i_11_i_0_NO_SHIFT_REG = rnode_20to21_bb5_cmp3_i_i_11_i_0_reg_21_NO_SHIFT_REG;
assign rnode_20to21_bb5_cmp3_i_i_11_i_0_stall_in_reg_21_NO_SHIFT_REG = 1'b0;
assign rnode_20to21_bb5_cmp3_i_i_11_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_11_i_stall_local;
wire [63:0] local_bb5_cond_i_i_11_i;

assign local_bb5_cond_i_i_11_i = (rnode_20to21_bb5_cmp3_i_i_11_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_11_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_11_i;

assign local_bb5_sub4_i_i_11_i = (rnode_20to21_bb5_or_i_i_11_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_11_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_12_i_valid_out;
wire local_bb5_shl_i_i_12_i_stall_in;
wire local_bb5_shl_i_i_12_i_inputs_ready;
wire local_bb5_shl_i_i_12_i_stall_local;
wire [63:0] local_bb5_shl_i_i_12_i;

assign local_bb5_shl_i_i_12_i_inputs_ready = (rnode_20to21_bb5_or_i_i_11_i_0_valid_out_NO_SHIFT_REG & rnode_20to21_bb5_cmp3_i_i_11_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_12_i = (local_bb5_sub4_i_i_11_i << 64'h1);
assign local_bb5_shl_i_i_12_i_valid_out = 1'b1;
assign rnode_20to21_bb5_or_i_i_11_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_20to21_bb5_cmp3_i_i_11_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_21to22_bb5_shl_i_i_12_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_21to22_bb5_shl_i_i_12_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_21to22_bb5_shl_i_i_12_i_0_NO_SHIFT_REG;
 logic rnode_21to22_bb5_shl_i_i_12_i_0_reg_22_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_21to22_bb5_shl_i_i_12_i_0_reg_22_NO_SHIFT_REG;
 logic rnode_21to22_bb5_shl_i_i_12_i_0_valid_out_reg_22_NO_SHIFT_REG;
 logic rnode_21to22_bb5_shl_i_i_12_i_0_stall_in_reg_22_NO_SHIFT_REG;
 logic rnode_21to22_bb5_shl_i_i_12_i_0_stall_out_reg_22_NO_SHIFT_REG;

acl_data_fifo rnode_21to22_bb5_shl_i_i_12_i_0_reg_22_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_21to22_bb5_shl_i_i_12_i_0_reg_22_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_21to22_bb5_shl_i_i_12_i_0_stall_in_reg_22_NO_SHIFT_REG),
	.valid_out(rnode_21to22_bb5_shl_i_i_12_i_0_valid_out_reg_22_NO_SHIFT_REG),
	.stall_out(rnode_21to22_bb5_shl_i_i_12_i_0_stall_out_reg_22_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_12_i),
	.data_out(rnode_21to22_bb5_shl_i_i_12_i_0_reg_22_NO_SHIFT_REG)
);

defparam rnode_21to22_bb5_shl_i_i_12_i_0_reg_22_fifo.DEPTH = 1;
defparam rnode_21to22_bb5_shl_i_i_12_i_0_reg_22_fifo.DATA_WIDTH = 64;
defparam rnode_21to22_bb5_shl_i_i_12_i_0_reg_22_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_21to22_bb5_shl_i_i_12_i_0_reg_22_fifo.IMPL = "shift_reg";

assign rnode_21to22_bb5_shl_i_i_12_i_0_reg_22_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_12_i_stall_in = 1'b0;
assign rnode_21to22_bb5_shl_i_i_12_i_0_NO_SHIFT_REG = rnode_21to22_bb5_shl_i_i_12_i_0_reg_22_NO_SHIFT_REG;
assign rnode_21to22_bb5_shl_i_i_12_i_0_stall_in_reg_22_NO_SHIFT_REG = 1'b0;
assign rnode_21to22_bb5_shl_i_i_12_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_12_i_stall_local;
wire [63:0] local_bb5_or_i_i_12_i;

assign local_bb5_or_i_i_12_i = (rnode_21to22_bb5_shl_i_i_12_i_0_NO_SHIFT_REG | local_bb5_and_i_i_12_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_12_i_valid_out_1;
wire local_bb5_or_i_i_12_i_stall_in_1;
 reg local_bb5_or_i_i_12_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_12_i_valid_out;
wire local_bb5_cmp3_i_i_12_i_stall_in;
 reg local_bb5_cmp3_i_i_12_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_12_i_inputs_ready;
wire local_bb5_cmp3_i_i_12_i_stall_local;
wire local_bb5_cmp3_i_i_12_i;

assign local_bb5_cmp3_i_i_12_i_inputs_ready = (rnode_21to22_bb5_var__u17_0_valid_out_NO_SHIFT_REG & rnode_21to22_bb5_shl_i_i_12_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_12_i = (local_bb5_or_i_i_12_i > 64'h3);
assign local_bb5_or_i_i_12_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_12_i_valid_out = 1'b1;
assign rnode_21to22_bb5_var__u17_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_21to22_bb5_shl_i_i_12_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_12_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_12_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_12_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_12_i_inputs_ready & (local_bb5_or_i_i_12_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_12_i_stall_in_1)) & local_bb5_cmp3_i_i_12_i_stall_local);
		local_bb5_cmp3_i_i_12_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_12_i_inputs_ready & (local_bb5_cmp3_i_i_12_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_12_i_stall_in)) & local_bb5_cmp3_i_i_12_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_22to23_bb5_or_i_i_12_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_22to23_bb5_or_i_i_12_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_22to23_bb5_or_i_i_12_i_0_NO_SHIFT_REG;
 logic rnode_22to23_bb5_or_i_i_12_i_0_reg_23_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_22to23_bb5_or_i_i_12_i_0_reg_23_NO_SHIFT_REG;
 logic rnode_22to23_bb5_or_i_i_12_i_0_valid_out_reg_23_NO_SHIFT_REG;
 logic rnode_22to23_bb5_or_i_i_12_i_0_stall_in_reg_23_NO_SHIFT_REG;
 logic rnode_22to23_bb5_or_i_i_12_i_0_stall_out_reg_23_NO_SHIFT_REG;

acl_data_fifo rnode_22to23_bb5_or_i_i_12_i_0_reg_23_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_22to23_bb5_or_i_i_12_i_0_reg_23_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_22to23_bb5_or_i_i_12_i_0_stall_in_reg_23_NO_SHIFT_REG),
	.valid_out(rnode_22to23_bb5_or_i_i_12_i_0_valid_out_reg_23_NO_SHIFT_REG),
	.stall_out(rnode_22to23_bb5_or_i_i_12_i_0_stall_out_reg_23_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_12_i),
	.data_out(rnode_22to23_bb5_or_i_i_12_i_0_reg_23_NO_SHIFT_REG)
);

defparam rnode_22to23_bb5_or_i_i_12_i_0_reg_23_fifo.DEPTH = 1;
defparam rnode_22to23_bb5_or_i_i_12_i_0_reg_23_fifo.DATA_WIDTH = 64;
defparam rnode_22to23_bb5_or_i_i_12_i_0_reg_23_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_22to23_bb5_or_i_i_12_i_0_reg_23_fifo.IMPL = "shift_reg";

assign rnode_22to23_bb5_or_i_i_12_i_0_reg_23_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_12_i_stall_in_1 = 1'b0;
assign rnode_22to23_bb5_or_i_i_12_i_0_NO_SHIFT_REG = rnode_22to23_bb5_or_i_i_12_i_0_reg_23_NO_SHIFT_REG;
assign rnode_22to23_bb5_or_i_i_12_i_0_stall_in_reg_23_NO_SHIFT_REG = 1'b0;
assign rnode_22to23_bb5_or_i_i_12_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_22to23_bb5_cmp3_i_i_12_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_22to23_bb5_cmp3_i_i_12_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_22to23_bb5_cmp3_i_i_12_i_0_NO_SHIFT_REG;
 logic rnode_22to23_bb5_cmp3_i_i_12_i_0_reg_23_inputs_ready_NO_SHIFT_REG;
 logic rnode_22to23_bb5_cmp3_i_i_12_i_0_reg_23_NO_SHIFT_REG;
 logic rnode_22to23_bb5_cmp3_i_i_12_i_0_valid_out_reg_23_NO_SHIFT_REG;
 logic rnode_22to23_bb5_cmp3_i_i_12_i_0_stall_in_reg_23_NO_SHIFT_REG;
 logic rnode_22to23_bb5_cmp3_i_i_12_i_0_stall_out_reg_23_NO_SHIFT_REG;

acl_data_fifo rnode_22to23_bb5_cmp3_i_i_12_i_0_reg_23_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_22to23_bb5_cmp3_i_i_12_i_0_reg_23_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_22to23_bb5_cmp3_i_i_12_i_0_stall_in_reg_23_NO_SHIFT_REG),
	.valid_out(rnode_22to23_bb5_cmp3_i_i_12_i_0_valid_out_reg_23_NO_SHIFT_REG),
	.stall_out(rnode_22to23_bb5_cmp3_i_i_12_i_0_stall_out_reg_23_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_12_i),
	.data_out(rnode_22to23_bb5_cmp3_i_i_12_i_0_reg_23_NO_SHIFT_REG)
);

defparam rnode_22to23_bb5_cmp3_i_i_12_i_0_reg_23_fifo.DEPTH = 1;
defparam rnode_22to23_bb5_cmp3_i_i_12_i_0_reg_23_fifo.DATA_WIDTH = 1;
defparam rnode_22to23_bb5_cmp3_i_i_12_i_0_reg_23_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_22to23_bb5_cmp3_i_i_12_i_0_reg_23_fifo.IMPL = "shift_reg";

assign rnode_22to23_bb5_cmp3_i_i_12_i_0_reg_23_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_12_i_stall_in = 1'b0;
assign rnode_22to23_bb5_cmp3_i_i_12_i_0_NO_SHIFT_REG = rnode_22to23_bb5_cmp3_i_i_12_i_0_reg_23_NO_SHIFT_REG;
assign rnode_22to23_bb5_cmp3_i_i_12_i_0_stall_in_reg_23_NO_SHIFT_REG = 1'b0;
assign rnode_22to23_bb5_cmp3_i_i_12_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_12_i_stall_local;
wire [63:0] local_bb5_cond_i_i_12_i;

assign local_bb5_cond_i_i_12_i = (rnode_22to23_bb5_cmp3_i_i_12_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_12_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_12_i;

assign local_bb5_sub4_i_i_12_i = (rnode_22to23_bb5_or_i_i_12_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_12_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_13_i_valid_out;
wire local_bb5_shl_i_i_13_i_stall_in;
wire local_bb5_shl_i_i_13_i_inputs_ready;
wire local_bb5_shl_i_i_13_i_stall_local;
wire [63:0] local_bb5_shl_i_i_13_i;

assign local_bb5_shl_i_i_13_i_inputs_ready = (rnode_22to23_bb5_or_i_i_12_i_0_valid_out_NO_SHIFT_REG & rnode_22to23_bb5_cmp3_i_i_12_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_13_i = (local_bb5_sub4_i_i_12_i << 64'h1);
assign local_bb5_shl_i_i_13_i_valid_out = 1'b1;
assign rnode_22to23_bb5_or_i_i_12_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_22to23_bb5_cmp3_i_i_12_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_23to24_bb5_shl_i_i_13_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_23to24_bb5_shl_i_i_13_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_23to24_bb5_shl_i_i_13_i_0_NO_SHIFT_REG;
 logic rnode_23to24_bb5_shl_i_i_13_i_0_reg_24_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_23to24_bb5_shl_i_i_13_i_0_reg_24_NO_SHIFT_REG;
 logic rnode_23to24_bb5_shl_i_i_13_i_0_valid_out_reg_24_NO_SHIFT_REG;
 logic rnode_23to24_bb5_shl_i_i_13_i_0_stall_in_reg_24_NO_SHIFT_REG;
 logic rnode_23to24_bb5_shl_i_i_13_i_0_stall_out_reg_24_NO_SHIFT_REG;

acl_data_fifo rnode_23to24_bb5_shl_i_i_13_i_0_reg_24_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_23to24_bb5_shl_i_i_13_i_0_reg_24_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_23to24_bb5_shl_i_i_13_i_0_stall_in_reg_24_NO_SHIFT_REG),
	.valid_out(rnode_23to24_bb5_shl_i_i_13_i_0_valid_out_reg_24_NO_SHIFT_REG),
	.stall_out(rnode_23to24_bb5_shl_i_i_13_i_0_stall_out_reg_24_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_13_i),
	.data_out(rnode_23to24_bb5_shl_i_i_13_i_0_reg_24_NO_SHIFT_REG)
);

defparam rnode_23to24_bb5_shl_i_i_13_i_0_reg_24_fifo.DEPTH = 1;
defparam rnode_23to24_bb5_shl_i_i_13_i_0_reg_24_fifo.DATA_WIDTH = 64;
defparam rnode_23to24_bb5_shl_i_i_13_i_0_reg_24_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_23to24_bb5_shl_i_i_13_i_0_reg_24_fifo.IMPL = "shift_reg";

assign rnode_23to24_bb5_shl_i_i_13_i_0_reg_24_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_13_i_stall_in = 1'b0;
assign rnode_23to24_bb5_shl_i_i_13_i_0_NO_SHIFT_REG = rnode_23to24_bb5_shl_i_i_13_i_0_reg_24_NO_SHIFT_REG;
assign rnode_23to24_bb5_shl_i_i_13_i_0_stall_in_reg_24_NO_SHIFT_REG = 1'b0;
assign rnode_23to24_bb5_shl_i_i_13_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_13_i_stall_local;
wire [63:0] local_bb5_or_i_i_13_i;

assign local_bb5_or_i_i_13_i = (rnode_23to24_bb5_shl_i_i_13_i_0_NO_SHIFT_REG | local_bb5_and_i_i_13_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_13_i_valid_out_1;
wire local_bb5_or_i_i_13_i_stall_in_1;
 reg local_bb5_or_i_i_13_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_13_i_valid_out;
wire local_bb5_cmp3_i_i_13_i_stall_in;
 reg local_bb5_cmp3_i_i_13_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_13_i_inputs_ready;
wire local_bb5_cmp3_i_i_13_i_stall_local;
wire local_bb5_cmp3_i_i_13_i;

assign local_bb5_cmp3_i_i_13_i_inputs_ready = (rnode_23to24_bb5_var__u18_0_valid_out_NO_SHIFT_REG & rnode_23to24_bb5_shl_i_i_13_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_13_i = (local_bb5_or_i_i_13_i > 64'h3);
assign local_bb5_or_i_i_13_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_13_i_valid_out = 1'b1;
assign rnode_23to24_bb5_var__u18_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_23to24_bb5_shl_i_i_13_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_13_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_13_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_13_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_13_i_inputs_ready & (local_bb5_or_i_i_13_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_13_i_stall_in_1)) & local_bb5_cmp3_i_i_13_i_stall_local);
		local_bb5_cmp3_i_i_13_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_13_i_inputs_ready & (local_bb5_cmp3_i_i_13_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_13_i_stall_in)) & local_bb5_cmp3_i_i_13_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_24to25_bb5_or_i_i_13_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_24to25_bb5_or_i_i_13_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_24to25_bb5_or_i_i_13_i_0_NO_SHIFT_REG;
 logic rnode_24to25_bb5_or_i_i_13_i_0_reg_25_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_24to25_bb5_or_i_i_13_i_0_reg_25_NO_SHIFT_REG;
 logic rnode_24to25_bb5_or_i_i_13_i_0_valid_out_reg_25_NO_SHIFT_REG;
 logic rnode_24to25_bb5_or_i_i_13_i_0_stall_in_reg_25_NO_SHIFT_REG;
 logic rnode_24to25_bb5_or_i_i_13_i_0_stall_out_reg_25_NO_SHIFT_REG;

acl_data_fifo rnode_24to25_bb5_or_i_i_13_i_0_reg_25_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_24to25_bb5_or_i_i_13_i_0_reg_25_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_24to25_bb5_or_i_i_13_i_0_stall_in_reg_25_NO_SHIFT_REG),
	.valid_out(rnode_24to25_bb5_or_i_i_13_i_0_valid_out_reg_25_NO_SHIFT_REG),
	.stall_out(rnode_24to25_bb5_or_i_i_13_i_0_stall_out_reg_25_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_13_i),
	.data_out(rnode_24to25_bb5_or_i_i_13_i_0_reg_25_NO_SHIFT_REG)
);

defparam rnode_24to25_bb5_or_i_i_13_i_0_reg_25_fifo.DEPTH = 1;
defparam rnode_24to25_bb5_or_i_i_13_i_0_reg_25_fifo.DATA_WIDTH = 64;
defparam rnode_24to25_bb5_or_i_i_13_i_0_reg_25_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_24to25_bb5_or_i_i_13_i_0_reg_25_fifo.IMPL = "shift_reg";

assign rnode_24to25_bb5_or_i_i_13_i_0_reg_25_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_13_i_stall_in_1 = 1'b0;
assign rnode_24to25_bb5_or_i_i_13_i_0_NO_SHIFT_REG = rnode_24to25_bb5_or_i_i_13_i_0_reg_25_NO_SHIFT_REG;
assign rnode_24to25_bb5_or_i_i_13_i_0_stall_in_reg_25_NO_SHIFT_REG = 1'b0;
assign rnode_24to25_bb5_or_i_i_13_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_24to25_bb5_cmp3_i_i_13_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_24to25_bb5_cmp3_i_i_13_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_24to25_bb5_cmp3_i_i_13_i_0_NO_SHIFT_REG;
 logic rnode_24to25_bb5_cmp3_i_i_13_i_0_reg_25_inputs_ready_NO_SHIFT_REG;
 logic rnode_24to25_bb5_cmp3_i_i_13_i_0_reg_25_NO_SHIFT_REG;
 logic rnode_24to25_bb5_cmp3_i_i_13_i_0_valid_out_reg_25_NO_SHIFT_REG;
 logic rnode_24to25_bb5_cmp3_i_i_13_i_0_stall_in_reg_25_NO_SHIFT_REG;
 logic rnode_24to25_bb5_cmp3_i_i_13_i_0_stall_out_reg_25_NO_SHIFT_REG;

acl_data_fifo rnode_24to25_bb5_cmp3_i_i_13_i_0_reg_25_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_24to25_bb5_cmp3_i_i_13_i_0_reg_25_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_24to25_bb5_cmp3_i_i_13_i_0_stall_in_reg_25_NO_SHIFT_REG),
	.valid_out(rnode_24to25_bb5_cmp3_i_i_13_i_0_valid_out_reg_25_NO_SHIFT_REG),
	.stall_out(rnode_24to25_bb5_cmp3_i_i_13_i_0_stall_out_reg_25_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_13_i),
	.data_out(rnode_24to25_bb5_cmp3_i_i_13_i_0_reg_25_NO_SHIFT_REG)
);

defparam rnode_24to25_bb5_cmp3_i_i_13_i_0_reg_25_fifo.DEPTH = 1;
defparam rnode_24to25_bb5_cmp3_i_i_13_i_0_reg_25_fifo.DATA_WIDTH = 1;
defparam rnode_24to25_bb5_cmp3_i_i_13_i_0_reg_25_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_24to25_bb5_cmp3_i_i_13_i_0_reg_25_fifo.IMPL = "shift_reg";

assign rnode_24to25_bb5_cmp3_i_i_13_i_0_reg_25_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_13_i_stall_in = 1'b0;
assign rnode_24to25_bb5_cmp3_i_i_13_i_0_NO_SHIFT_REG = rnode_24to25_bb5_cmp3_i_i_13_i_0_reg_25_NO_SHIFT_REG;
assign rnode_24to25_bb5_cmp3_i_i_13_i_0_stall_in_reg_25_NO_SHIFT_REG = 1'b0;
assign rnode_24to25_bb5_cmp3_i_i_13_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_13_i_stall_local;
wire [63:0] local_bb5_cond_i_i_13_i;

assign local_bb5_cond_i_i_13_i = (rnode_24to25_bb5_cmp3_i_i_13_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_13_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_13_i;

assign local_bb5_sub4_i_i_13_i = (rnode_24to25_bb5_or_i_i_13_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_13_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_14_i_valid_out;
wire local_bb5_shl_i_i_14_i_stall_in;
wire local_bb5_shl_i_i_14_i_inputs_ready;
wire local_bb5_shl_i_i_14_i_stall_local;
wire [63:0] local_bb5_shl_i_i_14_i;

assign local_bb5_shl_i_i_14_i_inputs_ready = (rnode_24to25_bb5_or_i_i_13_i_0_valid_out_NO_SHIFT_REG & rnode_24to25_bb5_cmp3_i_i_13_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_14_i = (local_bb5_sub4_i_i_13_i << 64'h1);
assign local_bb5_shl_i_i_14_i_valid_out = 1'b1;
assign rnode_24to25_bb5_or_i_i_13_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_24to25_bb5_cmp3_i_i_13_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_25to26_bb5_shl_i_i_14_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_25to26_bb5_shl_i_i_14_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_25to26_bb5_shl_i_i_14_i_0_NO_SHIFT_REG;
 logic rnode_25to26_bb5_shl_i_i_14_i_0_reg_26_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_25to26_bb5_shl_i_i_14_i_0_reg_26_NO_SHIFT_REG;
 logic rnode_25to26_bb5_shl_i_i_14_i_0_valid_out_reg_26_NO_SHIFT_REG;
 logic rnode_25to26_bb5_shl_i_i_14_i_0_stall_in_reg_26_NO_SHIFT_REG;
 logic rnode_25to26_bb5_shl_i_i_14_i_0_stall_out_reg_26_NO_SHIFT_REG;

acl_data_fifo rnode_25to26_bb5_shl_i_i_14_i_0_reg_26_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_25to26_bb5_shl_i_i_14_i_0_reg_26_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_25to26_bb5_shl_i_i_14_i_0_stall_in_reg_26_NO_SHIFT_REG),
	.valid_out(rnode_25to26_bb5_shl_i_i_14_i_0_valid_out_reg_26_NO_SHIFT_REG),
	.stall_out(rnode_25to26_bb5_shl_i_i_14_i_0_stall_out_reg_26_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_14_i),
	.data_out(rnode_25to26_bb5_shl_i_i_14_i_0_reg_26_NO_SHIFT_REG)
);

defparam rnode_25to26_bb5_shl_i_i_14_i_0_reg_26_fifo.DEPTH = 1;
defparam rnode_25to26_bb5_shl_i_i_14_i_0_reg_26_fifo.DATA_WIDTH = 64;
defparam rnode_25to26_bb5_shl_i_i_14_i_0_reg_26_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_25to26_bb5_shl_i_i_14_i_0_reg_26_fifo.IMPL = "shift_reg";

assign rnode_25to26_bb5_shl_i_i_14_i_0_reg_26_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_14_i_stall_in = 1'b0;
assign rnode_25to26_bb5_shl_i_i_14_i_0_NO_SHIFT_REG = rnode_25to26_bb5_shl_i_i_14_i_0_reg_26_NO_SHIFT_REG;
assign rnode_25to26_bb5_shl_i_i_14_i_0_stall_in_reg_26_NO_SHIFT_REG = 1'b0;
assign rnode_25to26_bb5_shl_i_i_14_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_14_i_stall_local;
wire [63:0] local_bb5_or_i_i_14_i;

assign local_bb5_or_i_i_14_i = (rnode_25to26_bb5_shl_i_i_14_i_0_NO_SHIFT_REG | local_bb5_and_i_i_14_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_14_i_valid_out_1;
wire local_bb5_or_i_i_14_i_stall_in_1;
 reg local_bb5_or_i_i_14_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_14_i_valid_out;
wire local_bb5_cmp3_i_i_14_i_stall_in;
 reg local_bb5_cmp3_i_i_14_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_14_i_inputs_ready;
wire local_bb5_cmp3_i_i_14_i_stall_local;
wire local_bb5_cmp3_i_i_14_i;

assign local_bb5_cmp3_i_i_14_i_inputs_ready = (rnode_25to26_bb5_var__u19_0_valid_out_NO_SHIFT_REG & rnode_25to26_bb5_shl_i_i_14_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_14_i = (local_bb5_or_i_i_14_i > 64'h3);
assign local_bb5_or_i_i_14_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_14_i_valid_out = 1'b1;
assign rnode_25to26_bb5_var__u19_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_25to26_bb5_shl_i_i_14_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_14_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_14_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_14_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_14_i_inputs_ready & (local_bb5_or_i_i_14_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_14_i_stall_in_1)) & local_bb5_cmp3_i_i_14_i_stall_local);
		local_bb5_cmp3_i_i_14_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_14_i_inputs_ready & (local_bb5_cmp3_i_i_14_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_14_i_stall_in)) & local_bb5_cmp3_i_i_14_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_26to27_bb5_or_i_i_14_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_26to27_bb5_or_i_i_14_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_26to27_bb5_or_i_i_14_i_0_NO_SHIFT_REG;
 logic rnode_26to27_bb5_or_i_i_14_i_0_reg_27_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_26to27_bb5_or_i_i_14_i_0_reg_27_NO_SHIFT_REG;
 logic rnode_26to27_bb5_or_i_i_14_i_0_valid_out_reg_27_NO_SHIFT_REG;
 logic rnode_26to27_bb5_or_i_i_14_i_0_stall_in_reg_27_NO_SHIFT_REG;
 logic rnode_26to27_bb5_or_i_i_14_i_0_stall_out_reg_27_NO_SHIFT_REG;

acl_data_fifo rnode_26to27_bb5_or_i_i_14_i_0_reg_27_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_26to27_bb5_or_i_i_14_i_0_reg_27_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_26to27_bb5_or_i_i_14_i_0_stall_in_reg_27_NO_SHIFT_REG),
	.valid_out(rnode_26to27_bb5_or_i_i_14_i_0_valid_out_reg_27_NO_SHIFT_REG),
	.stall_out(rnode_26to27_bb5_or_i_i_14_i_0_stall_out_reg_27_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_14_i),
	.data_out(rnode_26to27_bb5_or_i_i_14_i_0_reg_27_NO_SHIFT_REG)
);

defparam rnode_26to27_bb5_or_i_i_14_i_0_reg_27_fifo.DEPTH = 1;
defparam rnode_26to27_bb5_or_i_i_14_i_0_reg_27_fifo.DATA_WIDTH = 64;
defparam rnode_26to27_bb5_or_i_i_14_i_0_reg_27_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_26to27_bb5_or_i_i_14_i_0_reg_27_fifo.IMPL = "shift_reg";

assign rnode_26to27_bb5_or_i_i_14_i_0_reg_27_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_14_i_stall_in_1 = 1'b0;
assign rnode_26to27_bb5_or_i_i_14_i_0_NO_SHIFT_REG = rnode_26to27_bb5_or_i_i_14_i_0_reg_27_NO_SHIFT_REG;
assign rnode_26to27_bb5_or_i_i_14_i_0_stall_in_reg_27_NO_SHIFT_REG = 1'b0;
assign rnode_26to27_bb5_or_i_i_14_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_26to27_bb5_cmp3_i_i_14_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_26to27_bb5_cmp3_i_i_14_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_26to27_bb5_cmp3_i_i_14_i_0_NO_SHIFT_REG;
 logic rnode_26to27_bb5_cmp3_i_i_14_i_0_reg_27_inputs_ready_NO_SHIFT_REG;
 logic rnode_26to27_bb5_cmp3_i_i_14_i_0_reg_27_NO_SHIFT_REG;
 logic rnode_26to27_bb5_cmp3_i_i_14_i_0_valid_out_reg_27_NO_SHIFT_REG;
 logic rnode_26to27_bb5_cmp3_i_i_14_i_0_stall_in_reg_27_NO_SHIFT_REG;
 logic rnode_26to27_bb5_cmp3_i_i_14_i_0_stall_out_reg_27_NO_SHIFT_REG;

acl_data_fifo rnode_26to27_bb5_cmp3_i_i_14_i_0_reg_27_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_26to27_bb5_cmp3_i_i_14_i_0_reg_27_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_26to27_bb5_cmp3_i_i_14_i_0_stall_in_reg_27_NO_SHIFT_REG),
	.valid_out(rnode_26to27_bb5_cmp3_i_i_14_i_0_valid_out_reg_27_NO_SHIFT_REG),
	.stall_out(rnode_26to27_bb5_cmp3_i_i_14_i_0_stall_out_reg_27_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_14_i),
	.data_out(rnode_26to27_bb5_cmp3_i_i_14_i_0_reg_27_NO_SHIFT_REG)
);

defparam rnode_26to27_bb5_cmp3_i_i_14_i_0_reg_27_fifo.DEPTH = 1;
defparam rnode_26to27_bb5_cmp3_i_i_14_i_0_reg_27_fifo.DATA_WIDTH = 1;
defparam rnode_26to27_bb5_cmp3_i_i_14_i_0_reg_27_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_26to27_bb5_cmp3_i_i_14_i_0_reg_27_fifo.IMPL = "shift_reg";

assign rnode_26to27_bb5_cmp3_i_i_14_i_0_reg_27_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_14_i_stall_in = 1'b0;
assign rnode_26to27_bb5_cmp3_i_i_14_i_0_NO_SHIFT_REG = rnode_26to27_bb5_cmp3_i_i_14_i_0_reg_27_NO_SHIFT_REG;
assign rnode_26to27_bb5_cmp3_i_i_14_i_0_stall_in_reg_27_NO_SHIFT_REG = 1'b0;
assign rnode_26to27_bb5_cmp3_i_i_14_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_14_i_stall_local;
wire [63:0] local_bb5_cond_i_i_14_i;

assign local_bb5_cond_i_i_14_i = (rnode_26to27_bb5_cmp3_i_i_14_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_14_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_14_i;

assign local_bb5_sub4_i_i_14_i = (rnode_26to27_bb5_or_i_i_14_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_14_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_15_i_valid_out;
wire local_bb5_shl_i_i_15_i_stall_in;
wire local_bb5_shl_i_i_15_i_inputs_ready;
wire local_bb5_shl_i_i_15_i_stall_local;
wire [63:0] local_bb5_shl_i_i_15_i;

assign local_bb5_shl_i_i_15_i_inputs_ready = (rnode_26to27_bb5_or_i_i_14_i_0_valid_out_NO_SHIFT_REG & rnode_26to27_bb5_cmp3_i_i_14_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_15_i = (local_bb5_sub4_i_i_14_i << 64'h1);
assign local_bb5_shl_i_i_15_i_valid_out = 1'b1;
assign rnode_26to27_bb5_or_i_i_14_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_26to27_bb5_cmp3_i_i_14_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_27to28_bb5_shl_i_i_15_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_27to28_bb5_shl_i_i_15_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_27to28_bb5_shl_i_i_15_i_0_NO_SHIFT_REG;
 logic rnode_27to28_bb5_shl_i_i_15_i_0_reg_28_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_27to28_bb5_shl_i_i_15_i_0_reg_28_NO_SHIFT_REG;
 logic rnode_27to28_bb5_shl_i_i_15_i_0_valid_out_reg_28_NO_SHIFT_REG;
 logic rnode_27to28_bb5_shl_i_i_15_i_0_stall_in_reg_28_NO_SHIFT_REG;
 logic rnode_27to28_bb5_shl_i_i_15_i_0_stall_out_reg_28_NO_SHIFT_REG;

acl_data_fifo rnode_27to28_bb5_shl_i_i_15_i_0_reg_28_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_27to28_bb5_shl_i_i_15_i_0_reg_28_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_27to28_bb5_shl_i_i_15_i_0_stall_in_reg_28_NO_SHIFT_REG),
	.valid_out(rnode_27to28_bb5_shl_i_i_15_i_0_valid_out_reg_28_NO_SHIFT_REG),
	.stall_out(rnode_27to28_bb5_shl_i_i_15_i_0_stall_out_reg_28_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_15_i),
	.data_out(rnode_27to28_bb5_shl_i_i_15_i_0_reg_28_NO_SHIFT_REG)
);

defparam rnode_27to28_bb5_shl_i_i_15_i_0_reg_28_fifo.DEPTH = 1;
defparam rnode_27to28_bb5_shl_i_i_15_i_0_reg_28_fifo.DATA_WIDTH = 64;
defparam rnode_27to28_bb5_shl_i_i_15_i_0_reg_28_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_27to28_bb5_shl_i_i_15_i_0_reg_28_fifo.IMPL = "shift_reg";

assign rnode_27to28_bb5_shl_i_i_15_i_0_reg_28_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_15_i_stall_in = 1'b0;
assign rnode_27to28_bb5_shl_i_i_15_i_0_NO_SHIFT_REG = rnode_27to28_bb5_shl_i_i_15_i_0_reg_28_NO_SHIFT_REG;
assign rnode_27to28_bb5_shl_i_i_15_i_0_stall_in_reg_28_NO_SHIFT_REG = 1'b0;
assign rnode_27to28_bb5_shl_i_i_15_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_15_i_stall_local;
wire [63:0] local_bb5_or_i_i_15_i;

assign local_bb5_or_i_i_15_i = (rnode_27to28_bb5_shl_i_i_15_i_0_NO_SHIFT_REG | local_bb5_and_i_i_15_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_15_i_valid_out_1;
wire local_bb5_or_i_i_15_i_stall_in_1;
 reg local_bb5_or_i_i_15_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_15_i_valid_out;
wire local_bb5_cmp3_i_i_15_i_stall_in;
 reg local_bb5_cmp3_i_i_15_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_15_i_inputs_ready;
wire local_bb5_cmp3_i_i_15_i_stall_local;
wire local_bb5_cmp3_i_i_15_i;

assign local_bb5_cmp3_i_i_15_i_inputs_ready = (rnode_27to28_bb5_var__u20_0_valid_out_NO_SHIFT_REG & rnode_27to28_bb5_shl_i_i_15_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_15_i = (local_bb5_or_i_i_15_i > 64'h3);
assign local_bb5_or_i_i_15_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_15_i_valid_out = 1'b1;
assign rnode_27to28_bb5_var__u20_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_27to28_bb5_shl_i_i_15_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_15_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_15_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_15_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_15_i_inputs_ready & (local_bb5_or_i_i_15_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_15_i_stall_in_1)) & local_bb5_cmp3_i_i_15_i_stall_local);
		local_bb5_cmp3_i_i_15_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_15_i_inputs_ready & (local_bb5_cmp3_i_i_15_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_15_i_stall_in)) & local_bb5_cmp3_i_i_15_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_28to29_bb5_or_i_i_15_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_28to29_bb5_or_i_i_15_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_28to29_bb5_or_i_i_15_i_0_NO_SHIFT_REG;
 logic rnode_28to29_bb5_or_i_i_15_i_0_reg_29_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_28to29_bb5_or_i_i_15_i_0_reg_29_NO_SHIFT_REG;
 logic rnode_28to29_bb5_or_i_i_15_i_0_valid_out_reg_29_NO_SHIFT_REG;
 logic rnode_28to29_bb5_or_i_i_15_i_0_stall_in_reg_29_NO_SHIFT_REG;
 logic rnode_28to29_bb5_or_i_i_15_i_0_stall_out_reg_29_NO_SHIFT_REG;

acl_data_fifo rnode_28to29_bb5_or_i_i_15_i_0_reg_29_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_28to29_bb5_or_i_i_15_i_0_reg_29_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_28to29_bb5_or_i_i_15_i_0_stall_in_reg_29_NO_SHIFT_REG),
	.valid_out(rnode_28to29_bb5_or_i_i_15_i_0_valid_out_reg_29_NO_SHIFT_REG),
	.stall_out(rnode_28to29_bb5_or_i_i_15_i_0_stall_out_reg_29_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_15_i),
	.data_out(rnode_28to29_bb5_or_i_i_15_i_0_reg_29_NO_SHIFT_REG)
);

defparam rnode_28to29_bb5_or_i_i_15_i_0_reg_29_fifo.DEPTH = 1;
defparam rnode_28to29_bb5_or_i_i_15_i_0_reg_29_fifo.DATA_WIDTH = 64;
defparam rnode_28to29_bb5_or_i_i_15_i_0_reg_29_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_28to29_bb5_or_i_i_15_i_0_reg_29_fifo.IMPL = "shift_reg";

assign rnode_28to29_bb5_or_i_i_15_i_0_reg_29_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_15_i_stall_in_1 = 1'b0;
assign rnode_28to29_bb5_or_i_i_15_i_0_NO_SHIFT_REG = rnode_28to29_bb5_or_i_i_15_i_0_reg_29_NO_SHIFT_REG;
assign rnode_28to29_bb5_or_i_i_15_i_0_stall_in_reg_29_NO_SHIFT_REG = 1'b0;
assign rnode_28to29_bb5_or_i_i_15_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_28to29_bb5_cmp3_i_i_15_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_28to29_bb5_cmp3_i_i_15_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_28to29_bb5_cmp3_i_i_15_i_0_NO_SHIFT_REG;
 logic rnode_28to29_bb5_cmp3_i_i_15_i_0_reg_29_inputs_ready_NO_SHIFT_REG;
 logic rnode_28to29_bb5_cmp3_i_i_15_i_0_reg_29_NO_SHIFT_REG;
 logic rnode_28to29_bb5_cmp3_i_i_15_i_0_valid_out_reg_29_NO_SHIFT_REG;
 logic rnode_28to29_bb5_cmp3_i_i_15_i_0_stall_in_reg_29_NO_SHIFT_REG;
 logic rnode_28to29_bb5_cmp3_i_i_15_i_0_stall_out_reg_29_NO_SHIFT_REG;

acl_data_fifo rnode_28to29_bb5_cmp3_i_i_15_i_0_reg_29_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_28to29_bb5_cmp3_i_i_15_i_0_reg_29_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_28to29_bb5_cmp3_i_i_15_i_0_stall_in_reg_29_NO_SHIFT_REG),
	.valid_out(rnode_28to29_bb5_cmp3_i_i_15_i_0_valid_out_reg_29_NO_SHIFT_REG),
	.stall_out(rnode_28to29_bb5_cmp3_i_i_15_i_0_stall_out_reg_29_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_15_i),
	.data_out(rnode_28to29_bb5_cmp3_i_i_15_i_0_reg_29_NO_SHIFT_REG)
);

defparam rnode_28to29_bb5_cmp3_i_i_15_i_0_reg_29_fifo.DEPTH = 1;
defparam rnode_28to29_bb5_cmp3_i_i_15_i_0_reg_29_fifo.DATA_WIDTH = 1;
defparam rnode_28to29_bb5_cmp3_i_i_15_i_0_reg_29_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_28to29_bb5_cmp3_i_i_15_i_0_reg_29_fifo.IMPL = "shift_reg";

assign rnode_28to29_bb5_cmp3_i_i_15_i_0_reg_29_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_15_i_stall_in = 1'b0;
assign rnode_28to29_bb5_cmp3_i_i_15_i_0_NO_SHIFT_REG = rnode_28to29_bb5_cmp3_i_i_15_i_0_reg_29_NO_SHIFT_REG;
assign rnode_28to29_bb5_cmp3_i_i_15_i_0_stall_in_reg_29_NO_SHIFT_REG = 1'b0;
assign rnode_28to29_bb5_cmp3_i_i_15_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_15_i_stall_local;
wire [63:0] local_bb5_cond_i_i_15_i;

assign local_bb5_cond_i_i_15_i = (rnode_28to29_bb5_cmp3_i_i_15_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_15_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_15_i;

assign local_bb5_sub4_i_i_15_i = (rnode_28to29_bb5_or_i_i_15_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_15_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_16_i_valid_out;
wire local_bb5_shl_i_i_16_i_stall_in;
wire local_bb5_shl_i_i_16_i_inputs_ready;
wire local_bb5_shl_i_i_16_i_stall_local;
wire [63:0] local_bb5_shl_i_i_16_i;

assign local_bb5_shl_i_i_16_i_inputs_ready = (rnode_28to29_bb5_or_i_i_15_i_0_valid_out_NO_SHIFT_REG & rnode_28to29_bb5_cmp3_i_i_15_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_16_i = (local_bb5_sub4_i_i_15_i << 64'h1);
assign local_bb5_shl_i_i_16_i_valid_out = 1'b1;
assign rnode_28to29_bb5_or_i_i_15_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_28to29_bb5_cmp3_i_i_15_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_29to30_bb5_shl_i_i_16_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_29to30_bb5_shl_i_i_16_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_29to30_bb5_shl_i_i_16_i_0_NO_SHIFT_REG;
 logic rnode_29to30_bb5_shl_i_i_16_i_0_reg_30_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_29to30_bb5_shl_i_i_16_i_0_reg_30_NO_SHIFT_REG;
 logic rnode_29to30_bb5_shl_i_i_16_i_0_valid_out_reg_30_NO_SHIFT_REG;
 logic rnode_29to30_bb5_shl_i_i_16_i_0_stall_in_reg_30_NO_SHIFT_REG;
 logic rnode_29to30_bb5_shl_i_i_16_i_0_stall_out_reg_30_NO_SHIFT_REG;

acl_data_fifo rnode_29to30_bb5_shl_i_i_16_i_0_reg_30_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_29to30_bb5_shl_i_i_16_i_0_reg_30_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_29to30_bb5_shl_i_i_16_i_0_stall_in_reg_30_NO_SHIFT_REG),
	.valid_out(rnode_29to30_bb5_shl_i_i_16_i_0_valid_out_reg_30_NO_SHIFT_REG),
	.stall_out(rnode_29to30_bb5_shl_i_i_16_i_0_stall_out_reg_30_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_16_i),
	.data_out(rnode_29to30_bb5_shl_i_i_16_i_0_reg_30_NO_SHIFT_REG)
);

defparam rnode_29to30_bb5_shl_i_i_16_i_0_reg_30_fifo.DEPTH = 1;
defparam rnode_29to30_bb5_shl_i_i_16_i_0_reg_30_fifo.DATA_WIDTH = 64;
defparam rnode_29to30_bb5_shl_i_i_16_i_0_reg_30_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_29to30_bb5_shl_i_i_16_i_0_reg_30_fifo.IMPL = "shift_reg";

assign rnode_29to30_bb5_shl_i_i_16_i_0_reg_30_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_16_i_stall_in = 1'b0;
assign rnode_29to30_bb5_shl_i_i_16_i_0_NO_SHIFT_REG = rnode_29to30_bb5_shl_i_i_16_i_0_reg_30_NO_SHIFT_REG;
assign rnode_29to30_bb5_shl_i_i_16_i_0_stall_in_reg_30_NO_SHIFT_REG = 1'b0;
assign rnode_29to30_bb5_shl_i_i_16_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_16_i_stall_local;
wire [63:0] local_bb5_or_i_i_16_i;

assign local_bb5_or_i_i_16_i = (rnode_29to30_bb5_shl_i_i_16_i_0_NO_SHIFT_REG | local_bb5_and_i_i_16_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_16_i_valid_out_1;
wire local_bb5_or_i_i_16_i_stall_in_1;
 reg local_bb5_or_i_i_16_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_16_i_valid_out;
wire local_bb5_cmp3_i_i_16_i_stall_in;
 reg local_bb5_cmp3_i_i_16_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_16_i_inputs_ready;
wire local_bb5_cmp3_i_i_16_i_stall_local;
wire local_bb5_cmp3_i_i_16_i;

assign local_bb5_cmp3_i_i_16_i_inputs_ready = (rnode_29to30_bb5_var__u21_0_valid_out_NO_SHIFT_REG & rnode_29to30_bb5_shl_i_i_16_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_16_i = (local_bb5_or_i_i_16_i > 64'h3);
assign local_bb5_or_i_i_16_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_16_i_valid_out = 1'b1;
assign rnode_29to30_bb5_var__u21_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_29to30_bb5_shl_i_i_16_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_16_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_16_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_16_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_16_i_inputs_ready & (local_bb5_or_i_i_16_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_16_i_stall_in_1)) & local_bb5_cmp3_i_i_16_i_stall_local);
		local_bb5_cmp3_i_i_16_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_16_i_inputs_ready & (local_bb5_cmp3_i_i_16_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_16_i_stall_in)) & local_bb5_cmp3_i_i_16_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_30to31_bb5_or_i_i_16_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_30to31_bb5_or_i_i_16_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_30to31_bb5_or_i_i_16_i_0_NO_SHIFT_REG;
 logic rnode_30to31_bb5_or_i_i_16_i_0_reg_31_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_30to31_bb5_or_i_i_16_i_0_reg_31_NO_SHIFT_REG;
 logic rnode_30to31_bb5_or_i_i_16_i_0_valid_out_reg_31_NO_SHIFT_REG;
 logic rnode_30to31_bb5_or_i_i_16_i_0_stall_in_reg_31_NO_SHIFT_REG;
 logic rnode_30to31_bb5_or_i_i_16_i_0_stall_out_reg_31_NO_SHIFT_REG;

acl_data_fifo rnode_30to31_bb5_or_i_i_16_i_0_reg_31_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_30to31_bb5_or_i_i_16_i_0_reg_31_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_30to31_bb5_or_i_i_16_i_0_stall_in_reg_31_NO_SHIFT_REG),
	.valid_out(rnode_30to31_bb5_or_i_i_16_i_0_valid_out_reg_31_NO_SHIFT_REG),
	.stall_out(rnode_30to31_bb5_or_i_i_16_i_0_stall_out_reg_31_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_16_i),
	.data_out(rnode_30to31_bb5_or_i_i_16_i_0_reg_31_NO_SHIFT_REG)
);

defparam rnode_30to31_bb5_or_i_i_16_i_0_reg_31_fifo.DEPTH = 1;
defparam rnode_30to31_bb5_or_i_i_16_i_0_reg_31_fifo.DATA_WIDTH = 64;
defparam rnode_30to31_bb5_or_i_i_16_i_0_reg_31_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_30to31_bb5_or_i_i_16_i_0_reg_31_fifo.IMPL = "shift_reg";

assign rnode_30to31_bb5_or_i_i_16_i_0_reg_31_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_16_i_stall_in_1 = 1'b0;
assign rnode_30to31_bb5_or_i_i_16_i_0_NO_SHIFT_REG = rnode_30to31_bb5_or_i_i_16_i_0_reg_31_NO_SHIFT_REG;
assign rnode_30to31_bb5_or_i_i_16_i_0_stall_in_reg_31_NO_SHIFT_REG = 1'b0;
assign rnode_30to31_bb5_or_i_i_16_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_30to31_bb5_cmp3_i_i_16_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_30to31_bb5_cmp3_i_i_16_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_30to31_bb5_cmp3_i_i_16_i_0_NO_SHIFT_REG;
 logic rnode_30to31_bb5_cmp3_i_i_16_i_0_reg_31_inputs_ready_NO_SHIFT_REG;
 logic rnode_30to31_bb5_cmp3_i_i_16_i_0_reg_31_NO_SHIFT_REG;
 logic rnode_30to31_bb5_cmp3_i_i_16_i_0_valid_out_reg_31_NO_SHIFT_REG;
 logic rnode_30to31_bb5_cmp3_i_i_16_i_0_stall_in_reg_31_NO_SHIFT_REG;
 logic rnode_30to31_bb5_cmp3_i_i_16_i_0_stall_out_reg_31_NO_SHIFT_REG;

acl_data_fifo rnode_30to31_bb5_cmp3_i_i_16_i_0_reg_31_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_30to31_bb5_cmp3_i_i_16_i_0_reg_31_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_30to31_bb5_cmp3_i_i_16_i_0_stall_in_reg_31_NO_SHIFT_REG),
	.valid_out(rnode_30to31_bb5_cmp3_i_i_16_i_0_valid_out_reg_31_NO_SHIFT_REG),
	.stall_out(rnode_30to31_bb5_cmp3_i_i_16_i_0_stall_out_reg_31_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_16_i),
	.data_out(rnode_30to31_bb5_cmp3_i_i_16_i_0_reg_31_NO_SHIFT_REG)
);

defparam rnode_30to31_bb5_cmp3_i_i_16_i_0_reg_31_fifo.DEPTH = 1;
defparam rnode_30to31_bb5_cmp3_i_i_16_i_0_reg_31_fifo.DATA_WIDTH = 1;
defparam rnode_30to31_bb5_cmp3_i_i_16_i_0_reg_31_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_30to31_bb5_cmp3_i_i_16_i_0_reg_31_fifo.IMPL = "shift_reg";

assign rnode_30to31_bb5_cmp3_i_i_16_i_0_reg_31_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_16_i_stall_in = 1'b0;
assign rnode_30to31_bb5_cmp3_i_i_16_i_0_NO_SHIFT_REG = rnode_30to31_bb5_cmp3_i_i_16_i_0_reg_31_NO_SHIFT_REG;
assign rnode_30to31_bb5_cmp3_i_i_16_i_0_stall_in_reg_31_NO_SHIFT_REG = 1'b0;
assign rnode_30to31_bb5_cmp3_i_i_16_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_16_i_stall_local;
wire [63:0] local_bb5_cond_i_i_16_i;

assign local_bb5_cond_i_i_16_i = (rnode_30to31_bb5_cmp3_i_i_16_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_16_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_16_i;

assign local_bb5_sub4_i_i_16_i = (rnode_30to31_bb5_or_i_i_16_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_16_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_17_i_valid_out;
wire local_bb5_shl_i_i_17_i_stall_in;
wire local_bb5_shl_i_i_17_i_inputs_ready;
wire local_bb5_shl_i_i_17_i_stall_local;
wire [63:0] local_bb5_shl_i_i_17_i;

assign local_bb5_shl_i_i_17_i_inputs_ready = (rnode_30to31_bb5_or_i_i_16_i_0_valid_out_NO_SHIFT_REG & rnode_30to31_bb5_cmp3_i_i_16_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_17_i = (local_bb5_sub4_i_i_16_i << 64'h1);
assign local_bb5_shl_i_i_17_i_valid_out = 1'b1;
assign rnode_30to31_bb5_or_i_i_16_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_30to31_bb5_cmp3_i_i_16_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_31to32_bb5_shl_i_i_17_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_31to32_bb5_shl_i_i_17_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_31to32_bb5_shl_i_i_17_i_0_NO_SHIFT_REG;
 logic rnode_31to32_bb5_shl_i_i_17_i_0_reg_32_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_31to32_bb5_shl_i_i_17_i_0_reg_32_NO_SHIFT_REG;
 logic rnode_31to32_bb5_shl_i_i_17_i_0_valid_out_reg_32_NO_SHIFT_REG;
 logic rnode_31to32_bb5_shl_i_i_17_i_0_stall_in_reg_32_NO_SHIFT_REG;
 logic rnode_31to32_bb5_shl_i_i_17_i_0_stall_out_reg_32_NO_SHIFT_REG;

acl_data_fifo rnode_31to32_bb5_shl_i_i_17_i_0_reg_32_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_31to32_bb5_shl_i_i_17_i_0_reg_32_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_31to32_bb5_shl_i_i_17_i_0_stall_in_reg_32_NO_SHIFT_REG),
	.valid_out(rnode_31to32_bb5_shl_i_i_17_i_0_valid_out_reg_32_NO_SHIFT_REG),
	.stall_out(rnode_31to32_bb5_shl_i_i_17_i_0_stall_out_reg_32_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_17_i),
	.data_out(rnode_31to32_bb5_shl_i_i_17_i_0_reg_32_NO_SHIFT_REG)
);

defparam rnode_31to32_bb5_shl_i_i_17_i_0_reg_32_fifo.DEPTH = 1;
defparam rnode_31to32_bb5_shl_i_i_17_i_0_reg_32_fifo.DATA_WIDTH = 64;
defparam rnode_31to32_bb5_shl_i_i_17_i_0_reg_32_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_31to32_bb5_shl_i_i_17_i_0_reg_32_fifo.IMPL = "shift_reg";

assign rnode_31to32_bb5_shl_i_i_17_i_0_reg_32_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_17_i_stall_in = 1'b0;
assign rnode_31to32_bb5_shl_i_i_17_i_0_NO_SHIFT_REG = rnode_31to32_bb5_shl_i_i_17_i_0_reg_32_NO_SHIFT_REG;
assign rnode_31to32_bb5_shl_i_i_17_i_0_stall_in_reg_32_NO_SHIFT_REG = 1'b0;
assign rnode_31to32_bb5_shl_i_i_17_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_17_i_stall_local;
wire [63:0] local_bb5_or_i_i_17_i;

assign local_bb5_or_i_i_17_i = (rnode_31to32_bb5_shl_i_i_17_i_0_NO_SHIFT_REG | local_bb5_and_i_i_17_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_17_i_valid_out_1;
wire local_bb5_or_i_i_17_i_stall_in_1;
 reg local_bb5_or_i_i_17_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_17_i_valid_out;
wire local_bb5_cmp3_i_i_17_i_stall_in;
 reg local_bb5_cmp3_i_i_17_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_17_i_inputs_ready;
wire local_bb5_cmp3_i_i_17_i_stall_local;
wire local_bb5_cmp3_i_i_17_i;

assign local_bb5_cmp3_i_i_17_i_inputs_ready = (rnode_31to32_bb5_var__u22_0_valid_out_NO_SHIFT_REG & rnode_31to32_bb5_shl_i_i_17_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_17_i = (local_bb5_or_i_i_17_i > 64'h3);
assign local_bb5_or_i_i_17_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_17_i_valid_out = 1'b1;
assign rnode_31to32_bb5_var__u22_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_31to32_bb5_shl_i_i_17_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_17_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_17_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_17_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_17_i_inputs_ready & (local_bb5_or_i_i_17_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_17_i_stall_in_1)) & local_bb5_cmp3_i_i_17_i_stall_local);
		local_bb5_cmp3_i_i_17_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_17_i_inputs_ready & (local_bb5_cmp3_i_i_17_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_17_i_stall_in)) & local_bb5_cmp3_i_i_17_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_32to33_bb5_or_i_i_17_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_32to33_bb5_or_i_i_17_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_32to33_bb5_or_i_i_17_i_0_NO_SHIFT_REG;
 logic rnode_32to33_bb5_or_i_i_17_i_0_reg_33_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_32to33_bb5_or_i_i_17_i_0_reg_33_NO_SHIFT_REG;
 logic rnode_32to33_bb5_or_i_i_17_i_0_valid_out_reg_33_NO_SHIFT_REG;
 logic rnode_32to33_bb5_or_i_i_17_i_0_stall_in_reg_33_NO_SHIFT_REG;
 logic rnode_32to33_bb5_or_i_i_17_i_0_stall_out_reg_33_NO_SHIFT_REG;

acl_data_fifo rnode_32to33_bb5_or_i_i_17_i_0_reg_33_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_32to33_bb5_or_i_i_17_i_0_reg_33_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_32to33_bb5_or_i_i_17_i_0_stall_in_reg_33_NO_SHIFT_REG),
	.valid_out(rnode_32to33_bb5_or_i_i_17_i_0_valid_out_reg_33_NO_SHIFT_REG),
	.stall_out(rnode_32to33_bb5_or_i_i_17_i_0_stall_out_reg_33_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_17_i),
	.data_out(rnode_32to33_bb5_or_i_i_17_i_0_reg_33_NO_SHIFT_REG)
);

defparam rnode_32to33_bb5_or_i_i_17_i_0_reg_33_fifo.DEPTH = 1;
defparam rnode_32to33_bb5_or_i_i_17_i_0_reg_33_fifo.DATA_WIDTH = 64;
defparam rnode_32to33_bb5_or_i_i_17_i_0_reg_33_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_32to33_bb5_or_i_i_17_i_0_reg_33_fifo.IMPL = "shift_reg";

assign rnode_32to33_bb5_or_i_i_17_i_0_reg_33_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_17_i_stall_in_1 = 1'b0;
assign rnode_32to33_bb5_or_i_i_17_i_0_NO_SHIFT_REG = rnode_32to33_bb5_or_i_i_17_i_0_reg_33_NO_SHIFT_REG;
assign rnode_32to33_bb5_or_i_i_17_i_0_stall_in_reg_33_NO_SHIFT_REG = 1'b0;
assign rnode_32to33_bb5_or_i_i_17_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_32to33_bb5_cmp3_i_i_17_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_32to33_bb5_cmp3_i_i_17_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_32to33_bb5_cmp3_i_i_17_i_0_NO_SHIFT_REG;
 logic rnode_32to33_bb5_cmp3_i_i_17_i_0_reg_33_inputs_ready_NO_SHIFT_REG;
 logic rnode_32to33_bb5_cmp3_i_i_17_i_0_reg_33_NO_SHIFT_REG;
 logic rnode_32to33_bb5_cmp3_i_i_17_i_0_valid_out_reg_33_NO_SHIFT_REG;
 logic rnode_32to33_bb5_cmp3_i_i_17_i_0_stall_in_reg_33_NO_SHIFT_REG;
 logic rnode_32to33_bb5_cmp3_i_i_17_i_0_stall_out_reg_33_NO_SHIFT_REG;

acl_data_fifo rnode_32to33_bb5_cmp3_i_i_17_i_0_reg_33_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_32to33_bb5_cmp3_i_i_17_i_0_reg_33_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_32to33_bb5_cmp3_i_i_17_i_0_stall_in_reg_33_NO_SHIFT_REG),
	.valid_out(rnode_32to33_bb5_cmp3_i_i_17_i_0_valid_out_reg_33_NO_SHIFT_REG),
	.stall_out(rnode_32to33_bb5_cmp3_i_i_17_i_0_stall_out_reg_33_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_17_i),
	.data_out(rnode_32to33_bb5_cmp3_i_i_17_i_0_reg_33_NO_SHIFT_REG)
);

defparam rnode_32to33_bb5_cmp3_i_i_17_i_0_reg_33_fifo.DEPTH = 1;
defparam rnode_32to33_bb5_cmp3_i_i_17_i_0_reg_33_fifo.DATA_WIDTH = 1;
defparam rnode_32to33_bb5_cmp3_i_i_17_i_0_reg_33_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_32to33_bb5_cmp3_i_i_17_i_0_reg_33_fifo.IMPL = "shift_reg";

assign rnode_32to33_bb5_cmp3_i_i_17_i_0_reg_33_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_17_i_stall_in = 1'b0;
assign rnode_32to33_bb5_cmp3_i_i_17_i_0_NO_SHIFT_REG = rnode_32to33_bb5_cmp3_i_i_17_i_0_reg_33_NO_SHIFT_REG;
assign rnode_32to33_bb5_cmp3_i_i_17_i_0_stall_in_reg_33_NO_SHIFT_REG = 1'b0;
assign rnode_32to33_bb5_cmp3_i_i_17_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_17_i_stall_local;
wire [63:0] local_bb5_cond_i_i_17_i;

assign local_bb5_cond_i_i_17_i = (rnode_32to33_bb5_cmp3_i_i_17_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_17_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_17_i;

assign local_bb5_sub4_i_i_17_i = (rnode_32to33_bb5_or_i_i_17_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_17_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_18_i_valid_out;
wire local_bb5_shl_i_i_18_i_stall_in;
wire local_bb5_shl_i_i_18_i_inputs_ready;
wire local_bb5_shl_i_i_18_i_stall_local;
wire [63:0] local_bb5_shl_i_i_18_i;

assign local_bb5_shl_i_i_18_i_inputs_ready = (rnode_32to33_bb5_or_i_i_17_i_0_valid_out_NO_SHIFT_REG & rnode_32to33_bb5_cmp3_i_i_17_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_18_i = (local_bb5_sub4_i_i_17_i << 64'h1);
assign local_bb5_shl_i_i_18_i_valid_out = 1'b1;
assign rnode_32to33_bb5_or_i_i_17_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_32to33_bb5_cmp3_i_i_17_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_33to34_bb5_shl_i_i_18_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_33to34_bb5_shl_i_i_18_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_33to34_bb5_shl_i_i_18_i_0_NO_SHIFT_REG;
 logic rnode_33to34_bb5_shl_i_i_18_i_0_reg_34_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_33to34_bb5_shl_i_i_18_i_0_reg_34_NO_SHIFT_REG;
 logic rnode_33to34_bb5_shl_i_i_18_i_0_valid_out_reg_34_NO_SHIFT_REG;
 logic rnode_33to34_bb5_shl_i_i_18_i_0_stall_in_reg_34_NO_SHIFT_REG;
 logic rnode_33to34_bb5_shl_i_i_18_i_0_stall_out_reg_34_NO_SHIFT_REG;

acl_data_fifo rnode_33to34_bb5_shl_i_i_18_i_0_reg_34_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_33to34_bb5_shl_i_i_18_i_0_reg_34_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_33to34_bb5_shl_i_i_18_i_0_stall_in_reg_34_NO_SHIFT_REG),
	.valid_out(rnode_33to34_bb5_shl_i_i_18_i_0_valid_out_reg_34_NO_SHIFT_REG),
	.stall_out(rnode_33to34_bb5_shl_i_i_18_i_0_stall_out_reg_34_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_18_i),
	.data_out(rnode_33to34_bb5_shl_i_i_18_i_0_reg_34_NO_SHIFT_REG)
);

defparam rnode_33to34_bb5_shl_i_i_18_i_0_reg_34_fifo.DEPTH = 1;
defparam rnode_33to34_bb5_shl_i_i_18_i_0_reg_34_fifo.DATA_WIDTH = 64;
defparam rnode_33to34_bb5_shl_i_i_18_i_0_reg_34_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_33to34_bb5_shl_i_i_18_i_0_reg_34_fifo.IMPL = "shift_reg";

assign rnode_33to34_bb5_shl_i_i_18_i_0_reg_34_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_18_i_stall_in = 1'b0;
assign rnode_33to34_bb5_shl_i_i_18_i_0_NO_SHIFT_REG = rnode_33to34_bb5_shl_i_i_18_i_0_reg_34_NO_SHIFT_REG;
assign rnode_33to34_bb5_shl_i_i_18_i_0_stall_in_reg_34_NO_SHIFT_REG = 1'b0;
assign rnode_33to34_bb5_shl_i_i_18_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_18_i_stall_local;
wire [63:0] local_bb5_or_i_i_18_i;

assign local_bb5_or_i_i_18_i = (rnode_33to34_bb5_shl_i_i_18_i_0_NO_SHIFT_REG | local_bb5_and_i_i_18_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_18_i_valid_out_1;
wire local_bb5_or_i_i_18_i_stall_in_1;
 reg local_bb5_or_i_i_18_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_18_i_valid_out;
wire local_bb5_cmp3_i_i_18_i_stall_in;
 reg local_bb5_cmp3_i_i_18_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_18_i_inputs_ready;
wire local_bb5_cmp3_i_i_18_i_stall_local;
wire local_bb5_cmp3_i_i_18_i;

assign local_bb5_cmp3_i_i_18_i_inputs_ready = (rnode_33to34_bb5_var__u23_0_valid_out_NO_SHIFT_REG & rnode_33to34_bb5_shl_i_i_18_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_18_i = (local_bb5_or_i_i_18_i > 64'h3);
assign local_bb5_or_i_i_18_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_18_i_valid_out = 1'b1;
assign rnode_33to34_bb5_var__u23_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_33to34_bb5_shl_i_i_18_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_18_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_18_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_18_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_18_i_inputs_ready & (local_bb5_or_i_i_18_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_18_i_stall_in_1)) & local_bb5_cmp3_i_i_18_i_stall_local);
		local_bb5_cmp3_i_i_18_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_18_i_inputs_ready & (local_bb5_cmp3_i_i_18_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_18_i_stall_in)) & local_bb5_cmp3_i_i_18_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_34to35_bb5_or_i_i_18_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_34to35_bb5_or_i_i_18_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_34to35_bb5_or_i_i_18_i_0_NO_SHIFT_REG;
 logic rnode_34to35_bb5_or_i_i_18_i_0_reg_35_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_34to35_bb5_or_i_i_18_i_0_reg_35_NO_SHIFT_REG;
 logic rnode_34to35_bb5_or_i_i_18_i_0_valid_out_reg_35_NO_SHIFT_REG;
 logic rnode_34to35_bb5_or_i_i_18_i_0_stall_in_reg_35_NO_SHIFT_REG;
 logic rnode_34to35_bb5_or_i_i_18_i_0_stall_out_reg_35_NO_SHIFT_REG;

acl_data_fifo rnode_34to35_bb5_or_i_i_18_i_0_reg_35_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_34to35_bb5_or_i_i_18_i_0_reg_35_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_34to35_bb5_or_i_i_18_i_0_stall_in_reg_35_NO_SHIFT_REG),
	.valid_out(rnode_34to35_bb5_or_i_i_18_i_0_valid_out_reg_35_NO_SHIFT_REG),
	.stall_out(rnode_34to35_bb5_or_i_i_18_i_0_stall_out_reg_35_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_18_i),
	.data_out(rnode_34to35_bb5_or_i_i_18_i_0_reg_35_NO_SHIFT_REG)
);

defparam rnode_34to35_bb5_or_i_i_18_i_0_reg_35_fifo.DEPTH = 1;
defparam rnode_34to35_bb5_or_i_i_18_i_0_reg_35_fifo.DATA_WIDTH = 64;
defparam rnode_34to35_bb5_or_i_i_18_i_0_reg_35_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_34to35_bb5_or_i_i_18_i_0_reg_35_fifo.IMPL = "shift_reg";

assign rnode_34to35_bb5_or_i_i_18_i_0_reg_35_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_18_i_stall_in_1 = 1'b0;
assign rnode_34to35_bb5_or_i_i_18_i_0_NO_SHIFT_REG = rnode_34to35_bb5_or_i_i_18_i_0_reg_35_NO_SHIFT_REG;
assign rnode_34to35_bb5_or_i_i_18_i_0_stall_in_reg_35_NO_SHIFT_REG = 1'b0;
assign rnode_34to35_bb5_or_i_i_18_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_34to35_bb5_cmp3_i_i_18_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_34to35_bb5_cmp3_i_i_18_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_34to35_bb5_cmp3_i_i_18_i_0_NO_SHIFT_REG;
 logic rnode_34to35_bb5_cmp3_i_i_18_i_0_reg_35_inputs_ready_NO_SHIFT_REG;
 logic rnode_34to35_bb5_cmp3_i_i_18_i_0_reg_35_NO_SHIFT_REG;
 logic rnode_34to35_bb5_cmp3_i_i_18_i_0_valid_out_reg_35_NO_SHIFT_REG;
 logic rnode_34to35_bb5_cmp3_i_i_18_i_0_stall_in_reg_35_NO_SHIFT_REG;
 logic rnode_34to35_bb5_cmp3_i_i_18_i_0_stall_out_reg_35_NO_SHIFT_REG;

acl_data_fifo rnode_34to35_bb5_cmp3_i_i_18_i_0_reg_35_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_34to35_bb5_cmp3_i_i_18_i_0_reg_35_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_34to35_bb5_cmp3_i_i_18_i_0_stall_in_reg_35_NO_SHIFT_REG),
	.valid_out(rnode_34to35_bb5_cmp3_i_i_18_i_0_valid_out_reg_35_NO_SHIFT_REG),
	.stall_out(rnode_34to35_bb5_cmp3_i_i_18_i_0_stall_out_reg_35_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_18_i),
	.data_out(rnode_34to35_bb5_cmp3_i_i_18_i_0_reg_35_NO_SHIFT_REG)
);

defparam rnode_34to35_bb5_cmp3_i_i_18_i_0_reg_35_fifo.DEPTH = 1;
defparam rnode_34to35_bb5_cmp3_i_i_18_i_0_reg_35_fifo.DATA_WIDTH = 1;
defparam rnode_34to35_bb5_cmp3_i_i_18_i_0_reg_35_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_34to35_bb5_cmp3_i_i_18_i_0_reg_35_fifo.IMPL = "shift_reg";

assign rnode_34to35_bb5_cmp3_i_i_18_i_0_reg_35_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_18_i_stall_in = 1'b0;
assign rnode_34to35_bb5_cmp3_i_i_18_i_0_NO_SHIFT_REG = rnode_34to35_bb5_cmp3_i_i_18_i_0_reg_35_NO_SHIFT_REG;
assign rnode_34to35_bb5_cmp3_i_i_18_i_0_stall_in_reg_35_NO_SHIFT_REG = 1'b0;
assign rnode_34to35_bb5_cmp3_i_i_18_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_18_i_stall_local;
wire [63:0] local_bb5_cond_i_i_18_i;

assign local_bb5_cond_i_i_18_i = (rnode_34to35_bb5_cmp3_i_i_18_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_18_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_18_i;

assign local_bb5_sub4_i_i_18_i = (rnode_34to35_bb5_or_i_i_18_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_18_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_19_i_valid_out;
wire local_bb5_shl_i_i_19_i_stall_in;
wire local_bb5_shl_i_i_19_i_inputs_ready;
wire local_bb5_shl_i_i_19_i_stall_local;
wire [63:0] local_bb5_shl_i_i_19_i;

assign local_bb5_shl_i_i_19_i_inputs_ready = (rnode_34to35_bb5_or_i_i_18_i_0_valid_out_NO_SHIFT_REG & rnode_34to35_bb5_cmp3_i_i_18_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_19_i = (local_bb5_sub4_i_i_18_i << 64'h1);
assign local_bb5_shl_i_i_19_i_valid_out = 1'b1;
assign rnode_34to35_bb5_or_i_i_18_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_34to35_bb5_cmp3_i_i_18_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_35to36_bb5_shl_i_i_19_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_35to36_bb5_shl_i_i_19_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_35to36_bb5_shl_i_i_19_i_0_NO_SHIFT_REG;
 logic rnode_35to36_bb5_shl_i_i_19_i_0_reg_36_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_35to36_bb5_shl_i_i_19_i_0_reg_36_NO_SHIFT_REG;
 logic rnode_35to36_bb5_shl_i_i_19_i_0_valid_out_reg_36_NO_SHIFT_REG;
 logic rnode_35to36_bb5_shl_i_i_19_i_0_stall_in_reg_36_NO_SHIFT_REG;
 logic rnode_35to36_bb5_shl_i_i_19_i_0_stall_out_reg_36_NO_SHIFT_REG;

acl_data_fifo rnode_35to36_bb5_shl_i_i_19_i_0_reg_36_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_35to36_bb5_shl_i_i_19_i_0_reg_36_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_35to36_bb5_shl_i_i_19_i_0_stall_in_reg_36_NO_SHIFT_REG),
	.valid_out(rnode_35to36_bb5_shl_i_i_19_i_0_valid_out_reg_36_NO_SHIFT_REG),
	.stall_out(rnode_35to36_bb5_shl_i_i_19_i_0_stall_out_reg_36_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_19_i),
	.data_out(rnode_35to36_bb5_shl_i_i_19_i_0_reg_36_NO_SHIFT_REG)
);

defparam rnode_35to36_bb5_shl_i_i_19_i_0_reg_36_fifo.DEPTH = 1;
defparam rnode_35to36_bb5_shl_i_i_19_i_0_reg_36_fifo.DATA_WIDTH = 64;
defparam rnode_35to36_bb5_shl_i_i_19_i_0_reg_36_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_35to36_bb5_shl_i_i_19_i_0_reg_36_fifo.IMPL = "shift_reg";

assign rnode_35to36_bb5_shl_i_i_19_i_0_reg_36_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_19_i_stall_in = 1'b0;
assign rnode_35to36_bb5_shl_i_i_19_i_0_NO_SHIFT_REG = rnode_35to36_bb5_shl_i_i_19_i_0_reg_36_NO_SHIFT_REG;
assign rnode_35to36_bb5_shl_i_i_19_i_0_stall_in_reg_36_NO_SHIFT_REG = 1'b0;
assign rnode_35to36_bb5_shl_i_i_19_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_19_i_stall_local;
wire [63:0] local_bb5_or_i_i_19_i;

assign local_bb5_or_i_i_19_i = (rnode_35to36_bb5_shl_i_i_19_i_0_NO_SHIFT_REG | local_bb5_and_i_i_19_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_19_i_valid_out_1;
wire local_bb5_or_i_i_19_i_stall_in_1;
 reg local_bb5_or_i_i_19_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_19_i_valid_out;
wire local_bb5_cmp3_i_i_19_i_stall_in;
 reg local_bb5_cmp3_i_i_19_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_19_i_inputs_ready;
wire local_bb5_cmp3_i_i_19_i_stall_local;
wire local_bb5_cmp3_i_i_19_i;

assign local_bb5_cmp3_i_i_19_i_inputs_ready = (rnode_35to36_bb5_var__u24_0_valid_out_NO_SHIFT_REG & rnode_35to36_bb5_shl_i_i_19_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_19_i = (local_bb5_or_i_i_19_i > 64'h3);
assign local_bb5_or_i_i_19_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_19_i_valid_out = 1'b1;
assign rnode_35to36_bb5_var__u24_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_35to36_bb5_shl_i_i_19_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_19_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_19_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_19_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_19_i_inputs_ready & (local_bb5_or_i_i_19_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_19_i_stall_in_1)) & local_bb5_cmp3_i_i_19_i_stall_local);
		local_bb5_cmp3_i_i_19_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_19_i_inputs_ready & (local_bb5_cmp3_i_i_19_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_19_i_stall_in)) & local_bb5_cmp3_i_i_19_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_36to37_bb5_or_i_i_19_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_36to37_bb5_or_i_i_19_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_36to37_bb5_or_i_i_19_i_0_NO_SHIFT_REG;
 logic rnode_36to37_bb5_or_i_i_19_i_0_reg_37_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_36to37_bb5_or_i_i_19_i_0_reg_37_NO_SHIFT_REG;
 logic rnode_36to37_bb5_or_i_i_19_i_0_valid_out_reg_37_NO_SHIFT_REG;
 logic rnode_36to37_bb5_or_i_i_19_i_0_stall_in_reg_37_NO_SHIFT_REG;
 logic rnode_36to37_bb5_or_i_i_19_i_0_stall_out_reg_37_NO_SHIFT_REG;

acl_data_fifo rnode_36to37_bb5_or_i_i_19_i_0_reg_37_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_36to37_bb5_or_i_i_19_i_0_reg_37_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_36to37_bb5_or_i_i_19_i_0_stall_in_reg_37_NO_SHIFT_REG),
	.valid_out(rnode_36to37_bb5_or_i_i_19_i_0_valid_out_reg_37_NO_SHIFT_REG),
	.stall_out(rnode_36to37_bb5_or_i_i_19_i_0_stall_out_reg_37_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_19_i),
	.data_out(rnode_36to37_bb5_or_i_i_19_i_0_reg_37_NO_SHIFT_REG)
);

defparam rnode_36to37_bb5_or_i_i_19_i_0_reg_37_fifo.DEPTH = 1;
defparam rnode_36to37_bb5_or_i_i_19_i_0_reg_37_fifo.DATA_WIDTH = 64;
defparam rnode_36to37_bb5_or_i_i_19_i_0_reg_37_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_36to37_bb5_or_i_i_19_i_0_reg_37_fifo.IMPL = "shift_reg";

assign rnode_36to37_bb5_or_i_i_19_i_0_reg_37_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_19_i_stall_in_1 = 1'b0;
assign rnode_36to37_bb5_or_i_i_19_i_0_NO_SHIFT_REG = rnode_36to37_bb5_or_i_i_19_i_0_reg_37_NO_SHIFT_REG;
assign rnode_36to37_bb5_or_i_i_19_i_0_stall_in_reg_37_NO_SHIFT_REG = 1'b0;
assign rnode_36to37_bb5_or_i_i_19_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_36to37_bb5_cmp3_i_i_19_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_36to37_bb5_cmp3_i_i_19_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_36to37_bb5_cmp3_i_i_19_i_0_NO_SHIFT_REG;
 logic rnode_36to37_bb5_cmp3_i_i_19_i_0_reg_37_inputs_ready_NO_SHIFT_REG;
 logic rnode_36to37_bb5_cmp3_i_i_19_i_0_reg_37_NO_SHIFT_REG;
 logic rnode_36to37_bb5_cmp3_i_i_19_i_0_valid_out_reg_37_NO_SHIFT_REG;
 logic rnode_36to37_bb5_cmp3_i_i_19_i_0_stall_in_reg_37_NO_SHIFT_REG;
 logic rnode_36to37_bb5_cmp3_i_i_19_i_0_stall_out_reg_37_NO_SHIFT_REG;

acl_data_fifo rnode_36to37_bb5_cmp3_i_i_19_i_0_reg_37_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_36to37_bb5_cmp3_i_i_19_i_0_reg_37_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_36to37_bb5_cmp3_i_i_19_i_0_stall_in_reg_37_NO_SHIFT_REG),
	.valid_out(rnode_36to37_bb5_cmp3_i_i_19_i_0_valid_out_reg_37_NO_SHIFT_REG),
	.stall_out(rnode_36to37_bb5_cmp3_i_i_19_i_0_stall_out_reg_37_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_19_i),
	.data_out(rnode_36to37_bb5_cmp3_i_i_19_i_0_reg_37_NO_SHIFT_REG)
);

defparam rnode_36to37_bb5_cmp3_i_i_19_i_0_reg_37_fifo.DEPTH = 1;
defparam rnode_36to37_bb5_cmp3_i_i_19_i_0_reg_37_fifo.DATA_WIDTH = 1;
defparam rnode_36to37_bb5_cmp3_i_i_19_i_0_reg_37_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_36to37_bb5_cmp3_i_i_19_i_0_reg_37_fifo.IMPL = "shift_reg";

assign rnode_36to37_bb5_cmp3_i_i_19_i_0_reg_37_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_19_i_stall_in = 1'b0;
assign rnode_36to37_bb5_cmp3_i_i_19_i_0_NO_SHIFT_REG = rnode_36to37_bb5_cmp3_i_i_19_i_0_reg_37_NO_SHIFT_REG;
assign rnode_36to37_bb5_cmp3_i_i_19_i_0_stall_in_reg_37_NO_SHIFT_REG = 1'b0;
assign rnode_36to37_bb5_cmp3_i_i_19_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_19_i_stall_local;
wire [63:0] local_bb5_cond_i_i_19_i;

assign local_bb5_cond_i_i_19_i = (rnode_36to37_bb5_cmp3_i_i_19_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_19_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_19_i;

assign local_bb5_sub4_i_i_19_i = (rnode_36to37_bb5_or_i_i_19_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_19_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_20_i_valid_out;
wire local_bb5_shl_i_i_20_i_stall_in;
wire local_bb5_shl_i_i_20_i_inputs_ready;
wire local_bb5_shl_i_i_20_i_stall_local;
wire [63:0] local_bb5_shl_i_i_20_i;

assign local_bb5_shl_i_i_20_i_inputs_ready = (rnode_36to37_bb5_or_i_i_19_i_0_valid_out_NO_SHIFT_REG & rnode_36to37_bb5_cmp3_i_i_19_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_20_i = (local_bb5_sub4_i_i_19_i << 64'h1);
assign local_bb5_shl_i_i_20_i_valid_out = 1'b1;
assign rnode_36to37_bb5_or_i_i_19_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_36to37_bb5_cmp3_i_i_19_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_37to38_bb5_shl_i_i_20_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_37to38_bb5_shl_i_i_20_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_37to38_bb5_shl_i_i_20_i_0_NO_SHIFT_REG;
 logic rnode_37to38_bb5_shl_i_i_20_i_0_reg_38_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_37to38_bb5_shl_i_i_20_i_0_reg_38_NO_SHIFT_REG;
 logic rnode_37to38_bb5_shl_i_i_20_i_0_valid_out_reg_38_NO_SHIFT_REG;
 logic rnode_37to38_bb5_shl_i_i_20_i_0_stall_in_reg_38_NO_SHIFT_REG;
 logic rnode_37to38_bb5_shl_i_i_20_i_0_stall_out_reg_38_NO_SHIFT_REG;

acl_data_fifo rnode_37to38_bb5_shl_i_i_20_i_0_reg_38_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_37to38_bb5_shl_i_i_20_i_0_reg_38_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_37to38_bb5_shl_i_i_20_i_0_stall_in_reg_38_NO_SHIFT_REG),
	.valid_out(rnode_37to38_bb5_shl_i_i_20_i_0_valid_out_reg_38_NO_SHIFT_REG),
	.stall_out(rnode_37to38_bb5_shl_i_i_20_i_0_stall_out_reg_38_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_20_i),
	.data_out(rnode_37to38_bb5_shl_i_i_20_i_0_reg_38_NO_SHIFT_REG)
);

defparam rnode_37to38_bb5_shl_i_i_20_i_0_reg_38_fifo.DEPTH = 1;
defparam rnode_37to38_bb5_shl_i_i_20_i_0_reg_38_fifo.DATA_WIDTH = 64;
defparam rnode_37to38_bb5_shl_i_i_20_i_0_reg_38_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_37to38_bb5_shl_i_i_20_i_0_reg_38_fifo.IMPL = "shift_reg";

assign rnode_37to38_bb5_shl_i_i_20_i_0_reg_38_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_20_i_stall_in = 1'b0;
assign rnode_37to38_bb5_shl_i_i_20_i_0_NO_SHIFT_REG = rnode_37to38_bb5_shl_i_i_20_i_0_reg_38_NO_SHIFT_REG;
assign rnode_37to38_bb5_shl_i_i_20_i_0_stall_in_reg_38_NO_SHIFT_REG = 1'b0;
assign rnode_37to38_bb5_shl_i_i_20_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_20_i_stall_local;
wire [63:0] local_bb5_or_i_i_20_i;

assign local_bb5_or_i_i_20_i = (rnode_37to38_bb5_shl_i_i_20_i_0_NO_SHIFT_REG | local_bb5_and_i_i_20_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_20_i_valid_out_1;
wire local_bb5_or_i_i_20_i_stall_in_1;
 reg local_bb5_or_i_i_20_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_20_i_valid_out;
wire local_bb5_cmp3_i_i_20_i_stall_in;
 reg local_bb5_cmp3_i_i_20_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_20_i_inputs_ready;
wire local_bb5_cmp3_i_i_20_i_stall_local;
wire local_bb5_cmp3_i_i_20_i;

assign local_bb5_cmp3_i_i_20_i_inputs_ready = (rnode_37to38_bb5_var__u25_0_valid_out_NO_SHIFT_REG & rnode_37to38_bb5_shl_i_i_20_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_20_i = (local_bb5_or_i_i_20_i > 64'h3);
assign local_bb5_or_i_i_20_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_20_i_valid_out = 1'b1;
assign rnode_37to38_bb5_var__u25_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_37to38_bb5_shl_i_i_20_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_20_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_20_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_20_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_20_i_inputs_ready & (local_bb5_or_i_i_20_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_20_i_stall_in_1)) & local_bb5_cmp3_i_i_20_i_stall_local);
		local_bb5_cmp3_i_i_20_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_20_i_inputs_ready & (local_bb5_cmp3_i_i_20_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_20_i_stall_in)) & local_bb5_cmp3_i_i_20_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_38to39_bb5_or_i_i_20_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_38to39_bb5_or_i_i_20_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_38to39_bb5_or_i_i_20_i_0_NO_SHIFT_REG;
 logic rnode_38to39_bb5_or_i_i_20_i_0_reg_39_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_38to39_bb5_or_i_i_20_i_0_reg_39_NO_SHIFT_REG;
 logic rnode_38to39_bb5_or_i_i_20_i_0_valid_out_reg_39_NO_SHIFT_REG;
 logic rnode_38to39_bb5_or_i_i_20_i_0_stall_in_reg_39_NO_SHIFT_REG;
 logic rnode_38to39_bb5_or_i_i_20_i_0_stall_out_reg_39_NO_SHIFT_REG;

acl_data_fifo rnode_38to39_bb5_or_i_i_20_i_0_reg_39_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_38to39_bb5_or_i_i_20_i_0_reg_39_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_38to39_bb5_or_i_i_20_i_0_stall_in_reg_39_NO_SHIFT_REG),
	.valid_out(rnode_38to39_bb5_or_i_i_20_i_0_valid_out_reg_39_NO_SHIFT_REG),
	.stall_out(rnode_38to39_bb5_or_i_i_20_i_0_stall_out_reg_39_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_20_i),
	.data_out(rnode_38to39_bb5_or_i_i_20_i_0_reg_39_NO_SHIFT_REG)
);

defparam rnode_38to39_bb5_or_i_i_20_i_0_reg_39_fifo.DEPTH = 1;
defparam rnode_38to39_bb5_or_i_i_20_i_0_reg_39_fifo.DATA_WIDTH = 64;
defparam rnode_38to39_bb5_or_i_i_20_i_0_reg_39_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_38to39_bb5_or_i_i_20_i_0_reg_39_fifo.IMPL = "shift_reg";

assign rnode_38to39_bb5_or_i_i_20_i_0_reg_39_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_20_i_stall_in_1 = 1'b0;
assign rnode_38to39_bb5_or_i_i_20_i_0_NO_SHIFT_REG = rnode_38to39_bb5_or_i_i_20_i_0_reg_39_NO_SHIFT_REG;
assign rnode_38to39_bb5_or_i_i_20_i_0_stall_in_reg_39_NO_SHIFT_REG = 1'b0;
assign rnode_38to39_bb5_or_i_i_20_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_38to39_bb5_cmp3_i_i_20_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_38to39_bb5_cmp3_i_i_20_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_38to39_bb5_cmp3_i_i_20_i_0_NO_SHIFT_REG;
 logic rnode_38to39_bb5_cmp3_i_i_20_i_0_reg_39_inputs_ready_NO_SHIFT_REG;
 logic rnode_38to39_bb5_cmp3_i_i_20_i_0_reg_39_NO_SHIFT_REG;
 logic rnode_38to39_bb5_cmp3_i_i_20_i_0_valid_out_reg_39_NO_SHIFT_REG;
 logic rnode_38to39_bb5_cmp3_i_i_20_i_0_stall_in_reg_39_NO_SHIFT_REG;
 logic rnode_38to39_bb5_cmp3_i_i_20_i_0_stall_out_reg_39_NO_SHIFT_REG;

acl_data_fifo rnode_38to39_bb5_cmp3_i_i_20_i_0_reg_39_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_38to39_bb5_cmp3_i_i_20_i_0_reg_39_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_38to39_bb5_cmp3_i_i_20_i_0_stall_in_reg_39_NO_SHIFT_REG),
	.valid_out(rnode_38to39_bb5_cmp3_i_i_20_i_0_valid_out_reg_39_NO_SHIFT_REG),
	.stall_out(rnode_38to39_bb5_cmp3_i_i_20_i_0_stall_out_reg_39_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_20_i),
	.data_out(rnode_38to39_bb5_cmp3_i_i_20_i_0_reg_39_NO_SHIFT_REG)
);

defparam rnode_38to39_bb5_cmp3_i_i_20_i_0_reg_39_fifo.DEPTH = 1;
defparam rnode_38to39_bb5_cmp3_i_i_20_i_0_reg_39_fifo.DATA_WIDTH = 1;
defparam rnode_38to39_bb5_cmp3_i_i_20_i_0_reg_39_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_38to39_bb5_cmp3_i_i_20_i_0_reg_39_fifo.IMPL = "shift_reg";

assign rnode_38to39_bb5_cmp3_i_i_20_i_0_reg_39_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_20_i_stall_in = 1'b0;
assign rnode_38to39_bb5_cmp3_i_i_20_i_0_NO_SHIFT_REG = rnode_38to39_bb5_cmp3_i_i_20_i_0_reg_39_NO_SHIFT_REG;
assign rnode_38to39_bb5_cmp3_i_i_20_i_0_stall_in_reg_39_NO_SHIFT_REG = 1'b0;
assign rnode_38to39_bb5_cmp3_i_i_20_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_20_i_stall_local;
wire [63:0] local_bb5_cond_i_i_20_i;

assign local_bb5_cond_i_i_20_i = (rnode_38to39_bb5_cmp3_i_i_20_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_20_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_20_i;

assign local_bb5_sub4_i_i_20_i = (rnode_38to39_bb5_or_i_i_20_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_20_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_21_i_valid_out;
wire local_bb5_shl_i_i_21_i_stall_in;
wire local_bb5_shl_i_i_21_i_inputs_ready;
wire local_bb5_shl_i_i_21_i_stall_local;
wire [63:0] local_bb5_shl_i_i_21_i;

assign local_bb5_shl_i_i_21_i_inputs_ready = (rnode_38to39_bb5_or_i_i_20_i_0_valid_out_NO_SHIFT_REG & rnode_38to39_bb5_cmp3_i_i_20_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_21_i = (local_bb5_sub4_i_i_20_i << 64'h1);
assign local_bb5_shl_i_i_21_i_valid_out = 1'b1;
assign rnode_38to39_bb5_or_i_i_20_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_38to39_bb5_cmp3_i_i_20_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_39to40_bb5_shl_i_i_21_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_39to40_bb5_shl_i_i_21_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_39to40_bb5_shl_i_i_21_i_0_NO_SHIFT_REG;
 logic rnode_39to40_bb5_shl_i_i_21_i_0_reg_40_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_39to40_bb5_shl_i_i_21_i_0_reg_40_NO_SHIFT_REG;
 logic rnode_39to40_bb5_shl_i_i_21_i_0_valid_out_reg_40_NO_SHIFT_REG;
 logic rnode_39to40_bb5_shl_i_i_21_i_0_stall_in_reg_40_NO_SHIFT_REG;
 logic rnode_39to40_bb5_shl_i_i_21_i_0_stall_out_reg_40_NO_SHIFT_REG;

acl_data_fifo rnode_39to40_bb5_shl_i_i_21_i_0_reg_40_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_39to40_bb5_shl_i_i_21_i_0_reg_40_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_39to40_bb5_shl_i_i_21_i_0_stall_in_reg_40_NO_SHIFT_REG),
	.valid_out(rnode_39to40_bb5_shl_i_i_21_i_0_valid_out_reg_40_NO_SHIFT_REG),
	.stall_out(rnode_39to40_bb5_shl_i_i_21_i_0_stall_out_reg_40_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_21_i),
	.data_out(rnode_39to40_bb5_shl_i_i_21_i_0_reg_40_NO_SHIFT_REG)
);

defparam rnode_39to40_bb5_shl_i_i_21_i_0_reg_40_fifo.DEPTH = 1;
defparam rnode_39to40_bb5_shl_i_i_21_i_0_reg_40_fifo.DATA_WIDTH = 64;
defparam rnode_39to40_bb5_shl_i_i_21_i_0_reg_40_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_39to40_bb5_shl_i_i_21_i_0_reg_40_fifo.IMPL = "shift_reg";

assign rnode_39to40_bb5_shl_i_i_21_i_0_reg_40_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_21_i_stall_in = 1'b0;
assign rnode_39to40_bb5_shl_i_i_21_i_0_NO_SHIFT_REG = rnode_39to40_bb5_shl_i_i_21_i_0_reg_40_NO_SHIFT_REG;
assign rnode_39to40_bb5_shl_i_i_21_i_0_stall_in_reg_40_NO_SHIFT_REG = 1'b0;
assign rnode_39to40_bb5_shl_i_i_21_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_21_i_stall_local;
wire [63:0] local_bb5_or_i_i_21_i;

assign local_bb5_or_i_i_21_i = (rnode_39to40_bb5_shl_i_i_21_i_0_NO_SHIFT_REG | local_bb5_and_i_i_21_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_21_i_valid_out_1;
wire local_bb5_or_i_i_21_i_stall_in_1;
 reg local_bb5_or_i_i_21_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_21_i_valid_out;
wire local_bb5_cmp3_i_i_21_i_stall_in;
 reg local_bb5_cmp3_i_i_21_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_21_i_inputs_ready;
wire local_bb5_cmp3_i_i_21_i_stall_local;
wire local_bb5_cmp3_i_i_21_i;

assign local_bb5_cmp3_i_i_21_i_inputs_ready = (rnode_39to40_bb5_var__u26_0_valid_out_NO_SHIFT_REG & rnode_39to40_bb5_shl_i_i_21_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_21_i = (local_bb5_or_i_i_21_i > 64'h3);
assign local_bb5_or_i_i_21_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_21_i_valid_out = 1'b1;
assign rnode_39to40_bb5_var__u26_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_39to40_bb5_shl_i_i_21_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_21_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_21_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_21_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_21_i_inputs_ready & (local_bb5_or_i_i_21_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_21_i_stall_in_1)) & local_bb5_cmp3_i_i_21_i_stall_local);
		local_bb5_cmp3_i_i_21_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_21_i_inputs_ready & (local_bb5_cmp3_i_i_21_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_21_i_stall_in)) & local_bb5_cmp3_i_i_21_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_40to41_bb5_or_i_i_21_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_40to41_bb5_or_i_i_21_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_40to41_bb5_or_i_i_21_i_0_NO_SHIFT_REG;
 logic rnode_40to41_bb5_or_i_i_21_i_0_reg_41_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_40to41_bb5_or_i_i_21_i_0_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb5_or_i_i_21_i_0_valid_out_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb5_or_i_i_21_i_0_stall_in_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb5_or_i_i_21_i_0_stall_out_reg_41_NO_SHIFT_REG;

acl_data_fifo rnode_40to41_bb5_or_i_i_21_i_0_reg_41_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_40to41_bb5_or_i_i_21_i_0_reg_41_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_40to41_bb5_or_i_i_21_i_0_stall_in_reg_41_NO_SHIFT_REG),
	.valid_out(rnode_40to41_bb5_or_i_i_21_i_0_valid_out_reg_41_NO_SHIFT_REG),
	.stall_out(rnode_40to41_bb5_or_i_i_21_i_0_stall_out_reg_41_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_21_i),
	.data_out(rnode_40to41_bb5_or_i_i_21_i_0_reg_41_NO_SHIFT_REG)
);

defparam rnode_40to41_bb5_or_i_i_21_i_0_reg_41_fifo.DEPTH = 1;
defparam rnode_40to41_bb5_or_i_i_21_i_0_reg_41_fifo.DATA_WIDTH = 64;
defparam rnode_40to41_bb5_or_i_i_21_i_0_reg_41_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_40to41_bb5_or_i_i_21_i_0_reg_41_fifo.IMPL = "shift_reg";

assign rnode_40to41_bb5_or_i_i_21_i_0_reg_41_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_21_i_stall_in_1 = 1'b0;
assign rnode_40to41_bb5_or_i_i_21_i_0_NO_SHIFT_REG = rnode_40to41_bb5_or_i_i_21_i_0_reg_41_NO_SHIFT_REG;
assign rnode_40to41_bb5_or_i_i_21_i_0_stall_in_reg_41_NO_SHIFT_REG = 1'b0;
assign rnode_40to41_bb5_or_i_i_21_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_40to41_bb5_cmp3_i_i_21_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_40to41_bb5_cmp3_i_i_21_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_40to41_bb5_cmp3_i_i_21_i_0_NO_SHIFT_REG;
 logic rnode_40to41_bb5_cmp3_i_i_21_i_0_reg_41_inputs_ready_NO_SHIFT_REG;
 logic rnode_40to41_bb5_cmp3_i_i_21_i_0_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb5_cmp3_i_i_21_i_0_valid_out_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb5_cmp3_i_i_21_i_0_stall_in_reg_41_NO_SHIFT_REG;
 logic rnode_40to41_bb5_cmp3_i_i_21_i_0_stall_out_reg_41_NO_SHIFT_REG;

acl_data_fifo rnode_40to41_bb5_cmp3_i_i_21_i_0_reg_41_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_40to41_bb5_cmp3_i_i_21_i_0_reg_41_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_40to41_bb5_cmp3_i_i_21_i_0_stall_in_reg_41_NO_SHIFT_REG),
	.valid_out(rnode_40to41_bb5_cmp3_i_i_21_i_0_valid_out_reg_41_NO_SHIFT_REG),
	.stall_out(rnode_40to41_bb5_cmp3_i_i_21_i_0_stall_out_reg_41_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_21_i),
	.data_out(rnode_40to41_bb5_cmp3_i_i_21_i_0_reg_41_NO_SHIFT_REG)
);

defparam rnode_40to41_bb5_cmp3_i_i_21_i_0_reg_41_fifo.DEPTH = 1;
defparam rnode_40to41_bb5_cmp3_i_i_21_i_0_reg_41_fifo.DATA_WIDTH = 1;
defparam rnode_40to41_bb5_cmp3_i_i_21_i_0_reg_41_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_40to41_bb5_cmp3_i_i_21_i_0_reg_41_fifo.IMPL = "shift_reg";

assign rnode_40to41_bb5_cmp3_i_i_21_i_0_reg_41_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_21_i_stall_in = 1'b0;
assign rnode_40to41_bb5_cmp3_i_i_21_i_0_NO_SHIFT_REG = rnode_40to41_bb5_cmp3_i_i_21_i_0_reg_41_NO_SHIFT_REG;
assign rnode_40to41_bb5_cmp3_i_i_21_i_0_stall_in_reg_41_NO_SHIFT_REG = 1'b0;
assign rnode_40to41_bb5_cmp3_i_i_21_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_21_i_stall_local;
wire [63:0] local_bb5_cond_i_i_21_i;

assign local_bb5_cond_i_i_21_i = (rnode_40to41_bb5_cmp3_i_i_21_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_21_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_21_i;

assign local_bb5_sub4_i_i_21_i = (rnode_40to41_bb5_or_i_i_21_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_21_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_22_i_valid_out;
wire local_bb5_shl_i_i_22_i_stall_in;
wire local_bb5_shl_i_i_22_i_inputs_ready;
wire local_bb5_shl_i_i_22_i_stall_local;
wire [63:0] local_bb5_shl_i_i_22_i;

assign local_bb5_shl_i_i_22_i_inputs_ready = (rnode_40to41_bb5_or_i_i_21_i_0_valid_out_NO_SHIFT_REG & rnode_40to41_bb5_cmp3_i_i_21_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_22_i = (local_bb5_sub4_i_i_21_i << 64'h1);
assign local_bb5_shl_i_i_22_i_valid_out = 1'b1;
assign rnode_40to41_bb5_or_i_i_21_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_40to41_bb5_cmp3_i_i_21_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_41to42_bb5_shl_i_i_22_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_41to42_bb5_shl_i_i_22_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_41to42_bb5_shl_i_i_22_i_0_NO_SHIFT_REG;
 logic rnode_41to42_bb5_shl_i_i_22_i_0_reg_42_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_41to42_bb5_shl_i_i_22_i_0_reg_42_NO_SHIFT_REG;
 logic rnode_41to42_bb5_shl_i_i_22_i_0_valid_out_reg_42_NO_SHIFT_REG;
 logic rnode_41to42_bb5_shl_i_i_22_i_0_stall_in_reg_42_NO_SHIFT_REG;
 logic rnode_41to42_bb5_shl_i_i_22_i_0_stall_out_reg_42_NO_SHIFT_REG;

acl_data_fifo rnode_41to42_bb5_shl_i_i_22_i_0_reg_42_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_41to42_bb5_shl_i_i_22_i_0_reg_42_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_41to42_bb5_shl_i_i_22_i_0_stall_in_reg_42_NO_SHIFT_REG),
	.valid_out(rnode_41to42_bb5_shl_i_i_22_i_0_valid_out_reg_42_NO_SHIFT_REG),
	.stall_out(rnode_41to42_bb5_shl_i_i_22_i_0_stall_out_reg_42_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_22_i),
	.data_out(rnode_41to42_bb5_shl_i_i_22_i_0_reg_42_NO_SHIFT_REG)
);

defparam rnode_41to42_bb5_shl_i_i_22_i_0_reg_42_fifo.DEPTH = 1;
defparam rnode_41to42_bb5_shl_i_i_22_i_0_reg_42_fifo.DATA_WIDTH = 64;
defparam rnode_41to42_bb5_shl_i_i_22_i_0_reg_42_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_41to42_bb5_shl_i_i_22_i_0_reg_42_fifo.IMPL = "shift_reg";

assign rnode_41to42_bb5_shl_i_i_22_i_0_reg_42_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_22_i_stall_in = 1'b0;
assign rnode_41to42_bb5_shl_i_i_22_i_0_NO_SHIFT_REG = rnode_41to42_bb5_shl_i_i_22_i_0_reg_42_NO_SHIFT_REG;
assign rnode_41to42_bb5_shl_i_i_22_i_0_stall_in_reg_42_NO_SHIFT_REG = 1'b0;
assign rnode_41to42_bb5_shl_i_i_22_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_22_i_stall_local;
wire [63:0] local_bb5_or_i_i_22_i;

assign local_bb5_or_i_i_22_i = (rnode_41to42_bb5_shl_i_i_22_i_0_NO_SHIFT_REG | local_bb5_and_i_i_22_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_22_i_valid_out_1;
wire local_bb5_or_i_i_22_i_stall_in_1;
 reg local_bb5_or_i_i_22_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_22_i_valid_out;
wire local_bb5_cmp3_i_i_22_i_stall_in;
 reg local_bb5_cmp3_i_i_22_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_22_i_inputs_ready;
wire local_bb5_cmp3_i_i_22_i_stall_local;
wire local_bb5_cmp3_i_i_22_i;

assign local_bb5_cmp3_i_i_22_i_inputs_ready = (rnode_41to42_bb5_var__u27_0_valid_out_NO_SHIFT_REG & rnode_41to42_bb5_shl_i_i_22_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_22_i = (local_bb5_or_i_i_22_i > 64'h3);
assign local_bb5_or_i_i_22_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_22_i_valid_out = 1'b1;
assign rnode_41to42_bb5_var__u27_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_41to42_bb5_shl_i_i_22_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_22_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_22_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_22_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_22_i_inputs_ready & (local_bb5_or_i_i_22_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_22_i_stall_in_1)) & local_bb5_cmp3_i_i_22_i_stall_local);
		local_bb5_cmp3_i_i_22_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_22_i_inputs_ready & (local_bb5_cmp3_i_i_22_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_22_i_stall_in)) & local_bb5_cmp3_i_i_22_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_42to43_bb5_or_i_i_22_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_42to43_bb5_or_i_i_22_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_42to43_bb5_or_i_i_22_i_0_NO_SHIFT_REG;
 logic rnode_42to43_bb5_or_i_i_22_i_0_reg_43_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_42to43_bb5_or_i_i_22_i_0_reg_43_NO_SHIFT_REG;
 logic rnode_42to43_bb5_or_i_i_22_i_0_valid_out_reg_43_NO_SHIFT_REG;
 logic rnode_42to43_bb5_or_i_i_22_i_0_stall_in_reg_43_NO_SHIFT_REG;
 logic rnode_42to43_bb5_or_i_i_22_i_0_stall_out_reg_43_NO_SHIFT_REG;

acl_data_fifo rnode_42to43_bb5_or_i_i_22_i_0_reg_43_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_42to43_bb5_or_i_i_22_i_0_reg_43_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_42to43_bb5_or_i_i_22_i_0_stall_in_reg_43_NO_SHIFT_REG),
	.valid_out(rnode_42to43_bb5_or_i_i_22_i_0_valid_out_reg_43_NO_SHIFT_REG),
	.stall_out(rnode_42to43_bb5_or_i_i_22_i_0_stall_out_reg_43_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_22_i),
	.data_out(rnode_42to43_bb5_or_i_i_22_i_0_reg_43_NO_SHIFT_REG)
);

defparam rnode_42to43_bb5_or_i_i_22_i_0_reg_43_fifo.DEPTH = 1;
defparam rnode_42to43_bb5_or_i_i_22_i_0_reg_43_fifo.DATA_WIDTH = 64;
defparam rnode_42to43_bb5_or_i_i_22_i_0_reg_43_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_42to43_bb5_or_i_i_22_i_0_reg_43_fifo.IMPL = "shift_reg";

assign rnode_42to43_bb5_or_i_i_22_i_0_reg_43_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_22_i_stall_in_1 = 1'b0;
assign rnode_42to43_bb5_or_i_i_22_i_0_NO_SHIFT_REG = rnode_42to43_bb5_or_i_i_22_i_0_reg_43_NO_SHIFT_REG;
assign rnode_42to43_bb5_or_i_i_22_i_0_stall_in_reg_43_NO_SHIFT_REG = 1'b0;
assign rnode_42to43_bb5_or_i_i_22_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_42to43_bb5_cmp3_i_i_22_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_42to43_bb5_cmp3_i_i_22_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_42to43_bb5_cmp3_i_i_22_i_0_NO_SHIFT_REG;
 logic rnode_42to43_bb5_cmp3_i_i_22_i_0_reg_43_inputs_ready_NO_SHIFT_REG;
 logic rnode_42to43_bb5_cmp3_i_i_22_i_0_reg_43_NO_SHIFT_REG;
 logic rnode_42to43_bb5_cmp3_i_i_22_i_0_valid_out_reg_43_NO_SHIFT_REG;
 logic rnode_42to43_bb5_cmp3_i_i_22_i_0_stall_in_reg_43_NO_SHIFT_REG;
 logic rnode_42to43_bb5_cmp3_i_i_22_i_0_stall_out_reg_43_NO_SHIFT_REG;

acl_data_fifo rnode_42to43_bb5_cmp3_i_i_22_i_0_reg_43_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_42to43_bb5_cmp3_i_i_22_i_0_reg_43_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_42to43_bb5_cmp3_i_i_22_i_0_stall_in_reg_43_NO_SHIFT_REG),
	.valid_out(rnode_42to43_bb5_cmp3_i_i_22_i_0_valid_out_reg_43_NO_SHIFT_REG),
	.stall_out(rnode_42to43_bb5_cmp3_i_i_22_i_0_stall_out_reg_43_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_22_i),
	.data_out(rnode_42to43_bb5_cmp3_i_i_22_i_0_reg_43_NO_SHIFT_REG)
);

defparam rnode_42to43_bb5_cmp3_i_i_22_i_0_reg_43_fifo.DEPTH = 1;
defparam rnode_42to43_bb5_cmp3_i_i_22_i_0_reg_43_fifo.DATA_WIDTH = 1;
defparam rnode_42to43_bb5_cmp3_i_i_22_i_0_reg_43_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_42to43_bb5_cmp3_i_i_22_i_0_reg_43_fifo.IMPL = "shift_reg";

assign rnode_42to43_bb5_cmp3_i_i_22_i_0_reg_43_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_22_i_stall_in = 1'b0;
assign rnode_42to43_bb5_cmp3_i_i_22_i_0_NO_SHIFT_REG = rnode_42to43_bb5_cmp3_i_i_22_i_0_reg_43_NO_SHIFT_REG;
assign rnode_42to43_bb5_cmp3_i_i_22_i_0_stall_in_reg_43_NO_SHIFT_REG = 1'b0;
assign rnode_42to43_bb5_cmp3_i_i_22_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_22_i_stall_local;
wire [63:0] local_bb5_cond_i_i_22_i;

assign local_bb5_cond_i_i_22_i = (rnode_42to43_bb5_cmp3_i_i_22_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_22_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_22_i;

assign local_bb5_sub4_i_i_22_i = (rnode_42to43_bb5_or_i_i_22_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_22_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_23_i_valid_out;
wire local_bb5_shl_i_i_23_i_stall_in;
wire local_bb5_shl_i_i_23_i_inputs_ready;
wire local_bb5_shl_i_i_23_i_stall_local;
wire [63:0] local_bb5_shl_i_i_23_i;

assign local_bb5_shl_i_i_23_i_inputs_ready = (rnode_42to43_bb5_or_i_i_22_i_0_valid_out_NO_SHIFT_REG & rnode_42to43_bb5_cmp3_i_i_22_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_23_i = (local_bb5_sub4_i_i_22_i << 64'h1);
assign local_bb5_shl_i_i_23_i_valid_out = 1'b1;
assign rnode_42to43_bb5_or_i_i_22_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_42to43_bb5_cmp3_i_i_22_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_43to44_bb5_shl_i_i_23_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_43to44_bb5_shl_i_i_23_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_43to44_bb5_shl_i_i_23_i_0_NO_SHIFT_REG;
 logic rnode_43to44_bb5_shl_i_i_23_i_0_reg_44_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_43to44_bb5_shl_i_i_23_i_0_reg_44_NO_SHIFT_REG;
 logic rnode_43to44_bb5_shl_i_i_23_i_0_valid_out_reg_44_NO_SHIFT_REG;
 logic rnode_43to44_bb5_shl_i_i_23_i_0_stall_in_reg_44_NO_SHIFT_REG;
 logic rnode_43to44_bb5_shl_i_i_23_i_0_stall_out_reg_44_NO_SHIFT_REG;

acl_data_fifo rnode_43to44_bb5_shl_i_i_23_i_0_reg_44_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_43to44_bb5_shl_i_i_23_i_0_reg_44_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_43to44_bb5_shl_i_i_23_i_0_stall_in_reg_44_NO_SHIFT_REG),
	.valid_out(rnode_43to44_bb5_shl_i_i_23_i_0_valid_out_reg_44_NO_SHIFT_REG),
	.stall_out(rnode_43to44_bb5_shl_i_i_23_i_0_stall_out_reg_44_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_23_i),
	.data_out(rnode_43to44_bb5_shl_i_i_23_i_0_reg_44_NO_SHIFT_REG)
);

defparam rnode_43to44_bb5_shl_i_i_23_i_0_reg_44_fifo.DEPTH = 1;
defparam rnode_43to44_bb5_shl_i_i_23_i_0_reg_44_fifo.DATA_WIDTH = 64;
defparam rnode_43to44_bb5_shl_i_i_23_i_0_reg_44_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_43to44_bb5_shl_i_i_23_i_0_reg_44_fifo.IMPL = "shift_reg";

assign rnode_43to44_bb5_shl_i_i_23_i_0_reg_44_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_23_i_stall_in = 1'b0;
assign rnode_43to44_bb5_shl_i_i_23_i_0_NO_SHIFT_REG = rnode_43to44_bb5_shl_i_i_23_i_0_reg_44_NO_SHIFT_REG;
assign rnode_43to44_bb5_shl_i_i_23_i_0_stall_in_reg_44_NO_SHIFT_REG = 1'b0;
assign rnode_43to44_bb5_shl_i_i_23_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_23_i_stall_local;
wire [63:0] local_bb5_or_i_i_23_i;

assign local_bb5_or_i_i_23_i = (rnode_43to44_bb5_shl_i_i_23_i_0_NO_SHIFT_REG | local_bb5_and_i_i_23_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_23_i_valid_out_1;
wire local_bb5_or_i_i_23_i_stall_in_1;
 reg local_bb5_or_i_i_23_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_23_i_valid_out;
wire local_bb5_cmp3_i_i_23_i_stall_in;
 reg local_bb5_cmp3_i_i_23_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_23_i_inputs_ready;
wire local_bb5_cmp3_i_i_23_i_stall_local;
wire local_bb5_cmp3_i_i_23_i;

assign local_bb5_cmp3_i_i_23_i_inputs_ready = (rnode_43to44_bb5_var__u28_0_valid_out_NO_SHIFT_REG & rnode_43to44_bb5_shl_i_i_23_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_23_i = (local_bb5_or_i_i_23_i > 64'h3);
assign local_bb5_or_i_i_23_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_23_i_valid_out = 1'b1;
assign rnode_43to44_bb5_var__u28_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_43to44_bb5_shl_i_i_23_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_23_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_23_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_23_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_23_i_inputs_ready & (local_bb5_or_i_i_23_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_23_i_stall_in_1)) & local_bb5_cmp3_i_i_23_i_stall_local);
		local_bb5_cmp3_i_i_23_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_23_i_inputs_ready & (local_bb5_cmp3_i_i_23_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_23_i_stall_in)) & local_bb5_cmp3_i_i_23_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_44to45_bb5_or_i_i_23_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_44to45_bb5_or_i_i_23_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_44to45_bb5_or_i_i_23_i_0_NO_SHIFT_REG;
 logic rnode_44to45_bb5_or_i_i_23_i_0_reg_45_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_44to45_bb5_or_i_i_23_i_0_reg_45_NO_SHIFT_REG;
 logic rnode_44to45_bb5_or_i_i_23_i_0_valid_out_reg_45_NO_SHIFT_REG;
 logic rnode_44to45_bb5_or_i_i_23_i_0_stall_in_reg_45_NO_SHIFT_REG;
 logic rnode_44to45_bb5_or_i_i_23_i_0_stall_out_reg_45_NO_SHIFT_REG;

acl_data_fifo rnode_44to45_bb5_or_i_i_23_i_0_reg_45_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_44to45_bb5_or_i_i_23_i_0_reg_45_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_44to45_bb5_or_i_i_23_i_0_stall_in_reg_45_NO_SHIFT_REG),
	.valid_out(rnode_44to45_bb5_or_i_i_23_i_0_valid_out_reg_45_NO_SHIFT_REG),
	.stall_out(rnode_44to45_bb5_or_i_i_23_i_0_stall_out_reg_45_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_23_i),
	.data_out(rnode_44to45_bb5_or_i_i_23_i_0_reg_45_NO_SHIFT_REG)
);

defparam rnode_44to45_bb5_or_i_i_23_i_0_reg_45_fifo.DEPTH = 1;
defparam rnode_44to45_bb5_or_i_i_23_i_0_reg_45_fifo.DATA_WIDTH = 64;
defparam rnode_44to45_bb5_or_i_i_23_i_0_reg_45_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_44to45_bb5_or_i_i_23_i_0_reg_45_fifo.IMPL = "shift_reg";

assign rnode_44to45_bb5_or_i_i_23_i_0_reg_45_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_23_i_stall_in_1 = 1'b0;
assign rnode_44to45_bb5_or_i_i_23_i_0_NO_SHIFT_REG = rnode_44to45_bb5_or_i_i_23_i_0_reg_45_NO_SHIFT_REG;
assign rnode_44to45_bb5_or_i_i_23_i_0_stall_in_reg_45_NO_SHIFT_REG = 1'b0;
assign rnode_44to45_bb5_or_i_i_23_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_44to45_bb5_cmp3_i_i_23_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_44to45_bb5_cmp3_i_i_23_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_44to45_bb5_cmp3_i_i_23_i_0_NO_SHIFT_REG;
 logic rnode_44to45_bb5_cmp3_i_i_23_i_0_reg_45_inputs_ready_NO_SHIFT_REG;
 logic rnode_44to45_bb5_cmp3_i_i_23_i_0_reg_45_NO_SHIFT_REG;
 logic rnode_44to45_bb5_cmp3_i_i_23_i_0_valid_out_reg_45_NO_SHIFT_REG;
 logic rnode_44to45_bb5_cmp3_i_i_23_i_0_stall_in_reg_45_NO_SHIFT_REG;
 logic rnode_44to45_bb5_cmp3_i_i_23_i_0_stall_out_reg_45_NO_SHIFT_REG;

acl_data_fifo rnode_44to45_bb5_cmp3_i_i_23_i_0_reg_45_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_44to45_bb5_cmp3_i_i_23_i_0_reg_45_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_44to45_bb5_cmp3_i_i_23_i_0_stall_in_reg_45_NO_SHIFT_REG),
	.valid_out(rnode_44to45_bb5_cmp3_i_i_23_i_0_valid_out_reg_45_NO_SHIFT_REG),
	.stall_out(rnode_44to45_bb5_cmp3_i_i_23_i_0_stall_out_reg_45_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_23_i),
	.data_out(rnode_44to45_bb5_cmp3_i_i_23_i_0_reg_45_NO_SHIFT_REG)
);

defparam rnode_44to45_bb5_cmp3_i_i_23_i_0_reg_45_fifo.DEPTH = 1;
defparam rnode_44to45_bb5_cmp3_i_i_23_i_0_reg_45_fifo.DATA_WIDTH = 1;
defparam rnode_44to45_bb5_cmp3_i_i_23_i_0_reg_45_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_44to45_bb5_cmp3_i_i_23_i_0_reg_45_fifo.IMPL = "shift_reg";

assign rnode_44to45_bb5_cmp3_i_i_23_i_0_reg_45_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_23_i_stall_in = 1'b0;
assign rnode_44to45_bb5_cmp3_i_i_23_i_0_NO_SHIFT_REG = rnode_44to45_bb5_cmp3_i_i_23_i_0_reg_45_NO_SHIFT_REG;
assign rnode_44to45_bb5_cmp3_i_i_23_i_0_stall_in_reg_45_NO_SHIFT_REG = 1'b0;
assign rnode_44to45_bb5_cmp3_i_i_23_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_23_i_stall_local;
wire [63:0] local_bb5_cond_i_i_23_i;

assign local_bb5_cond_i_i_23_i = (rnode_44to45_bb5_cmp3_i_i_23_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_23_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_23_i;

assign local_bb5_sub4_i_i_23_i = (rnode_44to45_bb5_or_i_i_23_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_23_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_24_i_valid_out;
wire local_bb5_shl_i_i_24_i_stall_in;
wire local_bb5_shl_i_i_24_i_inputs_ready;
wire local_bb5_shl_i_i_24_i_stall_local;
wire [63:0] local_bb5_shl_i_i_24_i;

assign local_bb5_shl_i_i_24_i_inputs_ready = (rnode_44to45_bb5_or_i_i_23_i_0_valid_out_NO_SHIFT_REG & rnode_44to45_bb5_cmp3_i_i_23_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_24_i = (local_bb5_sub4_i_i_23_i << 64'h1);
assign local_bb5_shl_i_i_24_i_valid_out = 1'b1;
assign rnode_44to45_bb5_or_i_i_23_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_44to45_bb5_cmp3_i_i_23_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_45to46_bb5_shl_i_i_24_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_45to46_bb5_shl_i_i_24_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_45to46_bb5_shl_i_i_24_i_0_NO_SHIFT_REG;
 logic rnode_45to46_bb5_shl_i_i_24_i_0_reg_46_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_45to46_bb5_shl_i_i_24_i_0_reg_46_NO_SHIFT_REG;
 logic rnode_45to46_bb5_shl_i_i_24_i_0_valid_out_reg_46_NO_SHIFT_REG;
 logic rnode_45to46_bb5_shl_i_i_24_i_0_stall_in_reg_46_NO_SHIFT_REG;
 logic rnode_45to46_bb5_shl_i_i_24_i_0_stall_out_reg_46_NO_SHIFT_REG;

acl_data_fifo rnode_45to46_bb5_shl_i_i_24_i_0_reg_46_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_45to46_bb5_shl_i_i_24_i_0_reg_46_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_45to46_bb5_shl_i_i_24_i_0_stall_in_reg_46_NO_SHIFT_REG),
	.valid_out(rnode_45to46_bb5_shl_i_i_24_i_0_valid_out_reg_46_NO_SHIFT_REG),
	.stall_out(rnode_45to46_bb5_shl_i_i_24_i_0_stall_out_reg_46_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_24_i),
	.data_out(rnode_45to46_bb5_shl_i_i_24_i_0_reg_46_NO_SHIFT_REG)
);

defparam rnode_45to46_bb5_shl_i_i_24_i_0_reg_46_fifo.DEPTH = 1;
defparam rnode_45to46_bb5_shl_i_i_24_i_0_reg_46_fifo.DATA_WIDTH = 64;
defparam rnode_45to46_bb5_shl_i_i_24_i_0_reg_46_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_45to46_bb5_shl_i_i_24_i_0_reg_46_fifo.IMPL = "shift_reg";

assign rnode_45to46_bb5_shl_i_i_24_i_0_reg_46_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_24_i_stall_in = 1'b0;
assign rnode_45to46_bb5_shl_i_i_24_i_0_NO_SHIFT_REG = rnode_45to46_bb5_shl_i_i_24_i_0_reg_46_NO_SHIFT_REG;
assign rnode_45to46_bb5_shl_i_i_24_i_0_stall_in_reg_46_NO_SHIFT_REG = 1'b0;
assign rnode_45to46_bb5_shl_i_i_24_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_24_i_stall_local;
wire [63:0] local_bb5_or_i_i_24_i;

assign local_bb5_or_i_i_24_i = (rnode_45to46_bb5_shl_i_i_24_i_0_NO_SHIFT_REG | local_bb5_and_i_i_24_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_24_i_valid_out_1;
wire local_bb5_or_i_i_24_i_stall_in_1;
 reg local_bb5_or_i_i_24_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_24_i_valid_out;
wire local_bb5_cmp3_i_i_24_i_stall_in;
 reg local_bb5_cmp3_i_i_24_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_24_i_inputs_ready;
wire local_bb5_cmp3_i_i_24_i_stall_local;
wire local_bb5_cmp3_i_i_24_i;

assign local_bb5_cmp3_i_i_24_i_inputs_ready = (rnode_45to46_bb5_var__u29_0_valid_out_NO_SHIFT_REG & rnode_45to46_bb5_shl_i_i_24_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_24_i = (local_bb5_or_i_i_24_i > 64'h3);
assign local_bb5_or_i_i_24_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_24_i_valid_out = 1'b1;
assign rnode_45to46_bb5_var__u29_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_45to46_bb5_shl_i_i_24_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_24_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_24_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_24_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_24_i_inputs_ready & (local_bb5_or_i_i_24_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_24_i_stall_in_1)) & local_bb5_cmp3_i_i_24_i_stall_local);
		local_bb5_cmp3_i_i_24_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_24_i_inputs_ready & (local_bb5_cmp3_i_i_24_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_24_i_stall_in)) & local_bb5_cmp3_i_i_24_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_46to47_bb5_or_i_i_24_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_46to47_bb5_or_i_i_24_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_46to47_bb5_or_i_i_24_i_0_NO_SHIFT_REG;
 logic rnode_46to47_bb5_or_i_i_24_i_0_reg_47_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_46to47_bb5_or_i_i_24_i_0_reg_47_NO_SHIFT_REG;
 logic rnode_46to47_bb5_or_i_i_24_i_0_valid_out_reg_47_NO_SHIFT_REG;
 logic rnode_46to47_bb5_or_i_i_24_i_0_stall_in_reg_47_NO_SHIFT_REG;
 logic rnode_46to47_bb5_or_i_i_24_i_0_stall_out_reg_47_NO_SHIFT_REG;

acl_data_fifo rnode_46to47_bb5_or_i_i_24_i_0_reg_47_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_46to47_bb5_or_i_i_24_i_0_reg_47_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_46to47_bb5_or_i_i_24_i_0_stall_in_reg_47_NO_SHIFT_REG),
	.valid_out(rnode_46to47_bb5_or_i_i_24_i_0_valid_out_reg_47_NO_SHIFT_REG),
	.stall_out(rnode_46to47_bb5_or_i_i_24_i_0_stall_out_reg_47_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_24_i),
	.data_out(rnode_46to47_bb5_or_i_i_24_i_0_reg_47_NO_SHIFT_REG)
);

defparam rnode_46to47_bb5_or_i_i_24_i_0_reg_47_fifo.DEPTH = 1;
defparam rnode_46to47_bb5_or_i_i_24_i_0_reg_47_fifo.DATA_WIDTH = 64;
defparam rnode_46to47_bb5_or_i_i_24_i_0_reg_47_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_46to47_bb5_or_i_i_24_i_0_reg_47_fifo.IMPL = "shift_reg";

assign rnode_46to47_bb5_or_i_i_24_i_0_reg_47_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_24_i_stall_in_1 = 1'b0;
assign rnode_46to47_bb5_or_i_i_24_i_0_NO_SHIFT_REG = rnode_46to47_bb5_or_i_i_24_i_0_reg_47_NO_SHIFT_REG;
assign rnode_46to47_bb5_or_i_i_24_i_0_stall_in_reg_47_NO_SHIFT_REG = 1'b0;
assign rnode_46to47_bb5_or_i_i_24_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_46to47_bb5_cmp3_i_i_24_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_46to47_bb5_cmp3_i_i_24_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_46to47_bb5_cmp3_i_i_24_i_0_NO_SHIFT_REG;
 logic rnode_46to47_bb5_cmp3_i_i_24_i_0_reg_47_inputs_ready_NO_SHIFT_REG;
 logic rnode_46to47_bb5_cmp3_i_i_24_i_0_reg_47_NO_SHIFT_REG;
 logic rnode_46to47_bb5_cmp3_i_i_24_i_0_valid_out_reg_47_NO_SHIFT_REG;
 logic rnode_46to47_bb5_cmp3_i_i_24_i_0_stall_in_reg_47_NO_SHIFT_REG;
 logic rnode_46to47_bb5_cmp3_i_i_24_i_0_stall_out_reg_47_NO_SHIFT_REG;

acl_data_fifo rnode_46to47_bb5_cmp3_i_i_24_i_0_reg_47_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_46to47_bb5_cmp3_i_i_24_i_0_reg_47_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_46to47_bb5_cmp3_i_i_24_i_0_stall_in_reg_47_NO_SHIFT_REG),
	.valid_out(rnode_46to47_bb5_cmp3_i_i_24_i_0_valid_out_reg_47_NO_SHIFT_REG),
	.stall_out(rnode_46to47_bb5_cmp3_i_i_24_i_0_stall_out_reg_47_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_24_i),
	.data_out(rnode_46to47_bb5_cmp3_i_i_24_i_0_reg_47_NO_SHIFT_REG)
);

defparam rnode_46to47_bb5_cmp3_i_i_24_i_0_reg_47_fifo.DEPTH = 1;
defparam rnode_46to47_bb5_cmp3_i_i_24_i_0_reg_47_fifo.DATA_WIDTH = 1;
defparam rnode_46to47_bb5_cmp3_i_i_24_i_0_reg_47_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_46to47_bb5_cmp3_i_i_24_i_0_reg_47_fifo.IMPL = "shift_reg";

assign rnode_46to47_bb5_cmp3_i_i_24_i_0_reg_47_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_24_i_stall_in = 1'b0;
assign rnode_46to47_bb5_cmp3_i_i_24_i_0_NO_SHIFT_REG = rnode_46to47_bb5_cmp3_i_i_24_i_0_reg_47_NO_SHIFT_REG;
assign rnode_46to47_bb5_cmp3_i_i_24_i_0_stall_in_reg_47_NO_SHIFT_REG = 1'b0;
assign rnode_46to47_bb5_cmp3_i_i_24_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_24_i_stall_local;
wire [63:0] local_bb5_cond_i_i_24_i;

assign local_bb5_cond_i_i_24_i = (rnode_46to47_bb5_cmp3_i_i_24_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_24_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_24_i;

assign local_bb5_sub4_i_i_24_i = (rnode_46to47_bb5_or_i_i_24_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_24_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_25_i_valid_out;
wire local_bb5_shl_i_i_25_i_stall_in;
wire local_bb5_shl_i_i_25_i_inputs_ready;
wire local_bb5_shl_i_i_25_i_stall_local;
wire [63:0] local_bb5_shl_i_i_25_i;

assign local_bb5_shl_i_i_25_i_inputs_ready = (rnode_46to47_bb5_or_i_i_24_i_0_valid_out_NO_SHIFT_REG & rnode_46to47_bb5_cmp3_i_i_24_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_25_i = (local_bb5_sub4_i_i_24_i << 64'h1);
assign local_bb5_shl_i_i_25_i_valid_out = 1'b1;
assign rnode_46to47_bb5_or_i_i_24_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_46to47_bb5_cmp3_i_i_24_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_47to48_bb5_shl_i_i_25_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_47to48_bb5_shl_i_i_25_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_47to48_bb5_shl_i_i_25_i_0_NO_SHIFT_REG;
 logic rnode_47to48_bb5_shl_i_i_25_i_0_reg_48_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_47to48_bb5_shl_i_i_25_i_0_reg_48_NO_SHIFT_REG;
 logic rnode_47to48_bb5_shl_i_i_25_i_0_valid_out_reg_48_NO_SHIFT_REG;
 logic rnode_47to48_bb5_shl_i_i_25_i_0_stall_in_reg_48_NO_SHIFT_REG;
 logic rnode_47to48_bb5_shl_i_i_25_i_0_stall_out_reg_48_NO_SHIFT_REG;

acl_data_fifo rnode_47to48_bb5_shl_i_i_25_i_0_reg_48_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_47to48_bb5_shl_i_i_25_i_0_reg_48_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_47to48_bb5_shl_i_i_25_i_0_stall_in_reg_48_NO_SHIFT_REG),
	.valid_out(rnode_47to48_bb5_shl_i_i_25_i_0_valid_out_reg_48_NO_SHIFT_REG),
	.stall_out(rnode_47to48_bb5_shl_i_i_25_i_0_stall_out_reg_48_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_25_i),
	.data_out(rnode_47to48_bb5_shl_i_i_25_i_0_reg_48_NO_SHIFT_REG)
);

defparam rnode_47to48_bb5_shl_i_i_25_i_0_reg_48_fifo.DEPTH = 1;
defparam rnode_47to48_bb5_shl_i_i_25_i_0_reg_48_fifo.DATA_WIDTH = 64;
defparam rnode_47to48_bb5_shl_i_i_25_i_0_reg_48_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_47to48_bb5_shl_i_i_25_i_0_reg_48_fifo.IMPL = "shift_reg";

assign rnode_47to48_bb5_shl_i_i_25_i_0_reg_48_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_25_i_stall_in = 1'b0;
assign rnode_47to48_bb5_shl_i_i_25_i_0_NO_SHIFT_REG = rnode_47to48_bb5_shl_i_i_25_i_0_reg_48_NO_SHIFT_REG;
assign rnode_47to48_bb5_shl_i_i_25_i_0_stall_in_reg_48_NO_SHIFT_REG = 1'b0;
assign rnode_47to48_bb5_shl_i_i_25_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_25_i_stall_local;
wire [63:0] local_bb5_or_i_i_25_i;

assign local_bb5_or_i_i_25_i = (rnode_47to48_bb5_shl_i_i_25_i_0_NO_SHIFT_REG | local_bb5_and_i_i_25_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_25_i_valid_out_1;
wire local_bb5_or_i_i_25_i_stall_in_1;
 reg local_bb5_or_i_i_25_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_25_i_valid_out;
wire local_bb5_cmp3_i_i_25_i_stall_in;
 reg local_bb5_cmp3_i_i_25_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_25_i_inputs_ready;
wire local_bb5_cmp3_i_i_25_i_stall_local;
wire local_bb5_cmp3_i_i_25_i;

assign local_bb5_cmp3_i_i_25_i_inputs_ready = (rnode_47to48_bb5_var__u30_0_valid_out_NO_SHIFT_REG & rnode_47to48_bb5_shl_i_i_25_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_25_i = (local_bb5_or_i_i_25_i > 64'h3);
assign local_bb5_or_i_i_25_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_25_i_valid_out = 1'b1;
assign rnode_47to48_bb5_var__u30_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_47to48_bb5_shl_i_i_25_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_25_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_25_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_25_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_25_i_inputs_ready & (local_bb5_or_i_i_25_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_25_i_stall_in_1)) & local_bb5_cmp3_i_i_25_i_stall_local);
		local_bb5_cmp3_i_i_25_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_25_i_inputs_ready & (local_bb5_cmp3_i_i_25_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_25_i_stall_in)) & local_bb5_cmp3_i_i_25_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_48to49_bb5_or_i_i_25_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_48to49_bb5_or_i_i_25_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_48to49_bb5_or_i_i_25_i_0_NO_SHIFT_REG;
 logic rnode_48to49_bb5_or_i_i_25_i_0_reg_49_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_48to49_bb5_or_i_i_25_i_0_reg_49_NO_SHIFT_REG;
 logic rnode_48to49_bb5_or_i_i_25_i_0_valid_out_reg_49_NO_SHIFT_REG;
 logic rnode_48to49_bb5_or_i_i_25_i_0_stall_in_reg_49_NO_SHIFT_REG;
 logic rnode_48to49_bb5_or_i_i_25_i_0_stall_out_reg_49_NO_SHIFT_REG;

acl_data_fifo rnode_48to49_bb5_or_i_i_25_i_0_reg_49_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_48to49_bb5_or_i_i_25_i_0_reg_49_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_48to49_bb5_or_i_i_25_i_0_stall_in_reg_49_NO_SHIFT_REG),
	.valid_out(rnode_48to49_bb5_or_i_i_25_i_0_valid_out_reg_49_NO_SHIFT_REG),
	.stall_out(rnode_48to49_bb5_or_i_i_25_i_0_stall_out_reg_49_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_25_i),
	.data_out(rnode_48to49_bb5_or_i_i_25_i_0_reg_49_NO_SHIFT_REG)
);

defparam rnode_48to49_bb5_or_i_i_25_i_0_reg_49_fifo.DEPTH = 1;
defparam rnode_48to49_bb5_or_i_i_25_i_0_reg_49_fifo.DATA_WIDTH = 64;
defparam rnode_48to49_bb5_or_i_i_25_i_0_reg_49_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_48to49_bb5_or_i_i_25_i_0_reg_49_fifo.IMPL = "shift_reg";

assign rnode_48to49_bb5_or_i_i_25_i_0_reg_49_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_25_i_stall_in_1 = 1'b0;
assign rnode_48to49_bb5_or_i_i_25_i_0_NO_SHIFT_REG = rnode_48to49_bb5_or_i_i_25_i_0_reg_49_NO_SHIFT_REG;
assign rnode_48to49_bb5_or_i_i_25_i_0_stall_in_reg_49_NO_SHIFT_REG = 1'b0;
assign rnode_48to49_bb5_or_i_i_25_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_48to49_bb5_cmp3_i_i_25_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_48to49_bb5_cmp3_i_i_25_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_48to49_bb5_cmp3_i_i_25_i_0_NO_SHIFT_REG;
 logic rnode_48to49_bb5_cmp3_i_i_25_i_0_reg_49_inputs_ready_NO_SHIFT_REG;
 logic rnode_48to49_bb5_cmp3_i_i_25_i_0_reg_49_NO_SHIFT_REG;
 logic rnode_48to49_bb5_cmp3_i_i_25_i_0_valid_out_reg_49_NO_SHIFT_REG;
 logic rnode_48to49_bb5_cmp3_i_i_25_i_0_stall_in_reg_49_NO_SHIFT_REG;
 logic rnode_48to49_bb5_cmp3_i_i_25_i_0_stall_out_reg_49_NO_SHIFT_REG;

acl_data_fifo rnode_48to49_bb5_cmp3_i_i_25_i_0_reg_49_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_48to49_bb5_cmp3_i_i_25_i_0_reg_49_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_48to49_bb5_cmp3_i_i_25_i_0_stall_in_reg_49_NO_SHIFT_REG),
	.valid_out(rnode_48to49_bb5_cmp3_i_i_25_i_0_valid_out_reg_49_NO_SHIFT_REG),
	.stall_out(rnode_48to49_bb5_cmp3_i_i_25_i_0_stall_out_reg_49_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_25_i),
	.data_out(rnode_48to49_bb5_cmp3_i_i_25_i_0_reg_49_NO_SHIFT_REG)
);

defparam rnode_48to49_bb5_cmp3_i_i_25_i_0_reg_49_fifo.DEPTH = 1;
defparam rnode_48to49_bb5_cmp3_i_i_25_i_0_reg_49_fifo.DATA_WIDTH = 1;
defparam rnode_48to49_bb5_cmp3_i_i_25_i_0_reg_49_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_48to49_bb5_cmp3_i_i_25_i_0_reg_49_fifo.IMPL = "shift_reg";

assign rnode_48to49_bb5_cmp3_i_i_25_i_0_reg_49_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_25_i_stall_in = 1'b0;
assign rnode_48to49_bb5_cmp3_i_i_25_i_0_NO_SHIFT_REG = rnode_48to49_bb5_cmp3_i_i_25_i_0_reg_49_NO_SHIFT_REG;
assign rnode_48to49_bb5_cmp3_i_i_25_i_0_stall_in_reg_49_NO_SHIFT_REG = 1'b0;
assign rnode_48to49_bb5_cmp3_i_i_25_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_25_i_stall_local;
wire [63:0] local_bb5_cond_i_i_25_i;

assign local_bb5_cond_i_i_25_i = (rnode_48to49_bb5_cmp3_i_i_25_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_25_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_25_i;

assign local_bb5_sub4_i_i_25_i = (rnode_48to49_bb5_or_i_i_25_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_25_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_26_i_valid_out;
wire local_bb5_shl_i_i_26_i_stall_in;
wire local_bb5_shl_i_i_26_i_inputs_ready;
wire local_bb5_shl_i_i_26_i_stall_local;
wire [63:0] local_bb5_shl_i_i_26_i;

assign local_bb5_shl_i_i_26_i_inputs_ready = (rnode_48to49_bb5_or_i_i_25_i_0_valid_out_NO_SHIFT_REG & rnode_48to49_bb5_cmp3_i_i_25_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_26_i = (local_bb5_sub4_i_i_25_i << 64'h1);
assign local_bb5_shl_i_i_26_i_valid_out = 1'b1;
assign rnode_48to49_bb5_or_i_i_25_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_48to49_bb5_cmp3_i_i_25_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_49to50_bb5_shl_i_i_26_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_49to50_bb5_shl_i_i_26_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_49to50_bb5_shl_i_i_26_i_0_NO_SHIFT_REG;
 logic rnode_49to50_bb5_shl_i_i_26_i_0_reg_50_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_49to50_bb5_shl_i_i_26_i_0_reg_50_NO_SHIFT_REG;
 logic rnode_49to50_bb5_shl_i_i_26_i_0_valid_out_reg_50_NO_SHIFT_REG;
 logic rnode_49to50_bb5_shl_i_i_26_i_0_stall_in_reg_50_NO_SHIFT_REG;
 logic rnode_49to50_bb5_shl_i_i_26_i_0_stall_out_reg_50_NO_SHIFT_REG;

acl_data_fifo rnode_49to50_bb5_shl_i_i_26_i_0_reg_50_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_49to50_bb5_shl_i_i_26_i_0_reg_50_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_49to50_bb5_shl_i_i_26_i_0_stall_in_reg_50_NO_SHIFT_REG),
	.valid_out(rnode_49to50_bb5_shl_i_i_26_i_0_valid_out_reg_50_NO_SHIFT_REG),
	.stall_out(rnode_49to50_bb5_shl_i_i_26_i_0_stall_out_reg_50_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_26_i),
	.data_out(rnode_49to50_bb5_shl_i_i_26_i_0_reg_50_NO_SHIFT_REG)
);

defparam rnode_49to50_bb5_shl_i_i_26_i_0_reg_50_fifo.DEPTH = 1;
defparam rnode_49to50_bb5_shl_i_i_26_i_0_reg_50_fifo.DATA_WIDTH = 64;
defparam rnode_49to50_bb5_shl_i_i_26_i_0_reg_50_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_49to50_bb5_shl_i_i_26_i_0_reg_50_fifo.IMPL = "shift_reg";

assign rnode_49to50_bb5_shl_i_i_26_i_0_reg_50_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_26_i_stall_in = 1'b0;
assign rnode_49to50_bb5_shl_i_i_26_i_0_NO_SHIFT_REG = rnode_49to50_bb5_shl_i_i_26_i_0_reg_50_NO_SHIFT_REG;
assign rnode_49to50_bb5_shl_i_i_26_i_0_stall_in_reg_50_NO_SHIFT_REG = 1'b0;
assign rnode_49to50_bb5_shl_i_i_26_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_26_i_stall_local;
wire [63:0] local_bb5_or_i_i_26_i;

assign local_bb5_or_i_i_26_i = (rnode_49to50_bb5_shl_i_i_26_i_0_NO_SHIFT_REG | local_bb5_and_i_i_26_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_26_i_valid_out_1;
wire local_bb5_or_i_i_26_i_stall_in_1;
 reg local_bb5_or_i_i_26_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_26_i_valid_out;
wire local_bb5_cmp3_i_i_26_i_stall_in;
 reg local_bb5_cmp3_i_i_26_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_26_i_inputs_ready;
wire local_bb5_cmp3_i_i_26_i_stall_local;
wire local_bb5_cmp3_i_i_26_i;

assign local_bb5_cmp3_i_i_26_i_inputs_ready = (rnode_49to50_bb5_var__u31_0_valid_out_NO_SHIFT_REG & rnode_49to50_bb5_shl_i_i_26_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_26_i = (local_bb5_or_i_i_26_i > 64'h3);
assign local_bb5_or_i_i_26_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_26_i_valid_out = 1'b1;
assign rnode_49to50_bb5_var__u31_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_49to50_bb5_shl_i_i_26_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_26_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_26_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_26_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_26_i_inputs_ready & (local_bb5_or_i_i_26_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_26_i_stall_in_1)) & local_bb5_cmp3_i_i_26_i_stall_local);
		local_bb5_cmp3_i_i_26_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_26_i_inputs_ready & (local_bb5_cmp3_i_i_26_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_26_i_stall_in)) & local_bb5_cmp3_i_i_26_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_50to51_bb5_or_i_i_26_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_50to51_bb5_or_i_i_26_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_50to51_bb5_or_i_i_26_i_0_NO_SHIFT_REG;
 logic rnode_50to51_bb5_or_i_i_26_i_0_reg_51_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_50to51_bb5_or_i_i_26_i_0_reg_51_NO_SHIFT_REG;
 logic rnode_50to51_bb5_or_i_i_26_i_0_valid_out_reg_51_NO_SHIFT_REG;
 logic rnode_50to51_bb5_or_i_i_26_i_0_stall_in_reg_51_NO_SHIFT_REG;
 logic rnode_50to51_bb5_or_i_i_26_i_0_stall_out_reg_51_NO_SHIFT_REG;

acl_data_fifo rnode_50to51_bb5_or_i_i_26_i_0_reg_51_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_50to51_bb5_or_i_i_26_i_0_reg_51_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_50to51_bb5_or_i_i_26_i_0_stall_in_reg_51_NO_SHIFT_REG),
	.valid_out(rnode_50to51_bb5_or_i_i_26_i_0_valid_out_reg_51_NO_SHIFT_REG),
	.stall_out(rnode_50to51_bb5_or_i_i_26_i_0_stall_out_reg_51_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_26_i),
	.data_out(rnode_50to51_bb5_or_i_i_26_i_0_reg_51_NO_SHIFT_REG)
);

defparam rnode_50to51_bb5_or_i_i_26_i_0_reg_51_fifo.DEPTH = 1;
defparam rnode_50to51_bb5_or_i_i_26_i_0_reg_51_fifo.DATA_WIDTH = 64;
defparam rnode_50to51_bb5_or_i_i_26_i_0_reg_51_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_50to51_bb5_or_i_i_26_i_0_reg_51_fifo.IMPL = "shift_reg";

assign rnode_50to51_bb5_or_i_i_26_i_0_reg_51_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_26_i_stall_in_1 = 1'b0;
assign rnode_50to51_bb5_or_i_i_26_i_0_NO_SHIFT_REG = rnode_50to51_bb5_or_i_i_26_i_0_reg_51_NO_SHIFT_REG;
assign rnode_50to51_bb5_or_i_i_26_i_0_stall_in_reg_51_NO_SHIFT_REG = 1'b0;
assign rnode_50to51_bb5_or_i_i_26_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_50to51_bb5_cmp3_i_i_26_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_50to51_bb5_cmp3_i_i_26_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_50to51_bb5_cmp3_i_i_26_i_0_NO_SHIFT_REG;
 logic rnode_50to51_bb5_cmp3_i_i_26_i_0_reg_51_inputs_ready_NO_SHIFT_REG;
 logic rnode_50to51_bb5_cmp3_i_i_26_i_0_reg_51_NO_SHIFT_REG;
 logic rnode_50to51_bb5_cmp3_i_i_26_i_0_valid_out_reg_51_NO_SHIFT_REG;
 logic rnode_50to51_bb5_cmp3_i_i_26_i_0_stall_in_reg_51_NO_SHIFT_REG;
 logic rnode_50to51_bb5_cmp3_i_i_26_i_0_stall_out_reg_51_NO_SHIFT_REG;

acl_data_fifo rnode_50to51_bb5_cmp3_i_i_26_i_0_reg_51_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_50to51_bb5_cmp3_i_i_26_i_0_reg_51_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_50to51_bb5_cmp3_i_i_26_i_0_stall_in_reg_51_NO_SHIFT_REG),
	.valid_out(rnode_50to51_bb5_cmp3_i_i_26_i_0_valid_out_reg_51_NO_SHIFT_REG),
	.stall_out(rnode_50to51_bb5_cmp3_i_i_26_i_0_stall_out_reg_51_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_26_i),
	.data_out(rnode_50to51_bb5_cmp3_i_i_26_i_0_reg_51_NO_SHIFT_REG)
);

defparam rnode_50to51_bb5_cmp3_i_i_26_i_0_reg_51_fifo.DEPTH = 1;
defparam rnode_50to51_bb5_cmp3_i_i_26_i_0_reg_51_fifo.DATA_WIDTH = 1;
defparam rnode_50to51_bb5_cmp3_i_i_26_i_0_reg_51_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_50to51_bb5_cmp3_i_i_26_i_0_reg_51_fifo.IMPL = "shift_reg";

assign rnode_50to51_bb5_cmp3_i_i_26_i_0_reg_51_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_26_i_stall_in = 1'b0;
assign rnode_50to51_bb5_cmp3_i_i_26_i_0_NO_SHIFT_REG = rnode_50to51_bb5_cmp3_i_i_26_i_0_reg_51_NO_SHIFT_REG;
assign rnode_50to51_bb5_cmp3_i_i_26_i_0_stall_in_reg_51_NO_SHIFT_REG = 1'b0;
assign rnode_50to51_bb5_cmp3_i_i_26_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_26_i_stall_local;
wire [63:0] local_bb5_cond_i_i_26_i;

assign local_bb5_cond_i_i_26_i = (rnode_50to51_bb5_cmp3_i_i_26_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_26_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_26_i;

assign local_bb5_sub4_i_i_26_i = (rnode_50to51_bb5_or_i_i_26_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_26_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_27_i_valid_out;
wire local_bb5_shl_i_i_27_i_stall_in;
wire local_bb5_shl_i_i_27_i_inputs_ready;
wire local_bb5_shl_i_i_27_i_stall_local;
wire [63:0] local_bb5_shl_i_i_27_i;

assign local_bb5_shl_i_i_27_i_inputs_ready = (rnode_50to51_bb5_or_i_i_26_i_0_valid_out_NO_SHIFT_REG & rnode_50to51_bb5_cmp3_i_i_26_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_27_i = (local_bb5_sub4_i_i_26_i << 64'h1);
assign local_bb5_shl_i_i_27_i_valid_out = 1'b1;
assign rnode_50to51_bb5_or_i_i_26_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_50to51_bb5_cmp3_i_i_26_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_51to52_bb5_shl_i_i_27_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_51to52_bb5_shl_i_i_27_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_51to52_bb5_shl_i_i_27_i_0_NO_SHIFT_REG;
 logic rnode_51to52_bb5_shl_i_i_27_i_0_reg_52_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_51to52_bb5_shl_i_i_27_i_0_reg_52_NO_SHIFT_REG;
 logic rnode_51to52_bb5_shl_i_i_27_i_0_valid_out_reg_52_NO_SHIFT_REG;
 logic rnode_51to52_bb5_shl_i_i_27_i_0_stall_in_reg_52_NO_SHIFT_REG;
 logic rnode_51to52_bb5_shl_i_i_27_i_0_stall_out_reg_52_NO_SHIFT_REG;

acl_data_fifo rnode_51to52_bb5_shl_i_i_27_i_0_reg_52_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_51to52_bb5_shl_i_i_27_i_0_reg_52_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_51to52_bb5_shl_i_i_27_i_0_stall_in_reg_52_NO_SHIFT_REG),
	.valid_out(rnode_51to52_bb5_shl_i_i_27_i_0_valid_out_reg_52_NO_SHIFT_REG),
	.stall_out(rnode_51to52_bb5_shl_i_i_27_i_0_stall_out_reg_52_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_27_i),
	.data_out(rnode_51to52_bb5_shl_i_i_27_i_0_reg_52_NO_SHIFT_REG)
);

defparam rnode_51to52_bb5_shl_i_i_27_i_0_reg_52_fifo.DEPTH = 1;
defparam rnode_51to52_bb5_shl_i_i_27_i_0_reg_52_fifo.DATA_WIDTH = 64;
defparam rnode_51to52_bb5_shl_i_i_27_i_0_reg_52_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_51to52_bb5_shl_i_i_27_i_0_reg_52_fifo.IMPL = "shift_reg";

assign rnode_51to52_bb5_shl_i_i_27_i_0_reg_52_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_27_i_stall_in = 1'b0;
assign rnode_51to52_bb5_shl_i_i_27_i_0_NO_SHIFT_REG = rnode_51to52_bb5_shl_i_i_27_i_0_reg_52_NO_SHIFT_REG;
assign rnode_51to52_bb5_shl_i_i_27_i_0_stall_in_reg_52_NO_SHIFT_REG = 1'b0;
assign rnode_51to52_bb5_shl_i_i_27_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_27_i_stall_local;
wire [63:0] local_bb5_or_i_i_27_i;

assign local_bb5_or_i_i_27_i = (rnode_51to52_bb5_shl_i_i_27_i_0_NO_SHIFT_REG | local_bb5_and_i_i_27_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_27_i_valid_out_1;
wire local_bb5_or_i_i_27_i_stall_in_1;
 reg local_bb5_or_i_i_27_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_27_i_valid_out;
wire local_bb5_cmp3_i_i_27_i_stall_in;
 reg local_bb5_cmp3_i_i_27_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_27_i_inputs_ready;
wire local_bb5_cmp3_i_i_27_i_stall_local;
wire local_bb5_cmp3_i_i_27_i;

assign local_bb5_cmp3_i_i_27_i_inputs_ready = (rnode_51to52_bb5_var__u32_0_valid_out_NO_SHIFT_REG & rnode_51to52_bb5_shl_i_i_27_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_27_i = (local_bb5_or_i_i_27_i > 64'h3);
assign local_bb5_or_i_i_27_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_27_i_valid_out = 1'b1;
assign rnode_51to52_bb5_var__u32_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_51to52_bb5_shl_i_i_27_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_27_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_27_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_27_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_27_i_inputs_ready & (local_bb5_or_i_i_27_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_27_i_stall_in_1)) & local_bb5_cmp3_i_i_27_i_stall_local);
		local_bb5_cmp3_i_i_27_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_27_i_inputs_ready & (local_bb5_cmp3_i_i_27_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_27_i_stall_in)) & local_bb5_cmp3_i_i_27_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_52to53_bb5_or_i_i_27_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_52to53_bb5_or_i_i_27_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_52to53_bb5_or_i_i_27_i_0_NO_SHIFT_REG;
 logic rnode_52to53_bb5_or_i_i_27_i_0_reg_53_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_52to53_bb5_or_i_i_27_i_0_reg_53_NO_SHIFT_REG;
 logic rnode_52to53_bb5_or_i_i_27_i_0_valid_out_reg_53_NO_SHIFT_REG;
 logic rnode_52to53_bb5_or_i_i_27_i_0_stall_in_reg_53_NO_SHIFT_REG;
 logic rnode_52to53_bb5_or_i_i_27_i_0_stall_out_reg_53_NO_SHIFT_REG;

acl_data_fifo rnode_52to53_bb5_or_i_i_27_i_0_reg_53_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_52to53_bb5_or_i_i_27_i_0_reg_53_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_52to53_bb5_or_i_i_27_i_0_stall_in_reg_53_NO_SHIFT_REG),
	.valid_out(rnode_52to53_bb5_or_i_i_27_i_0_valid_out_reg_53_NO_SHIFT_REG),
	.stall_out(rnode_52to53_bb5_or_i_i_27_i_0_stall_out_reg_53_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_27_i),
	.data_out(rnode_52to53_bb5_or_i_i_27_i_0_reg_53_NO_SHIFT_REG)
);

defparam rnode_52to53_bb5_or_i_i_27_i_0_reg_53_fifo.DEPTH = 1;
defparam rnode_52to53_bb5_or_i_i_27_i_0_reg_53_fifo.DATA_WIDTH = 64;
defparam rnode_52to53_bb5_or_i_i_27_i_0_reg_53_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_52to53_bb5_or_i_i_27_i_0_reg_53_fifo.IMPL = "shift_reg";

assign rnode_52to53_bb5_or_i_i_27_i_0_reg_53_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_27_i_stall_in_1 = 1'b0;
assign rnode_52to53_bb5_or_i_i_27_i_0_NO_SHIFT_REG = rnode_52to53_bb5_or_i_i_27_i_0_reg_53_NO_SHIFT_REG;
assign rnode_52to53_bb5_or_i_i_27_i_0_stall_in_reg_53_NO_SHIFT_REG = 1'b0;
assign rnode_52to53_bb5_or_i_i_27_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_52to53_bb5_cmp3_i_i_27_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_52to53_bb5_cmp3_i_i_27_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_52to53_bb5_cmp3_i_i_27_i_0_NO_SHIFT_REG;
 logic rnode_52to53_bb5_cmp3_i_i_27_i_0_reg_53_inputs_ready_NO_SHIFT_REG;
 logic rnode_52to53_bb5_cmp3_i_i_27_i_0_reg_53_NO_SHIFT_REG;
 logic rnode_52to53_bb5_cmp3_i_i_27_i_0_valid_out_reg_53_NO_SHIFT_REG;
 logic rnode_52to53_bb5_cmp3_i_i_27_i_0_stall_in_reg_53_NO_SHIFT_REG;
 logic rnode_52to53_bb5_cmp3_i_i_27_i_0_stall_out_reg_53_NO_SHIFT_REG;

acl_data_fifo rnode_52to53_bb5_cmp3_i_i_27_i_0_reg_53_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_52to53_bb5_cmp3_i_i_27_i_0_reg_53_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_52to53_bb5_cmp3_i_i_27_i_0_stall_in_reg_53_NO_SHIFT_REG),
	.valid_out(rnode_52to53_bb5_cmp3_i_i_27_i_0_valid_out_reg_53_NO_SHIFT_REG),
	.stall_out(rnode_52to53_bb5_cmp3_i_i_27_i_0_stall_out_reg_53_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_27_i),
	.data_out(rnode_52to53_bb5_cmp3_i_i_27_i_0_reg_53_NO_SHIFT_REG)
);

defparam rnode_52to53_bb5_cmp3_i_i_27_i_0_reg_53_fifo.DEPTH = 1;
defparam rnode_52to53_bb5_cmp3_i_i_27_i_0_reg_53_fifo.DATA_WIDTH = 1;
defparam rnode_52to53_bb5_cmp3_i_i_27_i_0_reg_53_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_52to53_bb5_cmp3_i_i_27_i_0_reg_53_fifo.IMPL = "shift_reg";

assign rnode_52to53_bb5_cmp3_i_i_27_i_0_reg_53_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_27_i_stall_in = 1'b0;
assign rnode_52to53_bb5_cmp3_i_i_27_i_0_NO_SHIFT_REG = rnode_52to53_bb5_cmp3_i_i_27_i_0_reg_53_NO_SHIFT_REG;
assign rnode_52to53_bb5_cmp3_i_i_27_i_0_stall_in_reg_53_NO_SHIFT_REG = 1'b0;
assign rnode_52to53_bb5_cmp3_i_i_27_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_27_i_stall_local;
wire [63:0] local_bb5_cond_i_i_27_i;

assign local_bb5_cond_i_i_27_i = (rnode_52to53_bb5_cmp3_i_i_27_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_27_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_27_i;

assign local_bb5_sub4_i_i_27_i = (rnode_52to53_bb5_or_i_i_27_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_27_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_28_i_valid_out;
wire local_bb5_shl_i_i_28_i_stall_in;
wire local_bb5_shl_i_i_28_i_inputs_ready;
wire local_bb5_shl_i_i_28_i_stall_local;
wire [63:0] local_bb5_shl_i_i_28_i;

assign local_bb5_shl_i_i_28_i_inputs_ready = (rnode_52to53_bb5_or_i_i_27_i_0_valid_out_NO_SHIFT_REG & rnode_52to53_bb5_cmp3_i_i_27_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_28_i = (local_bb5_sub4_i_i_27_i << 64'h1);
assign local_bb5_shl_i_i_28_i_valid_out = 1'b1;
assign rnode_52to53_bb5_or_i_i_27_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_52to53_bb5_cmp3_i_i_27_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_53to54_bb5_shl_i_i_28_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_53to54_bb5_shl_i_i_28_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_53to54_bb5_shl_i_i_28_i_0_NO_SHIFT_REG;
 logic rnode_53to54_bb5_shl_i_i_28_i_0_reg_54_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_53to54_bb5_shl_i_i_28_i_0_reg_54_NO_SHIFT_REG;
 logic rnode_53to54_bb5_shl_i_i_28_i_0_valid_out_reg_54_NO_SHIFT_REG;
 logic rnode_53to54_bb5_shl_i_i_28_i_0_stall_in_reg_54_NO_SHIFT_REG;
 logic rnode_53to54_bb5_shl_i_i_28_i_0_stall_out_reg_54_NO_SHIFT_REG;

acl_data_fifo rnode_53to54_bb5_shl_i_i_28_i_0_reg_54_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_53to54_bb5_shl_i_i_28_i_0_reg_54_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_53to54_bb5_shl_i_i_28_i_0_stall_in_reg_54_NO_SHIFT_REG),
	.valid_out(rnode_53to54_bb5_shl_i_i_28_i_0_valid_out_reg_54_NO_SHIFT_REG),
	.stall_out(rnode_53to54_bb5_shl_i_i_28_i_0_stall_out_reg_54_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_28_i),
	.data_out(rnode_53to54_bb5_shl_i_i_28_i_0_reg_54_NO_SHIFT_REG)
);

defparam rnode_53to54_bb5_shl_i_i_28_i_0_reg_54_fifo.DEPTH = 1;
defparam rnode_53to54_bb5_shl_i_i_28_i_0_reg_54_fifo.DATA_WIDTH = 64;
defparam rnode_53to54_bb5_shl_i_i_28_i_0_reg_54_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_53to54_bb5_shl_i_i_28_i_0_reg_54_fifo.IMPL = "shift_reg";

assign rnode_53to54_bb5_shl_i_i_28_i_0_reg_54_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_28_i_stall_in = 1'b0;
assign rnode_53to54_bb5_shl_i_i_28_i_0_NO_SHIFT_REG = rnode_53to54_bb5_shl_i_i_28_i_0_reg_54_NO_SHIFT_REG;
assign rnode_53to54_bb5_shl_i_i_28_i_0_stall_in_reg_54_NO_SHIFT_REG = 1'b0;
assign rnode_53to54_bb5_shl_i_i_28_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_28_i_stall_local;
wire [63:0] local_bb5_or_i_i_28_i;

assign local_bb5_or_i_i_28_i = (rnode_53to54_bb5_shl_i_i_28_i_0_NO_SHIFT_REG | local_bb5_and_i_i_28_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_28_i_valid_out_1;
wire local_bb5_or_i_i_28_i_stall_in_1;
 reg local_bb5_or_i_i_28_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_28_i_valid_out;
wire local_bb5_cmp3_i_i_28_i_stall_in;
 reg local_bb5_cmp3_i_i_28_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_28_i_inputs_ready;
wire local_bb5_cmp3_i_i_28_i_stall_local;
wire local_bb5_cmp3_i_i_28_i;

assign local_bb5_cmp3_i_i_28_i_inputs_ready = (rnode_53to54_bb5_var__u33_0_valid_out_NO_SHIFT_REG & rnode_53to54_bb5_shl_i_i_28_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_28_i = (local_bb5_or_i_i_28_i > 64'h3);
assign local_bb5_or_i_i_28_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_28_i_valid_out = 1'b1;
assign rnode_53to54_bb5_var__u33_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_53to54_bb5_shl_i_i_28_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_28_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_28_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_28_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_28_i_inputs_ready & (local_bb5_or_i_i_28_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_28_i_stall_in_1)) & local_bb5_cmp3_i_i_28_i_stall_local);
		local_bb5_cmp3_i_i_28_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_28_i_inputs_ready & (local_bb5_cmp3_i_i_28_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_28_i_stall_in)) & local_bb5_cmp3_i_i_28_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_54to55_bb5_or_i_i_28_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_54to55_bb5_or_i_i_28_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_54to55_bb5_or_i_i_28_i_0_NO_SHIFT_REG;
 logic rnode_54to55_bb5_or_i_i_28_i_0_reg_55_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_54to55_bb5_or_i_i_28_i_0_reg_55_NO_SHIFT_REG;
 logic rnode_54to55_bb5_or_i_i_28_i_0_valid_out_reg_55_NO_SHIFT_REG;
 logic rnode_54to55_bb5_or_i_i_28_i_0_stall_in_reg_55_NO_SHIFT_REG;
 logic rnode_54to55_bb5_or_i_i_28_i_0_stall_out_reg_55_NO_SHIFT_REG;

acl_data_fifo rnode_54to55_bb5_or_i_i_28_i_0_reg_55_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_54to55_bb5_or_i_i_28_i_0_reg_55_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_54to55_bb5_or_i_i_28_i_0_stall_in_reg_55_NO_SHIFT_REG),
	.valid_out(rnode_54to55_bb5_or_i_i_28_i_0_valid_out_reg_55_NO_SHIFT_REG),
	.stall_out(rnode_54to55_bb5_or_i_i_28_i_0_stall_out_reg_55_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_28_i),
	.data_out(rnode_54to55_bb5_or_i_i_28_i_0_reg_55_NO_SHIFT_REG)
);

defparam rnode_54to55_bb5_or_i_i_28_i_0_reg_55_fifo.DEPTH = 1;
defparam rnode_54to55_bb5_or_i_i_28_i_0_reg_55_fifo.DATA_WIDTH = 64;
defparam rnode_54to55_bb5_or_i_i_28_i_0_reg_55_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_54to55_bb5_or_i_i_28_i_0_reg_55_fifo.IMPL = "shift_reg";

assign rnode_54to55_bb5_or_i_i_28_i_0_reg_55_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_28_i_stall_in_1 = 1'b0;
assign rnode_54to55_bb5_or_i_i_28_i_0_NO_SHIFT_REG = rnode_54to55_bb5_or_i_i_28_i_0_reg_55_NO_SHIFT_REG;
assign rnode_54to55_bb5_or_i_i_28_i_0_stall_in_reg_55_NO_SHIFT_REG = 1'b0;
assign rnode_54to55_bb5_or_i_i_28_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_54to55_bb5_cmp3_i_i_28_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_54to55_bb5_cmp3_i_i_28_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_54to55_bb5_cmp3_i_i_28_i_0_NO_SHIFT_REG;
 logic rnode_54to55_bb5_cmp3_i_i_28_i_0_reg_55_inputs_ready_NO_SHIFT_REG;
 logic rnode_54to55_bb5_cmp3_i_i_28_i_0_reg_55_NO_SHIFT_REG;
 logic rnode_54to55_bb5_cmp3_i_i_28_i_0_valid_out_reg_55_NO_SHIFT_REG;
 logic rnode_54to55_bb5_cmp3_i_i_28_i_0_stall_in_reg_55_NO_SHIFT_REG;
 logic rnode_54to55_bb5_cmp3_i_i_28_i_0_stall_out_reg_55_NO_SHIFT_REG;

acl_data_fifo rnode_54to55_bb5_cmp3_i_i_28_i_0_reg_55_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_54to55_bb5_cmp3_i_i_28_i_0_reg_55_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_54to55_bb5_cmp3_i_i_28_i_0_stall_in_reg_55_NO_SHIFT_REG),
	.valid_out(rnode_54to55_bb5_cmp3_i_i_28_i_0_valid_out_reg_55_NO_SHIFT_REG),
	.stall_out(rnode_54to55_bb5_cmp3_i_i_28_i_0_stall_out_reg_55_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_28_i),
	.data_out(rnode_54to55_bb5_cmp3_i_i_28_i_0_reg_55_NO_SHIFT_REG)
);

defparam rnode_54to55_bb5_cmp3_i_i_28_i_0_reg_55_fifo.DEPTH = 1;
defparam rnode_54to55_bb5_cmp3_i_i_28_i_0_reg_55_fifo.DATA_WIDTH = 1;
defparam rnode_54to55_bb5_cmp3_i_i_28_i_0_reg_55_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_54to55_bb5_cmp3_i_i_28_i_0_reg_55_fifo.IMPL = "shift_reg";

assign rnode_54to55_bb5_cmp3_i_i_28_i_0_reg_55_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_28_i_stall_in = 1'b0;
assign rnode_54to55_bb5_cmp3_i_i_28_i_0_NO_SHIFT_REG = rnode_54to55_bb5_cmp3_i_i_28_i_0_reg_55_NO_SHIFT_REG;
assign rnode_54to55_bb5_cmp3_i_i_28_i_0_stall_in_reg_55_NO_SHIFT_REG = 1'b0;
assign rnode_54to55_bb5_cmp3_i_i_28_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_28_i_stall_local;
wire [63:0] local_bb5_cond_i_i_28_i;

assign local_bb5_cond_i_i_28_i = (rnode_54to55_bb5_cmp3_i_i_28_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_28_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_28_i;

assign local_bb5_sub4_i_i_28_i = (rnode_54to55_bb5_or_i_i_28_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_28_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_29_i_valid_out;
wire local_bb5_shl_i_i_29_i_stall_in;
wire local_bb5_shl_i_i_29_i_inputs_ready;
wire local_bb5_shl_i_i_29_i_stall_local;
wire [63:0] local_bb5_shl_i_i_29_i;

assign local_bb5_shl_i_i_29_i_inputs_ready = (rnode_54to55_bb5_or_i_i_28_i_0_valid_out_NO_SHIFT_REG & rnode_54to55_bb5_cmp3_i_i_28_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_29_i = (local_bb5_sub4_i_i_28_i << 64'h1);
assign local_bb5_shl_i_i_29_i_valid_out = 1'b1;
assign rnode_54to55_bb5_or_i_i_28_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_54to55_bb5_cmp3_i_i_28_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_55to56_bb5_shl_i_i_29_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_55to56_bb5_shl_i_i_29_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_55to56_bb5_shl_i_i_29_i_0_NO_SHIFT_REG;
 logic rnode_55to56_bb5_shl_i_i_29_i_0_reg_56_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_55to56_bb5_shl_i_i_29_i_0_reg_56_NO_SHIFT_REG;
 logic rnode_55to56_bb5_shl_i_i_29_i_0_valid_out_reg_56_NO_SHIFT_REG;
 logic rnode_55to56_bb5_shl_i_i_29_i_0_stall_in_reg_56_NO_SHIFT_REG;
 logic rnode_55to56_bb5_shl_i_i_29_i_0_stall_out_reg_56_NO_SHIFT_REG;

acl_data_fifo rnode_55to56_bb5_shl_i_i_29_i_0_reg_56_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_55to56_bb5_shl_i_i_29_i_0_reg_56_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_55to56_bb5_shl_i_i_29_i_0_stall_in_reg_56_NO_SHIFT_REG),
	.valid_out(rnode_55to56_bb5_shl_i_i_29_i_0_valid_out_reg_56_NO_SHIFT_REG),
	.stall_out(rnode_55to56_bb5_shl_i_i_29_i_0_stall_out_reg_56_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_29_i),
	.data_out(rnode_55to56_bb5_shl_i_i_29_i_0_reg_56_NO_SHIFT_REG)
);

defparam rnode_55to56_bb5_shl_i_i_29_i_0_reg_56_fifo.DEPTH = 1;
defparam rnode_55to56_bb5_shl_i_i_29_i_0_reg_56_fifo.DATA_WIDTH = 64;
defparam rnode_55to56_bb5_shl_i_i_29_i_0_reg_56_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_55to56_bb5_shl_i_i_29_i_0_reg_56_fifo.IMPL = "shift_reg";

assign rnode_55to56_bb5_shl_i_i_29_i_0_reg_56_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_29_i_stall_in = 1'b0;
assign rnode_55to56_bb5_shl_i_i_29_i_0_NO_SHIFT_REG = rnode_55to56_bb5_shl_i_i_29_i_0_reg_56_NO_SHIFT_REG;
assign rnode_55to56_bb5_shl_i_i_29_i_0_stall_in_reg_56_NO_SHIFT_REG = 1'b0;
assign rnode_55to56_bb5_shl_i_i_29_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_29_i_stall_local;
wire [63:0] local_bb5_or_i_i_29_i;

assign local_bb5_or_i_i_29_i = (rnode_55to56_bb5_shl_i_i_29_i_0_NO_SHIFT_REG | local_bb5_and_i_i_29_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_29_i_valid_out_1;
wire local_bb5_or_i_i_29_i_stall_in_1;
 reg local_bb5_or_i_i_29_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_29_i_valid_out;
wire local_bb5_cmp3_i_i_29_i_stall_in;
 reg local_bb5_cmp3_i_i_29_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_29_i_inputs_ready;
wire local_bb5_cmp3_i_i_29_i_stall_local;
wire local_bb5_cmp3_i_i_29_i;

assign local_bb5_cmp3_i_i_29_i_inputs_ready = (rnode_55to56_bb5_var__u34_0_valid_out_NO_SHIFT_REG & rnode_55to56_bb5_shl_i_i_29_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_29_i = (local_bb5_or_i_i_29_i > 64'h3);
assign local_bb5_or_i_i_29_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_29_i_valid_out = 1'b1;
assign rnode_55to56_bb5_var__u34_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_55to56_bb5_shl_i_i_29_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_29_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_29_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_29_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_29_i_inputs_ready & (local_bb5_or_i_i_29_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_29_i_stall_in_1)) & local_bb5_cmp3_i_i_29_i_stall_local);
		local_bb5_cmp3_i_i_29_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_29_i_inputs_ready & (local_bb5_cmp3_i_i_29_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_29_i_stall_in)) & local_bb5_cmp3_i_i_29_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_56to57_bb5_or_i_i_29_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_56to57_bb5_or_i_i_29_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_56to57_bb5_or_i_i_29_i_0_NO_SHIFT_REG;
 logic rnode_56to57_bb5_or_i_i_29_i_0_reg_57_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_56to57_bb5_or_i_i_29_i_0_reg_57_NO_SHIFT_REG;
 logic rnode_56to57_bb5_or_i_i_29_i_0_valid_out_reg_57_NO_SHIFT_REG;
 logic rnode_56to57_bb5_or_i_i_29_i_0_stall_in_reg_57_NO_SHIFT_REG;
 logic rnode_56to57_bb5_or_i_i_29_i_0_stall_out_reg_57_NO_SHIFT_REG;

acl_data_fifo rnode_56to57_bb5_or_i_i_29_i_0_reg_57_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_56to57_bb5_or_i_i_29_i_0_reg_57_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_56to57_bb5_or_i_i_29_i_0_stall_in_reg_57_NO_SHIFT_REG),
	.valid_out(rnode_56to57_bb5_or_i_i_29_i_0_valid_out_reg_57_NO_SHIFT_REG),
	.stall_out(rnode_56to57_bb5_or_i_i_29_i_0_stall_out_reg_57_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_29_i),
	.data_out(rnode_56to57_bb5_or_i_i_29_i_0_reg_57_NO_SHIFT_REG)
);

defparam rnode_56to57_bb5_or_i_i_29_i_0_reg_57_fifo.DEPTH = 1;
defparam rnode_56to57_bb5_or_i_i_29_i_0_reg_57_fifo.DATA_WIDTH = 64;
defparam rnode_56to57_bb5_or_i_i_29_i_0_reg_57_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_56to57_bb5_or_i_i_29_i_0_reg_57_fifo.IMPL = "shift_reg";

assign rnode_56to57_bb5_or_i_i_29_i_0_reg_57_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_29_i_stall_in_1 = 1'b0;
assign rnode_56to57_bb5_or_i_i_29_i_0_NO_SHIFT_REG = rnode_56to57_bb5_or_i_i_29_i_0_reg_57_NO_SHIFT_REG;
assign rnode_56to57_bb5_or_i_i_29_i_0_stall_in_reg_57_NO_SHIFT_REG = 1'b0;
assign rnode_56to57_bb5_or_i_i_29_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_56to57_bb5_cmp3_i_i_29_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_56to57_bb5_cmp3_i_i_29_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_56to57_bb5_cmp3_i_i_29_i_0_NO_SHIFT_REG;
 logic rnode_56to57_bb5_cmp3_i_i_29_i_0_reg_57_inputs_ready_NO_SHIFT_REG;
 logic rnode_56to57_bb5_cmp3_i_i_29_i_0_reg_57_NO_SHIFT_REG;
 logic rnode_56to57_bb5_cmp3_i_i_29_i_0_valid_out_reg_57_NO_SHIFT_REG;
 logic rnode_56to57_bb5_cmp3_i_i_29_i_0_stall_in_reg_57_NO_SHIFT_REG;
 logic rnode_56to57_bb5_cmp3_i_i_29_i_0_stall_out_reg_57_NO_SHIFT_REG;

acl_data_fifo rnode_56to57_bb5_cmp3_i_i_29_i_0_reg_57_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_56to57_bb5_cmp3_i_i_29_i_0_reg_57_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_56to57_bb5_cmp3_i_i_29_i_0_stall_in_reg_57_NO_SHIFT_REG),
	.valid_out(rnode_56to57_bb5_cmp3_i_i_29_i_0_valid_out_reg_57_NO_SHIFT_REG),
	.stall_out(rnode_56to57_bb5_cmp3_i_i_29_i_0_stall_out_reg_57_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_29_i),
	.data_out(rnode_56to57_bb5_cmp3_i_i_29_i_0_reg_57_NO_SHIFT_REG)
);

defparam rnode_56to57_bb5_cmp3_i_i_29_i_0_reg_57_fifo.DEPTH = 1;
defparam rnode_56to57_bb5_cmp3_i_i_29_i_0_reg_57_fifo.DATA_WIDTH = 1;
defparam rnode_56to57_bb5_cmp3_i_i_29_i_0_reg_57_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_56to57_bb5_cmp3_i_i_29_i_0_reg_57_fifo.IMPL = "shift_reg";

assign rnode_56to57_bb5_cmp3_i_i_29_i_0_reg_57_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_29_i_stall_in = 1'b0;
assign rnode_56to57_bb5_cmp3_i_i_29_i_0_NO_SHIFT_REG = rnode_56to57_bb5_cmp3_i_i_29_i_0_reg_57_NO_SHIFT_REG;
assign rnode_56to57_bb5_cmp3_i_i_29_i_0_stall_in_reg_57_NO_SHIFT_REG = 1'b0;
assign rnode_56to57_bb5_cmp3_i_i_29_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_29_i_stall_local;
wire [63:0] local_bb5_cond_i_i_29_i;

assign local_bb5_cond_i_i_29_i = (rnode_56to57_bb5_cmp3_i_i_29_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_29_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_29_i;

assign local_bb5_sub4_i_i_29_i = (rnode_56to57_bb5_or_i_i_29_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_29_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_30_i_valid_out;
wire local_bb5_shl_i_i_30_i_stall_in;
wire local_bb5_shl_i_i_30_i_inputs_ready;
wire local_bb5_shl_i_i_30_i_stall_local;
wire [63:0] local_bb5_shl_i_i_30_i;

assign local_bb5_shl_i_i_30_i_inputs_ready = (rnode_56to57_bb5_or_i_i_29_i_0_valid_out_NO_SHIFT_REG & rnode_56to57_bb5_cmp3_i_i_29_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_30_i = (local_bb5_sub4_i_i_29_i << 64'h1);
assign local_bb5_shl_i_i_30_i_valid_out = 1'b1;
assign rnode_56to57_bb5_or_i_i_29_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_56to57_bb5_cmp3_i_i_29_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_57to58_bb5_shl_i_i_30_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_57to58_bb5_shl_i_i_30_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_57to58_bb5_shl_i_i_30_i_0_NO_SHIFT_REG;
 logic rnode_57to58_bb5_shl_i_i_30_i_0_reg_58_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_57to58_bb5_shl_i_i_30_i_0_reg_58_NO_SHIFT_REG;
 logic rnode_57to58_bb5_shl_i_i_30_i_0_valid_out_reg_58_NO_SHIFT_REG;
 logic rnode_57to58_bb5_shl_i_i_30_i_0_stall_in_reg_58_NO_SHIFT_REG;
 logic rnode_57to58_bb5_shl_i_i_30_i_0_stall_out_reg_58_NO_SHIFT_REG;

acl_data_fifo rnode_57to58_bb5_shl_i_i_30_i_0_reg_58_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_57to58_bb5_shl_i_i_30_i_0_reg_58_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_57to58_bb5_shl_i_i_30_i_0_stall_in_reg_58_NO_SHIFT_REG),
	.valid_out(rnode_57to58_bb5_shl_i_i_30_i_0_valid_out_reg_58_NO_SHIFT_REG),
	.stall_out(rnode_57to58_bb5_shl_i_i_30_i_0_stall_out_reg_58_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_30_i),
	.data_out(rnode_57to58_bb5_shl_i_i_30_i_0_reg_58_NO_SHIFT_REG)
);

defparam rnode_57to58_bb5_shl_i_i_30_i_0_reg_58_fifo.DEPTH = 1;
defparam rnode_57to58_bb5_shl_i_i_30_i_0_reg_58_fifo.DATA_WIDTH = 64;
defparam rnode_57to58_bb5_shl_i_i_30_i_0_reg_58_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_57to58_bb5_shl_i_i_30_i_0_reg_58_fifo.IMPL = "shift_reg";

assign rnode_57to58_bb5_shl_i_i_30_i_0_reg_58_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_30_i_stall_in = 1'b0;
assign rnode_57to58_bb5_shl_i_i_30_i_0_NO_SHIFT_REG = rnode_57to58_bb5_shl_i_i_30_i_0_reg_58_NO_SHIFT_REG;
assign rnode_57to58_bb5_shl_i_i_30_i_0_stall_in_reg_58_NO_SHIFT_REG = 1'b0;
assign rnode_57to58_bb5_shl_i_i_30_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_30_i_stall_local;
wire [63:0] local_bb5_or_i_i_30_i;

assign local_bb5_or_i_i_30_i = (rnode_57to58_bb5_shl_i_i_30_i_0_NO_SHIFT_REG | local_bb5_and_i_i_30_i);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_30_i_valid_out_1;
wire local_bb5_or_i_i_30_i_stall_in_1;
 reg local_bb5_or_i_i_30_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_30_i_valid_out;
wire local_bb5_cmp3_i_i_30_i_stall_in;
 reg local_bb5_cmp3_i_i_30_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_30_i_inputs_ready;
wire local_bb5_cmp3_i_i_30_i_stall_local;
wire local_bb5_cmp3_i_i_30_i;

assign local_bb5_cmp3_i_i_30_i_inputs_ready = (rnode_57to58_bb5_var__u35_0_valid_out_NO_SHIFT_REG & rnode_57to58_bb5_shl_i_i_30_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_30_i = (local_bb5_or_i_i_30_i > 64'h3);
assign local_bb5_or_i_i_30_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_30_i_valid_out = 1'b1;
assign rnode_57to58_bb5_var__u35_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_57to58_bb5_shl_i_i_30_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_30_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_30_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_30_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_30_i_inputs_ready & (local_bb5_or_i_i_30_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_30_i_stall_in_1)) & local_bb5_cmp3_i_i_30_i_stall_local);
		local_bb5_cmp3_i_i_30_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_30_i_inputs_ready & (local_bb5_cmp3_i_i_30_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_30_i_stall_in)) & local_bb5_cmp3_i_i_30_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_58to59_bb5_or_i_i_30_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_58to59_bb5_or_i_i_30_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_58to59_bb5_or_i_i_30_i_0_NO_SHIFT_REG;
 logic rnode_58to59_bb5_or_i_i_30_i_0_reg_59_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_58to59_bb5_or_i_i_30_i_0_reg_59_NO_SHIFT_REG;
 logic rnode_58to59_bb5_or_i_i_30_i_0_valid_out_reg_59_NO_SHIFT_REG;
 logic rnode_58to59_bb5_or_i_i_30_i_0_stall_in_reg_59_NO_SHIFT_REG;
 logic rnode_58to59_bb5_or_i_i_30_i_0_stall_out_reg_59_NO_SHIFT_REG;

acl_data_fifo rnode_58to59_bb5_or_i_i_30_i_0_reg_59_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_58to59_bb5_or_i_i_30_i_0_reg_59_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_58to59_bb5_or_i_i_30_i_0_stall_in_reg_59_NO_SHIFT_REG),
	.valid_out(rnode_58to59_bb5_or_i_i_30_i_0_valid_out_reg_59_NO_SHIFT_REG),
	.stall_out(rnode_58to59_bb5_or_i_i_30_i_0_stall_out_reg_59_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_30_i),
	.data_out(rnode_58to59_bb5_or_i_i_30_i_0_reg_59_NO_SHIFT_REG)
);

defparam rnode_58to59_bb5_or_i_i_30_i_0_reg_59_fifo.DEPTH = 1;
defparam rnode_58to59_bb5_or_i_i_30_i_0_reg_59_fifo.DATA_WIDTH = 64;
defparam rnode_58to59_bb5_or_i_i_30_i_0_reg_59_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_58to59_bb5_or_i_i_30_i_0_reg_59_fifo.IMPL = "shift_reg";

assign rnode_58to59_bb5_or_i_i_30_i_0_reg_59_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_30_i_stall_in_1 = 1'b0;
assign rnode_58to59_bb5_or_i_i_30_i_0_NO_SHIFT_REG = rnode_58to59_bb5_or_i_i_30_i_0_reg_59_NO_SHIFT_REG;
assign rnode_58to59_bb5_or_i_i_30_i_0_stall_in_reg_59_NO_SHIFT_REG = 1'b0;
assign rnode_58to59_bb5_or_i_i_30_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_58to59_bb5_cmp3_i_i_30_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_58to59_bb5_cmp3_i_i_30_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_58to59_bb5_cmp3_i_i_30_i_0_NO_SHIFT_REG;
 logic rnode_58to59_bb5_cmp3_i_i_30_i_0_reg_59_inputs_ready_NO_SHIFT_REG;
 logic rnode_58to59_bb5_cmp3_i_i_30_i_0_reg_59_NO_SHIFT_REG;
 logic rnode_58to59_bb5_cmp3_i_i_30_i_0_valid_out_reg_59_NO_SHIFT_REG;
 logic rnode_58to59_bb5_cmp3_i_i_30_i_0_stall_in_reg_59_NO_SHIFT_REG;
 logic rnode_58to59_bb5_cmp3_i_i_30_i_0_stall_out_reg_59_NO_SHIFT_REG;

acl_data_fifo rnode_58to59_bb5_cmp3_i_i_30_i_0_reg_59_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_58to59_bb5_cmp3_i_i_30_i_0_reg_59_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_58to59_bb5_cmp3_i_i_30_i_0_stall_in_reg_59_NO_SHIFT_REG),
	.valid_out(rnode_58to59_bb5_cmp3_i_i_30_i_0_valid_out_reg_59_NO_SHIFT_REG),
	.stall_out(rnode_58to59_bb5_cmp3_i_i_30_i_0_stall_out_reg_59_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_30_i),
	.data_out(rnode_58to59_bb5_cmp3_i_i_30_i_0_reg_59_NO_SHIFT_REG)
);

defparam rnode_58to59_bb5_cmp3_i_i_30_i_0_reg_59_fifo.DEPTH = 1;
defparam rnode_58to59_bb5_cmp3_i_i_30_i_0_reg_59_fifo.DATA_WIDTH = 1;
defparam rnode_58to59_bb5_cmp3_i_i_30_i_0_reg_59_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_58to59_bb5_cmp3_i_i_30_i_0_reg_59_fifo.IMPL = "shift_reg";

assign rnode_58to59_bb5_cmp3_i_i_30_i_0_reg_59_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_30_i_stall_in = 1'b0;
assign rnode_58to59_bb5_cmp3_i_i_30_i_0_NO_SHIFT_REG = rnode_58to59_bb5_cmp3_i_i_30_i_0_reg_59_NO_SHIFT_REG;
assign rnode_58to59_bb5_cmp3_i_i_30_i_0_stall_in_reg_59_NO_SHIFT_REG = 1'b0;
assign rnode_58to59_bb5_cmp3_i_i_30_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_30_i_stall_local;
wire [63:0] local_bb5_cond_i_i_30_i;

assign local_bb5_cond_i_i_30_i = (rnode_58to59_bb5_cmp3_i_i_30_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_30_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_30_i;

assign local_bb5_sub4_i_i_30_i = (rnode_58to59_bb5_or_i_i_30_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_30_i);

// This section implements an unregistered operation.
// 
wire local_bb5_shl_i_i_31_i_valid_out;
wire local_bb5_shl_i_i_31_i_stall_in;
wire local_bb5_shl_i_i_31_i_inputs_ready;
wire local_bb5_shl_i_i_31_i_stall_local;
wire [63:0] local_bb5_shl_i_i_31_i;

assign local_bb5_shl_i_i_31_i_inputs_ready = (rnode_58to59_bb5_or_i_i_30_i_0_valid_out_NO_SHIFT_REG & rnode_58to59_bb5_cmp3_i_i_30_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_shl_i_i_31_i = (local_bb5_sub4_i_i_30_i << 64'h1);
assign local_bb5_shl_i_i_31_i_valid_out = 1'b1;
assign rnode_58to59_bb5_or_i_i_30_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_58to59_bb5_cmp3_i_i_30_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_59to60_bb5_shl_i_i_31_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_59to60_bb5_shl_i_i_31_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_59to60_bb5_shl_i_i_31_i_0_NO_SHIFT_REG;
 logic rnode_59to60_bb5_shl_i_i_31_i_0_reg_60_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_59to60_bb5_shl_i_i_31_i_0_reg_60_NO_SHIFT_REG;
 logic rnode_59to60_bb5_shl_i_i_31_i_0_valid_out_reg_60_NO_SHIFT_REG;
 logic rnode_59to60_bb5_shl_i_i_31_i_0_stall_in_reg_60_NO_SHIFT_REG;
 logic rnode_59to60_bb5_shl_i_i_31_i_0_stall_out_reg_60_NO_SHIFT_REG;

acl_data_fifo rnode_59to60_bb5_shl_i_i_31_i_0_reg_60_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_59to60_bb5_shl_i_i_31_i_0_reg_60_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_59to60_bb5_shl_i_i_31_i_0_stall_in_reg_60_NO_SHIFT_REG),
	.valid_out(rnode_59to60_bb5_shl_i_i_31_i_0_valid_out_reg_60_NO_SHIFT_REG),
	.stall_out(rnode_59to60_bb5_shl_i_i_31_i_0_stall_out_reg_60_NO_SHIFT_REG),
	.data_in(local_bb5_shl_i_i_31_i),
	.data_out(rnode_59to60_bb5_shl_i_i_31_i_0_reg_60_NO_SHIFT_REG)
);

defparam rnode_59to60_bb5_shl_i_i_31_i_0_reg_60_fifo.DEPTH = 1;
defparam rnode_59to60_bb5_shl_i_i_31_i_0_reg_60_fifo.DATA_WIDTH = 64;
defparam rnode_59to60_bb5_shl_i_i_31_i_0_reg_60_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_59to60_bb5_shl_i_i_31_i_0_reg_60_fifo.IMPL = "shift_reg";

assign rnode_59to60_bb5_shl_i_i_31_i_0_reg_60_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_shl_i_i_31_i_stall_in = 1'b0;
assign rnode_59to60_bb5_shl_i_i_31_i_0_NO_SHIFT_REG = rnode_59to60_bb5_shl_i_i_31_i_0_reg_60_NO_SHIFT_REG;
assign rnode_59to60_bb5_shl_i_i_31_i_0_stall_in_reg_60_NO_SHIFT_REG = 1'b0;
assign rnode_59to60_bb5_shl_i_i_31_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_31_i_stall_local;
wire [63:0] local_bb5_or_i_i_31_i;

assign local_bb5_or_i_i_31_i = (rnode_59to60_bb5_shl_i_i_31_i_0_NO_SHIFT_REG | rnode_59to60_bb5_and_i_i_31_i_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_or_i_i_31_i_valid_out_1;
wire local_bb5_or_i_i_31_i_stall_in_1;
 reg local_bb5_or_i_i_31_i_consumed_1_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_31_i_valid_out;
wire local_bb5_cmp3_i_i_31_i_stall_in;
 reg local_bb5_cmp3_i_i_31_i_consumed_0_NO_SHIFT_REG;
wire local_bb5_cmp3_i_i_31_i_inputs_ready;
wire local_bb5_cmp3_i_i_31_i_stall_local;
wire local_bb5_cmp3_i_i_31_i;

assign local_bb5_cmp3_i_i_31_i_inputs_ready = (rnode_59to60_bb5_shl_i_i_31_i_0_valid_out_NO_SHIFT_REG & rnode_59to60_bb5_and_i_i_31_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_cmp3_i_i_31_i = (local_bb5_or_i_i_31_i > 64'h3);
assign local_bb5_or_i_i_31_i_valid_out_1 = 1'b1;
assign local_bb5_cmp3_i_i_31_i_valid_out = 1'b1;
assign rnode_59to60_bb5_shl_i_i_31_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_59to60_bb5_and_i_i_31_i_0_stall_in_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or_i_i_31_i_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_cmp3_i_i_31_i_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or_i_i_31_i_consumed_1_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_31_i_inputs_ready & (local_bb5_or_i_i_31_i_consumed_1_NO_SHIFT_REG | ~(local_bb5_or_i_i_31_i_stall_in_1)) & local_bb5_cmp3_i_i_31_i_stall_local);
		local_bb5_cmp3_i_i_31_i_consumed_0_NO_SHIFT_REG <= (local_bb5_cmp3_i_i_31_i_inputs_ready & (local_bb5_cmp3_i_i_31_i_consumed_0_NO_SHIFT_REG | ~(local_bb5_cmp3_i_i_31_i_stall_in)) & local_bb5_cmp3_i_i_31_i_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_60to61_bb5_or_i_i_31_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_60to61_bb5_or_i_i_31_i_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_60to61_bb5_or_i_i_31_i_0_NO_SHIFT_REG;
 logic rnode_60to61_bb5_or_i_i_31_i_0_reg_61_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_60to61_bb5_or_i_i_31_i_0_reg_61_NO_SHIFT_REG;
 logic rnode_60to61_bb5_or_i_i_31_i_0_valid_out_reg_61_NO_SHIFT_REG;
 logic rnode_60to61_bb5_or_i_i_31_i_0_stall_in_reg_61_NO_SHIFT_REG;
 logic rnode_60to61_bb5_or_i_i_31_i_0_stall_out_reg_61_NO_SHIFT_REG;

acl_data_fifo rnode_60to61_bb5_or_i_i_31_i_0_reg_61_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_60to61_bb5_or_i_i_31_i_0_reg_61_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_60to61_bb5_or_i_i_31_i_0_stall_in_reg_61_NO_SHIFT_REG),
	.valid_out(rnode_60to61_bb5_or_i_i_31_i_0_valid_out_reg_61_NO_SHIFT_REG),
	.stall_out(rnode_60to61_bb5_or_i_i_31_i_0_stall_out_reg_61_NO_SHIFT_REG),
	.data_in(local_bb5_or_i_i_31_i),
	.data_out(rnode_60to61_bb5_or_i_i_31_i_0_reg_61_NO_SHIFT_REG)
);

defparam rnode_60to61_bb5_or_i_i_31_i_0_reg_61_fifo.DEPTH = 1;
defparam rnode_60to61_bb5_or_i_i_31_i_0_reg_61_fifo.DATA_WIDTH = 64;
defparam rnode_60to61_bb5_or_i_i_31_i_0_reg_61_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_60to61_bb5_or_i_i_31_i_0_reg_61_fifo.IMPL = "shift_reg";

assign rnode_60to61_bb5_or_i_i_31_i_0_reg_61_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or_i_i_31_i_stall_in_1 = 1'b0;
assign rnode_60to61_bb5_or_i_i_31_i_0_NO_SHIFT_REG = rnode_60to61_bb5_or_i_i_31_i_0_reg_61_NO_SHIFT_REG;
assign rnode_60to61_bb5_or_i_i_31_i_0_stall_in_reg_61_NO_SHIFT_REG = 1'b0;
assign rnode_60to61_bb5_or_i_i_31_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_60to61_bb5_cmp3_i_i_31_i_0_valid_out_NO_SHIFT_REG;
 logic rnode_60to61_bb5_cmp3_i_i_31_i_0_stall_in_NO_SHIFT_REG;
 logic rnode_60to61_bb5_cmp3_i_i_31_i_0_NO_SHIFT_REG;
 logic rnode_60to61_bb5_cmp3_i_i_31_i_0_reg_61_inputs_ready_NO_SHIFT_REG;
 logic rnode_60to61_bb5_cmp3_i_i_31_i_0_reg_61_NO_SHIFT_REG;
 logic rnode_60to61_bb5_cmp3_i_i_31_i_0_valid_out_reg_61_NO_SHIFT_REG;
 logic rnode_60to61_bb5_cmp3_i_i_31_i_0_stall_in_reg_61_NO_SHIFT_REG;
 logic rnode_60to61_bb5_cmp3_i_i_31_i_0_stall_out_reg_61_NO_SHIFT_REG;

acl_data_fifo rnode_60to61_bb5_cmp3_i_i_31_i_0_reg_61_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_60to61_bb5_cmp3_i_i_31_i_0_reg_61_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_60to61_bb5_cmp3_i_i_31_i_0_stall_in_reg_61_NO_SHIFT_REG),
	.valid_out(rnode_60to61_bb5_cmp3_i_i_31_i_0_valid_out_reg_61_NO_SHIFT_REG),
	.stall_out(rnode_60to61_bb5_cmp3_i_i_31_i_0_stall_out_reg_61_NO_SHIFT_REG),
	.data_in(local_bb5_cmp3_i_i_31_i),
	.data_out(rnode_60to61_bb5_cmp3_i_i_31_i_0_reg_61_NO_SHIFT_REG)
);

defparam rnode_60to61_bb5_cmp3_i_i_31_i_0_reg_61_fifo.DEPTH = 1;
defparam rnode_60to61_bb5_cmp3_i_i_31_i_0_reg_61_fifo.DATA_WIDTH = 1;
defparam rnode_60to61_bb5_cmp3_i_i_31_i_0_reg_61_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_60to61_bb5_cmp3_i_i_31_i_0_reg_61_fifo.IMPL = "shift_reg";

assign rnode_60to61_bb5_cmp3_i_i_31_i_0_reg_61_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_cmp3_i_i_31_i_stall_in = 1'b0;
assign rnode_60to61_bb5_cmp3_i_i_31_i_0_NO_SHIFT_REG = rnode_60to61_bb5_cmp3_i_i_31_i_0_reg_61_NO_SHIFT_REG;
assign rnode_60to61_bb5_cmp3_i_i_31_i_0_stall_in_reg_61_NO_SHIFT_REG = 1'b0;
assign rnode_60to61_bb5_cmp3_i_i_31_i_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_cond_i_i_31_i_stall_local;
wire [63:0] local_bb5_cond_i_i_31_i;

assign local_bb5_cond_i_i_31_i = (rnode_60to61_bb5_cmp3_i_i_31_i_0_NO_SHIFT_REG ? 64'h4 : 64'h0);

// This section implements an unregistered operation.
// 
wire local_bb5_sub4_i_i_31_i_stall_local;
wire [63:0] local_bb5_sub4_i_i_31_i;

assign local_bb5_sub4_i_i_31_i = (rnode_60to61_bb5_or_i_i_31_i_0_NO_SHIFT_REG - local_bb5_cond_i_i_31_i);

// This section implements an unregistered operation.
// 
wire local_bb5_conv2_i_i_stall_local;
wire [31:0] local_bb5_conv2_i_i;

assign local_bb5_conv2_i_i = local_bb5_sub4_i_i_31_i[31:0];

// This section implements an unregistered operation.
// 
wire local_bb5_add13_i_stall_local;
wire [31:0] local_bb5_add13_i;

assign local_bb5_add13_i = (32'h0 - local_bb5_conv2_i_i);

// This section implements an unregistered operation.
// 
wire local_bb5_R_0_i_valid_out;
wire local_bb5_R_0_i_stall_in;
wire local_bb5_R_0_i_inputs_ready;
wire local_bb5_R_0_i_stall_local;
wire [31:0] local_bb5_R_0_i;

assign local_bb5_R_0_i_inputs_ready = (rnode_60to61_bb5_tobool_i_0_valid_out_NO_SHIFT_REG & rnode_60to61_bb5_or_i_i_31_i_0_valid_out_NO_SHIFT_REG & rnode_60to61_bb5_cmp3_i_i_31_i_0_valid_out_NO_SHIFT_REG);
assign local_bb5_R_0_i = (rnode_60to61_bb5_tobool_i_0_NO_SHIFT_REG ? local_bb5_add13_i : local_bb5_conv2_i_i);
assign local_bb5_R_0_i_valid_out = 1'b1;
assign rnode_60to61_bb5_tobool_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_60to61_bb5_or_i_i_31_i_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_60to61_bb5_cmp3_i_i_31_i_0_stall_in_NO_SHIFT_REG = 1'b0;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_61to62_bb5_R_0_i_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_61to62_bb5_R_0_i_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_61to62_bb5_R_0_i_0_NO_SHIFT_REG;
 logic rnode_61to62_bb5_R_0_i_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_61to62_bb5_R_0_i_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_61to62_bb5_R_0_i_1_NO_SHIFT_REG;
 logic rnode_61to62_bb5_R_0_i_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_61to62_bb5_R_0_i_0_stall_in_2_NO_SHIFT_REG;
 logic [31:0] rnode_61to62_bb5_R_0_i_2_NO_SHIFT_REG;
 logic rnode_61to62_bb5_R_0_i_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_61to62_bb5_R_0_i_0_stall_in_3_NO_SHIFT_REG;
 logic [31:0] rnode_61to62_bb5_R_0_i_3_NO_SHIFT_REG;
 logic rnode_61to62_bb5_R_0_i_0_valid_out_4_NO_SHIFT_REG;
 logic rnode_61to62_bb5_R_0_i_0_stall_in_4_NO_SHIFT_REG;
 logic [31:0] rnode_61to62_bb5_R_0_i_4_NO_SHIFT_REG;
 logic rnode_61to62_bb5_R_0_i_0_reg_62_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_61to62_bb5_R_0_i_0_reg_62_NO_SHIFT_REG;
 logic rnode_61to62_bb5_R_0_i_0_valid_out_0_reg_62_NO_SHIFT_REG;
 logic rnode_61to62_bb5_R_0_i_0_stall_in_0_reg_62_NO_SHIFT_REG;
 logic rnode_61to62_bb5_R_0_i_0_stall_out_reg_62_NO_SHIFT_REG;

acl_data_fifo rnode_61to62_bb5_R_0_i_0_reg_62_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_61to62_bb5_R_0_i_0_reg_62_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_61to62_bb5_R_0_i_0_stall_in_0_reg_62_NO_SHIFT_REG),
	.valid_out(rnode_61to62_bb5_R_0_i_0_valid_out_0_reg_62_NO_SHIFT_REG),
	.stall_out(rnode_61to62_bb5_R_0_i_0_stall_out_reg_62_NO_SHIFT_REG),
	.data_in(local_bb5_R_0_i),
	.data_out(rnode_61to62_bb5_R_0_i_0_reg_62_NO_SHIFT_REG)
);

defparam rnode_61to62_bb5_R_0_i_0_reg_62_fifo.DEPTH = 1;
defparam rnode_61to62_bb5_R_0_i_0_reg_62_fifo.DATA_WIDTH = 32;
defparam rnode_61to62_bb5_R_0_i_0_reg_62_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_61to62_bb5_R_0_i_0_reg_62_fifo.IMPL = "shift_reg";

assign rnode_61to62_bb5_R_0_i_0_reg_62_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_R_0_i_stall_in = 1'b0;
assign rnode_61to62_bb5_R_0_i_0_stall_in_0_reg_62_NO_SHIFT_REG = 1'b0;
assign rnode_61to62_bb5_R_0_i_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_61to62_bb5_R_0_i_0_NO_SHIFT_REG = rnode_61to62_bb5_R_0_i_0_reg_62_NO_SHIFT_REG;
assign rnode_61to62_bb5_R_0_i_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_61to62_bb5_R_0_i_1_NO_SHIFT_REG = rnode_61to62_bb5_R_0_i_0_reg_62_NO_SHIFT_REG;
assign rnode_61to62_bb5_R_0_i_0_valid_out_2_NO_SHIFT_REG = 1'b1;
assign rnode_61to62_bb5_R_0_i_2_NO_SHIFT_REG = rnode_61to62_bb5_R_0_i_0_reg_62_NO_SHIFT_REG;
assign rnode_61to62_bb5_R_0_i_0_valid_out_3_NO_SHIFT_REG = 1'b1;
assign rnode_61to62_bb5_R_0_i_3_NO_SHIFT_REG = rnode_61to62_bb5_R_0_i_0_reg_62_NO_SHIFT_REG;
assign rnode_61to62_bb5_R_0_i_0_valid_out_4_NO_SHIFT_REG = 1'b1;
assign rnode_61to62_bb5_R_0_i_4_NO_SHIFT_REG = rnode_61to62_bb5_R_0_i_0_reg_62_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_Pivot71_stall_local;
wire local_bb5_Pivot71;

assign local_bb5_Pivot71 = ($signed(rnode_61to62_bb5_R_0_i_0_NO_SHIFT_REG) < $signed(32'h2));

// This section implements an unregistered operation.
// 
wire local_bb5_SwitchLeaf_stall_local;
wire local_bb5_SwitchLeaf;

assign local_bb5_SwitchLeaf = (rnode_61to62_bb5_R_0_i_1_NO_SHIFT_REG == 32'h1);

// This section implements an unregistered operation.
// 
wire local_bb5_Pivot_stall_local;
wire local_bb5_Pivot;

assign local_bb5_Pivot = ($signed(rnode_61to62_bb5_R_0_i_2_NO_SHIFT_REG) < $signed(32'h3));

// This section implements an unregistered operation.
// 
wire local_bb5_SwitchLeaf69_stall_local;
wire local_bb5_SwitchLeaf69;

assign local_bb5_SwitchLeaf69 = (rnode_61to62_bb5_R_0_i_3_NO_SHIFT_REG == 32'h3);

// This section implements an unregistered operation.
// 
wire local_bb5_SwitchLeaf67_stall_local;
wire local_bb5_SwitchLeaf67;

assign local_bb5_SwitchLeaf67 = (rnode_61to62_bb5_R_0_i_4_NO_SHIFT_REG == 32'h2);

// This section implements an unregistered operation.
// 
wire local_bb5_SwitchLeaf69_not_stall_local;
wire local_bb5_SwitchLeaf69_not;

assign local_bb5_SwitchLeaf69_not = (local_bb5_SwitchLeaf69 ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5__91_stall_local;
wire local_bb5__91;

assign local_bb5__91 = (local_bb5_Pivot ? local_bb5_SwitchLeaf67 : local_bb5_SwitchLeaf69);

// This section implements an unregistered operation.
// 
wire local_bb5__79_stall_local;
wire local_bb5__79;

assign local_bb5__79 = (local_bb5_Pivot71 ? local_bb5_SwitchLeaf : local_bb5_SwitchLeaf67);

// This section implements an unregistered operation.
// 
wire local_bb5__87_stall_local;
wire local_bb5__87;

assign local_bb5__87 = (local_bb5_Pivot | local_bb5_SwitchLeaf69_not);

// This section implements an unregistered operation.
// 
wire local_bb5__92_stall_local;
wire local_bb5__92;

assign local_bb5__92 = (local_bb5_Pivot71 ? local_bb5_SwitchLeaf : local_bb5__91);

// This section implements an unregistered operation.
// 
wire local_bb5__91_not_stall_local;
wire local_bb5__91_not;

assign local_bb5__91_not = (local_bb5__91 ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5__88_stall_local;
wire local_bb5__88;

assign local_bb5__88 = (local_bb5_Pivot71 | local_bb5__87);

// This section implements an unregistered operation.
// 
wire local_bb5_or115_xor_or_demorgan_stall_local;
wire local_bb5_or115_xor_or_demorgan;

assign local_bb5_or115_xor_or_demorgan = (local_bb5__92 & rnode_61to62_bb5_c0_ene174_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5__93_xor_or_stall_local;
wire local_bb5__93_xor_or;

assign local_bb5__93_xor_or = (local_bb5_Pivot71 | local_bb5__91_not);

// This section implements an unregistered operation.
// 
wire local_bb5_or115_xor_or_stall_local;
wire local_bb5_or115_xor_or;

assign local_bb5_or115_xor_or = (local_bb5_or115_xor_or_demorgan ^ 1'b1);

// This section implements an unregistered operation.
// 
wire local_bb5_or118_xor_or_stall_local;
wire local_bb5_or118_xor_or;

assign local_bb5_or118_xor_or = (local_bb5__93_xor_or | rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_or115_xor_or_and_valid_out;
wire local_bb5_or115_xor_or_and_stall_in;
 reg local_bb5_or115_xor_or_and_consumed_0_NO_SHIFT_REG;
wire local_bb5__79_valid_out;
wire local_bb5__79_stall_in;
 reg local_bb5__79_consumed_0_NO_SHIFT_REG;
wire local_bb5__88_valid_out;
wire local_bb5__88_stall_in;
 reg local_bb5__88_consumed_0_NO_SHIFT_REG;
wire local_bb5_SwitchLeaf_valid_out_2;
wire local_bb5_SwitchLeaf_stall_in_2;
 reg local_bb5_SwitchLeaf_consumed_2_NO_SHIFT_REG;
wire local_bb5_or115_xor_or_and_inputs_ready;
wire local_bb5_or115_xor_or_and_stall_local;
wire local_bb5_or115_xor_or_and;

assign local_bb5_or115_xor_or_and_inputs_ready = (rnode_61to62_bb5_c0_ene174_0_valid_out_NO_SHIFT_REG & rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_valid_out_0_NO_SHIFT_REG & rnode_61to62_bb5_R_0_i_0_valid_out_0_NO_SHIFT_REG & rnode_61to62_bb5_R_0_i_0_valid_out_1_NO_SHIFT_REG & rnode_61to62_bb5_R_0_i_0_valid_out_2_NO_SHIFT_REG & rnode_61to62_bb5_R_0_i_0_valid_out_3_NO_SHIFT_REG & rnode_61to62_bb5_R_0_i_0_valid_out_4_NO_SHIFT_REG);
assign local_bb5_or115_xor_or_and = (local_bb5_or118_xor_or & local_bb5_or115_xor_or);
assign local_bb5_or115_xor_or_and_valid_out = 1'b1;
assign local_bb5__79_valid_out = 1'b1;
assign local_bb5__88_valid_out = 1'b1;
assign local_bb5_SwitchLeaf_valid_out_2 = 1'b1;
assign rnode_61to62_bb5_c0_ene174_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_61to62_bb5_not_cmp30_phi_decision135_select_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_61to62_bb5_R_0_i_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_61to62_bb5_R_0_i_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_61to62_bb5_R_0_i_0_stall_in_2_NO_SHIFT_REG = 1'b0;
assign rnode_61to62_bb5_R_0_i_0_stall_in_3_NO_SHIFT_REG = 1'b0;
assign rnode_61to62_bb5_R_0_i_0_stall_in_4_NO_SHIFT_REG = 1'b0;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_or115_xor_or_and_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb5__79_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb5__88_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_SwitchLeaf_consumed_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb5_or115_xor_or_and_consumed_0_NO_SHIFT_REG <= (local_bb5_or115_xor_or_and_inputs_ready & (local_bb5_or115_xor_or_and_consumed_0_NO_SHIFT_REG | ~(local_bb5_or115_xor_or_and_stall_in)) & local_bb5_or115_xor_or_and_stall_local);
		local_bb5__79_consumed_0_NO_SHIFT_REG <= (local_bb5_or115_xor_or_and_inputs_ready & (local_bb5__79_consumed_0_NO_SHIFT_REG | ~(local_bb5__79_stall_in)) & local_bb5_or115_xor_or_and_stall_local);
		local_bb5__88_consumed_0_NO_SHIFT_REG <= (local_bb5_or115_xor_or_and_inputs_ready & (local_bb5__88_consumed_0_NO_SHIFT_REG | ~(local_bb5__88_stall_in)) & local_bb5_or115_xor_or_and_stall_local);
		local_bb5_SwitchLeaf_consumed_2_NO_SHIFT_REG <= (local_bb5_or115_xor_or_and_inputs_ready & (local_bb5_SwitchLeaf_consumed_2_NO_SHIFT_REG | ~(local_bb5_SwitchLeaf_stall_in_2)) & local_bb5_or115_xor_or_and_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_62to63_bb5_or115_xor_or_and_0_valid_out_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or115_xor_or_and_0_stall_in_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or115_xor_or_and_0_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or115_xor_or_and_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or115_xor_or_and_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or115_xor_or_and_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or115_xor_or_and_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_or115_xor_or_and_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_62to63_bb5_or115_xor_or_and_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_62to63_bb5_or115_xor_or_and_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_62to63_bb5_or115_xor_or_and_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_62to63_bb5_or115_xor_or_and_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_62to63_bb5_or115_xor_or_and_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(local_bb5_or115_xor_or_and),
	.data_out(rnode_62to63_bb5_or115_xor_or_and_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_62to63_bb5_or115_xor_or_and_0_reg_63_fifo.DEPTH = 1;
defparam rnode_62to63_bb5_or115_xor_or_and_0_reg_63_fifo.DATA_WIDTH = 1;
defparam rnode_62to63_bb5_or115_xor_or_and_0_reg_63_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_62to63_bb5_or115_xor_or_and_0_reg_63_fifo.IMPL = "shift_reg";

assign rnode_62to63_bb5_or115_xor_or_and_0_reg_63_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_or115_xor_or_and_stall_in = 1'b0;
assign rnode_62to63_bb5_or115_xor_or_and_0_NO_SHIFT_REG = rnode_62to63_bb5_or115_xor_or_and_0_reg_63_NO_SHIFT_REG;
assign rnode_62to63_bb5_or115_xor_or_and_0_stall_in_reg_63_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_or115_xor_or_and_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_62to63_bb5__79_0_valid_out_NO_SHIFT_REG;
 logic rnode_62to63_bb5__79_0_stall_in_NO_SHIFT_REG;
 logic rnode_62to63_bb5__79_0_NO_SHIFT_REG;
 logic rnode_62to63_bb5__79_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic rnode_62to63_bb5__79_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5__79_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5__79_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5__79_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_62to63_bb5__79_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_62to63_bb5__79_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_62to63_bb5__79_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_62to63_bb5__79_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_62to63_bb5__79_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(local_bb5__79),
	.data_out(rnode_62to63_bb5__79_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_62to63_bb5__79_0_reg_63_fifo.DEPTH = 1;
defparam rnode_62to63_bb5__79_0_reg_63_fifo.DATA_WIDTH = 1;
defparam rnode_62to63_bb5__79_0_reg_63_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_62to63_bb5__79_0_reg_63_fifo.IMPL = "shift_reg";

assign rnode_62to63_bb5__79_0_reg_63_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__79_stall_in = 1'b0;
assign rnode_62to63_bb5__79_0_NO_SHIFT_REG = rnode_62to63_bb5__79_0_reg_63_NO_SHIFT_REG;
assign rnode_62to63_bb5__79_0_stall_in_reg_63_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5__79_0_valid_out_NO_SHIFT_REG = 1'b1;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_62to63_bb5__88_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_62to63_bb5__88_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_62to63_bb5__88_0_NO_SHIFT_REG;
 logic rnode_62to63_bb5__88_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_62to63_bb5__88_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_62to63_bb5__88_1_NO_SHIFT_REG;
 logic rnode_62to63_bb5__88_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic rnode_62to63_bb5__88_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5__88_0_valid_out_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5__88_0_stall_in_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5__88_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_62to63_bb5__88_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_62to63_bb5__88_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_62to63_bb5__88_0_stall_in_0_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_62to63_bb5__88_0_valid_out_0_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_62to63_bb5__88_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(local_bb5__88),
	.data_out(rnode_62to63_bb5__88_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_62to63_bb5__88_0_reg_63_fifo.DEPTH = 1;
defparam rnode_62to63_bb5__88_0_reg_63_fifo.DATA_WIDTH = 1;
defparam rnode_62to63_bb5__88_0_reg_63_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_62to63_bb5__88_0_reg_63_fifo.IMPL = "shift_reg";

assign rnode_62to63_bb5__88_0_reg_63_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5__88_stall_in = 1'b0;
assign rnode_62to63_bb5__88_0_stall_in_0_reg_63_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5__88_0_valid_out_0_NO_SHIFT_REG = 1'b1;
assign rnode_62to63_bb5__88_0_NO_SHIFT_REG = rnode_62to63_bb5__88_0_reg_63_NO_SHIFT_REG;
assign rnode_62to63_bb5__88_0_valid_out_1_NO_SHIFT_REG = 1'b1;
assign rnode_62to63_bb5__88_1_NO_SHIFT_REG = rnode_62to63_bb5__88_0_reg_63_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_62to63_bb5_SwitchLeaf_0_valid_out_NO_SHIFT_REG;
 logic rnode_62to63_bb5_SwitchLeaf_0_stall_in_NO_SHIFT_REG;
 logic rnode_62to63_bb5_SwitchLeaf_0_NO_SHIFT_REG;
 logic rnode_62to63_bb5_SwitchLeaf_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic rnode_62to63_bb5_SwitchLeaf_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_SwitchLeaf_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_SwitchLeaf_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb5_SwitchLeaf_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_62to63_bb5_SwitchLeaf_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_62to63_bb5_SwitchLeaf_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_62to63_bb5_SwitchLeaf_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_62to63_bb5_SwitchLeaf_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_62to63_bb5_SwitchLeaf_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(local_bb5_SwitchLeaf),
	.data_out(rnode_62to63_bb5_SwitchLeaf_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_62to63_bb5_SwitchLeaf_0_reg_63_fifo.DEPTH = 1;
defparam rnode_62to63_bb5_SwitchLeaf_0_reg_63_fifo.DATA_WIDTH = 1;
defparam rnode_62to63_bb5_SwitchLeaf_0_reg_63_fifo.ALLOW_FULL_WRITE = 1;
defparam rnode_62to63_bb5_SwitchLeaf_0_reg_63_fifo.IMPL = "shift_reg";

assign rnode_62to63_bb5_SwitchLeaf_0_reg_63_inputs_ready_NO_SHIFT_REG = 1'b1;
assign local_bb5_SwitchLeaf_stall_in_2 = 1'b0;
assign rnode_62to63_bb5_SwitchLeaf_0_NO_SHIFT_REG = rnode_62to63_bb5_SwitchLeaf_0_reg_63_NO_SHIFT_REG;
assign rnode_62to63_bb5_SwitchLeaf_0_stall_in_reg_63_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_SwitchLeaf_0_valid_out_NO_SHIFT_REG = 1'b1;

// This section implements an unregistered operation.
// 
wire local_bb5_or121_xor_or_stall_local;
wire local_bb5_or121_xor_or;

assign local_bb5_or121_xor_or = (rnode_62to63_bb5__88_0_NO_SHIFT_REG | rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exi179_stall_local;
wire [191:0] local_bb5_c0_exi179;

assign local_bb5_c0_exi179[7:0] = 8'bxxxxxxxx;
assign local_bb5_c0_exi179[8] = rnode_62to63_bb5_SwitchLeaf_0_NO_SHIFT_REG;
assign local_bb5_c0_exi179[191:9] = 183'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;

// This section implements an unregistered operation.
// 
wire local_bb5_or115_xor_or_and_and_stall_local;
wire local_bb5_or115_xor_or_and_and;

assign local_bb5_or115_xor_or_and_and = (rnode_62to63_bb5_or115_xor_or_and_0_NO_SHIFT_REG & local_bb5_or121_xor_or);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exi280_stall_local;
wire [191:0] local_bb5_c0_exi280;

assign local_bb5_c0_exi280[15:0] = local_bb5_c0_exi179[15:0];
assign local_bb5_c0_exi280[16] = rnode_62to63_bb5__79_0_NO_SHIFT_REG;
assign local_bb5_c0_exi280[191:17] = local_bb5_c0_exi179[191:17];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exi381_stall_local;
wire [191:0] local_bb5_c0_exi381;

assign local_bb5_c0_exi381[23:0] = local_bb5_c0_exi280[23:0];
assign local_bb5_c0_exi381[24] = rnode_62to63_bb5__88_1_NO_SHIFT_REG;
assign local_bb5_c0_exi381[191:25] = local_bb5_c0_exi280[191:25];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exi482_stall_local;
wire [191:0] local_bb5_c0_exi482;

assign local_bb5_c0_exi482[31:0] = local_bb5_c0_exi381[31:0];
assign local_bb5_c0_exi482[32] = local_bb5_or115_xor_or_and_and;
assign local_bb5_c0_exi482[191:33] = local_bb5_c0_exi381[191:33];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exi583_stall_local;
wire [191:0] local_bb5_c0_exi583;

assign local_bb5_c0_exi583[63:0] = local_bb5_c0_exi482[63:0];
assign local_bb5_c0_exi583[127:64] = local_bb5_memcoalesce_null_or_byte_en_1;
assign local_bb5_c0_exi583[191:128] = local_bb5_c0_exi482[191:128];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exi684_stall_local;
wire [191:0] local_bb5_c0_exi684;

assign local_bb5_c0_exi684[127:0] = local_bb5_c0_exi583[127:0];
assign local_bb5_c0_exi684[128] = local_bb5_and126_xor_or_and;
assign local_bb5_c0_exi684[191:129] = local_bb5_c0_exi583[191:129];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exi785_stall_local;
wire [191:0] local_bb5_c0_exi785;

assign local_bb5_c0_exi785[135:0] = local_bb5_c0_exi684[135:0];
assign local_bb5_c0_exi785[136] = local_bb5_or131_xor;
assign local_bb5_c0_exi785[191:137] = local_bb5_c0_exi684[191:137];

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exi886_valid_out;
wire local_bb5_c0_exi886_stall_in;
wire local_bb5_c0_exi886_inputs_ready;
wire local_bb5_c0_exi886_stall_local;
wire [191:0] local_bb5_c0_exi886;

assign local_bb5_c0_exi886_inputs_ready = (rnode_62to63_bb5_and126_xor_0_valid_out_NO_SHIFT_REG & rnode_62to63_bb5_or125_0_valid_out_0_NO_SHIFT_REG & rnode_62to63_bb5_or131_0_valid_out_NO_SHIFT_REG & rnode_62to63_bb5_select108_0_valid_out_NO_SHIFT_REG & rnode_62to63_bb5__88_0_valid_out_0_NO_SHIFT_REG & rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_valid_out_NO_SHIFT_REG & rnode_62to63_bb5_or115_xor_or_and_0_valid_out_NO_SHIFT_REG & rnode_62to63_bb5_or125_0_valid_out_1_NO_SHIFT_REG & rnode_62to63_bb5_SwitchLeaf_0_valid_out_NO_SHIFT_REG & rnode_62to63_bb5__79_0_valid_out_NO_SHIFT_REG & rnode_62to63_bb5__88_0_valid_out_1_NO_SHIFT_REG);
assign local_bb5_c0_exi886[159:0] = local_bb5_c0_exi785[159:0];
assign local_bb5_c0_exi886[191:160] = rnode_62to63_bb5_select108_0_NO_SHIFT_REG;
assign local_bb5_c0_exi886_valid_out = 1'b1;
assign rnode_62to63_bb5_and126_xor_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_or125_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_or131_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_select108_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5__88_0_stall_in_0_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_not_cmp30_phi_decision135_select_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_or115_xor_or_and_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_or125_0_stall_in_1_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5_SwitchLeaf_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5__79_0_stall_in_NO_SHIFT_REG = 1'b0;
assign rnode_62to63_bb5__88_0_stall_in_1_NO_SHIFT_REG = 1'b0;

// This section implements a registered operation.
// 
wire local_bb5_c0_exit87_c0_exi886_inputs_ready;
 reg local_bb5_c0_exit87_c0_exi886_valid_out_0_NO_SHIFT_REG;
wire local_bb5_c0_exit87_c0_exi886_stall_in_0;
 reg local_bb5_c0_exit87_c0_exi886_valid_out_1_NO_SHIFT_REG;
wire local_bb5_c0_exit87_c0_exi886_stall_in_1;
 reg local_bb5_c0_exit87_c0_exi886_valid_out_2_NO_SHIFT_REG;
wire local_bb5_c0_exit87_c0_exi886_stall_in_2;
 reg local_bb5_c0_exit87_c0_exi886_valid_out_3_NO_SHIFT_REG;
wire local_bb5_c0_exit87_c0_exi886_stall_in_3;
 reg local_bb5_c0_exit87_c0_exi886_valid_out_4_NO_SHIFT_REG;
wire local_bb5_c0_exit87_c0_exi886_stall_in_4;
 reg local_bb5_c0_exit87_c0_exi886_valid_out_5_NO_SHIFT_REG;
wire local_bb5_c0_exit87_c0_exi886_stall_in_5;
 reg local_bb5_c0_exit87_c0_exi886_valid_out_6_NO_SHIFT_REG;
wire local_bb5_c0_exit87_c0_exi886_stall_in_6;
 reg local_bb5_c0_exit87_c0_exi886_valid_out_7_NO_SHIFT_REG;
wire local_bb5_c0_exit87_c0_exi886_stall_in_7;
 reg [191:0] local_bb5_c0_exit87_c0_exi886_NO_SHIFT_REG;
wire [191:0] local_bb5_c0_exit87_c0_exi886_in;
wire local_bb5_c0_exit87_c0_exi886_valid;
wire local_bb5_c0_exit87_c0_exi886_causedstall;

acl_stall_free_sink local_bb5_c0_exit87_c0_exi886_instance (
	.clock(clock),
	.resetn(resetn),
	.data_in(local_bb5_c0_exi886),
	.data_out(local_bb5_c0_exit87_c0_exi886_in),
	.input_accepted(local_bb5_c0_enter73_c0_eni572_input_accepted),
	.valid_out(local_bb5_c0_exit87_c0_exi886_valid),
	.stall_in(~(local_bb5_c0_exit87_c0_exi886_output_regs_ready)),
	.stall_entry(local_bb5_c0_exit87_c0_exi886_entry_stall),
	.valids(local_bb5_c0_exit87_c0_exi886_valid_bits),
	.IIphases(local_bb5_c0_exit87_c0_exi886_phases),
	.inc_pipelined_thread(local_bb5_c0_enter73_c0_eni572_inc_pipelined_thread),
	.dec_pipelined_thread(local_bb5_c0_enter73_c0_eni572_dec_pipelined_thread)
);

defparam local_bb5_c0_exit87_c0_exi886_instance.DATA_WIDTH = 192;
defparam local_bb5_c0_exit87_c0_exi886_instance.PIPELINE_DEPTH = 67;
defparam local_bb5_c0_exit87_c0_exi886_instance.SHARINGII = 1;
defparam local_bb5_c0_exit87_c0_exi886_instance.SCHEDULEII = 1;

assign local_bb5_c0_exit87_c0_exi886_inputs_ready = 1'b1;
assign local_bb5_c0_exit87_c0_exi886_output_regs_ready = ((~(local_bb5_c0_exit87_c0_exi886_valid_out_0_NO_SHIFT_REG) | ~(local_bb5_c0_exit87_c0_exi886_stall_in_0)) & (~(local_bb5_c0_exit87_c0_exi886_valid_out_1_NO_SHIFT_REG) | ~(local_bb5_c0_exit87_c0_exi886_stall_in_1)) & (~(local_bb5_c0_exit87_c0_exi886_valid_out_2_NO_SHIFT_REG) | ~(local_bb5_c0_exit87_c0_exi886_stall_in_2)) & (~(local_bb5_c0_exit87_c0_exi886_valid_out_3_NO_SHIFT_REG) | ~(local_bb5_c0_exit87_c0_exi886_stall_in_3)) & (~(local_bb5_c0_exit87_c0_exi886_valid_out_4_NO_SHIFT_REG) | ~(local_bb5_c0_exit87_c0_exi886_stall_in_4)) & (~(local_bb5_c0_exit87_c0_exi886_valid_out_5_NO_SHIFT_REG) | ~(local_bb5_c0_exit87_c0_exi886_stall_in_5)) & (~(local_bb5_c0_exit87_c0_exi886_valid_out_6_NO_SHIFT_REG) | ~(local_bb5_c0_exit87_c0_exi886_stall_in_6)) & (~(local_bb5_c0_exit87_c0_exi886_valid_out_7_NO_SHIFT_REG) | ~(local_bb5_c0_exit87_c0_exi886_stall_in_7)));
assign local_bb5_c0_exi886_stall_in = 1'b0;
assign local_bb5_c0_exit87_c0_exi886_causedstall = (1'b1 && (1'b0 && !(~(local_bb5_c0_exit87_c0_exi886_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_c0_exit87_c0_exi886_NO_SHIFT_REG <= 'x;
		local_bb5_c0_exit87_c0_exi886_valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb5_c0_exit87_c0_exi886_valid_out_1_NO_SHIFT_REG <= 1'b0;
		local_bb5_c0_exit87_c0_exi886_valid_out_2_NO_SHIFT_REG <= 1'b0;
		local_bb5_c0_exit87_c0_exi886_valid_out_3_NO_SHIFT_REG <= 1'b0;
		local_bb5_c0_exit87_c0_exi886_valid_out_4_NO_SHIFT_REG <= 1'b0;
		local_bb5_c0_exit87_c0_exi886_valid_out_5_NO_SHIFT_REG <= 1'b0;
		local_bb5_c0_exit87_c0_exi886_valid_out_6_NO_SHIFT_REG <= 1'b0;
		local_bb5_c0_exit87_c0_exi886_valid_out_7_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_c0_exit87_c0_exi886_output_regs_ready)
		begin
			local_bb5_c0_exit87_c0_exi886_NO_SHIFT_REG <= local_bb5_c0_exit87_c0_exi886_in;
			local_bb5_c0_exit87_c0_exi886_valid_out_0_NO_SHIFT_REG <= local_bb5_c0_exit87_c0_exi886_valid;
			local_bb5_c0_exit87_c0_exi886_valid_out_1_NO_SHIFT_REG <= local_bb5_c0_exit87_c0_exi886_valid;
			local_bb5_c0_exit87_c0_exi886_valid_out_2_NO_SHIFT_REG <= local_bb5_c0_exit87_c0_exi886_valid;
			local_bb5_c0_exit87_c0_exi886_valid_out_3_NO_SHIFT_REG <= local_bb5_c0_exit87_c0_exi886_valid;
			local_bb5_c0_exit87_c0_exi886_valid_out_4_NO_SHIFT_REG <= local_bb5_c0_exit87_c0_exi886_valid;
			local_bb5_c0_exit87_c0_exi886_valid_out_5_NO_SHIFT_REG <= local_bb5_c0_exit87_c0_exi886_valid;
			local_bb5_c0_exit87_c0_exi886_valid_out_6_NO_SHIFT_REG <= local_bb5_c0_exit87_c0_exi886_valid;
			local_bb5_c0_exit87_c0_exi886_valid_out_7_NO_SHIFT_REG <= local_bb5_c0_exit87_c0_exi886_valid;
		end
		else
		begin
			if (~(local_bb5_c0_exit87_c0_exi886_stall_in_0))
			begin
				local_bb5_c0_exit87_c0_exi886_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c0_exit87_c0_exi886_stall_in_1))
			begin
				local_bb5_c0_exit87_c0_exi886_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c0_exit87_c0_exi886_stall_in_2))
			begin
				local_bb5_c0_exit87_c0_exi886_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c0_exit87_c0_exi886_stall_in_3))
			begin
				local_bb5_c0_exit87_c0_exi886_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c0_exit87_c0_exi886_stall_in_4))
			begin
				local_bb5_c0_exit87_c0_exi886_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c0_exit87_c0_exi886_stall_in_5))
			begin
				local_bb5_c0_exit87_c0_exi886_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c0_exit87_c0_exi886_stall_in_6))
			begin
				local_bb5_c0_exit87_c0_exi886_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb5_c0_exit87_c0_exi886_stall_in_7))
			begin
				local_bb5_c0_exit87_c0_exi886_valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb5_c0_exe188_valid_out;
wire local_bb5_c0_exe188_stall_in;
wire local_bb5_c0_exe188_inputs_ready;
wire local_bb5_c0_exe188_stall_local;
wire local_bb5_c0_exe188;

assign local_bb5_c0_exe188_inputs_ready = local_bb5_c0_exit87_c0_exi886_valid_out_0_NO_SHIFT_REG;
assign local_bb5_c0_exe188 = local_bb5_c0_exit87_c0_exi886_NO_SHIFT_REG[8];
assign local_bb5_c0_exe188_valid_out = local_bb5_c0_exe188_inputs_ready;
assign local_bb5_c0_exe188_stall_local = local_bb5_c0_exe188_stall_in;
assign local_bb5_c0_exit87_c0_exi886_stall_in_0 = (|local_bb5_c0_exe188_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exe289_valid_out;
wire local_bb5_c0_exe289_stall_in;
wire local_bb5_c0_exe289_inputs_ready;
wire local_bb5_c0_exe289_stall_local;
wire local_bb5_c0_exe289;

assign local_bb5_c0_exe289_inputs_ready = local_bb5_c0_exit87_c0_exi886_valid_out_1_NO_SHIFT_REG;
assign local_bb5_c0_exe289 = local_bb5_c0_exit87_c0_exi886_NO_SHIFT_REG[16];
assign local_bb5_c0_exe289_valid_out = local_bb5_c0_exe289_inputs_ready;
assign local_bb5_c0_exe289_stall_local = local_bb5_c0_exe289_stall_in;
assign local_bb5_c0_exit87_c0_exi886_stall_in_1 = (|local_bb5_c0_exe289_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exe390_valid_out;
wire local_bb5_c0_exe390_stall_in;
wire local_bb5_c0_exe390_inputs_ready;
wire local_bb5_c0_exe390_stall_local;
wire local_bb5_c0_exe390;

assign local_bb5_c0_exe390_inputs_ready = local_bb5_c0_exit87_c0_exi886_valid_out_2_NO_SHIFT_REG;
assign local_bb5_c0_exe390 = local_bb5_c0_exit87_c0_exi886_NO_SHIFT_REG[24];
assign local_bb5_c0_exe390_valid_out = local_bb5_c0_exe390_inputs_ready;
assign local_bb5_c0_exe390_stall_local = local_bb5_c0_exe390_stall_in;
assign local_bb5_c0_exit87_c0_exi886_stall_in_2 = (|local_bb5_c0_exe390_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exe491_valid_out;
wire local_bb5_c0_exe491_stall_in;
wire local_bb5_c0_exe491_inputs_ready;
wire local_bb5_c0_exe491_stall_local;
wire local_bb5_c0_exe491;

assign local_bb5_c0_exe491_inputs_ready = local_bb5_c0_exit87_c0_exi886_valid_out_3_NO_SHIFT_REG;
assign local_bb5_c0_exe491 = local_bb5_c0_exit87_c0_exi886_NO_SHIFT_REG[32];
assign local_bb5_c0_exe491_valid_out = local_bb5_c0_exe491_inputs_ready;
assign local_bb5_c0_exe491_stall_local = local_bb5_c0_exe491_stall_in;
assign local_bb5_c0_exit87_c0_exi886_stall_in_3 = (|local_bb5_c0_exe491_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exe592_valid_out;
wire local_bb5_c0_exe592_stall_in;
wire local_bb5_c0_exe592_inputs_ready;
wire local_bb5_c0_exe592_stall_local;
wire [63:0] local_bb5_c0_exe592;

assign local_bb5_c0_exe592_inputs_ready = local_bb5_c0_exit87_c0_exi886_valid_out_4_NO_SHIFT_REG;
assign local_bb5_c0_exe592 = local_bb5_c0_exit87_c0_exi886_NO_SHIFT_REG[127:64];
assign local_bb5_c0_exe592_valid_out = local_bb5_c0_exe592_inputs_ready;
assign local_bb5_c0_exe592_stall_local = local_bb5_c0_exe592_stall_in;
assign local_bb5_c0_exit87_c0_exi886_stall_in_4 = (|local_bb5_c0_exe592_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exe693_valid_out;
wire local_bb5_c0_exe693_stall_in;
wire local_bb5_c0_exe693_inputs_ready;
wire local_bb5_c0_exe693_stall_local;
wire local_bb5_c0_exe693;

assign local_bb5_c0_exe693_inputs_ready = local_bb5_c0_exit87_c0_exi886_valid_out_5_NO_SHIFT_REG;
assign local_bb5_c0_exe693 = local_bb5_c0_exit87_c0_exi886_NO_SHIFT_REG[128];
assign local_bb5_c0_exe693_valid_out = local_bb5_c0_exe693_inputs_ready;
assign local_bb5_c0_exe693_stall_local = local_bb5_c0_exe693_stall_in;
assign local_bb5_c0_exit87_c0_exi886_stall_in_5 = (|local_bb5_c0_exe693_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exe794_valid_out;
wire local_bb5_c0_exe794_stall_in;
wire local_bb5_c0_exe794_inputs_ready;
wire local_bb5_c0_exe794_stall_local;
wire local_bb5_c0_exe794;

assign local_bb5_c0_exe794_inputs_ready = local_bb5_c0_exit87_c0_exi886_valid_out_6_NO_SHIFT_REG;
assign local_bb5_c0_exe794 = local_bb5_c0_exit87_c0_exi886_NO_SHIFT_REG[136];
assign local_bb5_c0_exe794_valid_out = local_bb5_c0_exe794_inputs_ready;
assign local_bb5_c0_exe794_stall_local = local_bb5_c0_exe794_stall_in;
assign local_bb5_c0_exit87_c0_exi886_stall_in_6 = (|local_bb5_c0_exe794_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb5_c0_exe895_valid_out;
wire local_bb5_c0_exe895_stall_in;
wire local_bb5_c0_exe895_inputs_ready;
wire local_bb5_c0_exe895_stall_local;
wire [31:0] local_bb5_c0_exe895;

assign local_bb5_c0_exe895_inputs_ready = local_bb5_c0_exit87_c0_exi886_valid_out_7_NO_SHIFT_REG;
assign local_bb5_c0_exe895 = local_bb5_c0_exit87_c0_exi886_NO_SHIFT_REG[191:160];
assign local_bb5_c0_exe895_valid_out = local_bb5_c0_exe895_inputs_ready;
assign local_bb5_c0_exe895_stall_local = local_bb5_c0_exe895_stall_in;
assign local_bb5_c0_exit87_c0_exi886_stall_in_7 = (|local_bb5_c0_exe895_stall_local);

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_68to227_bb5_c0_exe188_0_valid_out_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe188_0_stall_in_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe188_0_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe188_0_reg_227_inputs_ready_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe188_0_reg_227_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe188_0_valid_out_reg_227_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe188_0_stall_in_reg_227_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe188_0_stall_out_reg_227_NO_SHIFT_REG;

acl_data_fifo rnode_68to227_bb5_c0_exe188_0_reg_227_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_68to227_bb5_c0_exe188_0_reg_227_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_68to227_bb5_c0_exe188_0_stall_in_reg_227_NO_SHIFT_REG),
	.valid_out(rnode_68to227_bb5_c0_exe188_0_valid_out_reg_227_NO_SHIFT_REG),
	.stall_out(rnode_68to227_bb5_c0_exe188_0_stall_out_reg_227_NO_SHIFT_REG),
	.data_in(local_bb5_c0_exe188),
	.data_out(rnode_68to227_bb5_c0_exe188_0_reg_227_NO_SHIFT_REG)
);

defparam rnode_68to227_bb5_c0_exe188_0_reg_227_fifo.DEPTH = 160;
defparam rnode_68to227_bb5_c0_exe188_0_reg_227_fifo.DATA_WIDTH = 1;
defparam rnode_68to227_bb5_c0_exe188_0_reg_227_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_68to227_bb5_c0_exe188_0_reg_227_fifo.IMPL = "ram";

assign rnode_68to227_bb5_c0_exe188_0_reg_227_inputs_ready_NO_SHIFT_REG = local_bb5_c0_exe188_valid_out;
assign local_bb5_c0_exe188_stall_in = rnode_68to227_bb5_c0_exe188_0_stall_out_reg_227_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe188_0_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe188_0_reg_227_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe188_0_stall_in_reg_227_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe188_0_stall_in_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe188_0_valid_out_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe188_0_valid_out_reg_227_NO_SHIFT_REG;

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_68to227_bb5_c0_exe289_0_valid_out_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe289_0_stall_in_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe289_0_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe289_0_reg_227_inputs_ready_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe289_0_reg_227_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe289_0_valid_out_reg_227_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe289_0_stall_in_reg_227_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe289_0_stall_out_reg_227_NO_SHIFT_REG;

acl_data_fifo rnode_68to227_bb5_c0_exe289_0_reg_227_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_68to227_bb5_c0_exe289_0_reg_227_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_68to227_bb5_c0_exe289_0_stall_in_reg_227_NO_SHIFT_REG),
	.valid_out(rnode_68to227_bb5_c0_exe289_0_valid_out_reg_227_NO_SHIFT_REG),
	.stall_out(rnode_68to227_bb5_c0_exe289_0_stall_out_reg_227_NO_SHIFT_REG),
	.data_in(local_bb5_c0_exe289),
	.data_out(rnode_68to227_bb5_c0_exe289_0_reg_227_NO_SHIFT_REG)
);

defparam rnode_68to227_bb5_c0_exe289_0_reg_227_fifo.DEPTH = 160;
defparam rnode_68to227_bb5_c0_exe289_0_reg_227_fifo.DATA_WIDTH = 1;
defparam rnode_68to227_bb5_c0_exe289_0_reg_227_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_68to227_bb5_c0_exe289_0_reg_227_fifo.IMPL = "ram";

assign rnode_68to227_bb5_c0_exe289_0_reg_227_inputs_ready_NO_SHIFT_REG = local_bb5_c0_exe289_valid_out;
assign local_bb5_c0_exe289_stall_in = rnode_68to227_bb5_c0_exe289_0_stall_out_reg_227_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe289_0_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe289_0_reg_227_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe289_0_stall_in_reg_227_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe289_0_stall_in_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe289_0_valid_out_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe289_0_valid_out_reg_227_NO_SHIFT_REG;

// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_68to227_bb5_c0_exe390_0_valid_out_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe390_0_stall_in_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe390_0_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe390_0_reg_227_inputs_ready_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe390_0_reg_227_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe390_0_valid_out_reg_227_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe390_0_stall_in_reg_227_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe390_0_stall_out_reg_227_NO_SHIFT_REG;

acl_data_fifo rnode_68to227_bb5_c0_exe390_0_reg_227_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_68to227_bb5_c0_exe390_0_reg_227_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_68to227_bb5_c0_exe390_0_stall_in_reg_227_NO_SHIFT_REG),
	.valid_out(rnode_68to227_bb5_c0_exe390_0_valid_out_reg_227_NO_SHIFT_REG),
	.stall_out(rnode_68to227_bb5_c0_exe390_0_stall_out_reg_227_NO_SHIFT_REG),
	.data_in(local_bb5_c0_exe390),
	.data_out(rnode_68to227_bb5_c0_exe390_0_reg_227_NO_SHIFT_REG)
);

defparam rnode_68to227_bb5_c0_exe390_0_reg_227_fifo.DEPTH = 160;
defparam rnode_68to227_bb5_c0_exe390_0_reg_227_fifo.DATA_WIDTH = 1;
defparam rnode_68to227_bb5_c0_exe390_0_reg_227_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_68to227_bb5_c0_exe390_0_reg_227_fifo.IMPL = "ram";

assign rnode_68to227_bb5_c0_exe390_0_reg_227_inputs_ready_NO_SHIFT_REG = local_bb5_c0_exe390_valid_out;
assign local_bb5_c0_exe390_stall_in = rnode_68to227_bb5_c0_exe390_0_stall_out_reg_227_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe390_0_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe390_0_reg_227_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe390_0_stall_in_reg_227_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe390_0_stall_in_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe390_0_valid_out_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe390_0_valid_out_reg_227_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb5_ld_memcoalesce_key_load_02_inputs_ready;
 reg local_bb5_ld_memcoalesce_key_load_02_valid_out_NO_SHIFT_REG;
wire local_bb5_ld_memcoalesce_key_load_02_stall_in;
wire local_bb5_ld_memcoalesce_key_load_02_output_regs_ready;
wire local_bb5_ld_memcoalesce_key_load_02_fu_stall_out;
wire local_bb5_ld_memcoalesce_key_load_02_fu_valid_out;
wire [31:0] local_bb5_ld_memcoalesce_key_load_02_lsu_dataout;
 reg [31:0] local_bb5_ld_memcoalesce_key_load_02_NO_SHIFT_REG;
wire local_bb5_ld_memcoalesce_key_load_02_causedstall;

lsu_top lsu_local_bb5_ld_memcoalesce_key_load_02 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb5_ld_memcoalesce_key_load_02_fu_stall_out),
	.i_valid(local_bb5_ld_memcoalesce_key_load_02_inputs_ready),
	.i_address(local_bb5_memcoalesce_key_bitcast_01),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(local_bb5_c0_exe491),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb5_ld_memcoalesce_key_load_02_output_regs_ready)),
	.o_valid(local_bb5_ld_memcoalesce_key_load_02_fu_valid_out),
	.o_readdata(local_bb5_ld_memcoalesce_key_load_02_lsu_dataout),
	.o_input_fifo_depth(),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb5_ld_memcoalesce_key_load_02_active),
	.avm_address(avm_local_bb5_ld_memcoalesce_key_load_02_address),
	.avm_read(avm_local_bb5_ld_memcoalesce_key_load_02_read),
	.avm_readdata(avm_local_bb5_ld_memcoalesce_key_load_02_readdata),
	.avm_write(avm_local_bb5_ld_memcoalesce_key_load_02_write),
	.avm_writeack(avm_local_bb5_ld_memcoalesce_key_load_02_writeack),
	.avm_burstcount(avm_local_bb5_ld_memcoalesce_key_load_02_burstcount),
	.avm_writedata(avm_local_bb5_ld_memcoalesce_key_load_02_writedata),
	.avm_byteenable(avm_local_bb5_ld_memcoalesce_key_load_02_byteenable),
	.avm_waitrequest(avm_local_bb5_ld_memcoalesce_key_load_02_waitrequest),
	.avm_readdatavalid(avm_local_bb5_ld_memcoalesce_key_load_02_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb5_ld_memcoalesce_key_load_02.AWIDTH = 30;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.WIDTH_BYTES = 4;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.MWIDTH_BYTES = 32;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.WRITEDATAWIDTH_BYTES = 32;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.READ = 1;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.ATOMIC = 0;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.WIDTH = 32;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.MWIDTH = 256;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.ATOMIC_WIDTH = 3;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.KERNEL_SIDE_MEM_LATENCY = 160;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.MEMORY_SIDE_MEM_LATENCY = 61;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.USE_WRITE_ACK = 0;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.NUMBER_BANKS = 1;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.USEINPUTFIFO = 0;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.USECACHING = 0;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.USEOUTPUTFIFO = 1;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.HIGH_FMAX = 1;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.ADDRSPACE = 1;
defparam lsu_local_bb5_ld_memcoalesce_key_load_02.STYLE = "BURST-COALESCED";

assign local_bb5_ld_memcoalesce_key_load_02_inputs_ready = (local_bb5_memcoalesce_key_bitcast_01_valid_out & local_bb5_c0_exe491_valid_out);
assign local_bb5_ld_memcoalesce_key_load_02_output_regs_ready = (&(~(local_bb5_ld_memcoalesce_key_load_02_valid_out_NO_SHIFT_REG) | ~(local_bb5_ld_memcoalesce_key_load_02_stall_in)));
assign local_bb5_memcoalesce_key_bitcast_01_stall_in = (local_bb5_ld_memcoalesce_key_load_02_fu_stall_out | ~(local_bb5_ld_memcoalesce_key_load_02_inputs_ready));
assign local_bb5_c0_exe491_stall_in = (local_bb5_ld_memcoalesce_key_load_02_fu_stall_out | ~(local_bb5_ld_memcoalesce_key_load_02_inputs_ready));
assign local_bb5_ld_memcoalesce_key_load_02_causedstall = (local_bb5_ld_memcoalesce_key_load_02_inputs_ready && (local_bb5_ld_memcoalesce_key_load_02_fu_stall_out && !(~(local_bb5_ld_memcoalesce_key_load_02_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_ld_memcoalesce_key_load_02_NO_SHIFT_REG <= 'x;
		local_bb5_ld_memcoalesce_key_load_02_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_ld_memcoalesce_key_load_02_output_regs_ready)
		begin
			local_bb5_ld_memcoalesce_key_load_02_NO_SHIFT_REG <= local_bb5_ld_memcoalesce_key_load_02_lsu_dataout;
			local_bb5_ld_memcoalesce_key_load_02_valid_out_NO_SHIFT_REG <= local_bb5_ld_memcoalesce_key_load_02_fu_valid_out;
		end
		else
		begin
			if (~(local_bb5_ld_memcoalesce_key_load_02_stall_in))
			begin
				local_bb5_ld_memcoalesce_key_load_02_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb5_st_memcoalesce_null_insertValue_0_inputs_ready;
 reg local_bb5_st_memcoalesce_null_insertValue_0_valid_out_NO_SHIFT_REG;
wire local_bb5_st_memcoalesce_null_insertValue_0_stall_in;
wire local_bb5_st_memcoalesce_null_insertValue_0_output_regs_ready;
wire local_bb5_st_memcoalesce_null_insertValue_0_fu_stall_out;
wire local_bb5_st_memcoalesce_null_insertValue_0_fu_valid_out;
wire [511:0] local_bb5_st_memcoalesce_null_insertValue_0_lsu_wackout;
 reg local_bb5_st_memcoalesce_null_insertValue_0_NO_SHIFT_REG;
wire local_bb5_st_memcoalesce_null_insertValue_0_causedstall;

lsu_top lsu_local_bb5_st_memcoalesce_null_insertValue_0 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb5_st_memcoalesce_null_insertValue_0_fu_stall_out),
	.i_valid(local_bb5_st_memcoalesce_null_insertValue_0_inputs_ready),
	.i_address(64'h0),
	.i_writedata(input_wii_memcoalesce_null_insertValue_0),
	.i_cmpdata(),
	.i_predicate(local_bb5_c0_exe693),
	.i_bitwiseor(64'h0),
	.i_byteenable(local_bb5_c0_exe592),
	.i_stall(~(local_bb5_st_memcoalesce_null_insertValue_0_output_regs_ready)),
	.o_valid(local_bb5_st_memcoalesce_null_insertValue_0_fu_valid_out),
	.o_readdata(),
	.o_input_fifo_depth(local_bb5_st_memcoalesce_null_insertValue_0_input_fifo_depth),
	.o_writeack(local_bb5_st_memcoalesce_null_insertValue_0_lsu_wackout),
	.i_atomic_op(3'h0),
	.o_active(local_bb5_st_memcoalesce_null_insertValue_0_active),
	.avm_address(avm_local_bb5_st_memcoalesce_null_insertValue_0_address),
	.avm_read(avm_local_bb5_st_memcoalesce_null_insertValue_0_read),
	.avm_readdata(avm_local_bb5_st_memcoalesce_null_insertValue_0_readdata),
	.avm_write(avm_local_bb5_st_memcoalesce_null_insertValue_0_write),
	.avm_writeack(avm_local_bb5_st_memcoalesce_null_insertValue_0_writeack),
	.avm_burstcount(avm_local_bb5_st_memcoalesce_null_insertValue_0_burstcount),
	.avm_writedata(avm_local_bb5_st_memcoalesce_null_insertValue_0_writedata),
	.avm_byteenable(avm_local_bb5_st_memcoalesce_null_insertValue_0_byteenable),
	.avm_waitrequest(avm_local_bb5_st_memcoalesce_null_insertValue_0_waitrequest),
	.avm_readdatavalid(avm_local_bb5_st_memcoalesce_null_insertValue_0_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.AWIDTH = 32;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.WIDTH_BYTES = 64;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.MWIDTH_BYTES = 64;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.ALIGNMENT_BYTES = 64;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.READ = 0;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.ATOMIC = 0;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.WIDTH = 512;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.MWIDTH = 512;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.ATOMIC_WIDTH = 3;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.BURSTCOUNT_WIDTH = 1;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.KERNEL_SIDE_MEM_LATENCY = 31;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.USE_WRITE_ACK = 0;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.ENABLE_BANKED_MEMORY = 1;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.ABITS_PER_LMEM_BANK = 7;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.NUMBER_BANKS = 4;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.USEINPUTFIFO = 1;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.USECACHING = 0;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.USEOUTPUTFIFO = 1;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.HIGH_FMAX = 1;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.ADDRSPACE = 5;
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.STYLE = "PIPELINED";
defparam lsu_local_bb5_st_memcoalesce_null_insertValue_0.USE_BYTE_EN = 1;

assign local_bb5_st_memcoalesce_null_insertValue_0_inputs_ready = (local_bb5_c0_exe693_valid_out & local_bb5_c0_exe592_valid_out & rnode_67to68_memcoalesce_null_insertValue_0_0_valid_out_NO_SHIFT_REG);
assign local_bb5_st_memcoalesce_null_insertValue_0_output_regs_ready = (&(~(local_bb5_st_memcoalesce_null_insertValue_0_valid_out_NO_SHIFT_REG) | ~(local_bb5_st_memcoalesce_null_insertValue_0_stall_in)));
assign local_bb5_c0_exe693_stall_in = (local_bb5_st_memcoalesce_null_insertValue_0_fu_stall_out | ~(local_bb5_st_memcoalesce_null_insertValue_0_inputs_ready));
assign local_bb5_c0_exe592_stall_in = (local_bb5_st_memcoalesce_null_insertValue_0_fu_stall_out | ~(local_bb5_st_memcoalesce_null_insertValue_0_inputs_ready));
assign rnode_67to68_memcoalesce_null_insertValue_0_0_stall_in_NO_SHIFT_REG = (local_bb5_st_memcoalesce_null_insertValue_0_fu_stall_out | ~(local_bb5_st_memcoalesce_null_insertValue_0_inputs_ready));
assign local_bb5_st_memcoalesce_null_insertValue_0_causedstall = (local_bb5_st_memcoalesce_null_insertValue_0_inputs_ready && (local_bb5_st_memcoalesce_null_insertValue_0_fu_stall_out && !(~(local_bb5_st_memcoalesce_null_insertValue_0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_st_memcoalesce_null_insertValue_0_NO_SHIFT_REG <= 'x;
		local_bb5_st_memcoalesce_null_insertValue_0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_st_memcoalesce_null_insertValue_0_output_regs_ready)
		begin
			local_bb5_st_memcoalesce_null_insertValue_0_NO_SHIFT_REG <= local_bb5_st_memcoalesce_null_insertValue_0_lsu_wackout;
			local_bb5_st_memcoalesce_null_insertValue_0_valid_out_NO_SHIFT_REG <= local_bb5_st_memcoalesce_null_insertValue_0_fu_valid_out;
		end
		else
		begin
			if (~(local_bb5_st_memcoalesce_null_insertValue_0_stall_in))
			begin
				local_bb5_st_memcoalesce_null_insertValue_0_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 159
//  * capacity = 159
 logic rnode_68to227_bb5_c0_exe794_0_valid_out_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe794_0_stall_in_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe794_0_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe794_0_reg_227_inputs_ready_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe794_0_reg_227_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe794_0_valid_out_reg_227_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe794_0_stall_in_reg_227_NO_SHIFT_REG;
 logic rnode_68to227_bb5_c0_exe794_0_stall_out_reg_227_NO_SHIFT_REG;

acl_data_fifo rnode_68to227_bb5_c0_exe794_0_reg_227_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_68to227_bb5_c0_exe794_0_reg_227_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_68to227_bb5_c0_exe794_0_stall_in_reg_227_NO_SHIFT_REG),
	.valid_out(rnode_68to227_bb5_c0_exe794_0_valid_out_reg_227_NO_SHIFT_REG),
	.stall_out(rnode_68to227_bb5_c0_exe794_0_stall_out_reg_227_NO_SHIFT_REG),
	.data_in(local_bb5_c0_exe794),
	.data_out(rnode_68to227_bb5_c0_exe794_0_reg_227_NO_SHIFT_REG)
);

defparam rnode_68to227_bb5_c0_exe794_0_reg_227_fifo.DEPTH = 160;
defparam rnode_68to227_bb5_c0_exe794_0_reg_227_fifo.DATA_WIDTH = 1;
defparam rnode_68to227_bb5_c0_exe794_0_reg_227_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_68to227_bb5_c0_exe794_0_reg_227_fifo.IMPL = "ram";

assign rnode_68to227_bb5_c0_exe794_0_reg_227_inputs_ready_NO_SHIFT_REG = local_bb5_c0_exe794_valid_out;
assign local_bb5_c0_exe794_stall_in = rnode_68to227_bb5_c0_exe794_0_stall_out_reg_227_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe794_0_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe794_0_reg_227_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe794_0_stall_in_reg_227_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe794_0_stall_in_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe794_0_valid_out_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe794_0_valid_out_reg_227_NO_SHIFT_REG;

// Register node:
//  * latency = 190
//  * capacity = 190
 logic rnode_68to258_bb5_c0_exe895_0_valid_out_NO_SHIFT_REG;
 logic rnode_68to258_bb5_c0_exe895_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_68to258_bb5_c0_exe895_0_NO_SHIFT_REG;
 logic rnode_68to258_bb5_c0_exe895_0_reg_258_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_68to258_bb5_c0_exe895_0_reg_258_NO_SHIFT_REG;
 logic rnode_68to258_bb5_c0_exe895_0_valid_out_reg_258_NO_SHIFT_REG;
 logic rnode_68to258_bb5_c0_exe895_0_stall_in_reg_258_NO_SHIFT_REG;
 logic rnode_68to258_bb5_c0_exe895_0_stall_out_reg_258_NO_SHIFT_REG;

acl_data_fifo rnode_68to258_bb5_c0_exe895_0_reg_258_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_68to258_bb5_c0_exe895_0_reg_258_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_68to258_bb5_c0_exe895_0_stall_in_reg_258_NO_SHIFT_REG),
	.valid_out(rnode_68to258_bb5_c0_exe895_0_valid_out_reg_258_NO_SHIFT_REG),
	.stall_out(rnode_68to258_bb5_c0_exe895_0_stall_out_reg_258_NO_SHIFT_REG),
	.data_in(local_bb5_c0_exe895),
	.data_out(rnode_68to258_bb5_c0_exe895_0_reg_258_NO_SHIFT_REG)
);

defparam rnode_68to258_bb5_c0_exe895_0_reg_258_fifo.DEPTH = 191;
defparam rnode_68to258_bb5_c0_exe895_0_reg_258_fifo.DATA_WIDTH = 32;
defparam rnode_68to258_bb5_c0_exe895_0_reg_258_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_68to258_bb5_c0_exe895_0_reg_258_fifo.IMPL = "ram";

assign rnode_68to258_bb5_c0_exe895_0_reg_258_inputs_ready_NO_SHIFT_REG = local_bb5_c0_exe895_valid_out;
assign local_bb5_c0_exe895_stall_in = rnode_68to258_bb5_c0_exe895_0_stall_out_reg_258_NO_SHIFT_REG;
assign rnode_68to258_bb5_c0_exe895_0_NO_SHIFT_REG = rnode_68to258_bb5_c0_exe895_0_reg_258_NO_SHIFT_REG;
assign rnode_68to258_bb5_c0_exe895_0_stall_in_reg_258_NO_SHIFT_REG = rnode_68to258_bb5_c0_exe895_0_stall_in_NO_SHIFT_REG;
assign rnode_68to258_bb5_c0_exe895_0_valid_out_NO_SHIFT_REG = rnode_68to258_bb5_c0_exe895_0_valid_out_reg_258_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_227to228_bb5_c0_exe188_0_valid_out_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe188_0_stall_in_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe188_0_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe188_0_reg_228_inputs_ready_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe188_0_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe188_0_valid_out_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe188_0_stall_in_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe188_0_stall_out_reg_228_NO_SHIFT_REG;

acl_data_fifo rnode_227to228_bb5_c0_exe188_0_reg_228_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_227to228_bb5_c0_exe188_0_reg_228_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_227to228_bb5_c0_exe188_0_stall_in_reg_228_NO_SHIFT_REG),
	.valid_out(rnode_227to228_bb5_c0_exe188_0_valid_out_reg_228_NO_SHIFT_REG),
	.stall_out(rnode_227to228_bb5_c0_exe188_0_stall_out_reg_228_NO_SHIFT_REG),
	.data_in(rnode_68to227_bb5_c0_exe188_0_NO_SHIFT_REG),
	.data_out(rnode_227to228_bb5_c0_exe188_0_reg_228_NO_SHIFT_REG)
);

defparam rnode_227to228_bb5_c0_exe188_0_reg_228_fifo.DEPTH = 2;
defparam rnode_227to228_bb5_c0_exe188_0_reg_228_fifo.DATA_WIDTH = 1;
defparam rnode_227to228_bb5_c0_exe188_0_reg_228_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_227to228_bb5_c0_exe188_0_reg_228_fifo.IMPL = "ll_reg";

assign rnode_227to228_bb5_c0_exe188_0_reg_228_inputs_ready_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe188_0_valid_out_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe188_0_stall_in_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe188_0_stall_out_reg_228_NO_SHIFT_REG;
assign rnode_227to228_bb5_c0_exe188_0_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe188_0_reg_228_NO_SHIFT_REG;
assign rnode_227to228_bb5_c0_exe188_0_stall_in_reg_228_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe188_0_stall_in_NO_SHIFT_REG;
assign rnode_227to228_bb5_c0_exe188_0_valid_out_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe188_0_valid_out_reg_228_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_227to228_bb5_c0_exe289_0_valid_out_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe289_0_stall_in_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe289_0_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe289_0_reg_228_inputs_ready_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe289_0_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe289_0_valid_out_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe289_0_stall_in_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe289_0_stall_out_reg_228_NO_SHIFT_REG;

acl_data_fifo rnode_227to228_bb5_c0_exe289_0_reg_228_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_227to228_bb5_c0_exe289_0_reg_228_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_227to228_bb5_c0_exe289_0_stall_in_reg_228_NO_SHIFT_REG),
	.valid_out(rnode_227to228_bb5_c0_exe289_0_valid_out_reg_228_NO_SHIFT_REG),
	.stall_out(rnode_227to228_bb5_c0_exe289_0_stall_out_reg_228_NO_SHIFT_REG),
	.data_in(rnode_68to227_bb5_c0_exe289_0_NO_SHIFT_REG),
	.data_out(rnode_227to228_bb5_c0_exe289_0_reg_228_NO_SHIFT_REG)
);

defparam rnode_227to228_bb5_c0_exe289_0_reg_228_fifo.DEPTH = 2;
defparam rnode_227to228_bb5_c0_exe289_0_reg_228_fifo.DATA_WIDTH = 1;
defparam rnode_227to228_bb5_c0_exe289_0_reg_228_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_227to228_bb5_c0_exe289_0_reg_228_fifo.IMPL = "ll_reg";

assign rnode_227to228_bb5_c0_exe289_0_reg_228_inputs_ready_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe289_0_valid_out_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe289_0_stall_in_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe289_0_stall_out_reg_228_NO_SHIFT_REG;
assign rnode_227to228_bb5_c0_exe289_0_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe289_0_reg_228_NO_SHIFT_REG;
assign rnode_227to228_bb5_c0_exe289_0_stall_in_reg_228_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe289_0_stall_in_NO_SHIFT_REG;
assign rnode_227to228_bb5_c0_exe289_0_valid_out_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe289_0_valid_out_reg_228_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_227to228_bb5_c0_exe390_0_valid_out_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe390_0_stall_in_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe390_0_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe390_0_reg_228_inputs_ready_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe390_0_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe390_0_valid_out_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe390_0_stall_in_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe390_0_stall_out_reg_228_NO_SHIFT_REG;

acl_data_fifo rnode_227to228_bb5_c0_exe390_0_reg_228_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_227to228_bb5_c0_exe390_0_reg_228_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_227to228_bb5_c0_exe390_0_stall_in_reg_228_NO_SHIFT_REG),
	.valid_out(rnode_227to228_bb5_c0_exe390_0_valid_out_reg_228_NO_SHIFT_REG),
	.stall_out(rnode_227to228_bb5_c0_exe390_0_stall_out_reg_228_NO_SHIFT_REG),
	.data_in(rnode_68to227_bb5_c0_exe390_0_NO_SHIFT_REG),
	.data_out(rnode_227to228_bb5_c0_exe390_0_reg_228_NO_SHIFT_REG)
);

defparam rnode_227to228_bb5_c0_exe390_0_reg_228_fifo.DEPTH = 2;
defparam rnode_227to228_bb5_c0_exe390_0_reg_228_fifo.DATA_WIDTH = 1;
defparam rnode_227to228_bb5_c0_exe390_0_reg_228_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_227to228_bb5_c0_exe390_0_reg_228_fifo.IMPL = "ll_reg";

assign rnode_227to228_bb5_c0_exe390_0_reg_228_inputs_ready_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe390_0_valid_out_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe390_0_stall_in_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe390_0_stall_out_reg_228_NO_SHIFT_REG;
assign rnode_227to228_bb5_c0_exe390_0_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe390_0_reg_228_NO_SHIFT_REG;
assign rnode_227to228_bb5_c0_exe390_0_stall_in_reg_228_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe390_0_stall_in_NO_SHIFT_REG;
assign rnode_227to228_bb5_c0_exe390_0_valid_out_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe390_0_valid_out_reg_228_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_228to228_bb5_ld_memcoalesce_key_load_02_valid_out_0;
wire rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_in_0;
 reg rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_0_NO_SHIFT_REG;
wire rstag_228to228_bb5_ld_memcoalesce_key_load_02_valid_out_1;
wire rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_in_1;
 reg rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_1_NO_SHIFT_REG;
wire rstag_228to228_bb5_ld_memcoalesce_key_load_02_valid_out_2;
wire rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_in_2;
 reg rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_2_NO_SHIFT_REG;
wire rstag_228to228_bb5_ld_memcoalesce_key_load_02_inputs_ready;
wire rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_local;
 reg rstag_228to228_bb5_ld_memcoalesce_key_load_02_staging_valid_NO_SHIFT_REG;
wire rstag_228to228_bb5_ld_memcoalesce_key_load_02_combined_valid;
 reg [31:0] rstag_228to228_bb5_ld_memcoalesce_key_load_02_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_228to228_bb5_ld_memcoalesce_key_load_02;

assign rstag_228to228_bb5_ld_memcoalesce_key_load_02_inputs_ready = local_bb5_ld_memcoalesce_key_load_02_valid_out_NO_SHIFT_REG;
assign rstag_228to228_bb5_ld_memcoalesce_key_load_02 = (rstag_228to228_bb5_ld_memcoalesce_key_load_02_staging_valid_NO_SHIFT_REG ? rstag_228to228_bb5_ld_memcoalesce_key_load_02_staging_reg_NO_SHIFT_REG : local_bb5_ld_memcoalesce_key_load_02_NO_SHIFT_REG);
assign rstag_228to228_bb5_ld_memcoalesce_key_load_02_combined_valid = (rstag_228to228_bb5_ld_memcoalesce_key_load_02_staging_valid_NO_SHIFT_REG | rstag_228to228_bb5_ld_memcoalesce_key_load_02_inputs_ready);
assign rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_local = ((rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_in_0 & ~(rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_0_NO_SHIFT_REG)) | (rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_in_1 & ~(rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_1_NO_SHIFT_REG)) | (rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_in_2 & ~(rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_2_NO_SHIFT_REG)));
assign rstag_228to228_bb5_ld_memcoalesce_key_load_02_valid_out_0 = (rstag_228to228_bb5_ld_memcoalesce_key_load_02_combined_valid & ~(rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_0_NO_SHIFT_REG));
assign rstag_228to228_bb5_ld_memcoalesce_key_load_02_valid_out_1 = (rstag_228to228_bb5_ld_memcoalesce_key_load_02_combined_valid & ~(rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_1_NO_SHIFT_REG));
assign rstag_228to228_bb5_ld_memcoalesce_key_load_02_valid_out_2 = (rstag_228to228_bb5_ld_memcoalesce_key_load_02_combined_valid & ~(rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_2_NO_SHIFT_REG));
assign local_bb5_ld_memcoalesce_key_load_02_stall_in = (|rstag_228to228_bb5_ld_memcoalesce_key_load_02_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_228to228_bb5_ld_memcoalesce_key_load_02_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_228to228_bb5_ld_memcoalesce_key_load_02_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_local)
		begin
			if (~(rstag_228to228_bb5_ld_memcoalesce_key_load_02_staging_valid_NO_SHIFT_REG))
			begin
				rstag_228to228_bb5_ld_memcoalesce_key_load_02_staging_valid_NO_SHIFT_REG <= rstag_228to228_bb5_ld_memcoalesce_key_load_02_inputs_ready;
			end
		end
		else
		begin
			rstag_228to228_bb5_ld_memcoalesce_key_load_02_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_228to228_bb5_ld_memcoalesce_key_load_02_staging_valid_NO_SHIFT_REG))
		begin
			rstag_228to228_bb5_ld_memcoalesce_key_load_02_staging_reg_NO_SHIFT_REG <= local_bb5_ld_memcoalesce_key_load_02_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_0_NO_SHIFT_REG <= (rstag_228to228_bb5_ld_memcoalesce_key_load_02_combined_valid & (rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_0_NO_SHIFT_REG | ~(rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_in_0)) & rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_local);
		rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_1_NO_SHIFT_REG <= (rstag_228to228_bb5_ld_memcoalesce_key_load_02_combined_valid & (rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_1_NO_SHIFT_REG | ~(rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_in_1)) & rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_local);
		rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_2_NO_SHIFT_REG <= (rstag_228to228_bb5_ld_memcoalesce_key_load_02_combined_valid & (rstag_228to228_bb5_ld_memcoalesce_key_load_02_consumed_2_NO_SHIFT_REG | ~(rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_in_2)) & rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_local);
	end
end


// Register node:
//  * latency = 128
//  * capacity = 128
 logic rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_valid_out_NO_SHIFT_REG;
 logic rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_stall_in_NO_SHIFT_REG;
 logic rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_NO_SHIFT_REG;
 logic rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_reg_227_inputs_ready_NO_SHIFT_REG;
 logic rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_reg_227_NO_SHIFT_REG;
 logic rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_valid_out_reg_227_NO_SHIFT_REG;
 logic rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_stall_in_reg_227_NO_SHIFT_REG;
 logic rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_stall_out_reg_227_NO_SHIFT_REG;

acl_data_fifo rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_reg_227_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_reg_227_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_stall_in_reg_227_NO_SHIFT_REG),
	.valid_out(rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_valid_out_reg_227_NO_SHIFT_REG),
	.stall_out(rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_stall_out_reg_227_NO_SHIFT_REG),
	.data_in(local_bb5_st_memcoalesce_null_insertValue_0_NO_SHIFT_REG),
	.data_out(rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_reg_227_NO_SHIFT_REG)
);

defparam rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_reg_227_fifo.DEPTH = 129;
defparam rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_reg_227_fifo.DATA_WIDTH = 1;
defparam rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_reg_227_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_reg_227_fifo.IMPL = "ram";

assign rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_reg_227_inputs_ready_NO_SHIFT_REG = local_bb5_st_memcoalesce_null_insertValue_0_valid_out_NO_SHIFT_REG;
assign local_bb5_st_memcoalesce_null_insertValue_0_stall_in = rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_stall_out_reg_227_NO_SHIFT_REG;
assign rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_NO_SHIFT_REG = rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_reg_227_NO_SHIFT_REG;
assign rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_stall_in_reg_227_NO_SHIFT_REG = rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_stall_in_NO_SHIFT_REG;
assign rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_valid_out_NO_SHIFT_REG = rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_valid_out_reg_227_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_227to228_bb5_c0_exe794_0_valid_out_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe794_0_stall_in_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe794_0_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe794_0_reg_228_inputs_ready_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe794_0_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe794_0_valid_out_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe794_0_stall_in_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_c0_exe794_0_stall_out_reg_228_NO_SHIFT_REG;

acl_data_fifo rnode_227to228_bb5_c0_exe794_0_reg_228_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_227to228_bb5_c0_exe794_0_reg_228_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_227to228_bb5_c0_exe794_0_stall_in_reg_228_NO_SHIFT_REG),
	.valid_out(rnode_227to228_bb5_c0_exe794_0_valid_out_reg_228_NO_SHIFT_REG),
	.stall_out(rnode_227to228_bb5_c0_exe794_0_stall_out_reg_228_NO_SHIFT_REG),
	.data_in(rnode_68to227_bb5_c0_exe794_0_NO_SHIFT_REG),
	.data_out(rnode_227to228_bb5_c0_exe794_0_reg_228_NO_SHIFT_REG)
);

defparam rnode_227to228_bb5_c0_exe794_0_reg_228_fifo.DEPTH = 2;
defparam rnode_227to228_bb5_c0_exe794_0_reg_228_fifo.DATA_WIDTH = 1;
defparam rnode_227to228_bb5_c0_exe794_0_reg_228_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_227to228_bb5_c0_exe794_0_reg_228_fifo.IMPL = "ll_reg";

assign rnode_227to228_bb5_c0_exe794_0_reg_228_inputs_ready_NO_SHIFT_REG = rnode_68to227_bb5_c0_exe794_0_valid_out_NO_SHIFT_REG;
assign rnode_68to227_bb5_c0_exe794_0_stall_in_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe794_0_stall_out_reg_228_NO_SHIFT_REG;
assign rnode_227to228_bb5_c0_exe794_0_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe794_0_reg_228_NO_SHIFT_REG;
assign rnode_227to228_bb5_c0_exe794_0_stall_in_reg_228_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe794_0_stall_in_NO_SHIFT_REG;
assign rnode_227to228_bb5_c0_exe794_0_valid_out_NO_SHIFT_REG = rnode_227to228_bb5_c0_exe794_0_valid_out_reg_228_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_258to259_bb5_c0_exe895_0_valid_out_NO_SHIFT_REG;
 logic rnode_258to259_bb5_c0_exe895_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_258to259_bb5_c0_exe895_0_NO_SHIFT_REG;
 logic rnode_258to259_bb5_c0_exe895_0_reg_259_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_258to259_bb5_c0_exe895_0_reg_259_NO_SHIFT_REG;
 logic rnode_258to259_bb5_c0_exe895_0_valid_out_reg_259_NO_SHIFT_REG;
 logic rnode_258to259_bb5_c0_exe895_0_stall_in_reg_259_NO_SHIFT_REG;
 logic rnode_258to259_bb5_c0_exe895_0_stall_out_reg_259_NO_SHIFT_REG;

acl_data_fifo rnode_258to259_bb5_c0_exe895_0_reg_259_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_258to259_bb5_c0_exe895_0_reg_259_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_258to259_bb5_c0_exe895_0_stall_in_reg_259_NO_SHIFT_REG),
	.valid_out(rnode_258to259_bb5_c0_exe895_0_valid_out_reg_259_NO_SHIFT_REG),
	.stall_out(rnode_258to259_bb5_c0_exe895_0_stall_out_reg_259_NO_SHIFT_REG),
	.data_in(rnode_68to258_bb5_c0_exe895_0_NO_SHIFT_REG),
	.data_out(rnode_258to259_bb5_c0_exe895_0_reg_259_NO_SHIFT_REG)
);

defparam rnode_258to259_bb5_c0_exe895_0_reg_259_fifo.DEPTH = 2;
defparam rnode_258to259_bb5_c0_exe895_0_reg_259_fifo.DATA_WIDTH = 32;
defparam rnode_258to259_bb5_c0_exe895_0_reg_259_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_258to259_bb5_c0_exe895_0_reg_259_fifo.IMPL = "ll_reg";

assign rnode_258to259_bb5_c0_exe895_0_reg_259_inputs_ready_NO_SHIFT_REG = rnode_68to258_bb5_c0_exe895_0_valid_out_NO_SHIFT_REG;
assign rnode_68to258_bb5_c0_exe895_0_stall_in_NO_SHIFT_REG = rnode_258to259_bb5_c0_exe895_0_stall_out_reg_259_NO_SHIFT_REG;
assign rnode_258to259_bb5_c0_exe895_0_NO_SHIFT_REG = rnode_258to259_bb5_c0_exe895_0_reg_259_NO_SHIFT_REG;
assign rnode_258to259_bb5_c0_exe895_0_stall_in_reg_259_NO_SHIFT_REG = rnode_258to259_bb5_c0_exe895_0_stall_in_NO_SHIFT_REG;
assign rnode_258to259_bb5_c0_exe895_0_valid_out_NO_SHIFT_REG = rnode_258to259_bb5_c0_exe895_0_valid_out_reg_259_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_memcoalesce_key_extrValue_25_stall_local;
wire [7:0] local_bb5_memcoalesce_key_extrValue_25;

assign local_bb5_memcoalesce_key_extrValue_25 = rstag_228to228_bb5_ld_memcoalesce_key_load_02[23:16];

// This section implements an unregistered operation.
// 
wire local_bb5_memcoalesce_key_extrValue_14_stall_local;
wire [7:0] local_bb5_memcoalesce_key_extrValue_14;

assign local_bb5_memcoalesce_key_extrValue_14 = rstag_228to228_bb5_ld_memcoalesce_key_load_02[15:8];

// This section implements an unregistered operation.
// 
wire local_bb5_memcoalesce_key_extrValue_03_stall_local;
wire [7:0] local_bb5_memcoalesce_key_extrValue_03;

assign local_bb5_memcoalesce_key_extrValue_03 = rstag_228to228_bb5_ld_memcoalesce_key_load_02[7:0];

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_valid_out_NO_SHIFT_REG;
 logic rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_stall_in_NO_SHIFT_REG;
 logic rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_NO_SHIFT_REG;
 logic rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_reg_228_inputs_ready_NO_SHIFT_REG;
 logic rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_valid_out_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_stall_in_reg_228_NO_SHIFT_REG;
 logic rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_stall_out_reg_228_NO_SHIFT_REG;

acl_data_fifo rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_reg_228_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_reg_228_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_stall_in_reg_228_NO_SHIFT_REG),
	.valid_out(rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_valid_out_reg_228_NO_SHIFT_REG),
	.stall_out(rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_stall_out_reg_228_NO_SHIFT_REG),
	.data_in(rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_NO_SHIFT_REG),
	.data_out(rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_reg_228_NO_SHIFT_REG)
);

defparam rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_reg_228_fifo.DEPTH = 2;
defparam rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_reg_228_fifo.DATA_WIDTH = 1;
defparam rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_reg_228_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_reg_228_fifo.IMPL = "ll_reg";

assign rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_reg_228_inputs_ready_NO_SHIFT_REG = rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_valid_out_NO_SHIFT_REG;
assign rnode_99to227_bb5_st_memcoalesce_null_insertValue_0_0_stall_in_NO_SHIFT_REG = rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_stall_out_reg_228_NO_SHIFT_REG;
assign rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_NO_SHIFT_REG = rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_reg_228_NO_SHIFT_REG;
assign rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_stall_in_reg_228_NO_SHIFT_REG = rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_stall_in_NO_SHIFT_REG;
assign rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_valid_out_NO_SHIFT_REG = rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_valid_out_reg_228_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb5_conv101_stall_local;
wire [31:0] local_bb5_conv101;

assign local_bb5_conv101[31:8] = 24'h0;
assign local_bb5_conv101[7:0] = local_bb5_memcoalesce_key_extrValue_25;

// This section implements an unregistered operation.
// 
wire local_bb5_conv126_stall_local;
wire [31:0] local_bb5_conv126;

assign local_bb5_conv126[31:8] = 24'h0;
assign local_bb5_conv126[7:0] = local_bb5_memcoalesce_key_extrValue_14;

// This section implements an unregistered operation.
// 
wire local_bb5_conv142_stall_local;
wire [31:0] local_bb5_conv142;

assign local_bb5_conv142[31:8] = 24'h0;
assign local_bb5_conv142[7:0] = local_bb5_memcoalesce_key_extrValue_03;

// This section implements an unregistered operation.
// 
wire local_bb5_shl102_stall_local;
wire [31:0] local_bb5_shl102;

assign local_bb5_shl102 = (local_bb5_conv101 << 32'h8);

// This section implements an unregistered operation.
// 
wire local_bb5_shl127_stall_local;
wire [31:0] local_bb5_shl127;

assign local_bb5_shl127 = (local_bb5_conv126 << 32'h10);

// This section implements an unregistered operation.
// 
wire local_bb5_shl143_stall_local;
wire [31:0] local_bb5_shl143;

assign local_bb5_shl143 = (local_bb5_conv142 << 32'h18);

// This section implements an unregistered operation.
// 
wire local_bb5_or148_stall_local;
wire [31:0] local_bb5_or148;

assign local_bb5_or148 = (local_bb5_shl143 | 32'h800000);

// This section implements an unregistered operation.
// 
wire local_bb5_or130_stall_local;
wire [31:0] local_bb5_or130;

assign local_bb5_or130 = (local_bb5_shl143 | local_bb5_shl127);

// This section implements an unregistered operation.
// 
wire local_bb5_or95_stall_local;
wire [31:0] local_bb5_or95;

assign local_bb5_or95 = (local_bb5_shl127 | local_bb5_shl143);

// This section implements an unregistered operation.
// 
wire local_bb5_or133_stall_local;
wire [31:0] local_bb5_or133;

assign local_bb5_or133 = (local_bb5_or130 | 32'h8000);

// This section implements an unregistered operation.
// 
wire local_bb5_or105_stall_local;
wire [31:0] local_bb5_or105;

assign local_bb5_or105 = (local_bb5_shl102 | local_bb5_or95);

// This section implements an unregistered operation.
// 
wire local_bb5__77_stall_local;
wire [31:0] local_bb5__77;

assign local_bb5__77 = (rnode_227to228_bb5_c0_exe188_0_NO_SHIFT_REG ? local_bb5_or148 : local_bb5_or133);

// This section implements an unregistered operation.
// 
wire local_bb5_or108_stall_local;
wire [31:0] local_bb5_or108;

assign local_bb5_or108 = (local_bb5_or105 | 32'h80);

// This section implements an unregistered operation.
// 
wire local_bb5__86_stall_local;
wire [31:0] local_bb5__86;

assign local_bb5__86 = (rnode_227to228_bb5_c0_exe289_0_NO_SHIFT_REG ? local_bb5__77 : 32'h80000000);

// This section implements an unregistered operation.
// 
wire local_bb5__90_stall_local;
wire [31:0] local_bb5__90;

assign local_bb5__90 = (rnode_227to228_bb5_c0_exe390_0_NO_SHIFT_REG ? local_bb5__86 : local_bb5_or108);

// This section implements an unregistered operation.
// 
wire local_bb5__113_valid_out;
wire local_bb5__113_stall_in;
wire local_bb5__113_inputs_ready;
wire local_bb5__113_stall_local;
wire [31:0] local_bb5__113;

assign local_bb5__113_inputs_ready = (rnode_227to228_c0_exe13_0_valid_out_1_NO_SHIFT_REG & rnode_227to228_mul158_0_valid_out_NO_SHIFT_REG & rstag_228to228_bb5_ld_memcoalesce_key_load_02_valid_out_0 & rstag_228to228_bb5_ld_memcoalesce_key_load_02_valid_out_1 & rstag_228to228_bb5_ld_memcoalesce_key_load_02_valid_out_2 & rnode_227to228_bb5_c0_exe188_0_valid_out_NO_SHIFT_REG & rnode_227to228_bb5_c0_exe390_0_valid_out_NO_SHIFT_REG & rnode_227to228_bb5_c0_exe289_0_valid_out_NO_SHIFT_REG);
assign local_bb5__113 = (rnode_227to228_c0_exe13_1_NO_SHIFT_REG ? local_bb5__90 : input_wii_mul158);
assign local_bb5__113_valid_out = local_bb5__113_inputs_ready;
assign local_bb5__113_stall_local = local_bb5__113_stall_in;
assign rnode_227to228_c0_exe13_0_stall_in_1_NO_SHIFT_REG = (local_bb5__113_stall_local | ~(local_bb5__113_inputs_ready));
assign rnode_227to228_mul158_0_stall_in_NO_SHIFT_REG = (local_bb5__113_stall_local | ~(local_bb5__113_inputs_ready));
assign rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_in_0 = (local_bb5__113_stall_local | ~(local_bb5__113_inputs_ready));
assign rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_in_1 = (local_bb5__113_stall_local | ~(local_bb5__113_inputs_ready));
assign rstag_228to228_bb5_ld_memcoalesce_key_load_02_stall_in_2 = (local_bb5__113_stall_local | ~(local_bb5__113_inputs_ready));
assign rnode_227to228_bb5_c0_exe188_0_stall_in_NO_SHIFT_REG = (local_bb5__113_stall_local | ~(local_bb5__113_inputs_ready));
assign rnode_227to228_bb5_c0_exe390_0_stall_in_NO_SHIFT_REG = (local_bb5__113_stall_local | ~(local_bb5__113_inputs_ready));
assign rnode_227to228_bb5_c0_exe289_0_stall_in_NO_SHIFT_REG = (local_bb5__113_stall_local | ~(local_bb5__113_inputs_ready));

// This section implements a staging register.
// 
wire rstag_228to228_bb5__113_valid_out;
wire rstag_228to228_bb5__113_stall_in;
wire rstag_228to228_bb5__113_inputs_ready;
wire rstag_228to228_bb5__113_stall_local;
 reg rstag_228to228_bb5__113_staging_valid_NO_SHIFT_REG;
wire rstag_228to228_bb5__113_combined_valid;
 reg [31:0] rstag_228to228_bb5__113_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_228to228_bb5__113;

assign rstag_228to228_bb5__113_inputs_ready = local_bb5__113_valid_out;
assign rstag_228to228_bb5__113 = (rstag_228to228_bb5__113_staging_valid_NO_SHIFT_REG ? rstag_228to228_bb5__113_staging_reg_NO_SHIFT_REG : local_bb5__113);
assign rstag_228to228_bb5__113_combined_valid = (rstag_228to228_bb5__113_staging_valid_NO_SHIFT_REG | rstag_228to228_bb5__113_inputs_ready);
assign rstag_228to228_bb5__113_valid_out = rstag_228to228_bb5__113_combined_valid;
assign rstag_228to228_bb5__113_stall_local = rstag_228to228_bb5__113_stall_in;
assign local_bb5__113_stall_in = (|rstag_228to228_bb5__113_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_228to228_bb5__113_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_228to228_bb5__113_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_228to228_bb5__113_stall_local)
		begin
			if (~(rstag_228to228_bb5__113_staging_valid_NO_SHIFT_REG))
			begin
				rstag_228to228_bb5__113_staging_valid_NO_SHIFT_REG <= rstag_228to228_bb5__113_inputs_ready;
			end
		end
		else
		begin
			rstag_228to228_bb5__113_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_228to228_bb5__113_staging_valid_NO_SHIFT_REG))
		begin
			rstag_228to228_bb5__113_staging_reg_NO_SHIFT_REG <= local_bb5__113;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb5_st__113_inputs_ready;
 reg local_bb5_st__113_valid_out_NO_SHIFT_REG;
wire local_bb5_st__113_stall_in;
wire local_bb5_st__113_output_regs_ready;
wire local_bb5_st__113_fu_stall_out;
wire local_bb5_st__113_fu_valid_out;
wire [31:0] local_bb5_st__113_lsu_wackout;
 reg local_bb5_st__113_NO_SHIFT_REG;
wire local_bb5_st__113_causedstall;

lsu_top lsu_local_bb5_st__113 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb5_st__113_fu_stall_out),
	.i_valid(local_bb5_st__113_inputs_ready),
	.i_address(rstag_228to228_bb5__112),
	.i_writedata(rstag_228to228_bb5__113),
	.i_cmpdata(),
	.i_predicate(rnode_227to228_bb5_c0_exe794_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb5_st__113_output_regs_ready)),
	.o_valid(local_bb5_st__113_fu_valid_out),
	.o_readdata(),
	.o_input_fifo_depth(local_bb5_st__113_input_fifo_depth),
	.o_writeack(local_bb5_st__113_lsu_wackout),
	.i_atomic_op(3'h0),
	.o_active(local_bb5_st__113_active),
	.avm_address(avm_local_bb5_st__113_address),
	.avm_read(avm_local_bb5_st__113_read),
	.avm_readdata(avm_local_bb5_st__113_readdata),
	.avm_write(avm_local_bb5_st__113_write),
	.avm_writeack(avm_local_bb5_st__113_writeack),
	.avm_burstcount(avm_local_bb5_st__113_burstcount),
	.avm_writedata(avm_local_bb5_st__113_writedata),
	.avm_byteenable(avm_local_bb5_st__113_byteenable),
	.avm_waitrequest(avm_local_bb5_st__113_waitrequest),
	.avm_readdatavalid(avm_local_bb5_st__113_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb5_st__113.AWIDTH = 32;
defparam lsu_local_bb5_st__113.WIDTH_BYTES = 4;
defparam lsu_local_bb5_st__113.MWIDTH_BYTES = 64;
defparam lsu_local_bb5_st__113.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb5_st__113.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb5_st__113.READ = 0;
defparam lsu_local_bb5_st__113.ATOMIC = 0;
defparam lsu_local_bb5_st__113.WIDTH = 32;
defparam lsu_local_bb5_st__113.MWIDTH = 512;
defparam lsu_local_bb5_st__113.ATOMIC_WIDTH = 3;
defparam lsu_local_bb5_st__113.BURSTCOUNT_WIDTH = 1;
defparam lsu_local_bb5_st__113.KERNEL_SIDE_MEM_LATENCY = 31;
defparam lsu_local_bb5_st__113.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb5_st__113.USE_WRITE_ACK = 0;
defparam lsu_local_bb5_st__113.ENABLE_BANKED_MEMORY = 1;
defparam lsu_local_bb5_st__113.ABITS_PER_LMEM_BANK = 7;
defparam lsu_local_bb5_st__113.NUMBER_BANKS = 4;
defparam lsu_local_bb5_st__113.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb5_st__113.USEINPUTFIFO = 1;
defparam lsu_local_bb5_st__113.USECACHING = 0;
defparam lsu_local_bb5_st__113.USEOUTPUTFIFO = 1;
defparam lsu_local_bb5_st__113.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb5_st__113.HIGH_FMAX = 1;
defparam lsu_local_bb5_st__113.ADDRSPACE = 5;
defparam lsu_local_bb5_st__113.STYLE = "PIPELINED";
defparam lsu_local_bb5_st__113.USE_BYTE_EN = 0;

assign local_bb5_st__113_inputs_ready = (rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_valid_out_NO_SHIFT_REG & rnode_227to228_bb5_c0_exe794_0_valid_out_NO_SHIFT_REG & rstag_228to228_bb5__113_valid_out & rstag_228to228_bb5__112_valid_out);
assign local_bb5_st__113_output_regs_ready = (&(~(local_bb5_st__113_valid_out_NO_SHIFT_REG) | ~(local_bb5_st__113_stall_in)));
assign rnode_227to228_bb5_st_memcoalesce_null_insertValue_0_0_stall_in_NO_SHIFT_REG = (local_bb5_st__113_fu_stall_out | ~(local_bb5_st__113_inputs_ready));
assign rnode_227to228_bb5_c0_exe794_0_stall_in_NO_SHIFT_REG = (local_bb5_st__113_fu_stall_out | ~(local_bb5_st__113_inputs_ready));
assign rstag_228to228_bb5__113_stall_in = (local_bb5_st__113_fu_stall_out | ~(local_bb5_st__113_inputs_ready));
assign rstag_228to228_bb5__112_stall_in = (local_bb5_st__113_fu_stall_out | ~(local_bb5_st__113_inputs_ready));
assign local_bb5_st__113_causedstall = (local_bb5_st__113_inputs_ready && (local_bb5_st__113_fu_stall_out && !(~(local_bb5_st__113_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb5_st__113_NO_SHIFT_REG <= 'x;
		local_bb5_st__113_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb5_st__113_output_regs_ready)
		begin
			local_bb5_st__113_NO_SHIFT_REG <= local_bb5_st__113_lsu_wackout;
			local_bb5_st__113_valid_out_NO_SHIFT_REG <= local_bb5_st__113_fu_valid_out;
		end
		else
		begin
			if (~(local_bb5_st__113_stall_in))
			begin
				local_bb5_st__113_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_259to259_bb5_st__113_valid_out;
wire rstag_259to259_bb5_st__113_stall_in;
wire rstag_259to259_bb5_st__113_inputs_ready;
wire rstag_259to259_bb5_st__113_stall_local;
 reg rstag_259to259_bb5_st__113_staging_valid_NO_SHIFT_REG;
wire rstag_259to259_bb5_st__113_combined_valid;
 reg rstag_259to259_bb5_st__113_staging_reg_NO_SHIFT_REG;
wire rstag_259to259_bb5_st__113;

assign rstag_259to259_bb5_st__113_inputs_ready = local_bb5_st__113_valid_out_NO_SHIFT_REG;
assign rstag_259to259_bb5_st__113 = (rstag_259to259_bb5_st__113_staging_valid_NO_SHIFT_REG ? rstag_259to259_bb5_st__113_staging_reg_NO_SHIFT_REG : local_bb5_st__113_NO_SHIFT_REG);
assign rstag_259to259_bb5_st__113_combined_valid = (rstag_259to259_bb5_st__113_staging_valid_NO_SHIFT_REG | rstag_259to259_bb5_st__113_inputs_ready);
assign rstag_259to259_bb5_st__113_valid_out = rstag_259to259_bb5_st__113_combined_valid;
assign rstag_259to259_bb5_st__113_stall_local = rstag_259to259_bb5_st__113_stall_in;
assign local_bb5_st__113_stall_in = (|rstag_259to259_bb5_st__113_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_259to259_bb5_st__113_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_259to259_bb5_st__113_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_259to259_bb5_st__113_stall_local)
		begin
			if (~(rstag_259to259_bb5_st__113_staging_valid_NO_SHIFT_REG))
			begin
				rstag_259to259_bb5_st__113_staging_valid_NO_SHIFT_REG <= rstag_259to259_bb5_st__113_inputs_ready;
			end
		end
		else
		begin
			rstag_259to259_bb5_st__113_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_259to259_bb5_st__113_staging_valid_NO_SHIFT_REG))
		begin
			rstag_259to259_bb5_st__113_staging_reg_NO_SHIFT_REG <= local_bb5_st__113_NO_SHIFT_REG;
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_c0_exe9_reg_NO_SHIFT_REG;
 reg [31:0] lvb_c0_exe10_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb5_c0_exe895_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (rnode_258to259_c0_exe9_0_valid_out_NO_SHIFT_REG & rnode_258to259_c0_exe10_0_valid_out_NO_SHIFT_REG & rnode_258to259_bb5_c0_exe895_0_valid_out_NO_SHIFT_REG & rstag_259to259_bb5_st__113_valid_out);
assign branch_var__output_regs_ready = (~(stall_in) | ~(branch_node_valid_out_NO_SHIFT_REG));
assign rnode_258to259_c0_exe9_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_258to259_c0_exe10_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_258to259_bb5_c0_exe895_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_259to259_bb5_st__113_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_c0_exe9 = lvb_c0_exe9_reg_NO_SHIFT_REG;
assign lvb_c0_exe10 = lvb_c0_exe10_reg_NO_SHIFT_REG;
assign lvb_bb5_c0_exe895 = lvb_bb5_c0_exe895_reg_NO_SHIFT_REG;
assign valid_out = branch_node_valid_out_NO_SHIFT_REG;
assign combined_branch_stall_in_signal = stall_in;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
		lvb_c0_exe9_reg_NO_SHIFT_REG <= 'x;
		lvb_c0_exe10_reg_NO_SHIFT_REG <= 'x;
		lvb_bb5_c0_exe895_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_c0_exe9_reg_NO_SHIFT_REG <= rnode_258to259_c0_exe9_0_NO_SHIFT_REG;
			lvb_c0_exe10_reg_NO_SHIFT_REG <= rnode_258to259_c0_exe10_0_NO_SHIFT_REG;
			lvb_bb5_c0_exe895_reg_NO_SHIFT_REG <= rnode_258to259_bb5_c0_exe895_0_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

module sha256_basic_block_6
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_ld_,
		input [31:0] 		input_wii_mul158,
		input [31:0] 		input_wii__,
		input 		input_wii_cmp166_xor,
		input [63:0] 		input_wii_memcoalesce_digest_bitcast_08,
		input [511:0] 		input_wii_memcoalesce_null_insertValue_0,
		input 		valid_in_0,
		output 		stall_out_0,
		input [31:0] 		input_A_150_0,
		input [31:0] 		input_B_149_0,
		input 		input_forked_0,
		input [31:0] 		input_var__0,
		input [31:0] 		input_var__u36_0,
		input [31:0] 		input_select10817_0,
		input 		valid_in_1,
		output 		stall_out_1,
		input [31:0] 		input_A_150_1,
		input [31:0] 		input_B_149_1,
		input 		input_forked_1,
		input [31:0] 		input_var__1,
		input [31:0] 		input_var__u36_1,
		input [31:0] 		input_select10817_1,
		output 		valid_out_0,
		input 		stall_in_0,
		output [31:0] 		lvb_bb6_G_144_pop13_acl_pop_i32_528734635_0,
		output [31:0] 		lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_0,
		output [31:0] 		lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_0,
		output [31:0] 		lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_0,
		output [31:0] 		lvb_bb6_B_149_pop8_B_149_0,
		output [31:0] 		lvb_bb6_A_150_pop7_A_150_0,
		output [31:0] 		lvb_bb6_add215_0,
		output [31:0] 		lvb_bb6_add216_0,
		output [31:0] 		lvb_bb6__pop19__0,
		output [31:0] 		lvb_bb6__pop20__0,
		output [31:0] 		lvb_bb6_select10817_pop21_select10817_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output [31:0] 		lvb_bb6_G_144_pop13_acl_pop_i32_528734635_1,
		output [31:0] 		lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_1,
		output [31:0] 		lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_1,
		output [31:0] 		lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_1,
		output [31:0] 		lvb_bb6_B_149_pop8_B_149_1,
		output [31:0] 		lvb_bb6_A_150_pop7_A_150_1,
		output [31:0] 		lvb_bb6_add215_1,
		output [31:0] 		lvb_bb6_add216_1,
		output [31:0] 		lvb_bb6__pop19__1,
		output [31:0] 		lvb_bb6__pop20__1,
		output [31:0] 		lvb_bb6_select10817_pop21_select10817_1,
		input [31:0] 		workgroup_size,
		input 		start,
		input 		feedback_valid_in_6,
		output 		feedback_stall_out_6,
		input [63:0] 		feedback_data_in_6,
		input 		feedback_valid_in_15,
		output 		feedback_stall_out_15,
		input 		feedback_data_in_15,
		input 		feedback_valid_in_16,
		output 		feedback_stall_out_16,
		input 		feedback_data_in_16,
		input 		feedback_valid_in_17,
		output 		feedback_stall_out_17,
		input 		feedback_data_in_17,
		input 		feedback_valid_in_18,
		output 		feedback_stall_out_18,
		input 		feedback_data_in_18,
		output 		feedback_stall_out_4,
		input 		feedback_valid_in_5,
		output 		feedback_stall_out_5,
		input 		feedback_data_in_5,
		output 		acl_pipelined_valid,
		input 		acl_pipelined_stall,
		output 		acl_pipelined_exiting_valid,
		output 		acl_pipelined_exiting_stall,
		input 		feedback_valid_in_13,
		output 		feedback_stall_out_13,
		input [31:0] 		feedback_data_in_13,
		input 		feedback_valid_in_12,
		output 		feedback_stall_out_12,
		input [31:0] 		feedback_data_in_12,
		input 		feedback_valid_in_11,
		output 		feedback_stall_out_11,
		input [31:0] 		feedback_data_in_11,
		input 		feedback_valid_in_14,
		output 		feedback_stall_out_14,
		input [31:0] 		feedback_data_in_14,
		input 		feedback_valid_in_9,
		output 		feedback_stall_out_9,
		input [31:0] 		feedback_data_in_9,
		input 		feedback_valid_in_8,
		output 		feedback_stall_out_8,
		input [31:0] 		feedback_data_in_8,
		input 		feedback_valid_in_7,
		output 		feedback_stall_out_7,
		input [31:0] 		feedback_data_in_7,
		input 		feedback_valid_in_10,
		output 		feedback_stall_out_10,
		input [31:0] 		feedback_data_in_10,
		input 		feedback_valid_in_19,
		output 		feedback_stall_out_19,
		input [31:0] 		feedback_data_in_19,
		input 		feedback_valid_in_20,
		output 		feedback_stall_out_20,
		input [31:0] 		feedback_data_in_20,
		input 		feedback_valid_in_21,
		output 		feedback_stall_out_21,
		input [31:0] 		feedback_data_in_21,
		output 		feedback_valid_out_6,
		input 		feedback_stall_in_6,
		output [63:0] 		feedback_data_out_6,
		input [511:0] 		avm_local_bb6_ld__readdata,
		input 		avm_local_bb6_ld__readdatavalid,
		input 		avm_local_bb6_ld__waitrequest,
		output [31:0] 		avm_local_bb6_ld__address,
		output 		avm_local_bb6_ld__read,
		output 		avm_local_bb6_ld__write,
		input 		avm_local_bb6_ld__writeack,
		output [511:0] 		avm_local_bb6_ld__writedata,
		output [63:0] 		avm_local_bb6_ld__byteenable,
		output 		avm_local_bb6_ld__burstcount,
		output [7:0] 		local_bb6_ld__input_fifo_depth,
		output 		local_bb6_ld__active,
		input 		clock2x,
		input [511:0] 		avm_local_bb6_ld__u41_readdata,
		input 		avm_local_bb6_ld__u41_readdatavalid,
		input 		avm_local_bb6_ld__u41_waitrequest,
		output [31:0] 		avm_local_bb6_ld__u41_address,
		output 		avm_local_bb6_ld__u41_read,
		output 		avm_local_bb6_ld__u41_write,
		input 		avm_local_bb6_ld__u41_writeack,
		output [511:0] 		avm_local_bb6_ld__u41_writedata,
		output [63:0] 		avm_local_bb6_ld__u41_byteenable,
		output 		avm_local_bb6_ld__u41_burstcount,
		output [7:0] 		local_bb6_ld__u41_input_fifo_depth,
		output 		local_bb6_ld__u41_active,
		input [511:0] 		avm_local_bb6_ld__u42_readdata,
		input 		avm_local_bb6_ld__u42_readdatavalid,
		input 		avm_local_bb6_ld__u42_waitrequest,
		output [31:0] 		avm_local_bb6_ld__u42_address,
		output 		avm_local_bb6_ld__u42_read,
		output 		avm_local_bb6_ld__u42_write,
		input 		avm_local_bb6_ld__u42_writeack,
		output [511:0] 		avm_local_bb6_ld__u42_writedata,
		output [63:0] 		avm_local_bb6_ld__u42_byteenable,
		output 		avm_local_bb6_ld__u42_burstcount,
		output [7:0] 		local_bb6_ld__u42_input_fifo_depth,
		output 		local_bb6_ld__u42_active,
		input [511:0] 		avm_local_bb6_ld__u43_readdata,
		input 		avm_local_bb6_ld__u43_readdatavalid,
		input 		avm_local_bb6_ld__u43_waitrequest,
		output [31:0] 		avm_local_bb6_ld__u43_address,
		output 		avm_local_bb6_ld__u43_read,
		output 		avm_local_bb6_ld__u43_write,
		input 		avm_local_bb6_ld__u43_writeack,
		output [511:0] 		avm_local_bb6_ld__u43_writedata,
		output [63:0] 		avm_local_bb6_ld__u43_byteenable,
		output 		avm_local_bb6_ld__u43_burstcount,
		output [7:0] 		local_bb6_ld__u43_input_fifo_depth,
		output 		local_bb6_ld__u43_active,
		output 		feedback_valid_out_5,
		input 		feedback_stall_in_5,
		output 		feedback_data_out_5,
		input [511:0] 		avm_local_bb6_ld__pre65_readdata,
		input 		avm_local_bb6_ld__pre65_readdatavalid,
		input 		avm_local_bb6_ld__pre65_waitrequest,
		output [31:0] 		avm_local_bb6_ld__pre65_address,
		output 		avm_local_bb6_ld__pre65_read,
		output 		avm_local_bb6_ld__pre65_write,
		input 		avm_local_bb6_ld__pre65_writeack,
		output [511:0] 		avm_local_bb6_ld__pre65_writedata,
		output [63:0] 		avm_local_bb6_ld__pre65_byteenable,
		output 		avm_local_bb6_ld__pre65_burstcount,
		output [7:0] 		local_bb6_ld__pre65_input_fifo_depth,
		output 		local_bb6_ld__pre65_active,
		output 		feedback_valid_out_12,
		input 		feedback_stall_in_12,
		output [31:0] 		feedback_data_out_12,
		output 		feedback_valid_out_13,
		input 		feedback_stall_in_13,
		output [31:0] 		feedback_data_out_13,
		output 		feedback_valid_out_14,
		input 		feedback_stall_in_14,
		output [31:0] 		feedback_data_out_14,
		output 		feedback_valid_out_10,
		input 		feedback_stall_in_10,
		output [31:0] 		feedback_data_out_10,
		output 		feedback_valid_out_9,
		input 		feedback_stall_in_9,
		output [31:0] 		feedback_data_out_9,
		output 		feedback_valid_out_8,
		input 		feedback_stall_in_8,
		output [31:0] 		feedback_data_out_8,
		output 		feedback_valid_out_19,
		input 		feedback_stall_in_19,
		output [31:0] 		feedback_data_out_19,
		output 		feedback_valid_out_20,
		input 		feedback_stall_in_20,
		output [31:0] 		feedback_data_out_20,
		output 		feedback_valid_out_21,
		input 		feedback_stall_in_21,
		output [31:0] 		feedback_data_out_21,
		input [511:0] 		avm_local_bb6_st_reduction_9_readdata,
		input 		avm_local_bb6_st_reduction_9_readdatavalid,
		input 		avm_local_bb6_st_reduction_9_waitrequest,
		output [31:0] 		avm_local_bb6_st_reduction_9_address,
		output 		avm_local_bb6_st_reduction_9_read,
		output 		avm_local_bb6_st_reduction_9_write,
		input 		avm_local_bb6_st_reduction_9_writeack,
		output [511:0] 		avm_local_bb6_st_reduction_9_writedata,
		output [63:0] 		avm_local_bb6_st_reduction_9_byteenable,
		output 		avm_local_bb6_st_reduction_9_burstcount,
		output [7:0] 		local_bb6_st_reduction_9_input_fifo_depth,
		output 		local_bb6_st_reduction_9_active,
		output 		feedback_valid_out_15,
		input 		feedback_stall_in_15,
		output 		feedback_data_out_15,
		output 		feedback_valid_out_16,
		input 		feedback_stall_in_16,
		output 		feedback_data_out_16,
		output 		feedback_valid_out_17,
		input 		feedback_stall_in_17,
		output 		feedback_data_out_17,
		output 		feedback_valid_out_18,
		input 		feedback_stall_in_18,
		output 		feedback_data_out_18,
		output 		feedback_valid_out_7,
		input 		feedback_stall_in_7,
		output [31:0] 		feedback_data_out_7,
		output 		feedback_valid_out_11,
		input 		feedback_stall_in_11,
		output [31:0] 		feedback_data_out_11
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((valid_in_0 & valid_in_1) & ~((stall_out_0 | stall_out_1)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_node_stall_in_5;
 reg merge_node_valid_out_5_NO_SHIFT_REG;
wire merge_node_stall_in_6;
 reg merge_node_valid_out_6_NO_SHIFT_REG;
wire merge_node_stall_in_7;
 reg merge_node_valid_out_7_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_A_150_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_B_149_0_staging_reg_NO_SHIFT_REG;
 reg input_forked_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u36_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_select10817_0_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_A_150_NO_SHIFT_REG;
 reg [31:0] local_lvm_B_149_NO_SHIFT_REG;
 reg local_lvm_forked_NO_SHIFT_REG;
 reg [31:0] local_lvm_var__NO_SHIFT_REG;
 reg [31:0] local_lvm_var__u36_NO_SHIFT_REG;
 reg [31:0] local_lvm_select10817_NO_SHIFT_REG;
 reg merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_A_150_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_B_149_1_staging_reg_NO_SHIFT_REG;
 reg input_forked_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_var__u36_1_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_select10817_1_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG) | (merge_node_stall_in_5 & merge_node_valid_out_5_NO_SHIFT_REG) | (merge_node_stall_in_6 & merge_node_valid_out_6_NO_SHIFT_REG) | (merge_node_stall_in_7 & merge_node_valid_out_7_NO_SHIFT_REG));
assign stall_out_0 = merge_node_valid_in_0_staging_reg_NO_SHIFT_REG;
assign stall_out_1 = merge_node_valid_in_1_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_0_staging_reg_NO_SHIFT_REG | valid_in_0))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		if ((merge_node_valid_in_1_staging_reg_NO_SHIFT_REG | valid_in_1))
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b1;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
		end
		else
		begin
			merge_block_selector_NO_SHIFT_REG = 1'b0;
			is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_A_150_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_B_149_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_forked_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__0_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u36_0_staging_reg_NO_SHIFT_REG <= 'x;
		input_select10817_0_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		input_A_150_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_B_149_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_forked_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__1_staging_reg_NO_SHIFT_REG <= 'x;
		input_var__u36_1_staging_reg_NO_SHIFT_REG <= 'x;
		input_select10817_1_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_0_staging_reg_NO_SHIFT_REG))
			begin
				input_A_150_0_staging_reg_NO_SHIFT_REG <= input_A_150_0;
				input_B_149_0_staging_reg_NO_SHIFT_REG <= input_B_149_0;
				input_forked_0_staging_reg_NO_SHIFT_REG <= input_forked_0;
				input_var__0_staging_reg_NO_SHIFT_REG <= input_var__0;
				input_var__u36_0_staging_reg_NO_SHIFT_REG <= input_var__u36_0;
				input_select10817_0_staging_reg_NO_SHIFT_REG <= input_select10817_0;
				merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= valid_in_0;
			end
		end
		else
		begin
			merge_node_valid_in_0_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
		if (((merge_block_selector_NO_SHIFT_REG != 1'b1) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_1_staging_reg_NO_SHIFT_REG))
			begin
				input_A_150_1_staging_reg_NO_SHIFT_REG <= input_A_150_1;
				input_B_149_1_staging_reg_NO_SHIFT_REG <= input_B_149_1;
				input_forked_1_staging_reg_NO_SHIFT_REG <= input_forked_1;
				input_var__1_staging_reg_NO_SHIFT_REG <= input_var__1;
				input_var__u36_1_staging_reg_NO_SHIFT_REG <= input_var__u36_1;
				input_select10817_1_staging_reg_NO_SHIFT_REG <= input_select10817_1;
				merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= valid_in_1;
			end
		end
		else
		begin
			merge_node_valid_in_1_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_0_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_A_150_NO_SHIFT_REG <= input_A_150_0_staging_reg_NO_SHIFT_REG;
					local_lvm_B_149_NO_SHIFT_REG <= input_B_149_0_staging_reg_NO_SHIFT_REG;
					local_lvm_forked_NO_SHIFT_REG <= input_forked_0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__0_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u36_NO_SHIFT_REG <= input_var__u36_0_staging_reg_NO_SHIFT_REG;
					local_lvm_select10817_NO_SHIFT_REG <= input_select10817_0_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_A_150_NO_SHIFT_REG <= input_A_150_0;
					local_lvm_B_149_NO_SHIFT_REG <= input_B_149_0;
					local_lvm_forked_NO_SHIFT_REG <= input_forked_0;
					local_lvm_var__NO_SHIFT_REG <= input_var__0;
					local_lvm_var__u36_NO_SHIFT_REG <= input_var__u36_0;
					local_lvm_select10817_NO_SHIFT_REG <= input_select10817_0;
				end
			end

			1'b1:
			begin
				if (merge_node_valid_in_1_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_A_150_NO_SHIFT_REG <= input_A_150_1_staging_reg_NO_SHIFT_REG;
					local_lvm_B_149_NO_SHIFT_REG <= input_B_149_1_staging_reg_NO_SHIFT_REG;
					local_lvm_forked_NO_SHIFT_REG <= input_forked_1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__NO_SHIFT_REG <= input_var__1_staging_reg_NO_SHIFT_REG;
					local_lvm_var__u36_NO_SHIFT_REG <= input_var__u36_1_staging_reg_NO_SHIFT_REG;
					local_lvm_select10817_NO_SHIFT_REG <= input_select10817_1_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_A_150_NO_SHIFT_REG <= input_A_150_1;
					local_lvm_B_149_NO_SHIFT_REG <= input_B_149_1;
					local_lvm_forked_NO_SHIFT_REG <= input_forked_1;
					local_lvm_var__NO_SHIFT_REG <= input_var__1;
					local_lvm_var__u36_NO_SHIFT_REG <= input_var__u36_1;
					local_lvm_select10817_NO_SHIFT_REG <= input_select10817_1;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_5_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_6_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_7_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_5))
			begin
				merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_6))
			begin
				merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_7))
			begin
				merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_indvars_iv56_pop6_acl_pop_i64_0_stall_local;
wire [63:0] local_bb6_indvars_iv56_pop6_acl_pop_i64_0;
wire local_bb6_indvars_iv56_pop6_acl_pop_i64_0_fu_valid_out;
wire local_bb6_indvars_iv56_pop6_acl_pop_i64_0_fu_stall_out;
wire local_bb6_indvars_iv56_pop6_acl_pop_i64_0_inputs_ready;

acl_pop local_bb6_indvars_iv56_pop6_acl_pop_i64_0_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_lvm_forked_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(64'h0),
	.stall_out(local_bb6_indvars_iv56_pop6_acl_pop_i64_0_fu_stall_out),
	.valid_in(local_bb6_indvars_iv56_pop6_acl_pop_i64_0_inputs_ready),
	.valid_out(local_bb6_indvars_iv56_pop6_acl_pop_i64_0_fu_valid_out),
	.stall_in(local_bb6_indvars_iv56_pop6_acl_pop_i64_0_stall_local),
	.data_out(local_bb6_indvars_iv56_pop6_acl_pop_i64_0),
	.feedback_in(feedback_data_in_6),
	.feedback_valid_in(feedback_valid_in_6),
	.feedback_stall_out(feedback_stall_out_6)
);

defparam local_bb6_indvars_iv56_pop6_acl_pop_i64_0_feedback.DATA_WIDTH = 64;
defparam local_bb6_indvars_iv56_pop6_acl_pop_i64_0_feedback.STYLE = "REGULAR";


// Register node:
//  * latency = 62
//  * capacity = 62
 logic rnode_1to63_B_149_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to63_B_149_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to63_B_149_0_NO_SHIFT_REG;
 logic rnode_1to63_B_149_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to63_B_149_0_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_B_149_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_B_149_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_B_149_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_1to63_B_149_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to63_B_149_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to63_B_149_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_1to63_B_149_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_1to63_B_149_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(local_lvm_B_149_NO_SHIFT_REG),
	.data_out(rnode_1to63_B_149_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_1to63_B_149_0_reg_63_fifo.DEPTH = 63;
defparam rnode_1to63_B_149_0_reg_63_fifo.DATA_WIDTH = 32;
defparam rnode_1to63_B_149_0_reg_63_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to63_B_149_0_reg_63_fifo.IMPL = "ram";

assign rnode_1to63_B_149_0_reg_63_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_1_NO_SHIFT_REG;
assign merge_node_stall_in_1 = rnode_1to63_B_149_0_stall_out_reg_63_NO_SHIFT_REG;
assign rnode_1to63_B_149_0_NO_SHIFT_REG = rnode_1to63_B_149_0_reg_63_NO_SHIFT_REG;
assign rnode_1to63_B_149_0_stall_in_reg_63_NO_SHIFT_REG = rnode_1to63_B_149_0_stall_in_NO_SHIFT_REG;
assign rnode_1to63_B_149_0_valid_out_NO_SHIFT_REG = rnode_1to63_B_149_0_valid_out_reg_63_NO_SHIFT_REG;

// Register node:
//  * latency = 62
//  * capacity = 62
 logic rnode_1to63_A_150_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to63_A_150_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to63_A_150_0_NO_SHIFT_REG;
 logic rnode_1to63_A_150_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to63_A_150_0_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_A_150_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_A_150_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_A_150_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_1to63_A_150_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to63_A_150_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to63_A_150_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_1to63_A_150_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_1to63_A_150_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(local_lvm_A_150_NO_SHIFT_REG),
	.data_out(rnode_1to63_A_150_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_1to63_A_150_0_reg_63_fifo.DEPTH = 63;
defparam rnode_1to63_A_150_0_reg_63_fifo.DATA_WIDTH = 32;
defparam rnode_1to63_A_150_0_reg_63_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to63_A_150_0_reg_63_fifo.IMPL = "ram";

assign rnode_1to63_A_150_0_reg_63_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_2_NO_SHIFT_REG;
assign merge_node_stall_in_2 = rnode_1to63_A_150_0_stall_out_reg_63_NO_SHIFT_REG;
assign rnode_1to63_A_150_0_NO_SHIFT_REG = rnode_1to63_A_150_0_reg_63_NO_SHIFT_REG;
assign rnode_1to63_A_150_0_stall_in_reg_63_NO_SHIFT_REG = rnode_1to63_A_150_0_stall_in_NO_SHIFT_REG;
assign rnode_1to63_A_150_0_valid_out_NO_SHIFT_REG = rnode_1to63_A_150_0_valid_out_reg_63_NO_SHIFT_REG;

// Register node:
//  * latency = 61
//  * capacity = 61
 logic rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_reg_62_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_valid_out_reg_62_NO_SHIFT_REG;
 logic rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_stall_in_reg_62_NO_SHIFT_REG;
 logic rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_stall_out_reg_62_NO_SHIFT_REG;

acl_data_fifo rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_reg_62_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_reg_62_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_stall_in_reg_62_NO_SHIFT_REG),
	.valid_out(rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_valid_out_reg_62_NO_SHIFT_REG),
	.stall_out(rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_stall_out_reg_62_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_reg_62_fifo.DEPTH = 62;
defparam rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_reg_62_fifo.DATA_WIDTH = 0;
defparam rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_reg_62_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_reg_62_fifo.IMPL = "ram";

assign rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_reg_62_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_3_NO_SHIFT_REG;
assign merge_node_stall_in_3 = rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_stall_out_reg_62_NO_SHIFT_REG;
assign rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_stall_in_reg_62_NO_SHIFT_REG = rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_stall_in_NO_SHIFT_REG;
assign rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_valid_out_NO_SHIFT_REG = rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_valid_out_reg_62_NO_SHIFT_REG;

// Register node:
//  * latency = 62
//  * capacity = 62
 logic rnode_1to63_var__0_valid_out_NO_SHIFT_REG;
 logic rnode_1to63_var__0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to63_var__0_NO_SHIFT_REG;
 logic rnode_1to63_var__0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to63_var__0_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_var__0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_var__0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_var__0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_1to63_var__0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to63_var__0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to63_var__0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_1to63_var__0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_1to63_var__0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(local_lvm_var__NO_SHIFT_REG),
	.data_out(rnode_1to63_var__0_reg_63_NO_SHIFT_REG)
);

defparam rnode_1to63_var__0_reg_63_fifo.DEPTH = 63;
defparam rnode_1to63_var__0_reg_63_fifo.DATA_WIDTH = 32;
defparam rnode_1to63_var__0_reg_63_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to63_var__0_reg_63_fifo.IMPL = "ram";

assign rnode_1to63_var__0_reg_63_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_4_NO_SHIFT_REG;
assign merge_node_stall_in_4 = rnode_1to63_var__0_stall_out_reg_63_NO_SHIFT_REG;
assign rnode_1to63_var__0_NO_SHIFT_REG = rnode_1to63_var__0_reg_63_NO_SHIFT_REG;
assign rnode_1to63_var__0_stall_in_reg_63_NO_SHIFT_REG = rnode_1to63_var__0_stall_in_NO_SHIFT_REG;
assign rnode_1to63_var__0_valid_out_NO_SHIFT_REG = rnode_1to63_var__0_valid_out_reg_63_NO_SHIFT_REG;

// Register node:
//  * latency = 62
//  * capacity = 62
 logic rnode_1to63_var__u36_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to63_var__u36_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to63_var__u36_0_NO_SHIFT_REG;
 logic rnode_1to63_var__u36_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to63_var__u36_0_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_var__u36_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_var__u36_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_var__u36_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_1to63_var__u36_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to63_var__u36_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to63_var__u36_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_1to63_var__u36_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_1to63_var__u36_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(local_lvm_var__u36_NO_SHIFT_REG),
	.data_out(rnode_1to63_var__u36_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_1to63_var__u36_0_reg_63_fifo.DEPTH = 63;
defparam rnode_1to63_var__u36_0_reg_63_fifo.DATA_WIDTH = 32;
defparam rnode_1to63_var__u36_0_reg_63_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to63_var__u36_0_reg_63_fifo.IMPL = "ram";

assign rnode_1to63_var__u36_0_reg_63_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_5_NO_SHIFT_REG;
assign merge_node_stall_in_5 = rnode_1to63_var__u36_0_stall_out_reg_63_NO_SHIFT_REG;
assign rnode_1to63_var__u36_0_NO_SHIFT_REG = rnode_1to63_var__u36_0_reg_63_NO_SHIFT_REG;
assign rnode_1to63_var__u36_0_stall_in_reg_63_NO_SHIFT_REG = rnode_1to63_var__u36_0_stall_in_NO_SHIFT_REG;
assign rnode_1to63_var__u36_0_valid_out_NO_SHIFT_REG = rnode_1to63_var__u36_0_valid_out_reg_63_NO_SHIFT_REG;

// Register node:
//  * latency = 62
//  * capacity = 62
 logic rnode_1to63_select10817_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to63_select10817_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to63_select10817_0_NO_SHIFT_REG;
 logic rnode_1to63_select10817_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to63_select10817_0_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_select10817_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_select10817_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_1to63_select10817_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_1to63_select10817_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to63_select10817_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to63_select10817_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_1to63_select10817_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_1to63_select10817_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(local_lvm_select10817_NO_SHIFT_REG),
	.data_out(rnode_1to63_select10817_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_1to63_select10817_0_reg_63_fifo.DEPTH = 63;
defparam rnode_1to63_select10817_0_reg_63_fifo.DATA_WIDTH = 32;
defparam rnode_1to63_select10817_0_reg_63_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to63_select10817_0_reg_63_fifo.IMPL = "ram";

assign rnode_1to63_select10817_0_reg_63_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_6_NO_SHIFT_REG;
assign merge_node_stall_in_6 = rnode_1to63_select10817_0_stall_out_reg_63_NO_SHIFT_REG;
assign rnode_1to63_select10817_0_NO_SHIFT_REG = rnode_1to63_select10817_0_reg_63_NO_SHIFT_REG;
assign rnode_1to63_select10817_0_stall_in_reg_63_NO_SHIFT_REG = rnode_1to63_select10817_0_stall_in_NO_SHIFT_REG;
assign rnode_1to63_select10817_0_valid_out_NO_SHIFT_REG = rnode_1to63_select10817_0_valid_out_reg_63_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_forked_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_1to2_forked_1_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_1to2_forked_2_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_stall_in_3_NO_SHIFT_REG;
 logic rnode_1to2_forked_3_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_valid_out_4_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_stall_in_4_NO_SHIFT_REG;
 logic rnode_1to2_forked_4_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_stall_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_forked_0_reg_2_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_1to2_forked_0_reg_2_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_1to2_forked_0_reg_2_NO_SHIFT_REG),
	.valid_in(rnode_1to2_forked_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_forked_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.data_out(rnode_1to2_forked_0_reg_2_NO_SHIFT_REG_fa),
	.valid_out({rnode_1to2_forked_0_valid_out_0_NO_SHIFT_REG, rnode_1to2_forked_0_valid_out_1_NO_SHIFT_REG, rnode_1to2_forked_0_valid_out_2_NO_SHIFT_REG, rnode_1to2_forked_0_valid_out_3_NO_SHIFT_REG, rnode_1to2_forked_0_valid_out_4_NO_SHIFT_REG}),
	.stall_in({rnode_1to2_forked_0_stall_in_0_NO_SHIFT_REG, rnode_1to2_forked_0_stall_in_1_NO_SHIFT_REG, rnode_1to2_forked_0_stall_in_2_NO_SHIFT_REG, rnode_1to2_forked_0_stall_in_3_NO_SHIFT_REG, rnode_1to2_forked_0_stall_in_4_NO_SHIFT_REG})
);

defparam rnode_1to2_forked_0_reg_2_fanout_adaptor.DATA_WIDTH = 1;
defparam rnode_1to2_forked_0_reg_2_fanout_adaptor.NUM_FANOUTS = 5;

acl_data_fifo rnode_1to2_forked_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_forked_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_forked_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_forked_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_forked_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_lvm_forked_NO_SHIFT_REG),
	.data_out(rnode_1to2_forked_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_forked_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_forked_0_reg_2_fifo.DATA_WIDTH = 1;
defparam rnode_1to2_forked_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_forked_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_forked_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_7_NO_SHIFT_REG;
assign merge_node_stall_in_7 = rnode_1to2_forked_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_forked_0_NO_SHIFT_REG = rnode_1to2_forked_0_reg_2_NO_SHIFT_REG_fa;
assign rnode_1to2_forked_1_NO_SHIFT_REG = rnode_1to2_forked_0_reg_2_NO_SHIFT_REG_fa;
assign rnode_1to2_forked_2_NO_SHIFT_REG = rnode_1to2_forked_0_reg_2_NO_SHIFT_REG_fa;
assign rnode_1to2_forked_3_NO_SHIFT_REG = rnode_1to2_forked_0_reg_2_NO_SHIFT_REG_fa;
assign rnode_1to2_forked_4_NO_SHIFT_REG = rnode_1to2_forked_0_reg_2_NO_SHIFT_REG_fa;

// This section implements an unregistered operation.
// 
wire local_bb6_var__stall_local;
wire [63:0] local_bb6_var_;

assign local_bb6_var_ = (local_bb6_indvars_iv56_pop6_acl_pop_i64_0 + 64'hFFFFFFFFFFFFFFFE);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u37_stall_local;
wire [63:0] local_bb6_var__u37;

assign local_bb6_var__u37 = (local_bb6_indvars_iv56_pop6_acl_pop_i64_0 + 64'hFFFFFFFFFFFFFFF9);

// This section implements an unregistered operation.
// 
wire local_bb6_var__u38_stall_local;
wire [63:0] local_bb6_var__u38;

assign local_bb6_var__u38 = (local_bb6_indvars_iv56_pop6_acl_pop_i64_0 + 64'hFFFFFFFFFFFFFFF1);

// This section implements an unregistered operation.
// 
wire local_bb6_indvars_iv56_pop6_acl_pop_i64_0_valid_out_4;
wire local_bb6_indvars_iv56_pop6_acl_pop_i64_0_stall_in_4;
 reg local_bb6_indvars_iv56_pop6_acl_pop_i64_0_consumed_4_NO_SHIFT_REG;
wire local_bb6_var__valid_out;
wire local_bb6_var__stall_in;
 reg local_bb6_var__consumed_0_NO_SHIFT_REG;
wire local_bb6_var__u37_valid_out;
wire local_bb6_var__u37_stall_in;
 reg local_bb6_var__u37_consumed_0_NO_SHIFT_REG;
wire local_bb6_var__u38_valid_out;
wire local_bb6_var__u38_stall_in;
 reg local_bb6_var__u38_consumed_0_NO_SHIFT_REG;
wire local_bb6_var__u39_valid_out;
wire local_bb6_var__u39_stall_in;
 reg local_bb6_var__u39_consumed_0_NO_SHIFT_REG;
wire local_bb6_var__u39_inputs_ready;
wire local_bb6_var__u39_stall_local;
wire [63:0] local_bb6_var__u39;
wire local_bb6_var__u39_stall_out_local_or;
wire local_bb6_var__u39_stall_local_fanout;
wire local_bb6_var__u39_fu_valid_out_and;

assign local_bb6_var__u39_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb6_indvars_iv56_pop6_acl_pop_i64_0_inputs_ready = merge_node_valid_out_0_NO_SHIFT_REG;
assign local_bb6_var__u39 = (local_bb6_indvars_iv56_pop6_acl_pop_i64_0 + 64'hFFFFFFFFFFFFFFF0);
assign local_bb6_var__u39_stall_out_local_or = local_bb6_indvars_iv56_pop6_acl_pop_i64_0_fu_stall_out;
assign local_bb6_indvars_iv56_pop6_acl_pop_i64_0_stall_local = local_bb6_var__u39_stall_local_fanout;
assign local_bb6_var__u39_fu_valid_out_and = local_bb6_indvars_iv56_pop6_acl_pop_i64_0_fu_valid_out;
assign local_bb6_var__u39_stall_local_fanout = ((local_bb6_indvars_iv56_pop6_acl_pop_i64_0_stall_in_4 & ~(local_bb6_indvars_iv56_pop6_acl_pop_i64_0_consumed_4_NO_SHIFT_REG)) | (local_bb6_var__stall_in & ~(local_bb6_var__consumed_0_NO_SHIFT_REG)) | (local_bb6_var__u37_stall_in & ~(local_bb6_var__u37_consumed_0_NO_SHIFT_REG)) | (local_bb6_var__u38_stall_in & ~(local_bb6_var__u38_consumed_0_NO_SHIFT_REG)) | (local_bb6_var__u39_stall_in & ~(local_bb6_var__u39_consumed_0_NO_SHIFT_REG)));
assign local_bb6_indvars_iv56_pop6_acl_pop_i64_0_valid_out_4 = (local_bb6_var__u39_fu_valid_out_and & ~(local_bb6_indvars_iv56_pop6_acl_pop_i64_0_consumed_4_NO_SHIFT_REG));
assign local_bb6_var__valid_out = (local_bb6_var__u39_fu_valid_out_and & ~(local_bb6_var__consumed_0_NO_SHIFT_REG));
assign local_bb6_var__u37_valid_out = (local_bb6_var__u39_fu_valid_out_and & ~(local_bb6_var__u37_consumed_0_NO_SHIFT_REG));
assign local_bb6_var__u38_valid_out = (local_bb6_var__u39_fu_valid_out_and & ~(local_bb6_var__u38_consumed_0_NO_SHIFT_REG));
assign local_bb6_var__u39_valid_out = (local_bb6_var__u39_fu_valid_out_and & ~(local_bb6_var__u39_consumed_0_NO_SHIFT_REG));
assign merge_node_stall_in_0 = (|local_bb6_var__u39_stall_out_local_or);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_indvars_iv56_pop6_acl_pop_i64_0_consumed_4_NO_SHIFT_REG <= 1'b0;
		local_bb6_var__consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb6_var__u37_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb6_var__u38_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb6_var__u39_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb6_indvars_iv56_pop6_acl_pop_i64_0_consumed_4_NO_SHIFT_REG <= (local_bb6_var__u39_fu_valid_out_and & (local_bb6_indvars_iv56_pop6_acl_pop_i64_0_consumed_4_NO_SHIFT_REG | ~(local_bb6_indvars_iv56_pop6_acl_pop_i64_0_stall_in_4)) & local_bb6_var__u39_stall_local_fanout);
		local_bb6_var__consumed_0_NO_SHIFT_REG <= (local_bb6_var__u39_fu_valid_out_and & (local_bb6_var__consumed_0_NO_SHIFT_REG | ~(local_bb6_var__stall_in)) & local_bb6_var__u39_stall_local_fanout);
		local_bb6_var__u37_consumed_0_NO_SHIFT_REG <= (local_bb6_var__u39_fu_valid_out_and & (local_bb6_var__u37_consumed_0_NO_SHIFT_REG | ~(local_bb6_var__u37_stall_in)) & local_bb6_var__u39_stall_local_fanout);
		local_bb6_var__u38_consumed_0_NO_SHIFT_REG <= (local_bb6_var__u39_fu_valid_out_and & (local_bb6_var__u38_consumed_0_NO_SHIFT_REG | ~(local_bb6_var__u38_stall_in)) & local_bb6_var__u39_stall_local_fanout);
		local_bb6_var__u39_consumed_0_NO_SHIFT_REG <= (local_bb6_var__u39_fu_valid_out_and & (local_bb6_var__u39_consumed_0_NO_SHIFT_REG | ~(local_bb6_var__u39_stall_in)) & local_bb6_var__u39_stall_local_fanout);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_63to64_B_149_0_valid_out_NO_SHIFT_REG;
 logic rnode_63to64_B_149_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_B_149_0_NO_SHIFT_REG;
 logic rnode_63to64_B_149_0_reg_64_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_B_149_0_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_B_149_0_valid_out_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_B_149_0_stall_in_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_B_149_0_stall_out_reg_64_NO_SHIFT_REG;

acl_data_fifo rnode_63to64_B_149_0_reg_64_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_63to64_B_149_0_reg_64_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_63to64_B_149_0_stall_in_reg_64_NO_SHIFT_REG),
	.valid_out(rnode_63to64_B_149_0_valid_out_reg_64_NO_SHIFT_REG),
	.stall_out(rnode_63to64_B_149_0_stall_out_reg_64_NO_SHIFT_REG),
	.data_in(rnode_1to63_B_149_0_NO_SHIFT_REG),
	.data_out(rnode_63to64_B_149_0_reg_64_NO_SHIFT_REG)
);

defparam rnode_63to64_B_149_0_reg_64_fifo.DEPTH = 2;
defparam rnode_63to64_B_149_0_reg_64_fifo.DATA_WIDTH = 32;
defparam rnode_63to64_B_149_0_reg_64_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_63to64_B_149_0_reg_64_fifo.IMPL = "ll_reg";

assign rnode_63to64_B_149_0_reg_64_inputs_ready_NO_SHIFT_REG = rnode_1to63_B_149_0_valid_out_NO_SHIFT_REG;
assign rnode_1to63_B_149_0_stall_in_NO_SHIFT_REG = rnode_63to64_B_149_0_stall_out_reg_64_NO_SHIFT_REG;
assign rnode_63to64_B_149_0_NO_SHIFT_REG = rnode_63to64_B_149_0_reg_64_NO_SHIFT_REG;
assign rnode_63to64_B_149_0_stall_in_reg_64_NO_SHIFT_REG = rnode_63to64_B_149_0_stall_in_NO_SHIFT_REG;
assign rnode_63to64_B_149_0_valid_out_NO_SHIFT_REG = rnode_63to64_B_149_0_valid_out_reg_64_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_63to64_A_150_0_valid_out_NO_SHIFT_REG;
 logic rnode_63to64_A_150_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_A_150_0_NO_SHIFT_REG;
 logic rnode_63to64_A_150_0_reg_64_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_A_150_0_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_A_150_0_valid_out_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_A_150_0_stall_in_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_A_150_0_stall_out_reg_64_NO_SHIFT_REG;

acl_data_fifo rnode_63to64_A_150_0_reg_64_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_63to64_A_150_0_reg_64_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_63to64_A_150_0_stall_in_reg_64_NO_SHIFT_REG),
	.valid_out(rnode_63to64_A_150_0_valid_out_reg_64_NO_SHIFT_REG),
	.stall_out(rnode_63to64_A_150_0_stall_out_reg_64_NO_SHIFT_REG),
	.data_in(rnode_1to63_A_150_0_NO_SHIFT_REG),
	.data_out(rnode_63to64_A_150_0_reg_64_NO_SHIFT_REG)
);

defparam rnode_63to64_A_150_0_reg_64_fifo.DEPTH = 2;
defparam rnode_63to64_A_150_0_reg_64_fifo.DATA_WIDTH = 32;
defparam rnode_63to64_A_150_0_reg_64_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_63to64_A_150_0_reg_64_fifo.IMPL = "ll_reg";

assign rnode_63to64_A_150_0_reg_64_inputs_ready_NO_SHIFT_REG = rnode_1to63_A_150_0_valid_out_NO_SHIFT_REG;
assign rnode_1to63_A_150_0_stall_in_NO_SHIFT_REG = rnode_63to64_A_150_0_stall_out_reg_64_NO_SHIFT_REG;
assign rnode_63to64_A_150_0_NO_SHIFT_REG = rnode_63to64_A_150_0_reg_64_NO_SHIFT_REG;
assign rnode_63to64_A_150_0_stall_in_reg_64_NO_SHIFT_REG = rnode_63to64_A_150_0_stall_in_NO_SHIFT_REG;
assign rnode_63to64_A_150_0_valid_out_NO_SHIFT_REG = rnode_63to64_A_150_0_valid_out_reg_64_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_valid_out_NO_SHIFT_REG;
 logic rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_stall_in_NO_SHIFT_REG;
 logic rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_reg_63_fifo.DEPTH = 2;
defparam rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_reg_63_fifo.DATA_WIDTH = 0;
defparam rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_reg_63_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_reg_63_fifo.IMPL = "ll_reg";

assign rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_reg_63_inputs_ready_NO_SHIFT_REG = rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_valid_out_NO_SHIFT_REG;
assign rnode_1to62_bb6_keep_going14_acl_pipeline_1_0_stall_in_NO_SHIFT_REG = rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_stall_out_reg_63_NO_SHIFT_REG;
assign rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_stall_in_reg_63_NO_SHIFT_REG = rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_stall_in_NO_SHIFT_REG;
assign rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_valid_out_NO_SHIFT_REG = rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_valid_out_reg_63_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_63to64_var__0_valid_out_NO_SHIFT_REG;
 logic rnode_63to64_var__0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_var__0_NO_SHIFT_REG;
 logic rnode_63to64_var__0_reg_64_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_var__0_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_var__0_valid_out_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_var__0_stall_in_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_var__0_stall_out_reg_64_NO_SHIFT_REG;

acl_data_fifo rnode_63to64_var__0_reg_64_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_63to64_var__0_reg_64_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_63to64_var__0_stall_in_reg_64_NO_SHIFT_REG),
	.valid_out(rnode_63to64_var__0_valid_out_reg_64_NO_SHIFT_REG),
	.stall_out(rnode_63to64_var__0_stall_out_reg_64_NO_SHIFT_REG),
	.data_in(rnode_1to63_var__0_NO_SHIFT_REG),
	.data_out(rnode_63to64_var__0_reg_64_NO_SHIFT_REG)
);

defparam rnode_63to64_var__0_reg_64_fifo.DEPTH = 2;
defparam rnode_63to64_var__0_reg_64_fifo.DATA_WIDTH = 32;
defparam rnode_63to64_var__0_reg_64_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_63to64_var__0_reg_64_fifo.IMPL = "ll_reg";

assign rnode_63to64_var__0_reg_64_inputs_ready_NO_SHIFT_REG = rnode_1to63_var__0_valid_out_NO_SHIFT_REG;
assign rnode_1to63_var__0_stall_in_NO_SHIFT_REG = rnode_63to64_var__0_stall_out_reg_64_NO_SHIFT_REG;
assign rnode_63to64_var__0_NO_SHIFT_REG = rnode_63to64_var__0_reg_64_NO_SHIFT_REG;
assign rnode_63to64_var__0_stall_in_reg_64_NO_SHIFT_REG = rnode_63to64_var__0_stall_in_NO_SHIFT_REG;
assign rnode_63to64_var__0_valid_out_NO_SHIFT_REG = rnode_63to64_var__0_valid_out_reg_64_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_63to64_var__u36_0_valid_out_NO_SHIFT_REG;
 logic rnode_63to64_var__u36_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_var__u36_0_NO_SHIFT_REG;
 logic rnode_63to64_var__u36_0_reg_64_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_var__u36_0_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_var__u36_0_valid_out_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_var__u36_0_stall_in_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_var__u36_0_stall_out_reg_64_NO_SHIFT_REG;

acl_data_fifo rnode_63to64_var__u36_0_reg_64_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_63to64_var__u36_0_reg_64_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_63to64_var__u36_0_stall_in_reg_64_NO_SHIFT_REG),
	.valid_out(rnode_63to64_var__u36_0_valid_out_reg_64_NO_SHIFT_REG),
	.stall_out(rnode_63to64_var__u36_0_stall_out_reg_64_NO_SHIFT_REG),
	.data_in(rnode_1to63_var__u36_0_NO_SHIFT_REG),
	.data_out(rnode_63to64_var__u36_0_reg_64_NO_SHIFT_REG)
);

defparam rnode_63to64_var__u36_0_reg_64_fifo.DEPTH = 2;
defparam rnode_63to64_var__u36_0_reg_64_fifo.DATA_WIDTH = 32;
defparam rnode_63to64_var__u36_0_reg_64_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_63to64_var__u36_0_reg_64_fifo.IMPL = "ll_reg";

assign rnode_63to64_var__u36_0_reg_64_inputs_ready_NO_SHIFT_REG = rnode_1to63_var__u36_0_valid_out_NO_SHIFT_REG;
assign rnode_1to63_var__u36_0_stall_in_NO_SHIFT_REG = rnode_63to64_var__u36_0_stall_out_reg_64_NO_SHIFT_REG;
assign rnode_63to64_var__u36_0_NO_SHIFT_REG = rnode_63to64_var__u36_0_reg_64_NO_SHIFT_REG;
assign rnode_63to64_var__u36_0_stall_in_reg_64_NO_SHIFT_REG = rnode_63to64_var__u36_0_stall_in_NO_SHIFT_REG;
assign rnode_63to64_var__u36_0_valid_out_NO_SHIFT_REG = rnode_63to64_var__u36_0_valid_out_reg_64_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_63to64_select10817_0_valid_out_NO_SHIFT_REG;
 logic rnode_63to64_select10817_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_select10817_0_NO_SHIFT_REG;
 logic rnode_63to64_select10817_0_reg_64_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_select10817_0_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_select10817_0_valid_out_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_select10817_0_stall_in_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_select10817_0_stall_out_reg_64_NO_SHIFT_REG;

acl_data_fifo rnode_63to64_select10817_0_reg_64_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_63to64_select10817_0_reg_64_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_63to64_select10817_0_stall_in_reg_64_NO_SHIFT_REG),
	.valid_out(rnode_63to64_select10817_0_valid_out_reg_64_NO_SHIFT_REG),
	.stall_out(rnode_63to64_select10817_0_stall_out_reg_64_NO_SHIFT_REG),
	.data_in(rnode_1to63_select10817_0_NO_SHIFT_REG),
	.data_out(rnode_63to64_select10817_0_reg_64_NO_SHIFT_REG)
);

defparam rnode_63to64_select10817_0_reg_64_fifo.DEPTH = 2;
defparam rnode_63to64_select10817_0_reg_64_fifo.DATA_WIDTH = 32;
defparam rnode_63to64_select10817_0_reg_64_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_63to64_select10817_0_reg_64_fifo.IMPL = "ll_reg";

assign rnode_63to64_select10817_0_reg_64_inputs_ready_NO_SHIFT_REG = rnode_1to63_select10817_0_valid_out_NO_SHIFT_REG;
assign rnode_1to63_select10817_0_stall_in_NO_SHIFT_REG = rnode_63to64_select10817_0_stall_out_reg_64_NO_SHIFT_REG;
assign rnode_63to64_select10817_0_NO_SHIFT_REG = rnode_63to64_select10817_0_reg_64_NO_SHIFT_REG;
assign rnode_63to64_select10817_0_stall_in_reg_64_NO_SHIFT_REG = rnode_63to64_select10817_0_stall_in_NO_SHIFT_REG;
assign rnode_63to64_select10817_0_valid_out_NO_SHIFT_REG = rnode_63to64_select10817_0_valid_out_reg_64_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb6_memdep_phi_pop15_acl_pop_i1_0_inputs_ready;
 reg local_bb6_memdep_phi_pop15_acl_pop_i1_0_valid_out_NO_SHIFT_REG;
wire local_bb6_memdep_phi_pop15_acl_pop_i1_0_stall_in;
wire local_bb6_memdep_phi_pop15_acl_pop_i1_0_output_regs_ready;
wire local_bb6_memdep_phi_pop15_acl_pop_i1_0_result;
wire local_bb6_memdep_phi_pop15_acl_pop_i1_0_fu_valid_out;
wire local_bb6_memdep_phi_pop15_acl_pop_i1_0_fu_stall_out;
 reg local_bb6_memdep_phi_pop15_acl_pop_i1_0_NO_SHIFT_REG;
wire local_bb6_memdep_phi_pop15_acl_pop_i1_0_causedstall;

acl_pop local_bb6_memdep_phi_pop15_acl_pop_i1_0_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_forked_0_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(1'b0),
	.stall_out(local_bb6_memdep_phi_pop15_acl_pop_i1_0_fu_stall_out),
	.valid_in(local_bb6_memdep_phi_pop15_acl_pop_i1_0_inputs_ready),
	.valid_out(local_bb6_memdep_phi_pop15_acl_pop_i1_0_fu_valid_out),
	.stall_in(~(local_bb6_memdep_phi_pop15_acl_pop_i1_0_output_regs_ready)),
	.data_out(local_bb6_memdep_phi_pop15_acl_pop_i1_0_result),
	.feedback_in(feedback_data_in_15),
	.feedback_valid_in(feedback_valid_in_15),
	.feedback_stall_out(feedback_stall_out_15)
);

defparam local_bb6_memdep_phi_pop15_acl_pop_i1_0_feedback.DATA_WIDTH = 1;
defparam local_bb6_memdep_phi_pop15_acl_pop_i1_0_feedback.STYLE = "REGULAR";

assign local_bb6_memdep_phi_pop15_acl_pop_i1_0_inputs_ready = rnode_1to2_forked_0_valid_out_0_NO_SHIFT_REG;
assign local_bb6_memdep_phi_pop15_acl_pop_i1_0_output_regs_ready = (&(~(local_bb6_memdep_phi_pop15_acl_pop_i1_0_valid_out_NO_SHIFT_REG) | ~(local_bb6_memdep_phi_pop15_acl_pop_i1_0_stall_in)));
assign rnode_1to2_forked_0_stall_in_0_NO_SHIFT_REG = (local_bb6_memdep_phi_pop15_acl_pop_i1_0_fu_stall_out | ~(local_bb6_memdep_phi_pop15_acl_pop_i1_0_inputs_ready));
assign local_bb6_memdep_phi_pop15_acl_pop_i1_0_causedstall = (local_bb6_memdep_phi_pop15_acl_pop_i1_0_inputs_ready && (local_bb6_memdep_phi_pop15_acl_pop_i1_0_fu_stall_out && !(~(local_bb6_memdep_phi_pop15_acl_pop_i1_0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_memdep_phi_pop15_acl_pop_i1_0_NO_SHIFT_REG <= 'x;
		local_bb6_memdep_phi_pop15_acl_pop_i1_0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_memdep_phi_pop15_acl_pop_i1_0_output_regs_ready)
		begin
			local_bb6_memdep_phi_pop15_acl_pop_i1_0_NO_SHIFT_REG <= local_bb6_memdep_phi_pop15_acl_pop_i1_0_result;
			local_bb6_memdep_phi_pop15_acl_pop_i1_0_valid_out_NO_SHIFT_REG <= local_bb6_memdep_phi_pop15_acl_pop_i1_0_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_memdep_phi_pop15_acl_pop_i1_0_stall_in))
			begin
				local_bb6_memdep_phi_pop15_acl_pop_i1_0_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_memdep_phi5_pop16_acl_pop_i1_0_inputs_ready;
 reg local_bb6_memdep_phi5_pop16_acl_pop_i1_0_valid_out_NO_SHIFT_REG;
wire local_bb6_memdep_phi5_pop16_acl_pop_i1_0_stall_in;
wire local_bb6_memdep_phi5_pop16_acl_pop_i1_0_output_regs_ready;
wire local_bb6_memdep_phi5_pop16_acl_pop_i1_0_result;
wire local_bb6_memdep_phi5_pop16_acl_pop_i1_0_fu_valid_out;
wire local_bb6_memdep_phi5_pop16_acl_pop_i1_0_fu_stall_out;
 reg local_bb6_memdep_phi5_pop16_acl_pop_i1_0_NO_SHIFT_REG;
wire local_bb6_memdep_phi5_pop16_acl_pop_i1_0_causedstall;

acl_pop local_bb6_memdep_phi5_pop16_acl_pop_i1_0_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_forked_1_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(1'b0),
	.stall_out(local_bb6_memdep_phi5_pop16_acl_pop_i1_0_fu_stall_out),
	.valid_in(local_bb6_memdep_phi5_pop16_acl_pop_i1_0_inputs_ready),
	.valid_out(local_bb6_memdep_phi5_pop16_acl_pop_i1_0_fu_valid_out),
	.stall_in(~(local_bb6_memdep_phi5_pop16_acl_pop_i1_0_output_regs_ready)),
	.data_out(local_bb6_memdep_phi5_pop16_acl_pop_i1_0_result),
	.feedback_in(feedback_data_in_16),
	.feedback_valid_in(feedback_valid_in_16),
	.feedback_stall_out(feedback_stall_out_16)
);

defparam local_bb6_memdep_phi5_pop16_acl_pop_i1_0_feedback.DATA_WIDTH = 1;
defparam local_bb6_memdep_phi5_pop16_acl_pop_i1_0_feedback.STYLE = "REGULAR";

assign local_bb6_memdep_phi5_pop16_acl_pop_i1_0_inputs_ready = rnode_1to2_forked_0_valid_out_1_NO_SHIFT_REG;
assign local_bb6_memdep_phi5_pop16_acl_pop_i1_0_output_regs_ready = (&(~(local_bb6_memdep_phi5_pop16_acl_pop_i1_0_valid_out_NO_SHIFT_REG) | ~(local_bb6_memdep_phi5_pop16_acl_pop_i1_0_stall_in)));
assign rnode_1to2_forked_0_stall_in_1_NO_SHIFT_REG = (local_bb6_memdep_phi5_pop16_acl_pop_i1_0_fu_stall_out | ~(local_bb6_memdep_phi5_pop16_acl_pop_i1_0_inputs_ready));
assign local_bb6_memdep_phi5_pop16_acl_pop_i1_0_causedstall = (local_bb6_memdep_phi5_pop16_acl_pop_i1_0_inputs_ready && (local_bb6_memdep_phi5_pop16_acl_pop_i1_0_fu_stall_out && !(~(local_bb6_memdep_phi5_pop16_acl_pop_i1_0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_memdep_phi5_pop16_acl_pop_i1_0_NO_SHIFT_REG <= 'x;
		local_bb6_memdep_phi5_pop16_acl_pop_i1_0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_memdep_phi5_pop16_acl_pop_i1_0_output_regs_ready)
		begin
			local_bb6_memdep_phi5_pop16_acl_pop_i1_0_NO_SHIFT_REG <= local_bb6_memdep_phi5_pop16_acl_pop_i1_0_result;
			local_bb6_memdep_phi5_pop16_acl_pop_i1_0_valid_out_NO_SHIFT_REG <= local_bb6_memdep_phi5_pop16_acl_pop_i1_0_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_memdep_phi5_pop16_acl_pop_i1_0_stall_in))
			begin
				local_bb6_memdep_phi5_pop16_acl_pop_i1_0_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_memdep_phi6_pop17_acl_pop_i1_0_inputs_ready;
 reg local_bb6_memdep_phi6_pop17_acl_pop_i1_0_valid_out_NO_SHIFT_REG;
wire local_bb6_memdep_phi6_pop17_acl_pop_i1_0_stall_in;
wire local_bb6_memdep_phi6_pop17_acl_pop_i1_0_output_regs_ready;
wire local_bb6_memdep_phi6_pop17_acl_pop_i1_0_result;
wire local_bb6_memdep_phi6_pop17_acl_pop_i1_0_fu_valid_out;
wire local_bb6_memdep_phi6_pop17_acl_pop_i1_0_fu_stall_out;
 reg local_bb6_memdep_phi6_pop17_acl_pop_i1_0_NO_SHIFT_REG;
wire local_bb6_memdep_phi6_pop17_acl_pop_i1_0_causedstall;

acl_pop local_bb6_memdep_phi6_pop17_acl_pop_i1_0_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_forked_2_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(1'b0),
	.stall_out(local_bb6_memdep_phi6_pop17_acl_pop_i1_0_fu_stall_out),
	.valid_in(local_bb6_memdep_phi6_pop17_acl_pop_i1_0_inputs_ready),
	.valid_out(local_bb6_memdep_phi6_pop17_acl_pop_i1_0_fu_valid_out),
	.stall_in(~(local_bb6_memdep_phi6_pop17_acl_pop_i1_0_output_regs_ready)),
	.data_out(local_bb6_memdep_phi6_pop17_acl_pop_i1_0_result),
	.feedback_in(feedback_data_in_17),
	.feedback_valid_in(feedback_valid_in_17),
	.feedback_stall_out(feedback_stall_out_17)
);

defparam local_bb6_memdep_phi6_pop17_acl_pop_i1_0_feedback.DATA_WIDTH = 1;
defparam local_bb6_memdep_phi6_pop17_acl_pop_i1_0_feedback.STYLE = "REGULAR";

assign local_bb6_memdep_phi6_pop17_acl_pop_i1_0_inputs_ready = rnode_1to2_forked_0_valid_out_2_NO_SHIFT_REG;
assign local_bb6_memdep_phi6_pop17_acl_pop_i1_0_output_regs_ready = (&(~(local_bb6_memdep_phi6_pop17_acl_pop_i1_0_valid_out_NO_SHIFT_REG) | ~(local_bb6_memdep_phi6_pop17_acl_pop_i1_0_stall_in)));
assign rnode_1to2_forked_0_stall_in_2_NO_SHIFT_REG = (local_bb6_memdep_phi6_pop17_acl_pop_i1_0_fu_stall_out | ~(local_bb6_memdep_phi6_pop17_acl_pop_i1_0_inputs_ready));
assign local_bb6_memdep_phi6_pop17_acl_pop_i1_0_causedstall = (local_bb6_memdep_phi6_pop17_acl_pop_i1_0_inputs_ready && (local_bb6_memdep_phi6_pop17_acl_pop_i1_0_fu_stall_out && !(~(local_bb6_memdep_phi6_pop17_acl_pop_i1_0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_memdep_phi6_pop17_acl_pop_i1_0_NO_SHIFT_REG <= 'x;
		local_bb6_memdep_phi6_pop17_acl_pop_i1_0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_memdep_phi6_pop17_acl_pop_i1_0_output_regs_ready)
		begin
			local_bb6_memdep_phi6_pop17_acl_pop_i1_0_NO_SHIFT_REG <= local_bb6_memdep_phi6_pop17_acl_pop_i1_0_result;
			local_bb6_memdep_phi6_pop17_acl_pop_i1_0_valid_out_NO_SHIFT_REG <= local_bb6_memdep_phi6_pop17_acl_pop_i1_0_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_memdep_phi6_pop17_acl_pop_i1_0_stall_in))
			begin
				local_bb6_memdep_phi6_pop17_acl_pop_i1_0_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_memdep_phi7_pop18_acl_pop_i1_0_inputs_ready;
 reg local_bb6_memdep_phi7_pop18_acl_pop_i1_0_valid_out_NO_SHIFT_REG;
wire local_bb6_memdep_phi7_pop18_acl_pop_i1_0_stall_in;
wire local_bb6_memdep_phi7_pop18_acl_pop_i1_0_output_regs_ready;
wire local_bb6_memdep_phi7_pop18_acl_pop_i1_0_result;
wire local_bb6_memdep_phi7_pop18_acl_pop_i1_0_fu_valid_out;
wire local_bb6_memdep_phi7_pop18_acl_pop_i1_0_fu_stall_out;
 reg local_bb6_memdep_phi7_pop18_acl_pop_i1_0_NO_SHIFT_REG;
wire local_bb6_memdep_phi7_pop18_acl_pop_i1_0_causedstall;

acl_pop local_bb6_memdep_phi7_pop18_acl_pop_i1_0_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_1to2_forked_3_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(1'b0),
	.stall_out(local_bb6_memdep_phi7_pop18_acl_pop_i1_0_fu_stall_out),
	.valid_in(local_bb6_memdep_phi7_pop18_acl_pop_i1_0_inputs_ready),
	.valid_out(local_bb6_memdep_phi7_pop18_acl_pop_i1_0_fu_valid_out),
	.stall_in(~(local_bb6_memdep_phi7_pop18_acl_pop_i1_0_output_regs_ready)),
	.data_out(local_bb6_memdep_phi7_pop18_acl_pop_i1_0_result),
	.feedback_in(feedback_data_in_18),
	.feedback_valid_in(feedback_valid_in_18),
	.feedback_stall_out(feedback_stall_out_18)
);

defparam local_bb6_memdep_phi7_pop18_acl_pop_i1_0_feedback.DATA_WIDTH = 1;
defparam local_bb6_memdep_phi7_pop18_acl_pop_i1_0_feedback.STYLE = "REGULAR";

assign local_bb6_memdep_phi7_pop18_acl_pop_i1_0_inputs_ready = rnode_1to2_forked_0_valid_out_3_NO_SHIFT_REG;
assign local_bb6_memdep_phi7_pop18_acl_pop_i1_0_output_regs_ready = (&(~(local_bb6_memdep_phi7_pop18_acl_pop_i1_0_valid_out_NO_SHIFT_REG) | ~(local_bb6_memdep_phi7_pop18_acl_pop_i1_0_stall_in)));
assign rnode_1to2_forked_0_stall_in_3_NO_SHIFT_REG = (local_bb6_memdep_phi7_pop18_acl_pop_i1_0_fu_stall_out | ~(local_bb6_memdep_phi7_pop18_acl_pop_i1_0_inputs_ready));
assign local_bb6_memdep_phi7_pop18_acl_pop_i1_0_causedstall = (local_bb6_memdep_phi7_pop18_acl_pop_i1_0_inputs_ready && (local_bb6_memdep_phi7_pop18_acl_pop_i1_0_fu_stall_out && !(~(local_bb6_memdep_phi7_pop18_acl_pop_i1_0_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_memdep_phi7_pop18_acl_pop_i1_0_NO_SHIFT_REG <= 'x;
		local_bb6_memdep_phi7_pop18_acl_pop_i1_0_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_memdep_phi7_pop18_acl_pop_i1_0_output_regs_ready)
		begin
			local_bb6_memdep_phi7_pop18_acl_pop_i1_0_NO_SHIFT_REG <= local_bb6_memdep_phi7_pop18_acl_pop_i1_0_result;
			local_bb6_memdep_phi7_pop18_acl_pop_i1_0_valid_out_NO_SHIFT_REG <= local_bb6_memdep_phi7_pop18_acl_pop_i1_0_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_memdep_phi7_pop18_acl_pop_i1_0_stall_in))
			begin
				local_bb6_memdep_phi7_pop18_acl_pop_i1_0_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 60
//  * capacity = 60
 logic rnode_2to62_forked_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to62_forked_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to62_forked_0_NO_SHIFT_REG;
 logic rnode_2to62_forked_0_reg_62_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to62_forked_0_reg_62_NO_SHIFT_REG;
 logic rnode_2to62_forked_0_valid_out_reg_62_NO_SHIFT_REG;
 logic rnode_2to62_forked_0_stall_in_reg_62_NO_SHIFT_REG;
 logic rnode_2to62_forked_0_stall_out_reg_62_NO_SHIFT_REG;

acl_data_fifo rnode_2to62_forked_0_reg_62_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to62_forked_0_reg_62_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to62_forked_0_stall_in_reg_62_NO_SHIFT_REG),
	.valid_out(rnode_2to62_forked_0_valid_out_reg_62_NO_SHIFT_REG),
	.stall_out(rnode_2to62_forked_0_stall_out_reg_62_NO_SHIFT_REG),
	.data_in(rnode_1to2_forked_4_NO_SHIFT_REG),
	.data_out(rnode_2to62_forked_0_reg_62_NO_SHIFT_REG)
);

defparam rnode_2to62_forked_0_reg_62_fifo.DEPTH = 61;
defparam rnode_2to62_forked_0_reg_62_fifo.DATA_WIDTH = 1;
defparam rnode_2to62_forked_0_reg_62_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to62_forked_0_reg_62_fifo.IMPL = "ram";

assign rnode_2to62_forked_0_reg_62_inputs_ready_NO_SHIFT_REG = rnode_1to2_forked_0_valid_out_4_NO_SHIFT_REG;
assign rnode_1to2_forked_0_stall_in_4_NO_SHIFT_REG = rnode_2to62_forked_0_stall_out_reg_62_NO_SHIFT_REG;
assign rnode_2to62_forked_0_NO_SHIFT_REG = rnode_2to62_forked_0_reg_62_NO_SHIFT_REG;
assign rnode_2to62_forked_0_stall_in_reg_62_NO_SHIFT_REG = rnode_2to62_forked_0_stall_in_NO_SHIFT_REG;
assign rnode_2to62_forked_0_valid_out_NO_SHIFT_REG = rnode_2to62_forked_0_valid_out_reg_62_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_NO_SHIFT_REG;
 logic rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_1_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_1_NO_SHIFT_REG;
 logic rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_out_reg_2_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_NO_SHIFT_REG),
	.valid_in(rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.data_out(rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_NO_SHIFT_REG_fa),
	.valid_out({rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_NO_SHIFT_REG, rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_1_NO_SHIFT_REG}),
	.stall_in({rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_NO_SHIFT_REG, rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_1_NO_SHIFT_REG})
);

defparam rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_fanout_adaptor.DATA_WIDTH = 64;
defparam rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_fanout_adaptor.NUM_FANOUTS = 2;

acl_data_fifo rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb6_indvars_iv56_pop6_acl_pop_i64_0),
	.data_out(rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_fifo.DATA_WIDTH = 64;
defparam rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb6_indvars_iv56_pop6_acl_pop_i64_0_valid_out_4;
assign local_bb6_indvars_iv56_pop6_acl_pop_i64_0_stall_in_4 = rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_NO_SHIFT_REG = rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_NO_SHIFT_REG_fa;
assign rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_1_NO_SHIFT_REG = rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_2_NO_SHIFT_REG_fa;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb6_var__0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb6_var__0_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb6_var__0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb6_var__0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb6_var__0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb6_var__0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb6_var__0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb6_var__0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb6_var_),
	.data_out(rnode_1to2_bb6_var__0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb6_var__0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_bb6_var__0_reg_2_fifo.DATA_WIDTH = 64;
defparam rnode_1to2_bb6_var__0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_bb6_var__0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb6_var__0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb6_var__valid_out;
assign local_bb6_var__stall_in = rnode_1to2_bb6_var__0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb6_var__0_NO_SHIFT_REG = rnode_1to2_bb6_var__0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb6_var__0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_bb6_var__0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_bb6_var__0_valid_out_NO_SHIFT_REG = rnode_1to2_bb6_var__0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb6_var__u37_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u37_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb6_var__u37_0_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u37_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb6_var__u37_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u37_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u37_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u37_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb6_var__u37_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb6_var__u37_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb6_var__u37_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb6_var__u37_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb6_var__u37_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb6_var__u37),
	.data_out(rnode_1to2_bb6_var__u37_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb6_var__u37_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_bb6_var__u37_0_reg_2_fifo.DATA_WIDTH = 64;
defparam rnode_1to2_bb6_var__u37_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_bb6_var__u37_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb6_var__u37_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb6_var__u37_valid_out;
assign local_bb6_var__u37_stall_in = rnode_1to2_bb6_var__u37_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb6_var__u37_0_NO_SHIFT_REG = rnode_1to2_bb6_var__u37_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb6_var__u37_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_bb6_var__u37_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_bb6_var__u37_0_valid_out_NO_SHIFT_REG = rnode_1to2_bb6_var__u37_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb6_var__u38_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u38_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb6_var__u38_0_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u38_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb6_var__u38_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u38_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u38_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u38_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb6_var__u38_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb6_var__u38_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb6_var__u38_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb6_var__u38_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb6_var__u38_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb6_var__u38),
	.data_out(rnode_1to2_bb6_var__u38_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb6_var__u38_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_bb6_var__u38_0_reg_2_fifo.DATA_WIDTH = 64;
defparam rnode_1to2_bb6_var__u38_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_bb6_var__u38_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb6_var__u38_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb6_var__u38_valid_out;
assign local_bb6_var__u38_stall_in = rnode_1to2_bb6_var__u38_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb6_var__u38_0_NO_SHIFT_REG = rnode_1to2_bb6_var__u38_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb6_var__u38_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_bb6_var__u38_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_bb6_var__u38_0_valid_out_NO_SHIFT_REG = rnode_1to2_bb6_var__u38_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb6_var__u39_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u39_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb6_var__u39_0_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u39_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_1to2_bb6_var__u39_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u39_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u39_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb6_var__u39_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_bb6_var__u39_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb6_var__u39_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb6_var__u39_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb6_var__u39_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb6_var__u39_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb6_var__u39),
	.data_out(rnode_1to2_bb6_var__u39_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb6_var__u39_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_bb6_var__u39_0_reg_2_fifo.DATA_WIDTH = 64;
defparam rnode_1to2_bb6_var__u39_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_bb6_var__u39_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb6_var__u39_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb6_var__u39_valid_out;
assign local_bb6_var__u39_stall_in = rnode_1to2_bb6_var__u39_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb6_var__u39_0_NO_SHIFT_REG = rnode_1to2_bb6_var__u39_0_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb6_var__u39_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_bb6_var__u39_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_bb6_var__u39_0_valid_out_NO_SHIFT_REG = rnode_1to2_bb6_var__u39_0_valid_out_reg_2_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb6_keep_going14_acl_pipeline_1_inputs_ready;
 reg local_bb6_keep_going14_acl_pipeline_1_valid_out_NO_SHIFT_REG;
wire local_bb6_keep_going14_acl_pipeline_1_stall_in;
wire local_bb6_keep_going14_acl_pipeline_1_output_regs_ready;
wire local_bb6_keep_going14_acl_pipeline_1_keep_going;
wire local_bb6_keep_going14_acl_pipeline_1_fu_valid_out;
wire local_bb6_keep_going14_acl_pipeline_1_fu_stall_out;
 reg local_bb6_keep_going14_acl_pipeline_1_NO_SHIFT_REG;
wire local_bb6_keep_going14_acl_pipeline_1_feedback_pipelined;
wire local_bb6_keep_going14_acl_pipeline_1_causedstall;

acl_pipeline local_bb6_keep_going14_acl_pipeline_1_pipelined (
	.clock(clock),
	.resetn(resetn),
	.data_in(1'b1),
	.stall_out(local_bb6_keep_going14_acl_pipeline_1_fu_stall_out),
	.valid_in(local_bb6_keep_going14_acl_pipeline_1_inputs_ready),
	.valid_out(local_bb6_keep_going14_acl_pipeline_1_fu_valid_out),
	.stall_in(~(local_bb6_keep_going14_acl_pipeline_1_output_regs_ready)),
	.data_out(local_bb6_keep_going14_acl_pipeline_1_keep_going),
	.initeration_in(1'b0),
	.initeration_valid_in(1'b0),
	.initeration_stall_out(feedback_stall_out_4),
	.not_exitcond_in(feedback_data_in_5),
	.not_exitcond_valid_in(feedback_valid_in_5),
	.not_exitcond_stall_out(feedback_stall_out_5),
	.pipeline_valid_out(acl_pipelined_valid),
	.pipeline_stall_in(acl_pipelined_stall),
	.exiting_valid_out(acl_pipelined_exiting_valid)
);

defparam local_bb6_keep_going14_acl_pipeline_1_pipelined.FIFO_DEPTH = 0;
defparam local_bb6_keep_going14_acl_pipeline_1_pipelined.STYLE = "NON_SPECULATIVE";

assign local_bb6_keep_going14_acl_pipeline_1_inputs_ready = rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_valid_out_NO_SHIFT_REG;
assign local_bb6_keep_going14_acl_pipeline_1_output_regs_ready = (&(~(local_bb6_keep_going14_acl_pipeline_1_valid_out_NO_SHIFT_REG) | ~(local_bb6_keep_going14_acl_pipeline_1_stall_in)));
assign acl_pipelined_exiting_stall = acl_pipelined_stall;
assign rnode_62to63_bb6_keep_going14_acl_pipeline_1_0_stall_in_NO_SHIFT_REG = (local_bb6_keep_going14_acl_pipeline_1_fu_stall_out | ~(local_bb6_keep_going14_acl_pipeline_1_inputs_ready));
assign local_bb6_keep_going14_acl_pipeline_1_causedstall = (local_bb6_keep_going14_acl_pipeline_1_inputs_ready && (local_bb6_keep_going14_acl_pipeline_1_fu_stall_out && !(~(local_bb6_keep_going14_acl_pipeline_1_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_keep_going14_acl_pipeline_1_NO_SHIFT_REG <= 'x;
		local_bb6_keep_going14_acl_pipeline_1_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_keep_going14_acl_pipeline_1_output_regs_ready)
		begin
			local_bb6_keep_going14_acl_pipeline_1_NO_SHIFT_REG <= local_bb6_keep_going14_acl_pipeline_1_keep_going;
			local_bb6_keep_going14_acl_pipeline_1_valid_out_NO_SHIFT_REG <= local_bb6_keep_going14_acl_pipeline_1_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_keep_going14_acl_pipeline_1_stall_in))
			begin
				local_bb6_keep_going14_acl_pipeline_1_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_valid_out;
wire rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_stall_in;
wire rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_inputs_ready;
wire rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_stall_local;
 reg rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_staging_valid_NO_SHIFT_REG;
wire rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_combined_valid;
 reg rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_staging_reg_NO_SHIFT_REG;
wire rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0;

assign rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_inputs_ready = local_bb6_memdep_phi_pop15_acl_pop_i1_0_valid_out_NO_SHIFT_REG;
assign rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0 = (rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_staging_valid_NO_SHIFT_REG ? rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_staging_reg_NO_SHIFT_REG : local_bb6_memdep_phi_pop15_acl_pop_i1_0_NO_SHIFT_REG);
assign rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_combined_valid = (rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_staging_valid_NO_SHIFT_REG | rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_inputs_ready);
assign rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_valid_out = rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_combined_valid;
assign rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_stall_local = rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_stall_in;
assign local_bb6_memdep_phi_pop15_acl_pop_i1_0_stall_in = (|rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_stall_local)
		begin
			if (~(rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_staging_valid_NO_SHIFT_REG))
			begin
				rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_staging_valid_NO_SHIFT_REG <= rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_inputs_ready;
			end
		end
		else
		begin
			rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_staging_valid_NO_SHIFT_REG))
		begin
			rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_staging_reg_NO_SHIFT_REG <= local_bb6_memdep_phi_pop15_acl_pop_i1_0_NO_SHIFT_REG;
		end
	end
end


// This section implements a staging register.
// 
wire rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_valid_out;
wire rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_stall_in;
wire rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_inputs_ready;
wire rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_stall_local;
 reg rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_staging_valid_NO_SHIFT_REG;
wire rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_combined_valid;
 reg rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_staging_reg_NO_SHIFT_REG;
wire rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0;

assign rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_inputs_ready = local_bb6_memdep_phi5_pop16_acl_pop_i1_0_valid_out_NO_SHIFT_REG;
assign rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0 = (rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_staging_valid_NO_SHIFT_REG ? rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_staging_reg_NO_SHIFT_REG : local_bb6_memdep_phi5_pop16_acl_pop_i1_0_NO_SHIFT_REG);
assign rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_combined_valid = (rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_staging_valid_NO_SHIFT_REG | rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_inputs_ready);
assign rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_valid_out = rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_combined_valid;
assign rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_stall_local = rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_stall_in;
assign local_bb6_memdep_phi5_pop16_acl_pop_i1_0_stall_in = (|rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_stall_local)
		begin
			if (~(rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_staging_valid_NO_SHIFT_REG))
			begin
				rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_staging_valid_NO_SHIFT_REG <= rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_inputs_ready;
			end
		end
		else
		begin
			rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_staging_valid_NO_SHIFT_REG))
		begin
			rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_staging_reg_NO_SHIFT_REG <= local_bb6_memdep_phi5_pop16_acl_pop_i1_0_NO_SHIFT_REG;
		end
	end
end


// This section implements a staging register.
// 
wire rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_valid_out;
wire rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_stall_in;
wire rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_inputs_ready;
wire rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_stall_local;
 reg rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_staging_valid_NO_SHIFT_REG;
wire rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_combined_valid;
 reg rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_staging_reg_NO_SHIFT_REG;
wire rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0;

assign rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_inputs_ready = local_bb6_memdep_phi6_pop17_acl_pop_i1_0_valid_out_NO_SHIFT_REG;
assign rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0 = (rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_staging_valid_NO_SHIFT_REG ? rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_staging_reg_NO_SHIFT_REG : local_bb6_memdep_phi6_pop17_acl_pop_i1_0_NO_SHIFT_REG);
assign rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_combined_valid = (rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_staging_valid_NO_SHIFT_REG | rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_inputs_ready);
assign rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_valid_out = rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_combined_valid;
assign rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_stall_local = rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_stall_in;
assign local_bb6_memdep_phi6_pop17_acl_pop_i1_0_stall_in = (|rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_stall_local)
		begin
			if (~(rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_staging_valid_NO_SHIFT_REG))
			begin
				rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_staging_valid_NO_SHIFT_REG <= rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_inputs_ready;
			end
		end
		else
		begin
			rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_staging_valid_NO_SHIFT_REG))
		begin
			rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_staging_reg_NO_SHIFT_REG <= local_bb6_memdep_phi6_pop17_acl_pop_i1_0_NO_SHIFT_REG;
		end
	end
end


// This section implements a staging register.
// 
wire rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_valid_out;
wire rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_stall_in;
wire rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_inputs_ready;
wire rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_stall_local;
 reg rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_staging_valid_NO_SHIFT_REG;
wire rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_combined_valid;
 reg rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_staging_reg_NO_SHIFT_REG;
wire rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0;

assign rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_inputs_ready = local_bb6_memdep_phi7_pop18_acl_pop_i1_0_valid_out_NO_SHIFT_REG;
assign rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0 = (rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_staging_valid_NO_SHIFT_REG ? rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_staging_reg_NO_SHIFT_REG : local_bb6_memdep_phi7_pop18_acl_pop_i1_0_NO_SHIFT_REG);
assign rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_combined_valid = (rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_staging_valid_NO_SHIFT_REG | rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_inputs_ready);
assign rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_valid_out = rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_combined_valid;
assign rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_stall_local = rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_stall_in;
assign local_bb6_memdep_phi7_pop18_acl_pop_i1_0_stall_in = (|rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_stall_local)
		begin
			if (~(rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_staging_valid_NO_SHIFT_REG))
			begin
				rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_staging_valid_NO_SHIFT_REG <= rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_inputs_ready;
			end
		end
		else
		begin
			rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_staging_valid_NO_SHIFT_REG))
		begin
			rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_staging_reg_NO_SHIFT_REG <= local_bb6_memdep_phi7_pop18_acl_pop_i1_0_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_62to63_forked_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_62to63_forked_1_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_62to63_forked_2_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_stall_in_3_NO_SHIFT_REG;
 logic rnode_62to63_forked_3_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_valid_out_4_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_stall_in_4_NO_SHIFT_REG;
 logic rnode_62to63_forked_4_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_valid_out_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_stall_in_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_stall_out_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_forked_0_reg_63_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_62to63_forked_0_reg_63_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_62to63_forked_0_reg_63_NO_SHIFT_REG),
	.valid_in(rnode_62to63_forked_0_valid_out_0_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_62to63_forked_0_stall_in_0_reg_63_NO_SHIFT_REG),
	.data_out(rnode_62to63_forked_0_reg_63_NO_SHIFT_REG_fa),
	.valid_out({rnode_62to63_forked_0_valid_out_0_NO_SHIFT_REG, rnode_62to63_forked_0_valid_out_1_NO_SHIFT_REG, rnode_62to63_forked_0_valid_out_2_NO_SHIFT_REG, rnode_62to63_forked_0_valid_out_3_NO_SHIFT_REG, rnode_62to63_forked_0_valid_out_4_NO_SHIFT_REG}),
	.stall_in({rnode_62to63_forked_0_stall_in_0_NO_SHIFT_REG, rnode_62to63_forked_0_stall_in_1_NO_SHIFT_REG, rnode_62to63_forked_0_stall_in_2_NO_SHIFT_REG, rnode_62to63_forked_0_stall_in_3_NO_SHIFT_REG, rnode_62to63_forked_0_stall_in_4_NO_SHIFT_REG})
);

defparam rnode_62to63_forked_0_reg_63_fanout_adaptor.DATA_WIDTH = 1;
defparam rnode_62to63_forked_0_reg_63_fanout_adaptor.NUM_FANOUTS = 5;

acl_data_fifo rnode_62to63_forked_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_62to63_forked_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_62to63_forked_0_stall_in_0_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_62to63_forked_0_valid_out_0_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_62to63_forked_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(rnode_2to62_forked_0_NO_SHIFT_REG),
	.data_out(rnode_62to63_forked_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_62to63_forked_0_reg_63_fifo.DEPTH = 2;
defparam rnode_62to63_forked_0_reg_63_fifo.DATA_WIDTH = 1;
defparam rnode_62to63_forked_0_reg_63_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_62to63_forked_0_reg_63_fifo.IMPL = "ll_reg";

assign rnode_62to63_forked_0_reg_63_inputs_ready_NO_SHIFT_REG = rnode_2to62_forked_0_valid_out_NO_SHIFT_REG;
assign rnode_2to62_forked_0_stall_in_NO_SHIFT_REG = rnode_62to63_forked_0_stall_out_reg_63_NO_SHIFT_REG;
assign rnode_62to63_forked_0_NO_SHIFT_REG = rnode_62to63_forked_0_reg_63_NO_SHIFT_REG_fa;
assign rnode_62to63_forked_1_NO_SHIFT_REG = rnode_62to63_forked_0_reg_63_NO_SHIFT_REG_fa;
assign rnode_62to63_forked_2_NO_SHIFT_REG = rnode_62to63_forked_0_reg_63_NO_SHIFT_REG_fa;
assign rnode_62to63_forked_3_NO_SHIFT_REG = rnode_62to63_forked_0_reg_63_NO_SHIFT_REG_fa;
assign rnode_62to63_forked_4_NO_SHIFT_REG = rnode_62to63_forked_0_reg_63_NO_SHIFT_REG_fa;

// This section implements an unregistered operation.
// 
wire local_bb6_indvars_iv_next57_stall_local;
wire [63:0] local_bb6_indvars_iv_next57;

assign local_bb6_indvars_iv_next57 = (rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_NO_SHIFT_REG + 64'h1);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_NO_SHIFT_REG;
 logic [63:0] rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_NO_SHIFT_REG;
 logic rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_1_NO_SHIFT_REG;
 logic [63:0] rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_1_NO_SHIFT_REG;
 logic rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_reg_3_NO_SHIFT_REG;
 logic rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_out_reg_3_NO_SHIFT_REG;
 logic [63:0] rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_NO_SHIFT_REG),
	.valid_in(rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_NO_SHIFT_REG_fa),
	.valid_out({rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_NO_SHIFT_REG, rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_1_NO_SHIFT_REG}),
	.stall_in({rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_NO_SHIFT_REG, rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_1_NO_SHIFT_REG})
);

defparam rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_fanout_adaptor.DATA_WIDTH = 64;
defparam rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_fanout_adaptor.NUM_FANOUTS = 2;

acl_data_fifo rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_reg_3_NO_SHIFT_REG),
	.valid_out(rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_reg_3_NO_SHIFT_REG),
	.stall_out(rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_out_reg_3_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_1_NO_SHIFT_REG),
	.data_out(rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_NO_SHIFT_REG)
);

defparam rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_fifo.DEPTH = 2;
defparam rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_fifo.DATA_WIDTH = 64;
defparam rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_fifo.IMPL = "ll_reg";

assign rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_inputs_ready_NO_SHIFT_REG = rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_1_NO_SHIFT_REG = rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_out_reg_3_NO_SHIFT_REG;
assign rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_NO_SHIFT_REG = rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_NO_SHIFT_REG_fa;
assign rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_1_NO_SHIFT_REG = rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_3_NO_SHIFT_REG_fa;

// This section implements a registered operation.
// 
wire local_bb6_arrayidx185_inputs_ready;
 reg local_bb6_arrayidx185_valid_out_NO_SHIFT_REG;
wire local_bb6_arrayidx185_stall_in;
wire local_bb6_arrayidx185_output_regs_ready;
 reg [31:0] local_bb6_arrayidx185_NO_SHIFT_REG;
wire [31:0] local_bb6_arrayidx185_op_wire;
wire local_bb6_arrayidx185_causedstall;

assign local_bb6_arrayidx185_inputs_ready = rnode_1to2_bb6_var__0_valid_out_NO_SHIFT_REG;
assign local_bb6_arrayidx185_output_regs_ready = (&(~(local_bb6_arrayidx185_valid_out_NO_SHIFT_REG) | ~(local_bb6_arrayidx185_stall_in)));
assign local_bb6_arrayidx185_op_wire = (64'h0 + (rnode_1to2_bb6_var__0_NO_SHIFT_REG << 6'h2));
assign rnode_1to2_bb6_var__0_stall_in_NO_SHIFT_REG = (~(local_bb6_arrayidx185_output_regs_ready) | ~(local_bb6_arrayidx185_inputs_ready));
assign local_bb6_arrayidx185_causedstall = (local_bb6_arrayidx185_inputs_ready && (~(local_bb6_arrayidx185_output_regs_ready) && !(~(local_bb6_arrayidx185_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_arrayidx185_NO_SHIFT_REG <= 'x;
		local_bb6_arrayidx185_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_arrayidx185_output_regs_ready)
		begin
			local_bb6_arrayidx185_NO_SHIFT_REG <= local_bb6_arrayidx185_op_wire;
			local_bb6_arrayidx185_valid_out_NO_SHIFT_REG <= local_bb6_arrayidx185_inputs_ready;
		end
		else
		begin
			if (~(local_bb6_arrayidx185_stall_in))
			begin
				local_bb6_arrayidx185_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_arrayidx188_inputs_ready;
 reg local_bb6_arrayidx188_valid_out_NO_SHIFT_REG;
wire local_bb6_arrayidx188_stall_in;
wire local_bb6_arrayidx188_output_regs_ready;
 reg [31:0] local_bb6_arrayidx188_NO_SHIFT_REG;
wire [31:0] local_bb6_arrayidx188_op_wire;
wire local_bb6_arrayidx188_causedstall;

assign local_bb6_arrayidx188_inputs_ready = rnode_1to2_bb6_var__u37_0_valid_out_NO_SHIFT_REG;
assign local_bb6_arrayidx188_output_regs_ready = (&(~(local_bb6_arrayidx188_valid_out_NO_SHIFT_REG) | ~(local_bb6_arrayidx188_stall_in)));
assign local_bb6_arrayidx188_op_wire = (64'h0 + (rnode_1to2_bb6_var__u37_0_NO_SHIFT_REG << 6'h2));
assign rnode_1to2_bb6_var__u37_0_stall_in_NO_SHIFT_REG = (~(local_bb6_arrayidx188_output_regs_ready) | ~(local_bb6_arrayidx188_inputs_ready));
assign local_bb6_arrayidx188_causedstall = (local_bb6_arrayidx188_inputs_ready && (~(local_bb6_arrayidx188_output_regs_ready) && !(~(local_bb6_arrayidx188_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_arrayidx188_NO_SHIFT_REG <= 'x;
		local_bb6_arrayidx188_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_arrayidx188_output_regs_ready)
		begin
			local_bb6_arrayidx188_NO_SHIFT_REG <= local_bb6_arrayidx188_op_wire;
			local_bb6_arrayidx188_valid_out_NO_SHIFT_REG <= local_bb6_arrayidx188_inputs_ready;
		end
		else
		begin
			if (~(local_bb6_arrayidx188_stall_in))
			begin
				local_bb6_arrayidx188_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_arrayidx192_inputs_ready;
 reg local_bb6_arrayidx192_valid_out_NO_SHIFT_REG;
wire local_bb6_arrayidx192_stall_in;
wire local_bb6_arrayidx192_output_regs_ready;
 reg [31:0] local_bb6_arrayidx192_NO_SHIFT_REG;
wire [31:0] local_bb6_arrayidx192_op_wire;
wire local_bb6_arrayidx192_causedstall;

assign local_bb6_arrayidx192_inputs_ready = rnode_1to2_bb6_var__u38_0_valid_out_NO_SHIFT_REG;
assign local_bb6_arrayidx192_output_regs_ready = (&(~(local_bb6_arrayidx192_valid_out_NO_SHIFT_REG) | ~(local_bb6_arrayidx192_stall_in)));
assign local_bb6_arrayidx192_op_wire = (64'h0 + (rnode_1to2_bb6_var__u38_0_NO_SHIFT_REG << 6'h2));
assign rnode_1to2_bb6_var__u38_0_stall_in_NO_SHIFT_REG = (~(local_bb6_arrayidx192_output_regs_ready) | ~(local_bb6_arrayidx192_inputs_ready));
assign local_bb6_arrayidx192_causedstall = (local_bb6_arrayidx192_inputs_ready && (~(local_bb6_arrayidx192_output_regs_ready) && !(~(local_bb6_arrayidx192_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_arrayidx192_NO_SHIFT_REG <= 'x;
		local_bb6_arrayidx192_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_arrayidx192_output_regs_ready)
		begin
			local_bb6_arrayidx192_NO_SHIFT_REG <= local_bb6_arrayidx192_op_wire;
			local_bb6_arrayidx192_valid_out_NO_SHIFT_REG <= local_bb6_arrayidx192_inputs_ready;
		end
		else
		begin
			if (~(local_bb6_arrayidx192_stall_in))
			begin
				local_bb6_arrayidx192_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_arrayidx197_inputs_ready;
 reg local_bb6_arrayidx197_valid_out_NO_SHIFT_REG;
wire local_bb6_arrayidx197_stall_in;
wire local_bb6_arrayidx197_output_regs_ready;
 reg [31:0] local_bb6_arrayidx197_NO_SHIFT_REG;
wire [31:0] local_bb6_arrayidx197_op_wire;
wire local_bb6_arrayidx197_causedstall;

assign local_bb6_arrayidx197_inputs_ready = rnode_1to2_bb6_var__u39_0_valid_out_NO_SHIFT_REG;
assign local_bb6_arrayidx197_output_regs_ready = (&(~(local_bb6_arrayidx197_valid_out_NO_SHIFT_REG) | ~(local_bb6_arrayidx197_stall_in)));
assign local_bb6_arrayidx197_op_wire = (64'h0 + (rnode_1to2_bb6_var__u39_0_NO_SHIFT_REG << 6'h2));
assign rnode_1to2_bb6_var__u39_0_stall_in_NO_SHIFT_REG = (~(local_bb6_arrayidx197_output_regs_ready) | ~(local_bb6_arrayidx197_inputs_ready));
assign local_bb6_arrayidx197_causedstall = (local_bb6_arrayidx197_inputs_ready && (~(local_bb6_arrayidx197_output_regs_ready) && !(~(local_bb6_arrayidx197_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_arrayidx197_NO_SHIFT_REG <= 'x;
		local_bb6_arrayidx197_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_arrayidx197_output_regs_ready)
		begin
			local_bb6_arrayidx197_NO_SHIFT_REG <= local_bb6_arrayidx197_op_wire;
			local_bb6_arrayidx197_valid_out_NO_SHIFT_REG <= local_bb6_arrayidx197_inputs_ready;
		end
		else
		begin
			if (~(local_bb6_arrayidx197_stall_in))
			begin
				local_bb6_arrayidx197_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_valid_out_NO_SHIFT_REG;
 logic rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_stall_in_NO_SHIFT_REG;
 logic rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_NO_SHIFT_REG;
 logic rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_reg_66_NO_SHIFT_REG;
 logic rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(local_bb6_keep_going14_acl_pipeline_1_NO_SHIFT_REG),
	.data_out(rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_reg_66_fifo.DEPTH = 3;
defparam rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_reg_66_fifo.DATA_WIDTH = 1;
defparam rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_reg_66_inputs_ready_NO_SHIFT_REG = local_bb6_keep_going14_acl_pipeline_1_valid_out_NO_SHIFT_REG;
assign local_bb6_keep_going14_acl_pipeline_1_stall_in = rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_NO_SHIFT_REG = rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_reg_66_NO_SHIFT_REG;
assign rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_stall_in_reg_66_NO_SHIFT_REG = rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_stall_in_NO_SHIFT_REG;
assign rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_valid_out_NO_SHIFT_REG = rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_valid_out_reg_66_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb6_G_144_pop13_acl_pop_i32_528734635_inputs_ready;
 reg local_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_NO_SHIFT_REG;
wire local_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in;
wire local_bb6_G_144_pop13_acl_pop_i32_528734635_output_regs_ready;
wire [31:0] local_bb6_G_144_pop13_acl_pop_i32_528734635_result;
wire local_bb6_G_144_pop13_acl_pop_i32_528734635_fu_valid_out;
wire local_bb6_G_144_pop13_acl_pop_i32_528734635_fu_stall_out;
 reg [31:0] local_bb6_G_144_pop13_acl_pop_i32_528734635_NO_SHIFT_REG;
wire local_bb6_G_144_pop13_acl_pop_i32_528734635_causedstall;

acl_pop local_bb6_G_144_pop13_acl_pop_i32_528734635_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_62to63_forked_0_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(32'h1F83D9AB),
	.stall_out(local_bb6_G_144_pop13_acl_pop_i32_528734635_fu_stall_out),
	.valid_in(local_bb6_G_144_pop13_acl_pop_i32_528734635_inputs_ready),
	.valid_out(local_bb6_G_144_pop13_acl_pop_i32_528734635_fu_valid_out),
	.stall_in(~(local_bb6_G_144_pop13_acl_pop_i32_528734635_output_regs_ready)),
	.data_out(local_bb6_G_144_pop13_acl_pop_i32_528734635_result),
	.feedback_in(feedback_data_in_13),
	.feedback_valid_in(feedback_valid_in_13),
	.feedback_stall_out(feedback_stall_out_13)
);

defparam local_bb6_G_144_pop13_acl_pop_i32_528734635_feedback.DATA_WIDTH = 32;
defparam local_bb6_G_144_pop13_acl_pop_i32_528734635_feedback.STYLE = "REGULAR";

assign local_bb6_G_144_pop13_acl_pop_i32_528734635_inputs_ready = rnode_62to63_forked_0_valid_out_0_NO_SHIFT_REG;
assign local_bb6_G_144_pop13_acl_pop_i32_528734635_output_regs_ready = (&(~(local_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_NO_SHIFT_REG) | ~(local_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in)));
assign rnode_62to63_forked_0_stall_in_0_NO_SHIFT_REG = (local_bb6_G_144_pop13_acl_pop_i32_528734635_fu_stall_out | ~(local_bb6_G_144_pop13_acl_pop_i32_528734635_inputs_ready));
assign local_bb6_G_144_pop13_acl_pop_i32_528734635_causedstall = (local_bb6_G_144_pop13_acl_pop_i32_528734635_inputs_ready && (local_bb6_G_144_pop13_acl_pop_i32_528734635_fu_stall_out && !(~(local_bb6_G_144_pop13_acl_pop_i32_528734635_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_G_144_pop13_acl_pop_i32_528734635_NO_SHIFT_REG <= 'x;
		local_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_G_144_pop13_acl_pop_i32_528734635_output_regs_ready)
		begin
			local_bb6_G_144_pop13_acl_pop_i32_528734635_NO_SHIFT_REG <= local_bb6_G_144_pop13_acl_pop_i32_528734635_result;
			local_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_NO_SHIFT_REG <= local_bb6_G_144_pop13_acl_pop_i32_528734635_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in))
			begin
				local_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_F_145_pop12_acl_pop_i32__1694144372_inputs_ready;
 reg local_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_NO_SHIFT_REG;
wire local_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in;
wire local_bb6_F_145_pop12_acl_pop_i32__1694144372_output_regs_ready;
wire [31:0] local_bb6_F_145_pop12_acl_pop_i32__1694144372_result;
wire local_bb6_F_145_pop12_acl_pop_i32__1694144372_fu_valid_out;
wire local_bb6_F_145_pop12_acl_pop_i32__1694144372_fu_stall_out;
 reg [31:0] local_bb6_F_145_pop12_acl_pop_i32__1694144372_NO_SHIFT_REG;
wire local_bb6_F_145_pop12_acl_pop_i32__1694144372_causedstall;

acl_pop local_bb6_F_145_pop12_acl_pop_i32__1694144372_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_62to63_forked_1_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(32'h9B05688C),
	.stall_out(local_bb6_F_145_pop12_acl_pop_i32__1694144372_fu_stall_out),
	.valid_in(local_bb6_F_145_pop12_acl_pop_i32__1694144372_inputs_ready),
	.valid_out(local_bb6_F_145_pop12_acl_pop_i32__1694144372_fu_valid_out),
	.stall_in(~(local_bb6_F_145_pop12_acl_pop_i32__1694144372_output_regs_ready)),
	.data_out(local_bb6_F_145_pop12_acl_pop_i32__1694144372_result),
	.feedback_in(feedback_data_in_12),
	.feedback_valid_in(feedback_valid_in_12),
	.feedback_stall_out(feedback_stall_out_12)
);

defparam local_bb6_F_145_pop12_acl_pop_i32__1694144372_feedback.DATA_WIDTH = 32;
defparam local_bb6_F_145_pop12_acl_pop_i32__1694144372_feedback.STYLE = "REGULAR";

assign local_bb6_F_145_pop12_acl_pop_i32__1694144372_inputs_ready = rnode_62to63_forked_0_valid_out_1_NO_SHIFT_REG;
assign local_bb6_F_145_pop12_acl_pop_i32__1694144372_output_regs_ready = (&(~(local_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_NO_SHIFT_REG) | ~(local_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in)));
assign rnode_62to63_forked_0_stall_in_1_NO_SHIFT_REG = (local_bb6_F_145_pop12_acl_pop_i32__1694144372_fu_stall_out | ~(local_bb6_F_145_pop12_acl_pop_i32__1694144372_inputs_ready));
assign local_bb6_F_145_pop12_acl_pop_i32__1694144372_causedstall = (local_bb6_F_145_pop12_acl_pop_i32__1694144372_inputs_ready && (local_bb6_F_145_pop12_acl_pop_i32__1694144372_fu_stall_out && !(~(local_bb6_F_145_pop12_acl_pop_i32__1694144372_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_F_145_pop12_acl_pop_i32__1694144372_NO_SHIFT_REG <= 'x;
		local_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_F_145_pop12_acl_pop_i32__1694144372_output_regs_ready)
		begin
			local_bb6_F_145_pop12_acl_pop_i32__1694144372_NO_SHIFT_REG <= local_bb6_F_145_pop12_acl_pop_i32__1694144372_result;
			local_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_NO_SHIFT_REG <= local_bb6_F_145_pop12_acl_pop_i32__1694144372_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in))
			begin
				local_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_E_146_pop11_acl_pop_i32_1359893119_inputs_ready;
 reg local_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_NO_SHIFT_REG;
wire local_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in;
wire local_bb6_E_146_pop11_acl_pop_i32_1359893119_output_regs_ready;
wire [31:0] local_bb6_E_146_pop11_acl_pop_i32_1359893119_result;
wire local_bb6_E_146_pop11_acl_pop_i32_1359893119_fu_valid_out;
wire local_bb6_E_146_pop11_acl_pop_i32_1359893119_fu_stall_out;
 reg [31:0] local_bb6_E_146_pop11_acl_pop_i32_1359893119_NO_SHIFT_REG;
wire local_bb6_E_146_pop11_acl_pop_i32_1359893119_causedstall;

acl_pop local_bb6_E_146_pop11_acl_pop_i32_1359893119_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_62to63_forked_2_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(32'h510E527F),
	.stall_out(local_bb6_E_146_pop11_acl_pop_i32_1359893119_fu_stall_out),
	.valid_in(local_bb6_E_146_pop11_acl_pop_i32_1359893119_inputs_ready),
	.valid_out(local_bb6_E_146_pop11_acl_pop_i32_1359893119_fu_valid_out),
	.stall_in(~(local_bb6_E_146_pop11_acl_pop_i32_1359893119_output_regs_ready)),
	.data_out(local_bb6_E_146_pop11_acl_pop_i32_1359893119_result),
	.feedback_in(feedback_data_in_11),
	.feedback_valid_in(feedback_valid_in_11),
	.feedback_stall_out(feedback_stall_out_11)
);

defparam local_bb6_E_146_pop11_acl_pop_i32_1359893119_feedback.DATA_WIDTH = 32;
defparam local_bb6_E_146_pop11_acl_pop_i32_1359893119_feedback.STYLE = "REGULAR";

assign local_bb6_E_146_pop11_acl_pop_i32_1359893119_inputs_ready = rnode_62to63_forked_0_valid_out_2_NO_SHIFT_REG;
assign local_bb6_E_146_pop11_acl_pop_i32_1359893119_output_regs_ready = (&(~(local_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_NO_SHIFT_REG) | ~(local_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in)));
assign rnode_62to63_forked_0_stall_in_2_NO_SHIFT_REG = (local_bb6_E_146_pop11_acl_pop_i32_1359893119_fu_stall_out | ~(local_bb6_E_146_pop11_acl_pop_i32_1359893119_inputs_ready));
assign local_bb6_E_146_pop11_acl_pop_i32_1359893119_causedstall = (local_bb6_E_146_pop11_acl_pop_i32_1359893119_inputs_ready && (local_bb6_E_146_pop11_acl_pop_i32_1359893119_fu_stall_out && !(~(local_bb6_E_146_pop11_acl_pop_i32_1359893119_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_E_146_pop11_acl_pop_i32_1359893119_NO_SHIFT_REG <= 'x;
		local_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_E_146_pop11_acl_pop_i32_1359893119_output_regs_ready)
		begin
			local_bb6_E_146_pop11_acl_pop_i32_1359893119_NO_SHIFT_REG <= local_bb6_E_146_pop11_acl_pop_i32_1359893119_result;
			local_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_NO_SHIFT_REG <= local_bb6_E_146_pop11_acl_pop_i32_1359893119_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in))
			begin
				local_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_H_143_pop14_acl_pop_i32_1541459225_inputs_ready;
 reg local_bb6_H_143_pop14_acl_pop_i32_1541459225_valid_out_NO_SHIFT_REG;
wire local_bb6_H_143_pop14_acl_pop_i32_1541459225_stall_in;
wire local_bb6_H_143_pop14_acl_pop_i32_1541459225_output_regs_ready;
wire [31:0] local_bb6_H_143_pop14_acl_pop_i32_1541459225_result;
wire local_bb6_H_143_pop14_acl_pop_i32_1541459225_fu_valid_out;
wire local_bb6_H_143_pop14_acl_pop_i32_1541459225_fu_stall_out;
 reg [31:0] local_bb6_H_143_pop14_acl_pop_i32_1541459225_NO_SHIFT_REG;
wire local_bb6_H_143_pop14_acl_pop_i32_1541459225_causedstall;

acl_pop local_bb6_H_143_pop14_acl_pop_i32_1541459225_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_62to63_forked_3_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(32'h5BE0CD19),
	.stall_out(local_bb6_H_143_pop14_acl_pop_i32_1541459225_fu_stall_out),
	.valid_in(local_bb6_H_143_pop14_acl_pop_i32_1541459225_inputs_ready),
	.valid_out(local_bb6_H_143_pop14_acl_pop_i32_1541459225_fu_valid_out),
	.stall_in(~(local_bb6_H_143_pop14_acl_pop_i32_1541459225_output_regs_ready)),
	.data_out(local_bb6_H_143_pop14_acl_pop_i32_1541459225_result),
	.feedback_in(feedback_data_in_14),
	.feedback_valid_in(feedback_valid_in_14),
	.feedback_stall_out(feedback_stall_out_14)
);

defparam local_bb6_H_143_pop14_acl_pop_i32_1541459225_feedback.DATA_WIDTH = 32;
defparam local_bb6_H_143_pop14_acl_pop_i32_1541459225_feedback.STYLE = "REGULAR";

assign local_bb6_H_143_pop14_acl_pop_i32_1541459225_inputs_ready = rnode_62to63_forked_0_valid_out_3_NO_SHIFT_REG;
assign local_bb6_H_143_pop14_acl_pop_i32_1541459225_output_regs_ready = (&(~(local_bb6_H_143_pop14_acl_pop_i32_1541459225_valid_out_NO_SHIFT_REG) | ~(local_bb6_H_143_pop14_acl_pop_i32_1541459225_stall_in)));
assign rnode_62to63_forked_0_stall_in_3_NO_SHIFT_REG = (local_bb6_H_143_pop14_acl_pop_i32_1541459225_fu_stall_out | ~(local_bb6_H_143_pop14_acl_pop_i32_1541459225_inputs_ready));
assign local_bb6_H_143_pop14_acl_pop_i32_1541459225_causedstall = (local_bb6_H_143_pop14_acl_pop_i32_1541459225_inputs_ready && (local_bb6_H_143_pop14_acl_pop_i32_1541459225_fu_stall_out && !(~(local_bb6_H_143_pop14_acl_pop_i32_1541459225_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_H_143_pop14_acl_pop_i32_1541459225_NO_SHIFT_REG <= 'x;
		local_bb6_H_143_pop14_acl_pop_i32_1541459225_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_H_143_pop14_acl_pop_i32_1541459225_output_regs_ready)
		begin
			local_bb6_H_143_pop14_acl_pop_i32_1541459225_NO_SHIFT_REG <= local_bb6_H_143_pop14_acl_pop_i32_1541459225_result;
			local_bb6_H_143_pop14_acl_pop_i32_1541459225_valid_out_NO_SHIFT_REG <= local_bb6_H_143_pop14_acl_pop_i32_1541459225_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_H_143_pop14_acl_pop_i32_1541459225_stall_in))
			begin
				local_bb6_H_143_pop14_acl_pop_i32_1541459225_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_63to64_forked_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_63to64_forked_1_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_63to64_forked_2_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_stall_in_3_NO_SHIFT_REG;
 logic rnode_63to64_forked_3_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_valid_out_4_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_stall_in_4_NO_SHIFT_REG;
 logic rnode_63to64_forked_4_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_valid_out_5_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_stall_in_5_NO_SHIFT_REG;
 logic rnode_63to64_forked_5_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_valid_out_6_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_stall_in_6_NO_SHIFT_REG;
 logic rnode_63to64_forked_6_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_reg_64_inputs_ready_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_valid_out_0_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_stall_in_0_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_stall_out_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_forked_0_reg_64_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_63to64_forked_0_reg_64_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_63to64_forked_0_reg_64_NO_SHIFT_REG),
	.valid_in(rnode_63to64_forked_0_valid_out_0_reg_64_NO_SHIFT_REG),
	.stall_out(rnode_63to64_forked_0_stall_in_0_reg_64_NO_SHIFT_REG),
	.data_out(rnode_63to64_forked_0_reg_64_NO_SHIFT_REG_fa),
	.valid_out({rnode_63to64_forked_0_valid_out_0_NO_SHIFT_REG, rnode_63to64_forked_0_valid_out_1_NO_SHIFT_REG, rnode_63to64_forked_0_valid_out_2_NO_SHIFT_REG, rnode_63to64_forked_0_valid_out_3_NO_SHIFT_REG, rnode_63to64_forked_0_valid_out_4_NO_SHIFT_REG, rnode_63to64_forked_0_valid_out_5_NO_SHIFT_REG, rnode_63to64_forked_0_valid_out_6_NO_SHIFT_REG}),
	.stall_in({rnode_63to64_forked_0_stall_in_0_NO_SHIFT_REG, rnode_63to64_forked_0_stall_in_1_NO_SHIFT_REG, rnode_63to64_forked_0_stall_in_2_NO_SHIFT_REG, rnode_63to64_forked_0_stall_in_3_NO_SHIFT_REG, rnode_63to64_forked_0_stall_in_4_NO_SHIFT_REG, rnode_63to64_forked_0_stall_in_5_NO_SHIFT_REG, rnode_63to64_forked_0_stall_in_6_NO_SHIFT_REG})
);

defparam rnode_63to64_forked_0_reg_64_fanout_adaptor.DATA_WIDTH = 1;
defparam rnode_63to64_forked_0_reg_64_fanout_adaptor.NUM_FANOUTS = 7;

acl_data_fifo rnode_63to64_forked_0_reg_64_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_63to64_forked_0_reg_64_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_63to64_forked_0_stall_in_0_reg_64_NO_SHIFT_REG),
	.valid_out(rnode_63to64_forked_0_valid_out_0_reg_64_NO_SHIFT_REG),
	.stall_out(rnode_63to64_forked_0_stall_out_reg_64_NO_SHIFT_REG),
	.data_in(rnode_62to63_forked_4_NO_SHIFT_REG),
	.data_out(rnode_63to64_forked_0_reg_64_NO_SHIFT_REG)
);

defparam rnode_63to64_forked_0_reg_64_fifo.DEPTH = 2;
defparam rnode_63to64_forked_0_reg_64_fifo.DATA_WIDTH = 1;
defparam rnode_63to64_forked_0_reg_64_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_63to64_forked_0_reg_64_fifo.IMPL = "ll_reg";

assign rnode_63to64_forked_0_reg_64_inputs_ready_NO_SHIFT_REG = rnode_62to63_forked_0_valid_out_4_NO_SHIFT_REG;
assign rnode_62to63_forked_0_stall_in_4_NO_SHIFT_REG = rnode_63to64_forked_0_stall_out_reg_64_NO_SHIFT_REG;
assign rnode_63to64_forked_0_NO_SHIFT_REG = rnode_63to64_forked_0_reg_64_NO_SHIFT_REG_fa;
assign rnode_63to64_forked_1_NO_SHIFT_REG = rnode_63to64_forked_0_reg_64_NO_SHIFT_REG_fa;
assign rnode_63to64_forked_2_NO_SHIFT_REG = rnode_63to64_forked_0_reg_64_NO_SHIFT_REG_fa;
assign rnode_63to64_forked_3_NO_SHIFT_REG = rnode_63to64_forked_0_reg_64_NO_SHIFT_REG_fa;
assign rnode_63to64_forked_4_NO_SHIFT_REG = rnode_63to64_forked_0_reg_64_NO_SHIFT_REG_fa;
assign rnode_63to64_forked_5_NO_SHIFT_REG = rnode_63to64_forked_0_reg_64_NO_SHIFT_REG_fa;
assign rnode_63to64_forked_6_NO_SHIFT_REG = rnode_63to64_forked_0_reg_64_NO_SHIFT_REG_fa;

// This section implements an unregistered operation.
// 
wire local_bb6_lftr_wideiv62_stall_local;
wire [31:0] local_bb6_lftr_wideiv62;

assign local_bb6_lftr_wideiv62 = local_bb6_indvars_iv_next57[31:0];

// This section implements an unregistered operation.
// 
wire local_bb6_var__u40_stall_local;
wire [31:0] local_bb6_var__u40;

assign local_bb6_var__u40 = rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_NO_SHIFT_REG[31:0];

// Register node:
//  * latency = 28
//  * capacity = 28
 logic rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_NO_SHIFT_REG;
 logic rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_31_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_31_NO_SHIFT_REG;
 logic rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_reg_31_NO_SHIFT_REG;
 logic rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_reg_31_NO_SHIFT_REG;
 logic rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_out_reg_31_NO_SHIFT_REG;

acl_data_fifo rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_31_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_31_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_reg_31_NO_SHIFT_REG),
	.valid_out(rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_reg_31_NO_SHIFT_REG),
	.stall_out(rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_out_reg_31_NO_SHIFT_REG),
	.data_in(rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_1_NO_SHIFT_REG),
	.data_out(rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_31_NO_SHIFT_REG)
);

defparam rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_31_fifo.DEPTH = 29;
defparam rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_31_fifo.DATA_WIDTH = 64;
defparam rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_31_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_31_fifo.IMPL = "ram";

assign rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_31_inputs_ready_NO_SHIFT_REG = rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_1_NO_SHIFT_REG;
assign rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_1_NO_SHIFT_REG = rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_out_reg_31_NO_SHIFT_REG;
assign rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_NO_SHIFT_REG = rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_31_NO_SHIFT_REG;
assign rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_reg_31_NO_SHIFT_REG = rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_NO_SHIFT_REG;
assign rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_NO_SHIFT_REG = rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_reg_31_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_3to3_bb6_arrayidx185_valid_out;
wire rstag_3to3_bb6_arrayidx185_stall_in;
wire rstag_3to3_bb6_arrayidx185_inputs_ready;
wire rstag_3to3_bb6_arrayidx185_stall_local;
 reg rstag_3to3_bb6_arrayidx185_staging_valid_NO_SHIFT_REG;
wire rstag_3to3_bb6_arrayidx185_combined_valid;
 reg [31:0] rstag_3to3_bb6_arrayidx185_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_3to3_bb6_arrayidx185;

assign rstag_3to3_bb6_arrayidx185_inputs_ready = local_bb6_arrayidx185_valid_out_NO_SHIFT_REG;
assign rstag_3to3_bb6_arrayidx185 = (rstag_3to3_bb6_arrayidx185_staging_valid_NO_SHIFT_REG ? rstag_3to3_bb6_arrayidx185_staging_reg_NO_SHIFT_REG : local_bb6_arrayidx185_NO_SHIFT_REG);
assign rstag_3to3_bb6_arrayidx185_combined_valid = (rstag_3to3_bb6_arrayidx185_staging_valid_NO_SHIFT_REG | rstag_3to3_bb6_arrayidx185_inputs_ready);
assign rstag_3to3_bb6_arrayidx185_valid_out = rstag_3to3_bb6_arrayidx185_combined_valid;
assign rstag_3to3_bb6_arrayidx185_stall_local = rstag_3to3_bb6_arrayidx185_stall_in;
assign local_bb6_arrayidx185_stall_in = (|rstag_3to3_bb6_arrayidx185_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb6_arrayidx185_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb6_arrayidx185_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_3to3_bb6_arrayidx185_stall_local)
		begin
			if (~(rstag_3to3_bb6_arrayidx185_staging_valid_NO_SHIFT_REG))
			begin
				rstag_3to3_bb6_arrayidx185_staging_valid_NO_SHIFT_REG <= rstag_3to3_bb6_arrayidx185_inputs_ready;
			end
		end
		else
		begin
			rstag_3to3_bb6_arrayidx185_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_3to3_bb6_arrayidx185_staging_valid_NO_SHIFT_REG))
		begin
			rstag_3to3_bb6_arrayidx185_staging_reg_NO_SHIFT_REG <= local_bb6_arrayidx185_NO_SHIFT_REG;
		end
	end
end


// This section implements a staging register.
// 
wire rstag_3to3_bb6_arrayidx188_valid_out;
wire rstag_3to3_bb6_arrayidx188_stall_in;
wire rstag_3to3_bb6_arrayidx188_inputs_ready;
wire rstag_3to3_bb6_arrayidx188_stall_local;
 reg rstag_3to3_bb6_arrayidx188_staging_valid_NO_SHIFT_REG;
wire rstag_3to3_bb6_arrayidx188_combined_valid;
 reg [31:0] rstag_3to3_bb6_arrayidx188_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_3to3_bb6_arrayidx188;

assign rstag_3to3_bb6_arrayidx188_inputs_ready = local_bb6_arrayidx188_valid_out_NO_SHIFT_REG;
assign rstag_3to3_bb6_arrayidx188 = (rstag_3to3_bb6_arrayidx188_staging_valid_NO_SHIFT_REG ? rstag_3to3_bb6_arrayidx188_staging_reg_NO_SHIFT_REG : local_bb6_arrayidx188_NO_SHIFT_REG);
assign rstag_3to3_bb6_arrayidx188_combined_valid = (rstag_3to3_bb6_arrayidx188_staging_valid_NO_SHIFT_REG | rstag_3to3_bb6_arrayidx188_inputs_ready);
assign rstag_3to3_bb6_arrayidx188_valid_out = rstag_3to3_bb6_arrayidx188_combined_valid;
assign rstag_3to3_bb6_arrayidx188_stall_local = rstag_3to3_bb6_arrayidx188_stall_in;
assign local_bb6_arrayidx188_stall_in = (|rstag_3to3_bb6_arrayidx188_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb6_arrayidx188_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb6_arrayidx188_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_3to3_bb6_arrayidx188_stall_local)
		begin
			if (~(rstag_3to3_bb6_arrayidx188_staging_valid_NO_SHIFT_REG))
			begin
				rstag_3to3_bb6_arrayidx188_staging_valid_NO_SHIFT_REG <= rstag_3to3_bb6_arrayidx188_inputs_ready;
			end
		end
		else
		begin
			rstag_3to3_bb6_arrayidx188_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_3to3_bb6_arrayidx188_staging_valid_NO_SHIFT_REG))
		begin
			rstag_3to3_bb6_arrayidx188_staging_reg_NO_SHIFT_REG <= local_bb6_arrayidx188_NO_SHIFT_REG;
		end
	end
end


// This section implements a staging register.
// 
wire rstag_3to3_bb6_arrayidx192_valid_out;
wire rstag_3to3_bb6_arrayidx192_stall_in;
wire rstag_3to3_bb6_arrayidx192_inputs_ready;
wire rstag_3to3_bb6_arrayidx192_stall_local;
 reg rstag_3to3_bb6_arrayidx192_staging_valid_NO_SHIFT_REG;
wire rstag_3to3_bb6_arrayidx192_combined_valid;
 reg [31:0] rstag_3to3_bb6_arrayidx192_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_3to3_bb6_arrayidx192;

assign rstag_3to3_bb6_arrayidx192_inputs_ready = local_bb6_arrayidx192_valid_out_NO_SHIFT_REG;
assign rstag_3to3_bb6_arrayidx192 = (rstag_3to3_bb6_arrayidx192_staging_valid_NO_SHIFT_REG ? rstag_3to3_bb6_arrayidx192_staging_reg_NO_SHIFT_REG : local_bb6_arrayidx192_NO_SHIFT_REG);
assign rstag_3to3_bb6_arrayidx192_combined_valid = (rstag_3to3_bb6_arrayidx192_staging_valid_NO_SHIFT_REG | rstag_3to3_bb6_arrayidx192_inputs_ready);
assign rstag_3to3_bb6_arrayidx192_valid_out = rstag_3to3_bb6_arrayidx192_combined_valid;
assign rstag_3to3_bb6_arrayidx192_stall_local = rstag_3to3_bb6_arrayidx192_stall_in;
assign local_bb6_arrayidx192_stall_in = (|rstag_3to3_bb6_arrayidx192_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb6_arrayidx192_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb6_arrayidx192_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_3to3_bb6_arrayidx192_stall_local)
		begin
			if (~(rstag_3to3_bb6_arrayidx192_staging_valid_NO_SHIFT_REG))
			begin
				rstag_3to3_bb6_arrayidx192_staging_valid_NO_SHIFT_REG <= rstag_3to3_bb6_arrayidx192_inputs_ready;
			end
		end
		else
		begin
			rstag_3to3_bb6_arrayidx192_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_3to3_bb6_arrayidx192_staging_valid_NO_SHIFT_REG))
		begin
			rstag_3to3_bb6_arrayidx192_staging_reg_NO_SHIFT_REG <= local_bb6_arrayidx192_NO_SHIFT_REG;
		end
	end
end


// This section implements a staging register.
// 
wire rstag_3to3_bb6_arrayidx197_valid_out;
wire rstag_3to3_bb6_arrayidx197_stall_in;
wire rstag_3to3_bb6_arrayidx197_inputs_ready;
wire rstag_3to3_bb6_arrayidx197_stall_local;
 reg rstag_3to3_bb6_arrayidx197_staging_valid_NO_SHIFT_REG;
wire rstag_3to3_bb6_arrayidx197_combined_valid;
 reg [31:0] rstag_3to3_bb6_arrayidx197_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_3to3_bb6_arrayidx197;

assign rstag_3to3_bb6_arrayidx197_inputs_ready = local_bb6_arrayidx197_valid_out_NO_SHIFT_REG;
assign rstag_3to3_bb6_arrayidx197 = (rstag_3to3_bb6_arrayidx197_staging_valid_NO_SHIFT_REG ? rstag_3to3_bb6_arrayidx197_staging_reg_NO_SHIFT_REG : local_bb6_arrayidx197_NO_SHIFT_REG);
assign rstag_3to3_bb6_arrayidx197_combined_valid = (rstag_3to3_bb6_arrayidx197_staging_valid_NO_SHIFT_REG | rstag_3to3_bb6_arrayidx197_inputs_ready);
assign rstag_3to3_bb6_arrayidx197_valid_out = rstag_3to3_bb6_arrayidx197_combined_valid;
assign rstag_3to3_bb6_arrayidx197_stall_local = rstag_3to3_bb6_arrayidx197_stall_in;
assign local_bb6_arrayidx197_stall_in = (|rstag_3to3_bb6_arrayidx197_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb6_arrayidx197_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb6_arrayidx197_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_3to3_bb6_arrayidx197_stall_local)
		begin
			if (~(rstag_3to3_bb6_arrayidx197_staging_valid_NO_SHIFT_REG))
			begin
				rstag_3to3_bb6_arrayidx197_staging_valid_NO_SHIFT_REG <= rstag_3to3_bb6_arrayidx197_inputs_ready;
			end
		end
		else
		begin
			rstag_3to3_bb6_arrayidx197_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_3to3_bb6_arrayidx197_staging_valid_NO_SHIFT_REG))
		begin
			rstag_3to3_bb6_arrayidx197_staging_reg_NO_SHIFT_REG <= local_bb6_arrayidx197_NO_SHIFT_REG;
		end
	end
end


// This section implements a staging register.
// 
wire rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_0;
wire rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in_0;
 reg rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_0_NO_SHIFT_REG;
wire rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_1;
wire rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in_1;
 reg rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_1_NO_SHIFT_REG;
wire rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_2;
wire rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in_2;
 reg rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_2_NO_SHIFT_REG;
wire rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_inputs_ready;
wire rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_local;
 reg rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_staging_valid_NO_SHIFT_REG;
wire rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_combined_valid;
 reg [31:0] rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635;

assign rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_inputs_ready = local_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_NO_SHIFT_REG;
assign rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635 = (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_staging_valid_NO_SHIFT_REG ? rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_staging_reg_NO_SHIFT_REG : local_bb6_G_144_pop13_acl_pop_i32_528734635_NO_SHIFT_REG);
assign rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_combined_valid = (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_staging_valid_NO_SHIFT_REG | rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_inputs_ready);
assign rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_local = ((rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in_0 & ~(rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_0_NO_SHIFT_REG)) | (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in_1 & ~(rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_1_NO_SHIFT_REG)) | (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in_2 & ~(rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_2_NO_SHIFT_REG)));
assign rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_0 = (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_combined_valid & ~(rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_0_NO_SHIFT_REG));
assign rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_1 = (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_combined_valid & ~(rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_1_NO_SHIFT_REG));
assign rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_2 = (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_combined_valid & ~(rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_2_NO_SHIFT_REG));
assign local_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in = (|rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_local)
		begin
			if (~(rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_staging_valid_NO_SHIFT_REG))
			begin
				rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_staging_valid_NO_SHIFT_REG <= rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_inputs_ready;
			end
		end
		else
		begin
			rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_staging_valid_NO_SHIFT_REG))
		begin
			rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_staging_reg_NO_SHIFT_REG <= local_bb6_G_144_pop13_acl_pop_i32_528734635_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_0_NO_SHIFT_REG <= (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_combined_valid & (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_0_NO_SHIFT_REG | ~(rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in_0)) & rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_local);
		rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_1_NO_SHIFT_REG <= (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_combined_valid & (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_1_NO_SHIFT_REG | ~(rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in_1)) & rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_local);
		rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_2_NO_SHIFT_REG <= (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_combined_valid & (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_consumed_2_NO_SHIFT_REG | ~(rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in_2)) & rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_local);
	end
end


// This section implements a staging register.
// 
wire rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_0;
wire rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in_0;
 reg rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_0_NO_SHIFT_REG;
wire rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_1;
wire rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in_1;
 reg rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_1_NO_SHIFT_REG;
wire rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_2;
wire rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in_2;
 reg rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_2_NO_SHIFT_REG;
wire rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_inputs_ready;
wire rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_local;
 reg rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_staging_valid_NO_SHIFT_REG;
wire rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_combined_valid;
 reg [31:0] rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372;

assign rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_inputs_ready = local_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_NO_SHIFT_REG;
assign rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372 = (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_staging_valid_NO_SHIFT_REG ? rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_staging_reg_NO_SHIFT_REG : local_bb6_F_145_pop12_acl_pop_i32__1694144372_NO_SHIFT_REG);
assign rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_combined_valid = (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_staging_valid_NO_SHIFT_REG | rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_inputs_ready);
assign rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_local = ((rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in_0 & ~(rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_0_NO_SHIFT_REG)) | (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in_1 & ~(rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_1_NO_SHIFT_REG)) | (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in_2 & ~(rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_2_NO_SHIFT_REG)));
assign rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_0 = (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_combined_valid & ~(rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_0_NO_SHIFT_REG));
assign rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_1 = (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_combined_valid & ~(rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_1_NO_SHIFT_REG));
assign rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_2 = (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_combined_valid & ~(rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_2_NO_SHIFT_REG));
assign local_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in = (|rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_local)
		begin
			if (~(rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_staging_valid_NO_SHIFT_REG))
			begin
				rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_staging_valid_NO_SHIFT_REG <= rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_inputs_ready;
			end
		end
		else
		begin
			rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_staging_valid_NO_SHIFT_REG))
		begin
			rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_staging_reg_NO_SHIFT_REG <= local_bb6_F_145_pop12_acl_pop_i32__1694144372_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_2_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_0_NO_SHIFT_REG <= (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_combined_valid & (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_0_NO_SHIFT_REG | ~(rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in_0)) & rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_local);
		rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_1_NO_SHIFT_REG <= (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_combined_valid & (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_1_NO_SHIFT_REG | ~(rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in_1)) & rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_local);
		rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_2_NO_SHIFT_REG <= (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_combined_valid & (rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_consumed_2_NO_SHIFT_REG | ~(rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in_2)) & rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_local);
	end
end


// This section implements a staging register.
// 
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_0;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_0;
 reg rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_0_NO_SHIFT_REG;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_1;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_1;
 reg rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_1_NO_SHIFT_REG;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_2;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_2;
 reg rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_2_NO_SHIFT_REG;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_3;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_3;
 reg rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_3_NO_SHIFT_REG;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_4;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_4;
 reg rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_4_NO_SHIFT_REG;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_5;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_5;
 reg rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_5_NO_SHIFT_REG;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_6;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_6;
 reg rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_6_NO_SHIFT_REG;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_7;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_7;
 reg rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_7_NO_SHIFT_REG;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_8;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_8;
 reg rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_8_NO_SHIFT_REG;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_9;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_9;
 reg rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_9_NO_SHIFT_REG;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_inputs_ready;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_local;
 reg rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_staging_valid_NO_SHIFT_REG;
wire rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid;
 reg [31:0] rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119;

assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_inputs_ready = local_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_NO_SHIFT_REG;
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_staging_valid_NO_SHIFT_REG ? rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_staging_reg_NO_SHIFT_REG : local_bb6_E_146_pop11_acl_pop_i32_1359893119_NO_SHIFT_REG);
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_staging_valid_NO_SHIFT_REG | rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_inputs_ready);
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_local = ((rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_0 & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_0_NO_SHIFT_REG)) | (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_1 & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_1_NO_SHIFT_REG)) | (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_2 & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_2_NO_SHIFT_REG)) | (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_3 & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_3_NO_SHIFT_REG)) | (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_4 & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_4_NO_SHIFT_REG)) | (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_5 & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_5_NO_SHIFT_REG)) | (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_6 & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_6_NO_SHIFT_REG)) | (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_7 & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_7_NO_SHIFT_REG)) | (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_8 & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_8_NO_SHIFT_REG)) | (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_9 & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_9_NO_SHIFT_REG)));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_0 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_0_NO_SHIFT_REG));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_1 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_1_NO_SHIFT_REG));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_2 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_2_NO_SHIFT_REG));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_3 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_3_NO_SHIFT_REG));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_4 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_4_NO_SHIFT_REG));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_5 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_5_NO_SHIFT_REG));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_6 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_6_NO_SHIFT_REG));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_7 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_7_NO_SHIFT_REG));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_8 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_8_NO_SHIFT_REG));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_9 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_9_NO_SHIFT_REG));
assign local_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in = (|rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_local)
		begin
			if (~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_staging_valid_NO_SHIFT_REG))
			begin
				rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_staging_valid_NO_SHIFT_REG <= rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_inputs_ready;
			end
		end
		else
		begin
			rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_staging_valid_NO_SHIFT_REG))
		begin
			rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_staging_reg_NO_SHIFT_REG <= local_bb6_E_146_pop11_acl_pop_i32_1359893119_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_2_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_3_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_4_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_5_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_6_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_7_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_8_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_9_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_0_NO_SHIFT_REG <= (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_0_NO_SHIFT_REG | ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_0)) & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_local);
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_1_NO_SHIFT_REG <= (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_1_NO_SHIFT_REG | ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_1)) & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_local);
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_2_NO_SHIFT_REG <= (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_2_NO_SHIFT_REG | ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_2)) & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_local);
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_3_NO_SHIFT_REG <= (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_3_NO_SHIFT_REG | ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_3)) & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_local);
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_4_NO_SHIFT_REG <= (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_4_NO_SHIFT_REG | ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_4)) & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_local);
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_5_NO_SHIFT_REG <= (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_5_NO_SHIFT_REG | ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_5)) & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_local);
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_6_NO_SHIFT_REG <= (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_6_NO_SHIFT_REG | ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_6)) & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_local);
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_7_NO_SHIFT_REG <= (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_7_NO_SHIFT_REG | ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_7)) & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_local);
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_8_NO_SHIFT_REG <= (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_8_NO_SHIFT_REG | ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_8)) & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_local);
		rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_9_NO_SHIFT_REG <= (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_combined_valid & (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_consumed_9_NO_SHIFT_REG | ~(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_9)) & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_local);
	end
end


// This section implements a registered operation.
// 
wire local_bb6_C_148_pop9_acl_pop_i32_1013904242_inputs_ready;
 reg local_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_NO_SHIFT_REG;
wire local_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in;
wire local_bb6_C_148_pop9_acl_pop_i32_1013904242_output_regs_ready;
wire [31:0] local_bb6_C_148_pop9_acl_pop_i32_1013904242_result;
wire local_bb6_C_148_pop9_acl_pop_i32_1013904242_fu_valid_out;
wire local_bb6_C_148_pop9_acl_pop_i32_1013904242_fu_stall_out;
 reg [31:0] local_bb6_C_148_pop9_acl_pop_i32_1013904242_NO_SHIFT_REG;
wire local_bb6_C_148_pop9_acl_pop_i32_1013904242_causedstall;

acl_pop local_bb6_C_148_pop9_acl_pop_i32_1013904242_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_63to64_forked_0_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(32'h3C6EF372),
	.stall_out(local_bb6_C_148_pop9_acl_pop_i32_1013904242_fu_stall_out),
	.valid_in(local_bb6_C_148_pop9_acl_pop_i32_1013904242_inputs_ready),
	.valid_out(local_bb6_C_148_pop9_acl_pop_i32_1013904242_fu_valid_out),
	.stall_in(~(local_bb6_C_148_pop9_acl_pop_i32_1013904242_output_regs_ready)),
	.data_out(local_bb6_C_148_pop9_acl_pop_i32_1013904242_result),
	.feedback_in(feedback_data_in_9),
	.feedback_valid_in(feedback_valid_in_9),
	.feedback_stall_out(feedback_stall_out_9)
);

defparam local_bb6_C_148_pop9_acl_pop_i32_1013904242_feedback.DATA_WIDTH = 32;
defparam local_bb6_C_148_pop9_acl_pop_i32_1013904242_feedback.STYLE = "REGULAR";

assign local_bb6_C_148_pop9_acl_pop_i32_1013904242_inputs_ready = rnode_63to64_forked_0_valid_out_0_NO_SHIFT_REG;
assign local_bb6_C_148_pop9_acl_pop_i32_1013904242_output_regs_ready = (&(~(local_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_NO_SHIFT_REG) | ~(local_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in)));
assign rnode_63to64_forked_0_stall_in_0_NO_SHIFT_REG = (local_bb6_C_148_pop9_acl_pop_i32_1013904242_fu_stall_out | ~(local_bb6_C_148_pop9_acl_pop_i32_1013904242_inputs_ready));
assign local_bb6_C_148_pop9_acl_pop_i32_1013904242_causedstall = (local_bb6_C_148_pop9_acl_pop_i32_1013904242_inputs_ready && (local_bb6_C_148_pop9_acl_pop_i32_1013904242_fu_stall_out && !(~(local_bb6_C_148_pop9_acl_pop_i32_1013904242_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_C_148_pop9_acl_pop_i32_1013904242_NO_SHIFT_REG <= 'x;
		local_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_C_148_pop9_acl_pop_i32_1013904242_output_regs_ready)
		begin
			local_bb6_C_148_pop9_acl_pop_i32_1013904242_NO_SHIFT_REG <= local_bb6_C_148_pop9_acl_pop_i32_1013904242_result;
			local_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_NO_SHIFT_REG <= local_bb6_C_148_pop9_acl_pop_i32_1013904242_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in))
			begin
				local_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_B_149_pop8_B_149_inputs_ready;
 reg local_bb6_B_149_pop8_B_149_valid_out_NO_SHIFT_REG;
wire local_bb6_B_149_pop8_B_149_stall_in;
wire local_bb6_B_149_pop8_B_149_output_regs_ready;
wire [31:0] local_bb6_B_149_pop8_B_149_result;
wire local_bb6_B_149_pop8_B_149_fu_valid_out;
wire local_bb6_B_149_pop8_B_149_fu_stall_out;
 reg [31:0] local_bb6_B_149_pop8_B_149_NO_SHIFT_REG;
wire local_bb6_B_149_pop8_B_149_causedstall;

acl_pop local_bb6_B_149_pop8_B_149_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_63to64_forked_1_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_63to64_B_149_0_NO_SHIFT_REG),
	.stall_out(local_bb6_B_149_pop8_B_149_fu_stall_out),
	.valid_in(local_bb6_B_149_pop8_B_149_inputs_ready),
	.valid_out(local_bb6_B_149_pop8_B_149_fu_valid_out),
	.stall_in(~(local_bb6_B_149_pop8_B_149_output_regs_ready)),
	.data_out(local_bb6_B_149_pop8_B_149_result),
	.feedback_in(feedback_data_in_8),
	.feedback_valid_in(feedback_valid_in_8),
	.feedback_stall_out(feedback_stall_out_8)
);

defparam local_bb6_B_149_pop8_B_149_feedback.DATA_WIDTH = 32;
defparam local_bb6_B_149_pop8_B_149_feedback.STYLE = "REGULAR";

assign local_bb6_B_149_pop8_B_149_inputs_ready = (rnode_63to64_forked_0_valid_out_1_NO_SHIFT_REG & rnode_63to64_B_149_0_valid_out_NO_SHIFT_REG);
assign local_bb6_B_149_pop8_B_149_output_regs_ready = (&(~(local_bb6_B_149_pop8_B_149_valid_out_NO_SHIFT_REG) | ~(local_bb6_B_149_pop8_B_149_stall_in)));
assign rnode_63to64_forked_0_stall_in_1_NO_SHIFT_REG = (local_bb6_B_149_pop8_B_149_fu_stall_out | ~(local_bb6_B_149_pop8_B_149_inputs_ready));
assign rnode_63to64_B_149_0_stall_in_NO_SHIFT_REG = (local_bb6_B_149_pop8_B_149_fu_stall_out | ~(local_bb6_B_149_pop8_B_149_inputs_ready));
assign local_bb6_B_149_pop8_B_149_causedstall = (local_bb6_B_149_pop8_B_149_inputs_ready && (local_bb6_B_149_pop8_B_149_fu_stall_out && !(~(local_bb6_B_149_pop8_B_149_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_B_149_pop8_B_149_NO_SHIFT_REG <= 'x;
		local_bb6_B_149_pop8_B_149_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_B_149_pop8_B_149_output_regs_ready)
		begin
			local_bb6_B_149_pop8_B_149_NO_SHIFT_REG <= local_bb6_B_149_pop8_B_149_result;
			local_bb6_B_149_pop8_B_149_valid_out_NO_SHIFT_REG <= local_bb6_B_149_pop8_B_149_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_B_149_pop8_B_149_stall_in))
			begin
				local_bb6_B_149_pop8_B_149_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_A_150_pop7_A_150_inputs_ready;
 reg local_bb6_A_150_pop7_A_150_valid_out_NO_SHIFT_REG;
wire local_bb6_A_150_pop7_A_150_stall_in;
wire local_bb6_A_150_pop7_A_150_output_regs_ready;
wire [31:0] local_bb6_A_150_pop7_A_150_result;
wire local_bb6_A_150_pop7_A_150_fu_valid_out;
wire local_bb6_A_150_pop7_A_150_fu_stall_out;
 reg [31:0] local_bb6_A_150_pop7_A_150_NO_SHIFT_REG;
wire local_bb6_A_150_pop7_A_150_causedstall;

acl_pop local_bb6_A_150_pop7_A_150_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_63to64_forked_2_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_63to64_A_150_0_NO_SHIFT_REG),
	.stall_out(local_bb6_A_150_pop7_A_150_fu_stall_out),
	.valid_in(local_bb6_A_150_pop7_A_150_inputs_ready),
	.valid_out(local_bb6_A_150_pop7_A_150_fu_valid_out),
	.stall_in(~(local_bb6_A_150_pop7_A_150_output_regs_ready)),
	.data_out(local_bb6_A_150_pop7_A_150_result),
	.feedback_in(feedback_data_in_7),
	.feedback_valid_in(feedback_valid_in_7),
	.feedback_stall_out(feedback_stall_out_7)
);

defparam local_bb6_A_150_pop7_A_150_feedback.DATA_WIDTH = 32;
defparam local_bb6_A_150_pop7_A_150_feedback.STYLE = "REGULAR";

assign local_bb6_A_150_pop7_A_150_inputs_ready = (rnode_63to64_forked_0_valid_out_2_NO_SHIFT_REG & rnode_63to64_A_150_0_valid_out_NO_SHIFT_REG);
assign local_bb6_A_150_pop7_A_150_output_regs_ready = (&(~(local_bb6_A_150_pop7_A_150_valid_out_NO_SHIFT_REG) | ~(local_bb6_A_150_pop7_A_150_stall_in)));
assign rnode_63to64_forked_0_stall_in_2_NO_SHIFT_REG = (local_bb6_A_150_pop7_A_150_fu_stall_out | ~(local_bb6_A_150_pop7_A_150_inputs_ready));
assign rnode_63to64_A_150_0_stall_in_NO_SHIFT_REG = (local_bb6_A_150_pop7_A_150_fu_stall_out | ~(local_bb6_A_150_pop7_A_150_inputs_ready));
assign local_bb6_A_150_pop7_A_150_causedstall = (local_bb6_A_150_pop7_A_150_inputs_ready && (local_bb6_A_150_pop7_A_150_fu_stall_out && !(~(local_bb6_A_150_pop7_A_150_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_A_150_pop7_A_150_NO_SHIFT_REG <= 'x;
		local_bb6_A_150_pop7_A_150_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_A_150_pop7_A_150_output_regs_ready)
		begin
			local_bb6_A_150_pop7_A_150_NO_SHIFT_REG <= local_bb6_A_150_pop7_A_150_result;
			local_bb6_A_150_pop7_A_150_valid_out_NO_SHIFT_REG <= local_bb6_A_150_pop7_A_150_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_A_150_pop7_A_150_stall_in))
			begin
				local_bb6_A_150_pop7_A_150_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_D_147_pop10_acl_pop_i32__1521486534_inputs_ready;
 reg local_bb6_D_147_pop10_acl_pop_i32__1521486534_valid_out_NO_SHIFT_REG;
wire local_bb6_D_147_pop10_acl_pop_i32__1521486534_stall_in;
wire local_bb6_D_147_pop10_acl_pop_i32__1521486534_output_regs_ready;
wire [31:0] local_bb6_D_147_pop10_acl_pop_i32__1521486534_result;
wire local_bb6_D_147_pop10_acl_pop_i32__1521486534_fu_valid_out;
wire local_bb6_D_147_pop10_acl_pop_i32__1521486534_fu_stall_out;
 reg [31:0] local_bb6_D_147_pop10_acl_pop_i32__1521486534_NO_SHIFT_REG;
wire local_bb6_D_147_pop10_acl_pop_i32__1521486534_causedstall;

acl_pop local_bb6_D_147_pop10_acl_pop_i32__1521486534_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_63to64_forked_3_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(32'hA54FF53A),
	.stall_out(local_bb6_D_147_pop10_acl_pop_i32__1521486534_fu_stall_out),
	.valid_in(local_bb6_D_147_pop10_acl_pop_i32__1521486534_inputs_ready),
	.valid_out(local_bb6_D_147_pop10_acl_pop_i32__1521486534_fu_valid_out),
	.stall_in(~(local_bb6_D_147_pop10_acl_pop_i32__1521486534_output_regs_ready)),
	.data_out(local_bb6_D_147_pop10_acl_pop_i32__1521486534_result),
	.feedback_in(feedback_data_in_10),
	.feedback_valid_in(feedback_valid_in_10),
	.feedback_stall_out(feedback_stall_out_10)
);

defparam local_bb6_D_147_pop10_acl_pop_i32__1521486534_feedback.DATA_WIDTH = 32;
defparam local_bb6_D_147_pop10_acl_pop_i32__1521486534_feedback.STYLE = "REGULAR";

assign local_bb6_D_147_pop10_acl_pop_i32__1521486534_inputs_ready = rnode_63to64_forked_0_valid_out_3_NO_SHIFT_REG;
assign local_bb6_D_147_pop10_acl_pop_i32__1521486534_output_regs_ready = (&(~(local_bb6_D_147_pop10_acl_pop_i32__1521486534_valid_out_NO_SHIFT_REG) | ~(local_bb6_D_147_pop10_acl_pop_i32__1521486534_stall_in)));
assign rnode_63to64_forked_0_stall_in_3_NO_SHIFT_REG = (local_bb6_D_147_pop10_acl_pop_i32__1521486534_fu_stall_out | ~(local_bb6_D_147_pop10_acl_pop_i32__1521486534_inputs_ready));
assign local_bb6_D_147_pop10_acl_pop_i32__1521486534_causedstall = (local_bb6_D_147_pop10_acl_pop_i32__1521486534_inputs_ready && (local_bb6_D_147_pop10_acl_pop_i32__1521486534_fu_stall_out && !(~(local_bb6_D_147_pop10_acl_pop_i32__1521486534_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_D_147_pop10_acl_pop_i32__1521486534_NO_SHIFT_REG <= 'x;
		local_bb6_D_147_pop10_acl_pop_i32__1521486534_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_D_147_pop10_acl_pop_i32__1521486534_output_regs_ready)
		begin
			local_bb6_D_147_pop10_acl_pop_i32__1521486534_NO_SHIFT_REG <= local_bb6_D_147_pop10_acl_pop_i32__1521486534_result;
			local_bb6_D_147_pop10_acl_pop_i32__1521486534_valid_out_NO_SHIFT_REG <= local_bb6_D_147_pop10_acl_pop_i32__1521486534_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_D_147_pop10_acl_pop_i32__1521486534_stall_in))
			begin
				local_bb6_D_147_pop10_acl_pop_i32__1521486534_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6__pop19__inputs_ready;
 reg local_bb6__pop19__valid_out_0_NO_SHIFT_REG;
wire local_bb6__pop19__stall_in_0;
 reg local_bb6__pop19__valid_out_1_NO_SHIFT_REG;
wire local_bb6__pop19__stall_in_1;
wire local_bb6__pop19__output_regs_ready;
wire [31:0] local_bb6__pop19__result;
wire local_bb6__pop19__fu_valid_out;
wire local_bb6__pop19__fu_stall_out;
 reg [31:0] local_bb6__pop19__NO_SHIFT_REG;
wire local_bb6__pop19__causedstall;

acl_pop local_bb6__pop19__feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_63to64_forked_4_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_63to64_var__0_NO_SHIFT_REG),
	.stall_out(local_bb6__pop19__fu_stall_out),
	.valid_in(local_bb6__pop19__inputs_ready),
	.valid_out(local_bb6__pop19__fu_valid_out),
	.stall_in(~(local_bb6__pop19__output_regs_ready)),
	.data_out(local_bb6__pop19__result),
	.feedback_in(feedback_data_in_19),
	.feedback_valid_in(feedback_valid_in_19),
	.feedback_stall_out(feedback_stall_out_19)
);

defparam local_bb6__pop19__feedback.DATA_WIDTH = 32;
defparam local_bb6__pop19__feedback.STYLE = "REGULAR";

assign local_bb6__pop19__inputs_ready = (rnode_63to64_forked_0_valid_out_4_NO_SHIFT_REG & rnode_63to64_var__0_valid_out_NO_SHIFT_REG);
assign local_bb6__pop19__output_regs_ready = ((~(local_bb6__pop19__valid_out_0_NO_SHIFT_REG) | ~(local_bb6__pop19__stall_in_0)) & (~(local_bb6__pop19__valid_out_1_NO_SHIFT_REG) | ~(local_bb6__pop19__stall_in_1)));
assign rnode_63to64_forked_0_stall_in_4_NO_SHIFT_REG = (local_bb6__pop19__fu_stall_out | ~(local_bb6__pop19__inputs_ready));
assign rnode_63to64_var__0_stall_in_NO_SHIFT_REG = (local_bb6__pop19__fu_stall_out | ~(local_bb6__pop19__inputs_ready));
assign local_bb6__pop19__causedstall = (local_bb6__pop19__inputs_ready && (local_bb6__pop19__fu_stall_out && !(~(local_bb6__pop19__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6__pop19__NO_SHIFT_REG <= 'x;
		local_bb6__pop19__valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb6__pop19__valid_out_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6__pop19__output_regs_ready)
		begin
			local_bb6__pop19__NO_SHIFT_REG <= local_bb6__pop19__result;
			local_bb6__pop19__valid_out_0_NO_SHIFT_REG <= local_bb6__pop19__fu_valid_out;
			local_bb6__pop19__valid_out_1_NO_SHIFT_REG <= local_bb6__pop19__fu_valid_out;
		end
		else
		begin
			if (~(local_bb6__pop19__stall_in_0))
			begin
				local_bb6__pop19__valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb6__pop19__stall_in_1))
			begin
				local_bb6__pop19__valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6__pop20__inputs_ready;
 reg local_bb6__pop20__valid_out_0_NO_SHIFT_REG;
wire local_bb6__pop20__stall_in_0;
 reg local_bb6__pop20__valid_out_1_NO_SHIFT_REG;
wire local_bb6__pop20__stall_in_1;
wire local_bb6__pop20__output_regs_ready;
wire [31:0] local_bb6__pop20__result;
wire local_bb6__pop20__fu_valid_out;
wire local_bb6__pop20__fu_stall_out;
 reg [31:0] local_bb6__pop20__NO_SHIFT_REG;
wire local_bb6__pop20__causedstall;

acl_pop local_bb6__pop20__feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_63to64_forked_5_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_63to64_var__u36_0_NO_SHIFT_REG),
	.stall_out(local_bb6__pop20__fu_stall_out),
	.valid_in(local_bb6__pop20__inputs_ready),
	.valid_out(local_bb6__pop20__fu_valid_out),
	.stall_in(~(local_bb6__pop20__output_regs_ready)),
	.data_out(local_bb6__pop20__result),
	.feedback_in(feedback_data_in_20),
	.feedback_valid_in(feedback_valid_in_20),
	.feedback_stall_out(feedback_stall_out_20)
);

defparam local_bb6__pop20__feedback.DATA_WIDTH = 32;
defparam local_bb6__pop20__feedback.STYLE = "REGULAR";

assign local_bb6__pop20__inputs_ready = (rnode_63to64_forked_0_valid_out_5_NO_SHIFT_REG & rnode_63to64_var__u36_0_valid_out_NO_SHIFT_REG);
assign local_bb6__pop20__output_regs_ready = ((~(local_bb6__pop20__valid_out_0_NO_SHIFT_REG) | ~(local_bb6__pop20__stall_in_0)) & (~(local_bb6__pop20__valid_out_1_NO_SHIFT_REG) | ~(local_bb6__pop20__stall_in_1)));
assign rnode_63to64_forked_0_stall_in_5_NO_SHIFT_REG = (local_bb6__pop20__fu_stall_out | ~(local_bb6__pop20__inputs_ready));
assign rnode_63to64_var__u36_0_stall_in_NO_SHIFT_REG = (local_bb6__pop20__fu_stall_out | ~(local_bb6__pop20__inputs_ready));
assign local_bb6__pop20__causedstall = (local_bb6__pop20__inputs_ready && (local_bb6__pop20__fu_stall_out && !(~(local_bb6__pop20__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6__pop20__NO_SHIFT_REG <= 'x;
		local_bb6__pop20__valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb6__pop20__valid_out_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6__pop20__output_regs_ready)
		begin
			local_bb6__pop20__NO_SHIFT_REG <= local_bb6__pop20__result;
			local_bb6__pop20__valid_out_0_NO_SHIFT_REG <= local_bb6__pop20__fu_valid_out;
			local_bb6__pop20__valid_out_1_NO_SHIFT_REG <= local_bb6__pop20__fu_valid_out;
		end
		else
		begin
			if (~(local_bb6__pop20__stall_in_0))
			begin
				local_bb6__pop20__valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb6__pop20__stall_in_1))
			begin
				local_bb6__pop20__valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_select10817_pop21_select10817_inputs_ready;
 reg local_bb6_select10817_pop21_select10817_valid_out_0_NO_SHIFT_REG;
wire local_bb6_select10817_pop21_select10817_stall_in_0;
 reg local_bb6_select10817_pop21_select10817_valid_out_1_NO_SHIFT_REG;
wire local_bb6_select10817_pop21_select10817_stall_in_1;
wire local_bb6_select10817_pop21_select10817_output_regs_ready;
wire [31:0] local_bb6_select10817_pop21_select10817_result;
wire local_bb6_select10817_pop21_select10817_fu_valid_out;
wire local_bb6_select10817_pop21_select10817_fu_stall_out;
 reg [31:0] local_bb6_select10817_pop21_select10817_NO_SHIFT_REG;
wire local_bb6_select10817_pop21_select10817_causedstall;

acl_pop local_bb6_select10817_pop21_select10817_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_63to64_forked_6_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rnode_63to64_select10817_0_NO_SHIFT_REG),
	.stall_out(local_bb6_select10817_pop21_select10817_fu_stall_out),
	.valid_in(local_bb6_select10817_pop21_select10817_inputs_ready),
	.valid_out(local_bb6_select10817_pop21_select10817_fu_valid_out),
	.stall_in(~(local_bb6_select10817_pop21_select10817_output_regs_ready)),
	.data_out(local_bb6_select10817_pop21_select10817_result),
	.feedback_in(feedback_data_in_21),
	.feedback_valid_in(feedback_valid_in_21),
	.feedback_stall_out(feedback_stall_out_21)
);

defparam local_bb6_select10817_pop21_select10817_feedback.DATA_WIDTH = 32;
defparam local_bb6_select10817_pop21_select10817_feedback.STYLE = "REGULAR";

assign local_bb6_select10817_pop21_select10817_inputs_ready = (rnode_63to64_forked_0_valid_out_6_NO_SHIFT_REG & rnode_63to64_select10817_0_valid_out_NO_SHIFT_REG);
assign local_bb6_select10817_pop21_select10817_output_regs_ready = ((~(local_bb6_select10817_pop21_select10817_valid_out_0_NO_SHIFT_REG) | ~(local_bb6_select10817_pop21_select10817_stall_in_0)) & (~(local_bb6_select10817_pop21_select10817_valid_out_1_NO_SHIFT_REG) | ~(local_bb6_select10817_pop21_select10817_stall_in_1)));
assign rnode_63to64_forked_0_stall_in_6_NO_SHIFT_REG = (local_bb6_select10817_pop21_select10817_fu_stall_out | ~(local_bb6_select10817_pop21_select10817_inputs_ready));
assign rnode_63to64_select10817_0_stall_in_NO_SHIFT_REG = (local_bb6_select10817_pop21_select10817_fu_stall_out | ~(local_bb6_select10817_pop21_select10817_inputs_ready));
assign local_bb6_select10817_pop21_select10817_causedstall = (local_bb6_select10817_pop21_select10817_inputs_ready && (local_bb6_select10817_pop21_select10817_fu_stall_out && !(~(local_bb6_select10817_pop21_select10817_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_select10817_pop21_select10817_NO_SHIFT_REG <= 'x;
		local_bb6_select10817_pop21_select10817_valid_out_0_NO_SHIFT_REG <= 1'b0;
		local_bb6_select10817_pop21_select10817_valid_out_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_select10817_pop21_select10817_output_regs_ready)
		begin
			local_bb6_select10817_pop21_select10817_NO_SHIFT_REG <= local_bb6_select10817_pop21_select10817_result;
			local_bb6_select10817_pop21_select10817_valid_out_0_NO_SHIFT_REG <= local_bb6_select10817_pop21_select10817_fu_valid_out;
			local_bb6_select10817_pop21_select10817_valid_out_1_NO_SHIFT_REG <= local_bb6_select10817_pop21_select10817_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_select10817_pop21_select10817_stall_in_0))
			begin
				local_bb6_select10817_pop21_select10817_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(local_bb6_select10817_pop21_select10817_stall_in_1))
			begin
				local_bb6_select10817_pop21_select10817_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_exitcond63_stall_local;
wire local_bb6_exitcond63;

assign local_bb6_exitcond63 = (local_bb6_lftr_wideiv62 == 32'h40);

// This section implements an unregistered operation.
// 
wire local_bb6_cmp180_stall_local;
wire local_bb6_cmp180;

assign local_bb6_cmp180 = ($signed(local_bb6_var__u40) > $signed(32'hF));

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_NO_SHIFT_REG;
 logic [63:0] rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_NO_SHIFT_REG;
 logic rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_1_NO_SHIFT_REG;
 logic [63:0] rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_1_NO_SHIFT_REG;
 logic rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_NO_SHIFT_REG;
 logic rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_reg_32_NO_SHIFT_REG;
 logic rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_reg_32_NO_SHIFT_REG;
 logic rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_out_reg_32_NO_SHIFT_REG;
 logic [63:0] rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_NO_SHIFT_REG),
	.valid_in(rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_reg_32_NO_SHIFT_REG),
	.stall_out(rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_reg_32_NO_SHIFT_REG),
	.data_out(rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_NO_SHIFT_REG_fa),
	.valid_out({rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_NO_SHIFT_REG, rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_1_NO_SHIFT_REG}),
	.stall_in({rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_NO_SHIFT_REG, rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_1_NO_SHIFT_REG})
);

defparam rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_fanout_adaptor.DATA_WIDTH = 64;
defparam rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_fanout_adaptor.NUM_FANOUTS = 2;

acl_data_fifo rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_reg_32_NO_SHIFT_REG),
	.valid_out(rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_reg_32_NO_SHIFT_REG),
	.stall_out(rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_out_reg_32_NO_SHIFT_REG),
	.data_in(rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_NO_SHIFT_REG),
	.data_out(rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_NO_SHIFT_REG)
);

defparam rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_fifo.DEPTH = 2;
defparam rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_fifo.DATA_WIDTH = 64;
defparam rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_fifo.IMPL = "ll_reg";

assign rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_inputs_ready_NO_SHIFT_REG = rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_NO_SHIFT_REG;
assign rnode_3to31_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_NO_SHIFT_REG = rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_out_reg_32_NO_SHIFT_REG;
assign rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_NO_SHIFT_REG = rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_NO_SHIFT_REG_fa;
assign rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_1_NO_SHIFT_REG = rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_reg_32_NO_SHIFT_REG_fa;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_valid_out_NO_SHIFT_REG;
 logic rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_NO_SHIFT_REG;
 logic rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_66_NO_SHIFT_REG;
 logic rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635),
	.data_out(rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_66_fifo.DEPTH = 3;
defparam rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_66_inputs_ready_NO_SHIFT_REG = rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_0;
assign rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in_0 = rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_NO_SHIFT_REG = rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_66_NO_SHIFT_REG;
assign rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_stall_in_reg_66_NO_SHIFT_REG = rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_stall_in_NO_SHIFT_REG;
assign rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_valid_out_NO_SHIFT_REG = rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_valid_out_reg_66_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_valid_out_NO_SHIFT_REG;
 logic rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_NO_SHIFT_REG;
 logic rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_66_NO_SHIFT_REG;
 logic rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372),
	.data_out(rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_66_fifo.DEPTH = 3;
defparam rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_66_inputs_ready_NO_SHIFT_REG = rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_0;
assign rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in_0 = rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_NO_SHIFT_REG = rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_66_NO_SHIFT_REG;
assign rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_stall_in_reg_66_NO_SHIFT_REG = rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_stall_in_NO_SHIFT_REG;
assign rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_valid_out_NO_SHIFT_REG = rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_valid_out_reg_66_NO_SHIFT_REG;

// Register node:
//  * latency = 2
//  * capacity = 2
 logic rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_valid_out_NO_SHIFT_REG;
 logic rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_NO_SHIFT_REG;
 logic rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_66_NO_SHIFT_REG;
 logic rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119),
	.data_out(rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_66_fifo.DEPTH = 3;
defparam rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_66_inputs_ready_NO_SHIFT_REG = rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_0;
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_0 = rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_NO_SHIFT_REG = rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_66_NO_SHIFT_REG;
assign rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_stall_in_reg_66_NO_SHIFT_REG = rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_stall_in_NO_SHIFT_REG;
assign rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_valid_out_NO_SHIFT_REG = rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_valid_out_reg_66_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_neg_i_stall_local;
wire [31:0] local_bb6_neg_i;

assign local_bb6_neg_i = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119 ^ 32'hFFFFFFFF);

// This section implements an unregistered operation.
// 
wire local_bb6_and_i10_stall_local;
wire [31:0] local_bb6_and_i10;

assign local_bb6_and_i10 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119 & rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372);

// This section implements an unregistered operation.
// 
wire local_bb6_shl_i2_i21_stall_local;
wire [31:0] local_bb6_shl_i2_i21;

assign local_bb6_shl_i2_i21 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119 << 32'h7);

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i1_i20_stall_local;
wire [31:0] local_bb6_shr_i1_i20;

assign local_bb6_shr_i1_i20 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119 >> 32'h19);

// This section implements an unregistered operation.
// 
wire local_bb6_shl_i7_i17_stall_local;
wire [31:0] local_bb6_shl_i7_i17;

assign local_bb6_shl_i7_i17 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119 << 32'h15);

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i6_i16_stall_local;
wire [31:0] local_bb6_shr_i6_i16;

assign local_bb6_shr_i6_i16 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119 >> 32'hB);

// This section implements an unregistered operation.
// 
wire local_bb6_shl_i_i14_stall_local;
wire [31:0] local_bb6_shl_i_i14;

assign local_bb6_shl_i_i14 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119 << 32'h1A);

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i_i13_stall_local;
wire [31:0] local_bb6_shr_i_i13;

assign local_bb6_shr_i_i13 = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119 >> 32'h6);

// This section implements a staging register.
// 
wire rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_0;
wire rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_0;
 reg rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_0_NO_SHIFT_REG;
wire rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_1;
wire rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_1;
 reg rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_1_NO_SHIFT_REG;
wire rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_2;
wire rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_2;
 reg rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_2_NO_SHIFT_REG;
wire rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_3;
wire rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_3;
 reg rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_3_NO_SHIFT_REG;
wire rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_inputs_ready;
wire rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_local;
 reg rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_staging_valid_NO_SHIFT_REG;
wire rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_combined_valid;
 reg [31:0] rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242;

assign rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_inputs_ready = local_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_NO_SHIFT_REG;
assign rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242 = (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_staging_valid_NO_SHIFT_REG ? rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_staging_reg_NO_SHIFT_REG : local_bb6_C_148_pop9_acl_pop_i32_1013904242_NO_SHIFT_REG);
assign rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_combined_valid = (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_staging_valid_NO_SHIFT_REG | rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_inputs_ready);
assign rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_local = ((rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_0 & ~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_0_NO_SHIFT_REG)) | (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_1 & ~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_1_NO_SHIFT_REG)) | (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_2 & ~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_2_NO_SHIFT_REG)) | (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_3 & ~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_3_NO_SHIFT_REG)));
assign rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_0 = (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_combined_valid & ~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_0_NO_SHIFT_REG));
assign rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_1 = (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_combined_valid & ~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_1_NO_SHIFT_REG));
assign rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_2 = (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_combined_valid & ~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_2_NO_SHIFT_REG));
assign rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_3 = (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_combined_valid & ~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_3_NO_SHIFT_REG));
assign local_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in = (|rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_local)
		begin
			if (~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_staging_valid_NO_SHIFT_REG))
			begin
				rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_staging_valid_NO_SHIFT_REG <= rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_inputs_ready;
			end
		end
		else
		begin
			rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_staging_valid_NO_SHIFT_REG))
		begin
			rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_staging_reg_NO_SHIFT_REG <= local_bb6_C_148_pop9_acl_pop_i32_1013904242_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_2_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_0_NO_SHIFT_REG <= (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_combined_valid & (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_0_NO_SHIFT_REG | ~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_0)) & rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_local);
		rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_1_NO_SHIFT_REG <= (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_combined_valid & (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_1_NO_SHIFT_REG | ~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_1)) & rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_local);
		rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_2_NO_SHIFT_REG <= (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_combined_valid & (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_2_NO_SHIFT_REG | ~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_2)) & rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_local);
		rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_3_NO_SHIFT_REG <= (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_combined_valid & (rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_consumed_3_NO_SHIFT_REG | ~(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_3)) & rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_local);
	end
end


// This section implements a staging register.
// 
wire rstag_65to65_bb6_B_149_pop8_B_149_valid_out_0;
wire rstag_65to65_bb6_B_149_pop8_B_149_stall_in_0;
 reg rstag_65to65_bb6_B_149_pop8_B_149_consumed_0_NO_SHIFT_REG;
wire rstag_65to65_bb6_B_149_pop8_B_149_valid_out_1;
wire rstag_65to65_bb6_B_149_pop8_B_149_stall_in_1;
 reg rstag_65to65_bb6_B_149_pop8_B_149_consumed_1_NO_SHIFT_REG;
wire rstag_65to65_bb6_B_149_pop8_B_149_valid_out_2;
wire rstag_65to65_bb6_B_149_pop8_B_149_stall_in_2;
 reg rstag_65to65_bb6_B_149_pop8_B_149_consumed_2_NO_SHIFT_REG;
wire rstag_65to65_bb6_B_149_pop8_B_149_valid_out_3;
wire rstag_65to65_bb6_B_149_pop8_B_149_stall_in_3;
 reg rstag_65to65_bb6_B_149_pop8_B_149_consumed_3_NO_SHIFT_REG;
wire rstag_65to65_bb6_B_149_pop8_B_149_inputs_ready;
wire rstag_65to65_bb6_B_149_pop8_B_149_stall_local;
 reg rstag_65to65_bb6_B_149_pop8_B_149_staging_valid_NO_SHIFT_REG;
wire rstag_65to65_bb6_B_149_pop8_B_149_combined_valid;
 reg [31:0] rstag_65to65_bb6_B_149_pop8_B_149_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_65to65_bb6_B_149_pop8_B_149;

assign rstag_65to65_bb6_B_149_pop8_B_149_inputs_ready = local_bb6_B_149_pop8_B_149_valid_out_NO_SHIFT_REG;
assign rstag_65to65_bb6_B_149_pop8_B_149 = (rstag_65to65_bb6_B_149_pop8_B_149_staging_valid_NO_SHIFT_REG ? rstag_65to65_bb6_B_149_pop8_B_149_staging_reg_NO_SHIFT_REG : local_bb6_B_149_pop8_B_149_NO_SHIFT_REG);
assign rstag_65to65_bb6_B_149_pop8_B_149_combined_valid = (rstag_65to65_bb6_B_149_pop8_B_149_staging_valid_NO_SHIFT_REG | rstag_65to65_bb6_B_149_pop8_B_149_inputs_ready);
assign rstag_65to65_bb6_B_149_pop8_B_149_stall_local = ((rstag_65to65_bb6_B_149_pop8_B_149_stall_in_0 & ~(rstag_65to65_bb6_B_149_pop8_B_149_consumed_0_NO_SHIFT_REG)) | (rstag_65to65_bb6_B_149_pop8_B_149_stall_in_1 & ~(rstag_65to65_bb6_B_149_pop8_B_149_consumed_1_NO_SHIFT_REG)) | (rstag_65to65_bb6_B_149_pop8_B_149_stall_in_2 & ~(rstag_65to65_bb6_B_149_pop8_B_149_consumed_2_NO_SHIFT_REG)) | (rstag_65to65_bb6_B_149_pop8_B_149_stall_in_3 & ~(rstag_65to65_bb6_B_149_pop8_B_149_consumed_3_NO_SHIFT_REG)));
assign rstag_65to65_bb6_B_149_pop8_B_149_valid_out_0 = (rstag_65to65_bb6_B_149_pop8_B_149_combined_valid & ~(rstag_65to65_bb6_B_149_pop8_B_149_consumed_0_NO_SHIFT_REG));
assign rstag_65to65_bb6_B_149_pop8_B_149_valid_out_1 = (rstag_65to65_bb6_B_149_pop8_B_149_combined_valid & ~(rstag_65to65_bb6_B_149_pop8_B_149_consumed_1_NO_SHIFT_REG));
assign rstag_65to65_bb6_B_149_pop8_B_149_valid_out_2 = (rstag_65to65_bb6_B_149_pop8_B_149_combined_valid & ~(rstag_65to65_bb6_B_149_pop8_B_149_consumed_2_NO_SHIFT_REG));
assign rstag_65to65_bb6_B_149_pop8_B_149_valid_out_3 = (rstag_65to65_bb6_B_149_pop8_B_149_combined_valid & ~(rstag_65to65_bb6_B_149_pop8_B_149_consumed_3_NO_SHIFT_REG));
assign local_bb6_B_149_pop8_B_149_stall_in = (|rstag_65to65_bb6_B_149_pop8_B_149_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_65to65_bb6_B_149_pop8_B_149_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_B_149_pop8_B_149_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_65to65_bb6_B_149_pop8_B_149_stall_local)
		begin
			if (~(rstag_65to65_bb6_B_149_pop8_B_149_staging_valid_NO_SHIFT_REG))
			begin
				rstag_65to65_bb6_B_149_pop8_B_149_staging_valid_NO_SHIFT_REG <= rstag_65to65_bb6_B_149_pop8_B_149_inputs_ready;
			end
		end
		else
		begin
			rstag_65to65_bb6_B_149_pop8_B_149_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_65to65_bb6_B_149_pop8_B_149_staging_valid_NO_SHIFT_REG))
		begin
			rstag_65to65_bb6_B_149_pop8_B_149_staging_reg_NO_SHIFT_REG <= local_bb6_B_149_pop8_B_149_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_65to65_bb6_B_149_pop8_B_149_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_B_149_pop8_B_149_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_B_149_pop8_B_149_consumed_2_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_B_149_pop8_B_149_consumed_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_65to65_bb6_B_149_pop8_B_149_consumed_0_NO_SHIFT_REG <= (rstag_65to65_bb6_B_149_pop8_B_149_combined_valid & (rstag_65to65_bb6_B_149_pop8_B_149_consumed_0_NO_SHIFT_REG | ~(rstag_65to65_bb6_B_149_pop8_B_149_stall_in_0)) & rstag_65to65_bb6_B_149_pop8_B_149_stall_local);
		rstag_65to65_bb6_B_149_pop8_B_149_consumed_1_NO_SHIFT_REG <= (rstag_65to65_bb6_B_149_pop8_B_149_combined_valid & (rstag_65to65_bb6_B_149_pop8_B_149_consumed_1_NO_SHIFT_REG | ~(rstag_65to65_bb6_B_149_pop8_B_149_stall_in_1)) & rstag_65to65_bb6_B_149_pop8_B_149_stall_local);
		rstag_65to65_bb6_B_149_pop8_B_149_consumed_2_NO_SHIFT_REG <= (rstag_65to65_bb6_B_149_pop8_B_149_combined_valid & (rstag_65to65_bb6_B_149_pop8_B_149_consumed_2_NO_SHIFT_REG | ~(rstag_65to65_bb6_B_149_pop8_B_149_stall_in_2)) & rstag_65to65_bb6_B_149_pop8_B_149_stall_local);
		rstag_65to65_bb6_B_149_pop8_B_149_consumed_3_NO_SHIFT_REG <= (rstag_65to65_bb6_B_149_pop8_B_149_combined_valid & (rstag_65to65_bb6_B_149_pop8_B_149_consumed_3_NO_SHIFT_REG | ~(rstag_65to65_bb6_B_149_pop8_B_149_stall_in_3)) & rstag_65to65_bb6_B_149_pop8_B_149_stall_local);
	end
end


// This section implements a staging register.
// 
wire rstag_65to65_bb6_A_150_pop7_A_150_valid_out_0;
wire rstag_65to65_bb6_A_150_pop7_A_150_stall_in_0;
 reg rstag_65to65_bb6_A_150_pop7_A_150_consumed_0_NO_SHIFT_REG;
wire rstag_65to65_bb6_A_150_pop7_A_150_valid_out_1;
wire rstag_65to65_bb6_A_150_pop7_A_150_stall_in_1;
 reg rstag_65to65_bb6_A_150_pop7_A_150_consumed_1_NO_SHIFT_REG;
wire rstag_65to65_bb6_A_150_pop7_A_150_valid_out_2;
wire rstag_65to65_bb6_A_150_pop7_A_150_stall_in_2;
 reg rstag_65to65_bb6_A_150_pop7_A_150_consumed_2_NO_SHIFT_REG;
wire rstag_65to65_bb6_A_150_pop7_A_150_valid_out_3;
wire rstag_65to65_bb6_A_150_pop7_A_150_stall_in_3;
 reg rstag_65to65_bb6_A_150_pop7_A_150_consumed_3_NO_SHIFT_REG;
wire rstag_65to65_bb6_A_150_pop7_A_150_valid_out_4;
wire rstag_65to65_bb6_A_150_pop7_A_150_stall_in_4;
 reg rstag_65to65_bb6_A_150_pop7_A_150_consumed_4_NO_SHIFT_REG;
wire rstag_65to65_bb6_A_150_pop7_A_150_valid_out_5;
wire rstag_65to65_bb6_A_150_pop7_A_150_stall_in_5;
 reg rstag_65to65_bb6_A_150_pop7_A_150_consumed_5_NO_SHIFT_REG;
wire rstag_65to65_bb6_A_150_pop7_A_150_valid_out_6;
wire rstag_65to65_bb6_A_150_pop7_A_150_stall_in_6;
 reg rstag_65to65_bb6_A_150_pop7_A_150_consumed_6_NO_SHIFT_REG;
wire rstag_65to65_bb6_A_150_pop7_A_150_valid_out_7;
wire rstag_65to65_bb6_A_150_pop7_A_150_stall_in_7;
 reg rstag_65to65_bb6_A_150_pop7_A_150_consumed_7_NO_SHIFT_REG;
wire rstag_65to65_bb6_A_150_pop7_A_150_valid_out_8;
wire rstag_65to65_bb6_A_150_pop7_A_150_stall_in_8;
 reg rstag_65to65_bb6_A_150_pop7_A_150_consumed_8_NO_SHIFT_REG;
wire rstag_65to65_bb6_A_150_pop7_A_150_inputs_ready;
wire rstag_65to65_bb6_A_150_pop7_A_150_stall_local;
 reg rstag_65to65_bb6_A_150_pop7_A_150_staging_valid_NO_SHIFT_REG;
wire rstag_65to65_bb6_A_150_pop7_A_150_combined_valid;
 reg [31:0] rstag_65to65_bb6_A_150_pop7_A_150_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_65to65_bb6_A_150_pop7_A_150;

assign rstag_65to65_bb6_A_150_pop7_A_150_inputs_ready = local_bb6_A_150_pop7_A_150_valid_out_NO_SHIFT_REG;
assign rstag_65to65_bb6_A_150_pop7_A_150 = (rstag_65to65_bb6_A_150_pop7_A_150_staging_valid_NO_SHIFT_REG ? rstag_65to65_bb6_A_150_pop7_A_150_staging_reg_NO_SHIFT_REG : local_bb6_A_150_pop7_A_150_NO_SHIFT_REG);
assign rstag_65to65_bb6_A_150_pop7_A_150_combined_valid = (rstag_65to65_bb6_A_150_pop7_A_150_staging_valid_NO_SHIFT_REG | rstag_65to65_bb6_A_150_pop7_A_150_inputs_ready);
assign rstag_65to65_bb6_A_150_pop7_A_150_stall_local = ((rstag_65to65_bb6_A_150_pop7_A_150_stall_in_0 & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_0_NO_SHIFT_REG)) | (rstag_65to65_bb6_A_150_pop7_A_150_stall_in_1 & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_1_NO_SHIFT_REG)) | (rstag_65to65_bb6_A_150_pop7_A_150_stall_in_2 & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_2_NO_SHIFT_REG)) | (rstag_65to65_bb6_A_150_pop7_A_150_stall_in_3 & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_3_NO_SHIFT_REG)) | (rstag_65to65_bb6_A_150_pop7_A_150_stall_in_4 & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_4_NO_SHIFT_REG)) | (rstag_65to65_bb6_A_150_pop7_A_150_stall_in_5 & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_5_NO_SHIFT_REG)) | (rstag_65to65_bb6_A_150_pop7_A_150_stall_in_6 & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_6_NO_SHIFT_REG)) | (rstag_65to65_bb6_A_150_pop7_A_150_stall_in_7 & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_7_NO_SHIFT_REG)) | (rstag_65to65_bb6_A_150_pop7_A_150_stall_in_8 & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_8_NO_SHIFT_REG)));
assign rstag_65to65_bb6_A_150_pop7_A_150_valid_out_0 = (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_0_NO_SHIFT_REG));
assign rstag_65to65_bb6_A_150_pop7_A_150_valid_out_1 = (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_1_NO_SHIFT_REG));
assign rstag_65to65_bb6_A_150_pop7_A_150_valid_out_2 = (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_2_NO_SHIFT_REG));
assign rstag_65to65_bb6_A_150_pop7_A_150_valid_out_3 = (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_3_NO_SHIFT_REG));
assign rstag_65to65_bb6_A_150_pop7_A_150_valid_out_4 = (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_4_NO_SHIFT_REG));
assign rstag_65to65_bb6_A_150_pop7_A_150_valid_out_5 = (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_5_NO_SHIFT_REG));
assign rstag_65to65_bb6_A_150_pop7_A_150_valid_out_6 = (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_6_NO_SHIFT_REG));
assign rstag_65to65_bb6_A_150_pop7_A_150_valid_out_7 = (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_7_NO_SHIFT_REG));
assign rstag_65to65_bb6_A_150_pop7_A_150_valid_out_8 = (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & ~(rstag_65to65_bb6_A_150_pop7_A_150_consumed_8_NO_SHIFT_REG));
assign local_bb6_A_150_pop7_A_150_stall_in = (|rstag_65to65_bb6_A_150_pop7_A_150_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_65to65_bb6_A_150_pop7_A_150_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_A_150_pop7_A_150_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_65to65_bb6_A_150_pop7_A_150_stall_local)
		begin
			if (~(rstag_65to65_bb6_A_150_pop7_A_150_staging_valid_NO_SHIFT_REG))
			begin
				rstag_65to65_bb6_A_150_pop7_A_150_staging_valid_NO_SHIFT_REG <= rstag_65to65_bb6_A_150_pop7_A_150_inputs_ready;
			end
		end
		else
		begin
			rstag_65to65_bb6_A_150_pop7_A_150_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_65to65_bb6_A_150_pop7_A_150_staging_valid_NO_SHIFT_REG))
		begin
			rstag_65to65_bb6_A_150_pop7_A_150_staging_reg_NO_SHIFT_REG <= local_bb6_A_150_pop7_A_150_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_2_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_3_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_4_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_5_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_6_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_7_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_8_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_0_NO_SHIFT_REG <= (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & (rstag_65to65_bb6_A_150_pop7_A_150_consumed_0_NO_SHIFT_REG | ~(rstag_65to65_bb6_A_150_pop7_A_150_stall_in_0)) & rstag_65to65_bb6_A_150_pop7_A_150_stall_local);
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_1_NO_SHIFT_REG <= (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & (rstag_65to65_bb6_A_150_pop7_A_150_consumed_1_NO_SHIFT_REG | ~(rstag_65to65_bb6_A_150_pop7_A_150_stall_in_1)) & rstag_65to65_bb6_A_150_pop7_A_150_stall_local);
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_2_NO_SHIFT_REG <= (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & (rstag_65to65_bb6_A_150_pop7_A_150_consumed_2_NO_SHIFT_REG | ~(rstag_65to65_bb6_A_150_pop7_A_150_stall_in_2)) & rstag_65to65_bb6_A_150_pop7_A_150_stall_local);
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_3_NO_SHIFT_REG <= (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & (rstag_65to65_bb6_A_150_pop7_A_150_consumed_3_NO_SHIFT_REG | ~(rstag_65to65_bb6_A_150_pop7_A_150_stall_in_3)) & rstag_65to65_bb6_A_150_pop7_A_150_stall_local);
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_4_NO_SHIFT_REG <= (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & (rstag_65to65_bb6_A_150_pop7_A_150_consumed_4_NO_SHIFT_REG | ~(rstag_65to65_bb6_A_150_pop7_A_150_stall_in_4)) & rstag_65to65_bb6_A_150_pop7_A_150_stall_local);
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_5_NO_SHIFT_REG <= (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & (rstag_65to65_bb6_A_150_pop7_A_150_consumed_5_NO_SHIFT_REG | ~(rstag_65to65_bb6_A_150_pop7_A_150_stall_in_5)) & rstag_65to65_bb6_A_150_pop7_A_150_stall_local);
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_6_NO_SHIFT_REG <= (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & (rstag_65to65_bb6_A_150_pop7_A_150_consumed_6_NO_SHIFT_REG | ~(rstag_65to65_bb6_A_150_pop7_A_150_stall_in_6)) & rstag_65to65_bb6_A_150_pop7_A_150_stall_local);
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_7_NO_SHIFT_REG <= (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & (rstag_65to65_bb6_A_150_pop7_A_150_consumed_7_NO_SHIFT_REG | ~(rstag_65to65_bb6_A_150_pop7_A_150_stall_in_7)) & rstag_65to65_bb6_A_150_pop7_A_150_stall_local);
		rstag_65to65_bb6_A_150_pop7_A_150_consumed_8_NO_SHIFT_REG <= (rstag_65to65_bb6_A_150_pop7_A_150_combined_valid & (rstag_65to65_bb6_A_150_pop7_A_150_consumed_8_NO_SHIFT_REG | ~(rstag_65to65_bb6_A_150_pop7_A_150_stall_in_8)) & rstag_65to65_bb6_A_150_pop7_A_150_stall_local);
	end
end


// This section implements a staging register.
// 
wire rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_valid_out;
wire rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_stall_in;
wire rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_inputs_ready;
wire rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_stall_local;
 reg rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_staging_valid_NO_SHIFT_REG;
wire rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_combined_valid;
 reg [31:0] rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534;

assign rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_inputs_ready = local_bb6_D_147_pop10_acl_pop_i32__1521486534_valid_out_NO_SHIFT_REG;
assign rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534 = (rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_staging_valid_NO_SHIFT_REG ? rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_staging_reg_NO_SHIFT_REG : local_bb6_D_147_pop10_acl_pop_i32__1521486534_NO_SHIFT_REG);
assign rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_combined_valid = (rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_staging_valid_NO_SHIFT_REG | rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_inputs_ready);
assign rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_valid_out = rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_combined_valid;
assign rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_stall_local = rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_stall_in;
assign local_bb6_D_147_pop10_acl_pop_i32__1521486534_stall_in = (|rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_stall_local)
		begin
			if (~(rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_staging_valid_NO_SHIFT_REG))
			begin
				rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_staging_valid_NO_SHIFT_REG <= rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_inputs_ready;
			end
		end
		else
		begin
			rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_staging_valid_NO_SHIFT_REG))
		begin
			rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_staging_reg_NO_SHIFT_REG <= local_bb6_D_147_pop10_acl_pop_i32__1521486534_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_65to66_bb6__pop19__0_valid_out_NO_SHIFT_REG;
 logic rnode_65to66_bb6__pop19__0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6__pop19__0_NO_SHIFT_REG;
 logic rnode_65to66_bb6__pop19__0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6__pop19__0_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6__pop19__0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6__pop19__0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6__pop19__0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_65to66_bb6__pop19__0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_65to66_bb6__pop19__0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_65to66_bb6__pop19__0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_65to66_bb6__pop19__0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_65to66_bb6__pop19__0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(local_bb6__pop19__NO_SHIFT_REG),
	.data_out(rnode_65to66_bb6__pop19__0_reg_66_NO_SHIFT_REG)
);

defparam rnode_65to66_bb6__pop19__0_reg_66_fifo.DEPTH = 2;
defparam rnode_65to66_bb6__pop19__0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_65to66_bb6__pop19__0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_65to66_bb6__pop19__0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_65to66_bb6__pop19__0_reg_66_inputs_ready_NO_SHIFT_REG = local_bb6__pop19__valid_out_1_NO_SHIFT_REG;
assign local_bb6__pop19__stall_in_1 = rnode_65to66_bb6__pop19__0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6__pop19__0_NO_SHIFT_REG = rnode_65to66_bb6__pop19__0_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6__pop19__0_stall_in_reg_66_NO_SHIFT_REG = rnode_65to66_bb6__pop19__0_stall_in_NO_SHIFT_REG;
assign rnode_65to66_bb6__pop19__0_valid_out_NO_SHIFT_REG = rnode_65to66_bb6__pop19__0_valid_out_reg_66_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_65to66_bb6__pop20__0_valid_out_NO_SHIFT_REG;
 logic rnode_65to66_bb6__pop20__0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6__pop20__0_NO_SHIFT_REG;
 logic rnode_65to66_bb6__pop20__0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6__pop20__0_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6__pop20__0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6__pop20__0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6__pop20__0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_65to66_bb6__pop20__0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_65to66_bb6__pop20__0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_65to66_bb6__pop20__0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_65to66_bb6__pop20__0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_65to66_bb6__pop20__0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(local_bb6__pop20__NO_SHIFT_REG),
	.data_out(rnode_65to66_bb6__pop20__0_reg_66_NO_SHIFT_REG)
);

defparam rnode_65to66_bb6__pop20__0_reg_66_fifo.DEPTH = 2;
defparam rnode_65to66_bb6__pop20__0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_65to66_bb6__pop20__0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_65to66_bb6__pop20__0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_65to66_bb6__pop20__0_reg_66_inputs_ready_NO_SHIFT_REG = local_bb6__pop20__valid_out_1_NO_SHIFT_REG;
assign local_bb6__pop20__stall_in_1 = rnode_65to66_bb6__pop20__0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6__pop20__0_NO_SHIFT_REG = rnode_65to66_bb6__pop20__0_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6__pop20__0_stall_in_reg_66_NO_SHIFT_REG = rnode_65to66_bb6__pop20__0_stall_in_NO_SHIFT_REG;
assign rnode_65to66_bb6__pop20__0_valid_out_NO_SHIFT_REG = rnode_65to66_bb6__pop20__0_valid_out_reg_66_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_65to66_bb6_select10817_pop21_select10817_0_valid_out_NO_SHIFT_REG;
 logic rnode_65to66_bb6_select10817_pop21_select10817_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_select10817_pop21_select10817_0_NO_SHIFT_REG;
 logic rnode_65to66_bb6_select10817_pop21_select10817_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_select10817_pop21_select10817_0_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_select10817_pop21_select10817_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_select10817_pop21_select10817_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_select10817_pop21_select10817_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_65to66_bb6_select10817_pop21_select10817_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_65to66_bb6_select10817_pop21_select10817_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_65to66_bb6_select10817_pop21_select10817_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_65to66_bb6_select10817_pop21_select10817_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_65to66_bb6_select10817_pop21_select10817_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(local_bb6_select10817_pop21_select10817_NO_SHIFT_REG),
	.data_out(rnode_65to66_bb6_select10817_pop21_select10817_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_65to66_bb6_select10817_pop21_select10817_0_reg_66_fifo.DEPTH = 2;
defparam rnode_65to66_bb6_select10817_pop21_select10817_0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_65to66_bb6_select10817_pop21_select10817_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_65to66_bb6_select10817_pop21_select10817_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_65to66_bb6_select10817_pop21_select10817_0_reg_66_inputs_ready_NO_SHIFT_REG = local_bb6_select10817_pop21_select10817_valid_out_1_NO_SHIFT_REG;
assign local_bb6_select10817_pop21_select10817_stall_in_1 = rnode_65to66_bb6_select10817_pop21_select10817_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_select10817_pop21_select10817_0_NO_SHIFT_REG = rnode_65to66_bb6_select10817_pop21_select10817_0_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_select10817_pop21_select10817_0_stall_in_reg_66_NO_SHIFT_REG = rnode_65to66_bb6_select10817_pop21_select10817_0_stall_in_NO_SHIFT_REG;
assign rnode_65to66_bb6_select10817_pop21_select10817_0_valid_out_NO_SHIFT_REG = rnode_65to66_bb6_select10817_pop21_select10817_0_valid_out_reg_66_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_indvars_iv_next57_valid_out_1;
wire local_bb6_indvars_iv_next57_stall_in_1;
 reg local_bb6_indvars_iv_next57_consumed_1_NO_SHIFT_REG;
wire local_bb6_exitcond63_valid_out_1;
wire local_bb6_exitcond63_stall_in_1;
 reg local_bb6_exitcond63_consumed_1_NO_SHIFT_REG;
wire local_bb6_notexit16_valid_out_0;
wire local_bb6_notexit16_stall_in_0;
 reg local_bb6_notexit16_consumed_0_NO_SHIFT_REG;
wire local_bb6_notexit16_valid_out_1;
wire local_bb6_notexit16_stall_in_1;
 reg local_bb6_notexit16_consumed_1_NO_SHIFT_REG;
wire local_bb6_notexit16_inputs_ready;
wire local_bb6_notexit16_stall_local;
wire local_bb6_notexit16;

assign local_bb6_notexit16_inputs_ready = rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_NO_SHIFT_REG;
assign local_bb6_notexit16 = (local_bb6_exitcond63 ^ 1'b1);
assign local_bb6_notexit16_stall_local = ((local_bb6_indvars_iv_next57_stall_in_1 & ~(local_bb6_indvars_iv_next57_consumed_1_NO_SHIFT_REG)) | (local_bb6_exitcond63_stall_in_1 & ~(local_bb6_exitcond63_consumed_1_NO_SHIFT_REG)) | (local_bb6_notexit16_stall_in_0 & ~(local_bb6_notexit16_consumed_0_NO_SHIFT_REG)) | (local_bb6_notexit16_stall_in_1 & ~(local_bb6_notexit16_consumed_1_NO_SHIFT_REG)));
assign local_bb6_indvars_iv_next57_valid_out_1 = (local_bb6_notexit16_inputs_ready & ~(local_bb6_indvars_iv_next57_consumed_1_NO_SHIFT_REG));
assign local_bb6_exitcond63_valid_out_1 = (local_bb6_notexit16_inputs_ready & ~(local_bb6_exitcond63_consumed_1_NO_SHIFT_REG));
assign local_bb6_notexit16_valid_out_0 = (local_bb6_notexit16_inputs_ready & ~(local_bb6_notexit16_consumed_0_NO_SHIFT_REG));
assign local_bb6_notexit16_valid_out_1 = (local_bb6_notexit16_inputs_ready & ~(local_bb6_notexit16_consumed_1_NO_SHIFT_REG));
assign rnode_1to2_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_NO_SHIFT_REG = (|local_bb6_notexit16_stall_local);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_indvars_iv_next57_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb6_exitcond63_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb6_notexit16_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb6_notexit16_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb6_indvars_iv_next57_consumed_1_NO_SHIFT_REG <= (local_bb6_notexit16_inputs_ready & (local_bb6_indvars_iv_next57_consumed_1_NO_SHIFT_REG | ~(local_bb6_indvars_iv_next57_stall_in_1)) & local_bb6_notexit16_stall_local);
		local_bb6_exitcond63_consumed_1_NO_SHIFT_REG <= (local_bb6_notexit16_inputs_ready & (local_bb6_exitcond63_consumed_1_NO_SHIFT_REG | ~(local_bb6_exitcond63_stall_in_1)) & local_bb6_notexit16_stall_local);
		local_bb6_notexit16_consumed_0_NO_SHIFT_REG <= (local_bb6_notexit16_inputs_ready & (local_bb6_notexit16_consumed_0_NO_SHIFT_REG | ~(local_bb6_notexit16_stall_in_0)) & local_bb6_notexit16_stall_local);
		local_bb6_notexit16_consumed_1_NO_SHIFT_REG <= (local_bb6_notexit16_inputs_ready & (local_bb6_notexit16_consumed_1_NO_SHIFT_REG | ~(local_bb6_notexit16_stall_in_1)) & local_bb6_notexit16_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_cmp180_valid_out_1;
wire local_bb6_cmp180_stall_in_1;
 reg local_bb6_cmp180_consumed_1_NO_SHIFT_REG;
wire local_bb6_cmp180_xor_valid_out;
wire local_bb6_cmp180_xor_stall_in;
 reg local_bb6_cmp180_xor_consumed_0_NO_SHIFT_REG;
wire local_bb6_cmp180_xor_inputs_ready;
wire local_bb6_cmp180_xor_stall_local;
wire local_bb6_cmp180_xor;

assign local_bb6_cmp180_xor_inputs_ready = rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_NO_SHIFT_REG;
assign local_bb6_cmp180_xor = (local_bb6_cmp180 ^ 1'b1);
assign local_bb6_cmp180_xor_stall_local = ((local_bb6_cmp180_stall_in_1 & ~(local_bb6_cmp180_consumed_1_NO_SHIFT_REG)) | (local_bb6_cmp180_xor_stall_in & ~(local_bb6_cmp180_xor_consumed_0_NO_SHIFT_REG)));
assign local_bb6_cmp180_valid_out_1 = (local_bb6_cmp180_xor_inputs_ready & ~(local_bb6_cmp180_consumed_1_NO_SHIFT_REG));
assign local_bb6_cmp180_xor_valid_out = (local_bb6_cmp180_xor_inputs_ready & ~(local_bb6_cmp180_xor_consumed_0_NO_SHIFT_REG));
assign rnode_2to3_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_NO_SHIFT_REG = (|local_bb6_cmp180_xor_stall_local);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_cmp180_consumed_1_NO_SHIFT_REG <= 1'b0;
		local_bb6_cmp180_xor_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb6_cmp180_consumed_1_NO_SHIFT_REG <= (local_bb6_cmp180_xor_inputs_ready & (local_bb6_cmp180_consumed_1_NO_SHIFT_REG | ~(local_bb6_cmp180_stall_in_1)) & local_bb6_cmp180_xor_stall_local);
		local_bb6_cmp180_xor_consumed_0_NO_SHIFT_REG <= (local_bb6_cmp180_xor_inputs_ready & (local_bb6_cmp180_xor_consumed_0_NO_SHIFT_REG | ~(local_bb6_cmp180_xor_stall_in)) & local_bb6_cmp180_xor_stall_local);
	end
end


// This section implements a registered operation.
// 
wire local_bb6_arrayidx200_inputs_ready;
 reg local_bb6_arrayidx200_valid_out_NO_SHIFT_REG;
wire local_bb6_arrayidx200_stall_in;
wire local_bb6_arrayidx200_output_regs_ready;
 reg [31:0] local_bb6_arrayidx200_NO_SHIFT_REG;
wire [31:0] local_bb6_arrayidx200_op_wire;
wire local_bb6_arrayidx200_causedstall;

assign local_bb6_arrayidx200_inputs_ready = rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_0_NO_SHIFT_REG;
assign local_bb6_arrayidx200_output_regs_ready = (&(~(local_bb6_arrayidx200_valid_out_NO_SHIFT_REG) | ~(local_bb6_arrayidx200_stall_in)));
assign local_bb6_arrayidx200_op_wire = (64'h0 + (rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_NO_SHIFT_REG << 6'h2));
assign rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_0_NO_SHIFT_REG = (~(local_bb6_arrayidx200_output_regs_ready) | ~(local_bb6_arrayidx200_inputs_ready));
assign local_bb6_arrayidx200_causedstall = (local_bb6_arrayidx200_inputs_ready && (~(local_bb6_arrayidx200_output_regs_ready) && !(~(local_bb6_arrayidx200_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_arrayidx200_NO_SHIFT_REG <= 'x;
		local_bb6_arrayidx200_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_arrayidx200_output_regs_ready)
		begin
			local_bb6_arrayidx200_NO_SHIFT_REG <= local_bb6_arrayidx200_op_wire;
			local_bb6_arrayidx200_valid_out_NO_SHIFT_REG <= local_bb6_arrayidx200_inputs_ready;
		end
		else
		begin
			if (~(local_bb6_arrayidx200_stall_in))
			begin
				local_bb6_arrayidx200_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_arrayidx207_ba_valid_out;
wire local_bb6_arrayidx207_ba_stall_in;
wire local_bb6_arrayidx207_ba_inputs_ready;
wire local_bb6_arrayidx207_ba_stall_local;
wire [63:0] local_bb6_arrayidx207_ba;

assign local_bb6_arrayidx207_ba_inputs_ready = rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_valid_out_1_NO_SHIFT_REG;
assign local_bb6_arrayidx207_ba = (rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_1_NO_SHIFT_REG << 64'h5);
assign local_bb6_arrayidx207_ba_valid_out = local_bb6_arrayidx207_ba_inputs_ready;
assign local_bb6_arrayidx207_ba_stall_local = local_bb6_arrayidx207_ba_stall_in;
assign rnode_31to32_bb6_indvars_iv56_pop6_acl_pop_i64_0_0_stall_in_1_NO_SHIFT_REG = (|local_bb6_arrayidx207_ba_stall_local);

// This section implements an unregistered operation.
// 
wire local_bb6_and1_i11_stall_local;
wire [31:0] local_bb6_and1_i11;

assign local_bb6_and1_i11 = (rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635 & local_bb6_neg_i);

// This section implements an unregistered operation.
// 
wire local_bb6_or_i3_i22_stall_local;
wire [31:0] local_bb6_or_i3_i22;

assign local_bb6_or_i3_i22 = (local_bb6_shr_i1_i20 | local_bb6_shl_i2_i21);

// This section implements an unregistered operation.
// 
wire local_bb6_or_i8_i18_stall_local;
wire [31:0] local_bb6_or_i8_i18;

assign local_bb6_or_i8_i18 = (local_bb6_shr_i6_i16 | local_bb6_shl_i7_i17);

// This section implements an unregistered operation.
// 
wire local_bb6_or_i_i15_stall_local;
wire [31:0] local_bb6_or_i_i15;

assign local_bb6_or_i_i15 = (local_bb6_shr_i_i13 | local_bb6_shl_i_i14);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_valid_out_NO_SHIFT_REG;
 logic rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_NO_SHIFT_REG;
 logic rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242),
	.data_out(rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_66_fifo.DEPTH = 2;
defparam rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_66_inputs_ready_NO_SHIFT_REG = rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_0;
assign rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_0 = rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_NO_SHIFT_REG = rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_stall_in_reg_66_NO_SHIFT_REG = rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_stall_in_NO_SHIFT_REG;
assign rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_valid_out_NO_SHIFT_REG = rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_valid_out_reg_66_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_65to66_bb6_B_149_pop8_B_149_0_valid_out_NO_SHIFT_REG;
 logic rnode_65to66_bb6_B_149_pop8_B_149_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_B_149_pop8_B_149_0_NO_SHIFT_REG;
 logic rnode_65to66_bb6_B_149_pop8_B_149_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_B_149_pop8_B_149_0_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_B_149_pop8_B_149_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_B_149_pop8_B_149_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_B_149_pop8_B_149_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_65to66_bb6_B_149_pop8_B_149_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_65to66_bb6_B_149_pop8_B_149_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_65to66_bb6_B_149_pop8_B_149_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_65to66_bb6_B_149_pop8_B_149_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_65to66_bb6_B_149_pop8_B_149_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(rstag_65to65_bb6_B_149_pop8_B_149),
	.data_out(rnode_65to66_bb6_B_149_pop8_B_149_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_65to66_bb6_B_149_pop8_B_149_0_reg_66_fifo.DEPTH = 2;
defparam rnode_65to66_bb6_B_149_pop8_B_149_0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_65to66_bb6_B_149_pop8_B_149_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_65to66_bb6_B_149_pop8_B_149_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_65to66_bb6_B_149_pop8_B_149_0_reg_66_inputs_ready_NO_SHIFT_REG = rstag_65to65_bb6_B_149_pop8_B_149_valid_out_0;
assign rstag_65to65_bb6_B_149_pop8_B_149_stall_in_0 = rnode_65to66_bb6_B_149_pop8_B_149_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_B_149_pop8_B_149_0_NO_SHIFT_REG = rnode_65to66_bb6_B_149_pop8_B_149_0_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_B_149_pop8_B_149_0_stall_in_reg_66_NO_SHIFT_REG = rnode_65to66_bb6_B_149_pop8_B_149_0_stall_in_NO_SHIFT_REG;
assign rnode_65to66_bb6_B_149_pop8_B_149_0_valid_out_NO_SHIFT_REG = rnode_65to66_bb6_B_149_pop8_B_149_0_valid_out_reg_66_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_and2_i_stall_local;
wire [31:0] local_bb6_and2_i;

assign local_bb6_and2_i = (rstag_65to65_bb6_B_149_pop8_B_149 & rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242);

// This section implements an unregistered operation.
// 
wire local_bb6_and1_i33_stall_local;
wire [31:0] local_bb6_and1_i33;

assign local_bb6_and1_i33 = (rstag_65to65_bb6_B_149_pop8_B_149 ^ rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_65to66_bb6_A_150_pop7_A_150_0_valid_out_NO_SHIFT_REG;
 logic rnode_65to66_bb6_A_150_pop7_A_150_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_A_150_pop7_A_150_0_NO_SHIFT_REG;
 logic rnode_65to66_bb6_A_150_pop7_A_150_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_A_150_pop7_A_150_0_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_A_150_pop7_A_150_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_A_150_pop7_A_150_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_A_150_pop7_A_150_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_65to66_bb6_A_150_pop7_A_150_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_65to66_bb6_A_150_pop7_A_150_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_65to66_bb6_A_150_pop7_A_150_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_65to66_bb6_A_150_pop7_A_150_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_65to66_bb6_A_150_pop7_A_150_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(rstag_65to65_bb6_A_150_pop7_A_150),
	.data_out(rnode_65to66_bb6_A_150_pop7_A_150_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_65to66_bb6_A_150_pop7_A_150_0_reg_66_fifo.DEPTH = 2;
defparam rnode_65to66_bb6_A_150_pop7_A_150_0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_65to66_bb6_A_150_pop7_A_150_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_65to66_bb6_A_150_pop7_A_150_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_65to66_bb6_A_150_pop7_A_150_0_reg_66_inputs_ready_NO_SHIFT_REG = rstag_65to65_bb6_A_150_pop7_A_150_valid_out_0;
assign rstag_65to65_bb6_A_150_pop7_A_150_stall_in_0 = rnode_65to66_bb6_A_150_pop7_A_150_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_A_150_pop7_A_150_0_NO_SHIFT_REG = rnode_65to66_bb6_A_150_pop7_A_150_0_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_A_150_pop7_A_150_0_stall_in_reg_66_NO_SHIFT_REG = rnode_65to66_bb6_A_150_pop7_A_150_0_stall_in_NO_SHIFT_REG;
assign rnode_65to66_bb6_A_150_pop7_A_150_0_valid_out_NO_SHIFT_REG = rnode_65to66_bb6_A_150_pop7_A_150_0_valid_out_reg_66_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_shl_i2_i7_stall_local;
wire [31:0] local_bb6_shl_i2_i7;

assign local_bb6_shl_i2_i7 = (rstag_65to65_bb6_A_150_pop7_A_150 << 32'hA);

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i1_i6_stall_local;
wire [31:0] local_bb6_shr_i1_i6;

assign local_bb6_shr_i1_i6 = (rstag_65to65_bb6_A_150_pop7_A_150 >> 32'h16);

// This section implements an unregistered operation.
// 
wire local_bb6_shl_i7_i_stall_local;
wire [31:0] local_bb6_shl_i7_i;

assign local_bb6_shl_i7_i = (rstag_65to65_bb6_A_150_pop7_A_150 << 32'h13);

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i6_i_stall_local;
wire [31:0] local_bb6_shr_i6_i;

assign local_bb6_shr_i6_i = (rstag_65to65_bb6_A_150_pop7_A_150 >> 32'hD);

// This section implements an unregistered operation.
// 
wire local_bb6_shl_i_i3_stall_local;
wire [31:0] local_bb6_shl_i_i3;

assign local_bb6_shl_i_i3 = (rstag_65to65_bb6_A_150_pop7_A_150 << 32'h1E);

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i_i2_stall_local;
wire [31:0] local_bb6_shr_i_i2;

assign local_bb6_shr_i_i2 = (rstag_65to65_bb6_A_150_pop7_A_150 >> 32'h2);

// Register node:
//  * latency = 63
//  * capacity = 63
 logic rnode_2to65_bb6_exitcond63_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to65_bb6_exitcond63_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to65_bb6_exitcond63_0_NO_SHIFT_REG;
 logic rnode_2to65_bb6_exitcond63_0_reg_65_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to65_bb6_exitcond63_0_reg_65_NO_SHIFT_REG;
 logic rnode_2to65_bb6_exitcond63_0_valid_out_reg_65_NO_SHIFT_REG;
 logic rnode_2to65_bb6_exitcond63_0_stall_in_reg_65_NO_SHIFT_REG;
 logic rnode_2to65_bb6_exitcond63_0_stall_out_reg_65_NO_SHIFT_REG;

acl_data_fifo rnode_2to65_bb6_exitcond63_0_reg_65_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to65_bb6_exitcond63_0_reg_65_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to65_bb6_exitcond63_0_stall_in_reg_65_NO_SHIFT_REG),
	.valid_out(rnode_2to65_bb6_exitcond63_0_valid_out_reg_65_NO_SHIFT_REG),
	.stall_out(rnode_2to65_bb6_exitcond63_0_stall_out_reg_65_NO_SHIFT_REG),
	.data_in(local_bb6_exitcond63),
	.data_out(rnode_2to65_bb6_exitcond63_0_reg_65_NO_SHIFT_REG)
);

defparam rnode_2to65_bb6_exitcond63_0_reg_65_fifo.DEPTH = 64;
defparam rnode_2to65_bb6_exitcond63_0_reg_65_fifo.DATA_WIDTH = 1;
defparam rnode_2to65_bb6_exitcond63_0_reg_65_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to65_bb6_exitcond63_0_reg_65_fifo.IMPL = "ram";

assign rnode_2to65_bb6_exitcond63_0_reg_65_inputs_ready_NO_SHIFT_REG = local_bb6_exitcond63_valid_out_1;
assign local_bb6_exitcond63_stall_in_1 = rnode_2to65_bb6_exitcond63_0_stall_out_reg_65_NO_SHIFT_REG;
assign rnode_2to65_bb6_exitcond63_0_NO_SHIFT_REG = rnode_2to65_bb6_exitcond63_0_reg_65_NO_SHIFT_REG;
assign rnode_2to65_bb6_exitcond63_0_stall_in_reg_65_NO_SHIFT_REG = rnode_2to65_bb6_exitcond63_0_stall_in_NO_SHIFT_REG;
assign rnode_2to65_bb6_exitcond63_0_valid_out_NO_SHIFT_REG = rnode_2to65_bb6_exitcond63_0_valid_out_reg_65_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb6_indvars_iv56_push6_indvars_iv_next57_inputs_ready;
 reg local_bb6_indvars_iv56_push6_indvars_iv_next57_valid_out_NO_SHIFT_REG;
wire local_bb6_indvars_iv56_push6_indvars_iv_next57_stall_in;
wire local_bb6_indvars_iv56_push6_indvars_iv_next57_output_regs_ready;
wire [63:0] local_bb6_indvars_iv56_push6_indvars_iv_next57_result;
wire local_bb6_indvars_iv56_push6_indvars_iv_next57_fu_valid_out;
wire local_bb6_indvars_iv56_push6_indvars_iv_next57_fu_stall_out;
 reg [63:0] local_bb6_indvars_iv56_push6_indvars_iv_next57_NO_SHIFT_REG;
wire local_bb6_indvars_iv56_push6_indvars_iv_next57_causedstall;

acl_push local_bb6_indvars_iv56_push6_indvars_iv_next57_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(local_bb6_notexit16),
	.predicate(1'b0),
	.data_in(local_bb6_indvars_iv_next57),
	.stall_out(local_bb6_indvars_iv56_push6_indvars_iv_next57_fu_stall_out),
	.valid_in(local_bb6_indvars_iv56_push6_indvars_iv_next57_inputs_ready),
	.valid_out(local_bb6_indvars_iv56_push6_indvars_iv_next57_fu_valid_out),
	.stall_in(~(local_bb6_indvars_iv56_push6_indvars_iv_next57_output_regs_ready)),
	.data_out(local_bb6_indvars_iv56_push6_indvars_iv_next57_result),
	.feedback_out(feedback_data_out_6),
	.feedback_valid_out(feedback_valid_out_6),
	.feedback_stall_in(feedback_stall_in_6)
);

defparam local_bb6_indvars_iv56_push6_indvars_iv_next57_feedback.STALLFREE = 0;
defparam local_bb6_indvars_iv56_push6_indvars_iv_next57_feedback.DATA_WIDTH = 64;
defparam local_bb6_indvars_iv56_push6_indvars_iv_next57_feedback.FIFO_DEPTH = 65;
defparam local_bb6_indvars_iv56_push6_indvars_iv_next57_feedback.MIN_FIFO_LATENCY = 62;
defparam local_bb6_indvars_iv56_push6_indvars_iv_next57_feedback.STYLE = "REGULAR";

assign local_bb6_indvars_iv56_push6_indvars_iv_next57_inputs_ready = (local_bb6_indvars_iv_next57_valid_out_1 & local_bb6_notexit16_valid_out_0);
assign local_bb6_indvars_iv56_push6_indvars_iv_next57_output_regs_ready = (&(~(local_bb6_indvars_iv56_push6_indvars_iv_next57_valid_out_NO_SHIFT_REG) | ~(local_bb6_indvars_iv56_push6_indvars_iv_next57_stall_in)));
assign local_bb6_indvars_iv_next57_stall_in_1 = (local_bb6_indvars_iv56_push6_indvars_iv_next57_fu_stall_out | ~(local_bb6_indvars_iv56_push6_indvars_iv_next57_inputs_ready));
assign local_bb6_notexit16_stall_in_0 = (local_bb6_indvars_iv56_push6_indvars_iv_next57_fu_stall_out | ~(local_bb6_indvars_iv56_push6_indvars_iv_next57_inputs_ready));
assign local_bb6_indvars_iv56_push6_indvars_iv_next57_causedstall = (local_bb6_indvars_iv56_push6_indvars_iv_next57_inputs_ready && (local_bb6_indvars_iv56_push6_indvars_iv_next57_fu_stall_out && !(~(local_bb6_indvars_iv56_push6_indvars_iv_next57_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_indvars_iv56_push6_indvars_iv_next57_NO_SHIFT_REG <= 'x;
		local_bb6_indvars_iv56_push6_indvars_iv_next57_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_indvars_iv56_push6_indvars_iv_next57_output_regs_ready)
		begin
			local_bb6_indvars_iv56_push6_indvars_iv_next57_NO_SHIFT_REG <= local_bb6_indvars_iv56_push6_indvars_iv_next57_result;
			local_bb6_indvars_iv56_push6_indvars_iv_next57_valid_out_NO_SHIFT_REG <= local_bb6_indvars_iv56_push6_indvars_iv_next57_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_indvars_iv56_push6_indvars_iv_next57_stall_in))
			begin
				local_bb6_indvars_iv56_push6_indvars_iv_next57_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 60
//  * capacity = 60
 logic rnode_2to62_bb6_notexit16_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to62_bb6_notexit16_0_stall_in_NO_SHIFT_REG;
 logic rnode_2to62_bb6_notexit16_0_NO_SHIFT_REG;
 logic rnode_2to62_bb6_notexit16_0_reg_62_inputs_ready_NO_SHIFT_REG;
 logic rnode_2to62_bb6_notexit16_0_reg_62_NO_SHIFT_REG;
 logic rnode_2to62_bb6_notexit16_0_valid_out_reg_62_NO_SHIFT_REG;
 logic rnode_2to62_bb6_notexit16_0_stall_in_reg_62_NO_SHIFT_REG;
 logic rnode_2to62_bb6_notexit16_0_stall_out_reg_62_NO_SHIFT_REG;

acl_data_fifo rnode_2to62_bb6_notexit16_0_reg_62_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to62_bb6_notexit16_0_reg_62_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to62_bb6_notexit16_0_stall_in_reg_62_NO_SHIFT_REG),
	.valid_out(rnode_2to62_bb6_notexit16_0_valid_out_reg_62_NO_SHIFT_REG),
	.stall_out(rnode_2to62_bb6_notexit16_0_stall_out_reg_62_NO_SHIFT_REG),
	.data_in(local_bb6_notexit16),
	.data_out(rnode_2to62_bb6_notexit16_0_reg_62_NO_SHIFT_REG)
);

defparam rnode_2to62_bb6_notexit16_0_reg_62_fifo.DEPTH = 61;
defparam rnode_2to62_bb6_notexit16_0_reg_62_fifo.DATA_WIDTH = 1;
defparam rnode_2to62_bb6_notexit16_0_reg_62_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to62_bb6_notexit16_0_reg_62_fifo.IMPL = "ram";

assign rnode_2to62_bb6_notexit16_0_reg_62_inputs_ready_NO_SHIFT_REG = local_bb6_notexit16_valid_out_1;
assign local_bb6_notexit16_stall_in_1 = rnode_2to62_bb6_notexit16_0_stall_out_reg_62_NO_SHIFT_REG;
assign rnode_2to62_bb6_notexit16_0_NO_SHIFT_REG = rnode_2to62_bb6_notexit16_0_reg_62_NO_SHIFT_REG;
assign rnode_2to62_bb6_notexit16_0_stall_in_reg_62_NO_SHIFT_REG = rnode_2to62_bb6_notexit16_0_stall_in_NO_SHIFT_REG;
assign rnode_2to62_bb6_notexit16_0_valid_out_NO_SHIFT_REG = rnode_2to62_bb6_notexit16_0_valid_out_reg_62_NO_SHIFT_REG;

// Register node:
//  * latency = 29
//  * capacity = 29
 logic rnode_3to32_bb6_cmp180_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to32_bb6_cmp180_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to32_bb6_cmp180_0_NO_SHIFT_REG;
 logic rnode_3to32_bb6_cmp180_0_reg_32_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to32_bb6_cmp180_0_reg_32_NO_SHIFT_REG;
 logic rnode_3to32_bb6_cmp180_0_valid_out_reg_32_NO_SHIFT_REG;
 logic rnode_3to32_bb6_cmp180_0_stall_in_reg_32_NO_SHIFT_REG;
 logic rnode_3to32_bb6_cmp180_0_stall_out_reg_32_NO_SHIFT_REG;

acl_data_fifo rnode_3to32_bb6_cmp180_0_reg_32_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to32_bb6_cmp180_0_reg_32_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to32_bb6_cmp180_0_stall_in_reg_32_NO_SHIFT_REG),
	.valid_out(rnode_3to32_bb6_cmp180_0_valid_out_reg_32_NO_SHIFT_REG),
	.stall_out(rnode_3to32_bb6_cmp180_0_stall_out_reg_32_NO_SHIFT_REG),
	.data_in(local_bb6_cmp180),
	.data_out(rnode_3to32_bb6_cmp180_0_reg_32_NO_SHIFT_REG)
);

defparam rnode_3to32_bb6_cmp180_0_reg_32_fifo.DEPTH = 30;
defparam rnode_3to32_bb6_cmp180_0_reg_32_fifo.DATA_WIDTH = 1;
defparam rnode_3to32_bb6_cmp180_0_reg_32_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_3to32_bb6_cmp180_0_reg_32_fifo.IMPL = "ram";

assign rnode_3to32_bb6_cmp180_0_reg_32_inputs_ready_NO_SHIFT_REG = local_bb6_cmp180_valid_out_1;
assign local_bb6_cmp180_stall_in_1 = rnode_3to32_bb6_cmp180_0_stall_out_reg_32_NO_SHIFT_REG;
assign rnode_3to32_bb6_cmp180_0_NO_SHIFT_REG = rnode_3to32_bb6_cmp180_0_reg_32_NO_SHIFT_REG;
assign rnode_3to32_bb6_cmp180_0_stall_in_reg_32_NO_SHIFT_REG = rnode_3to32_bb6_cmp180_0_stall_in_NO_SHIFT_REG;
assign rnode_3to32_bb6_cmp180_0_valid_out_NO_SHIFT_REG = rnode_3to32_bb6_cmp180_0_valid_out_reg_32_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_3to3_bb6_cmp180_xor_valid_out_0;
wire rstag_3to3_bb6_cmp180_xor_stall_in_0;
 reg rstag_3to3_bb6_cmp180_xor_consumed_0_NO_SHIFT_REG;
wire rstag_3to3_bb6_cmp180_xor_valid_out_1;
wire rstag_3to3_bb6_cmp180_xor_stall_in_1;
 reg rstag_3to3_bb6_cmp180_xor_consumed_1_NO_SHIFT_REG;
wire rstag_3to3_bb6_cmp180_xor_valid_out_2;
wire rstag_3to3_bb6_cmp180_xor_stall_in_2;
 reg rstag_3to3_bb6_cmp180_xor_consumed_2_NO_SHIFT_REG;
wire rstag_3to3_bb6_cmp180_xor_valid_out_3;
wire rstag_3to3_bb6_cmp180_xor_stall_in_3;
 reg rstag_3to3_bb6_cmp180_xor_consumed_3_NO_SHIFT_REG;
wire rstag_3to3_bb6_cmp180_xor_valid_out_4;
wire rstag_3to3_bb6_cmp180_xor_stall_in_4;
 reg rstag_3to3_bb6_cmp180_xor_consumed_4_NO_SHIFT_REG;
wire rstag_3to3_bb6_cmp180_xor_inputs_ready;
wire rstag_3to3_bb6_cmp180_xor_stall_local;
 reg rstag_3to3_bb6_cmp180_xor_staging_valid_NO_SHIFT_REG;
wire rstag_3to3_bb6_cmp180_xor_combined_valid;
 reg rstag_3to3_bb6_cmp180_xor_staging_reg_NO_SHIFT_REG;
wire rstag_3to3_bb6_cmp180_xor;

assign rstag_3to3_bb6_cmp180_xor_inputs_ready = local_bb6_cmp180_xor_valid_out;
assign rstag_3to3_bb6_cmp180_xor = (rstag_3to3_bb6_cmp180_xor_staging_valid_NO_SHIFT_REG ? rstag_3to3_bb6_cmp180_xor_staging_reg_NO_SHIFT_REG : local_bb6_cmp180_xor);
assign rstag_3to3_bb6_cmp180_xor_combined_valid = (rstag_3to3_bb6_cmp180_xor_staging_valid_NO_SHIFT_REG | rstag_3to3_bb6_cmp180_xor_inputs_ready);
assign rstag_3to3_bb6_cmp180_xor_stall_local = ((rstag_3to3_bb6_cmp180_xor_stall_in_0 & ~(rstag_3to3_bb6_cmp180_xor_consumed_0_NO_SHIFT_REG)) | (rstag_3to3_bb6_cmp180_xor_stall_in_1 & ~(rstag_3to3_bb6_cmp180_xor_consumed_1_NO_SHIFT_REG)) | (rstag_3to3_bb6_cmp180_xor_stall_in_2 & ~(rstag_3to3_bb6_cmp180_xor_consumed_2_NO_SHIFT_REG)) | (rstag_3to3_bb6_cmp180_xor_stall_in_3 & ~(rstag_3to3_bb6_cmp180_xor_consumed_3_NO_SHIFT_REG)) | (rstag_3to3_bb6_cmp180_xor_stall_in_4 & ~(rstag_3to3_bb6_cmp180_xor_consumed_4_NO_SHIFT_REG)));
assign rstag_3to3_bb6_cmp180_xor_valid_out_0 = (rstag_3to3_bb6_cmp180_xor_combined_valid & ~(rstag_3to3_bb6_cmp180_xor_consumed_0_NO_SHIFT_REG));
assign rstag_3to3_bb6_cmp180_xor_valid_out_1 = (rstag_3to3_bb6_cmp180_xor_combined_valid & ~(rstag_3to3_bb6_cmp180_xor_consumed_1_NO_SHIFT_REG));
assign rstag_3to3_bb6_cmp180_xor_valid_out_2 = (rstag_3to3_bb6_cmp180_xor_combined_valid & ~(rstag_3to3_bb6_cmp180_xor_consumed_2_NO_SHIFT_REG));
assign rstag_3to3_bb6_cmp180_xor_valid_out_3 = (rstag_3to3_bb6_cmp180_xor_combined_valid & ~(rstag_3to3_bb6_cmp180_xor_consumed_3_NO_SHIFT_REG));
assign rstag_3to3_bb6_cmp180_xor_valid_out_4 = (rstag_3to3_bb6_cmp180_xor_combined_valid & ~(rstag_3to3_bb6_cmp180_xor_consumed_4_NO_SHIFT_REG));
assign local_bb6_cmp180_xor_stall_in = (|rstag_3to3_bb6_cmp180_xor_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb6_cmp180_xor_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb6_cmp180_xor_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_3to3_bb6_cmp180_xor_stall_local)
		begin
			if (~(rstag_3to3_bb6_cmp180_xor_staging_valid_NO_SHIFT_REG))
			begin
				rstag_3to3_bb6_cmp180_xor_staging_valid_NO_SHIFT_REG <= rstag_3to3_bb6_cmp180_xor_inputs_ready;
			end
		end
		else
		begin
			rstag_3to3_bb6_cmp180_xor_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_3to3_bb6_cmp180_xor_staging_valid_NO_SHIFT_REG))
		begin
			rstag_3to3_bb6_cmp180_xor_staging_reg_NO_SHIFT_REG <= local_bb6_cmp180_xor;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_3to3_bb6_cmp180_xor_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb6_cmp180_xor_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb6_cmp180_xor_consumed_2_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb6_cmp180_xor_consumed_3_NO_SHIFT_REG <= 1'b0;
		rstag_3to3_bb6_cmp180_xor_consumed_4_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_3to3_bb6_cmp180_xor_consumed_0_NO_SHIFT_REG <= (rstag_3to3_bb6_cmp180_xor_combined_valid & (rstag_3to3_bb6_cmp180_xor_consumed_0_NO_SHIFT_REG | ~(rstag_3to3_bb6_cmp180_xor_stall_in_0)) & rstag_3to3_bb6_cmp180_xor_stall_local);
		rstag_3to3_bb6_cmp180_xor_consumed_1_NO_SHIFT_REG <= (rstag_3to3_bb6_cmp180_xor_combined_valid & (rstag_3to3_bb6_cmp180_xor_consumed_1_NO_SHIFT_REG | ~(rstag_3to3_bb6_cmp180_xor_stall_in_1)) & rstag_3to3_bb6_cmp180_xor_stall_local);
		rstag_3to3_bb6_cmp180_xor_consumed_2_NO_SHIFT_REG <= (rstag_3to3_bb6_cmp180_xor_combined_valid & (rstag_3to3_bb6_cmp180_xor_consumed_2_NO_SHIFT_REG | ~(rstag_3to3_bb6_cmp180_xor_stall_in_2)) & rstag_3to3_bb6_cmp180_xor_stall_local);
		rstag_3to3_bb6_cmp180_xor_consumed_3_NO_SHIFT_REG <= (rstag_3to3_bb6_cmp180_xor_combined_valid & (rstag_3to3_bb6_cmp180_xor_consumed_3_NO_SHIFT_REG | ~(rstag_3to3_bb6_cmp180_xor_stall_in_3)) & rstag_3to3_bb6_cmp180_xor_stall_local);
		rstag_3to3_bb6_cmp180_xor_consumed_4_NO_SHIFT_REG <= (rstag_3to3_bb6_cmp180_xor_combined_valid & (rstag_3to3_bb6_cmp180_xor_consumed_4_NO_SHIFT_REG | ~(rstag_3to3_bb6_cmp180_xor_stall_in_4)) & rstag_3to3_bb6_cmp180_xor_stall_local);
	end
end


// This section implements a staging register.
// 
wire rstag_33to33_bb6_arrayidx200_valid_out_0;
wire rstag_33to33_bb6_arrayidx200_stall_in_0;
 reg rstag_33to33_bb6_arrayidx200_consumed_0_NO_SHIFT_REG;
wire rstag_33to33_bb6_arrayidx200_valid_out_1;
wire rstag_33to33_bb6_arrayidx200_stall_in_1;
 reg rstag_33to33_bb6_arrayidx200_consumed_1_NO_SHIFT_REG;
wire rstag_33to33_bb6_arrayidx200_inputs_ready;
wire rstag_33to33_bb6_arrayidx200_stall_local;
 reg rstag_33to33_bb6_arrayidx200_staging_valid_NO_SHIFT_REG;
wire rstag_33to33_bb6_arrayidx200_combined_valid;
 reg [31:0] rstag_33to33_bb6_arrayidx200_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_33to33_bb6_arrayidx200;

assign rstag_33to33_bb6_arrayidx200_inputs_ready = local_bb6_arrayidx200_valid_out_NO_SHIFT_REG;
assign rstag_33to33_bb6_arrayidx200 = (rstag_33to33_bb6_arrayidx200_staging_valid_NO_SHIFT_REG ? rstag_33to33_bb6_arrayidx200_staging_reg_NO_SHIFT_REG : local_bb6_arrayidx200_NO_SHIFT_REG);
assign rstag_33to33_bb6_arrayidx200_combined_valid = (rstag_33to33_bb6_arrayidx200_staging_valid_NO_SHIFT_REG | rstag_33to33_bb6_arrayidx200_inputs_ready);
assign rstag_33to33_bb6_arrayidx200_stall_local = ((rstag_33to33_bb6_arrayidx200_stall_in_0 & ~(rstag_33to33_bb6_arrayidx200_consumed_0_NO_SHIFT_REG)) | (rstag_33to33_bb6_arrayidx200_stall_in_1 & ~(rstag_33to33_bb6_arrayidx200_consumed_1_NO_SHIFT_REG)));
assign rstag_33to33_bb6_arrayidx200_valid_out_0 = (rstag_33to33_bb6_arrayidx200_combined_valid & ~(rstag_33to33_bb6_arrayidx200_consumed_0_NO_SHIFT_REG));
assign rstag_33to33_bb6_arrayidx200_valid_out_1 = (rstag_33to33_bb6_arrayidx200_combined_valid & ~(rstag_33to33_bb6_arrayidx200_consumed_1_NO_SHIFT_REG));
assign local_bb6_arrayidx200_stall_in = (|rstag_33to33_bb6_arrayidx200_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_33to33_bb6_arrayidx200_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_33to33_bb6_arrayidx200_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_33to33_bb6_arrayidx200_stall_local)
		begin
			if (~(rstag_33to33_bb6_arrayidx200_staging_valid_NO_SHIFT_REG))
			begin
				rstag_33to33_bb6_arrayidx200_staging_valid_NO_SHIFT_REG <= rstag_33to33_bb6_arrayidx200_inputs_ready;
			end
		end
		else
		begin
			rstag_33to33_bb6_arrayidx200_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_33to33_bb6_arrayidx200_staging_valid_NO_SHIFT_REG))
		begin
			rstag_33to33_bb6_arrayidx200_staging_reg_NO_SHIFT_REG <= local_bb6_arrayidx200_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_33to33_bb6_arrayidx200_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_33to33_bb6_arrayidx200_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_33to33_bb6_arrayidx200_consumed_0_NO_SHIFT_REG <= (rstag_33to33_bb6_arrayidx200_combined_valid & (rstag_33to33_bb6_arrayidx200_consumed_0_NO_SHIFT_REG | ~(rstag_33to33_bb6_arrayidx200_stall_in_0)) & rstag_33to33_bb6_arrayidx200_stall_local);
		rstag_33to33_bb6_arrayidx200_consumed_1_NO_SHIFT_REG <= (rstag_33to33_bb6_arrayidx200_combined_valid & (rstag_33to33_bb6_arrayidx200_consumed_1_NO_SHIFT_REG | ~(rstag_33to33_bb6_arrayidx200_stall_in_1)) & rstag_33to33_bb6_arrayidx200_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_32to33_bb6_arrayidx207_ba_0_valid_out_NO_SHIFT_REG;
 logic rnode_32to33_bb6_arrayidx207_ba_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_32to33_bb6_arrayidx207_ba_0_NO_SHIFT_REG;
 logic rnode_32to33_bb6_arrayidx207_ba_0_reg_33_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_32to33_bb6_arrayidx207_ba_0_reg_33_NO_SHIFT_REG;
 logic rnode_32to33_bb6_arrayidx207_ba_0_valid_out_reg_33_NO_SHIFT_REG;
 logic rnode_32to33_bb6_arrayidx207_ba_0_stall_in_reg_33_NO_SHIFT_REG;
 logic rnode_32to33_bb6_arrayidx207_ba_0_stall_out_reg_33_NO_SHIFT_REG;

acl_data_fifo rnode_32to33_bb6_arrayidx207_ba_0_reg_33_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_32to33_bb6_arrayidx207_ba_0_reg_33_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_32to33_bb6_arrayidx207_ba_0_stall_in_reg_33_NO_SHIFT_REG),
	.valid_out(rnode_32to33_bb6_arrayidx207_ba_0_valid_out_reg_33_NO_SHIFT_REG),
	.stall_out(rnode_32to33_bb6_arrayidx207_ba_0_stall_out_reg_33_NO_SHIFT_REG),
	.data_in(local_bb6_arrayidx207_ba),
	.data_out(rnode_32to33_bb6_arrayidx207_ba_0_reg_33_NO_SHIFT_REG)
);

defparam rnode_32to33_bb6_arrayidx207_ba_0_reg_33_fifo.DEPTH = 2;
defparam rnode_32to33_bb6_arrayidx207_ba_0_reg_33_fifo.DATA_WIDTH = 64;
defparam rnode_32to33_bb6_arrayidx207_ba_0_reg_33_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_32to33_bb6_arrayidx207_ba_0_reg_33_fifo.IMPL = "ll_reg";

assign rnode_32to33_bb6_arrayidx207_ba_0_reg_33_inputs_ready_NO_SHIFT_REG = local_bb6_arrayidx207_ba_valid_out;
assign local_bb6_arrayidx207_ba_stall_in = rnode_32to33_bb6_arrayidx207_ba_0_stall_out_reg_33_NO_SHIFT_REG;
assign rnode_32to33_bb6_arrayidx207_ba_0_NO_SHIFT_REG = rnode_32to33_bb6_arrayidx207_ba_0_reg_33_NO_SHIFT_REG;
assign rnode_32to33_bb6_arrayidx207_ba_0_stall_in_reg_33_NO_SHIFT_REG = rnode_32to33_bb6_arrayidx207_ba_0_stall_in_NO_SHIFT_REG;
assign rnode_32to33_bb6_arrayidx207_ba_0_valid_out_NO_SHIFT_REG = rnode_32to33_bb6_arrayidx207_ba_0_valid_out_reg_33_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_xor_i12_stall_local;
wire [31:0] local_bb6_xor_i12;

assign local_bb6_xor_i12 = (local_bb6_and_i10 ^ local_bb6_and1_i11);

// This section implements an unregistered operation.
// 
wire local_bb6_xor_i19_stall_local;
wire [31:0] local_bb6_xor_i19;

assign local_bb6_xor_i19 = (local_bb6_or_i8_i18 ^ local_bb6_or_i3_i22);

// This section implements an unregistered operation.
// 
wire local_bb6_xor_i1_stall_local;
wire [31:0] local_bb6_xor_i1;

assign local_bb6_xor_i1 = (rstag_65to65_bb6_A_150_pop7_A_150 & local_bb6_and1_i33);

// This section implements an unregistered operation.
// 
wire local_bb6_or_i3_i8_stall_local;
wire [31:0] local_bb6_or_i3_i8;

assign local_bb6_or_i3_i8 = (local_bb6_shr_i1_i6 | local_bb6_shl_i2_i7);

// This section implements an unregistered operation.
// 
wire local_bb6_or_i8_i_stall_local;
wire [31:0] local_bb6_or_i8_i;

assign local_bb6_or_i8_i = (local_bb6_shr_i6_i | local_bb6_shl_i7_i);

// This section implements an unregistered operation.
// 
wire local_bb6_or_i_i4_stall_local;
wire [31:0] local_bb6_or_i_i4;

assign local_bb6_or_i_i4 = (local_bb6_shr_i_i2 | local_bb6_shl_i_i3);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_65to66_bb6_exitcond63_0_valid_out_NO_SHIFT_REG;
 logic rnode_65to66_bb6_exitcond63_0_stall_in_NO_SHIFT_REG;
 logic rnode_65to66_bb6_exitcond63_0_NO_SHIFT_REG;
 logic rnode_65to66_bb6_exitcond63_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic rnode_65to66_bb6_exitcond63_0_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_exitcond63_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_exitcond63_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_exitcond63_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_65to66_bb6_exitcond63_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_65to66_bb6_exitcond63_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_65to66_bb6_exitcond63_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_65to66_bb6_exitcond63_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_65to66_bb6_exitcond63_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(rnode_2to65_bb6_exitcond63_0_NO_SHIFT_REG),
	.data_out(rnode_65to66_bb6_exitcond63_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_65to66_bb6_exitcond63_0_reg_66_fifo.DEPTH = 2;
defparam rnode_65to66_bb6_exitcond63_0_reg_66_fifo.DATA_WIDTH = 1;
defparam rnode_65to66_bb6_exitcond63_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_65to66_bb6_exitcond63_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_65to66_bb6_exitcond63_0_reg_66_inputs_ready_NO_SHIFT_REG = rnode_2to65_bb6_exitcond63_0_valid_out_NO_SHIFT_REG;
assign rnode_2to65_bb6_exitcond63_0_stall_in_NO_SHIFT_REG = rnode_65to66_bb6_exitcond63_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_exitcond63_0_NO_SHIFT_REG = rnode_65to66_bb6_exitcond63_0_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_exitcond63_0_stall_in_reg_66_NO_SHIFT_REG = rnode_65to66_bb6_exitcond63_0_stall_in_NO_SHIFT_REG;
assign rnode_65to66_bb6_exitcond63_0_valid_out_NO_SHIFT_REG = rnode_65to66_bb6_exitcond63_0_valid_out_reg_66_NO_SHIFT_REG;

// Register node:
//  * latency = 62
//  * capacity = 62
 logic rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_NO_SHIFT_REG;
 logic rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_65_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_65_NO_SHIFT_REG;
 logic rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_valid_out_reg_65_NO_SHIFT_REG;
 logic rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_in_reg_65_NO_SHIFT_REG;
 logic rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_out_reg_65_NO_SHIFT_REG;

acl_data_fifo rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_65_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_65_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_in_reg_65_NO_SHIFT_REG),
	.valid_out(rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_valid_out_reg_65_NO_SHIFT_REG),
	.stall_out(rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_out_reg_65_NO_SHIFT_REG),
	.data_in(local_bb6_indvars_iv56_push6_indvars_iv_next57_NO_SHIFT_REG),
	.data_out(rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_65_NO_SHIFT_REG)
);

defparam rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_65_fifo.DEPTH = 63;
defparam rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_65_fifo.DATA_WIDTH = 64;
defparam rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_65_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_65_fifo.IMPL = "ram";

assign rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_65_inputs_ready_NO_SHIFT_REG = local_bb6_indvars_iv56_push6_indvars_iv_next57_valid_out_NO_SHIFT_REG;
assign local_bb6_indvars_iv56_push6_indvars_iv_next57_stall_in = rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_out_reg_65_NO_SHIFT_REG;
assign rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_NO_SHIFT_REG = rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_65_NO_SHIFT_REG;
assign rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_in_reg_65_NO_SHIFT_REG = rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_in_NO_SHIFT_REG;
assign rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_valid_out_NO_SHIFT_REG = rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_valid_out_reg_65_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_62to63_bb6_notexit16_0_valid_out_NO_SHIFT_REG;
 logic rnode_62to63_bb6_notexit16_0_stall_in_NO_SHIFT_REG;
 logic rnode_62to63_bb6_notexit16_0_NO_SHIFT_REG;
 logic rnode_62to63_bb6_notexit16_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic rnode_62to63_bb6_notexit16_0_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb6_notexit16_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb6_notexit16_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_62to63_bb6_notexit16_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_62to63_bb6_notexit16_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_62to63_bb6_notexit16_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_62to63_bb6_notexit16_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_62to63_bb6_notexit16_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_62to63_bb6_notexit16_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(rnode_2to62_bb6_notexit16_0_NO_SHIFT_REG),
	.data_out(rnode_62to63_bb6_notexit16_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_62to63_bb6_notexit16_0_reg_63_fifo.DEPTH = 2;
defparam rnode_62to63_bb6_notexit16_0_reg_63_fifo.DATA_WIDTH = 1;
defparam rnode_62to63_bb6_notexit16_0_reg_63_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_62to63_bb6_notexit16_0_reg_63_fifo.IMPL = "ll_reg";

assign rnode_62to63_bb6_notexit16_0_reg_63_inputs_ready_NO_SHIFT_REG = rnode_2to62_bb6_notexit16_0_valid_out_NO_SHIFT_REG;
assign rnode_2to62_bb6_notexit16_0_stall_in_NO_SHIFT_REG = rnode_62to63_bb6_notexit16_0_stall_out_reg_63_NO_SHIFT_REG;
assign rnode_62to63_bb6_notexit16_0_NO_SHIFT_REG = rnode_62to63_bb6_notexit16_0_reg_63_NO_SHIFT_REG;
assign rnode_62to63_bb6_notexit16_0_stall_in_reg_63_NO_SHIFT_REG = rnode_62to63_bb6_notexit16_0_stall_in_NO_SHIFT_REG;
assign rnode_62to63_bb6_notexit16_0_valid_out_NO_SHIFT_REG = rnode_62to63_bb6_notexit16_0_valid_out_reg_63_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_32to33_bb6_cmp180_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_32to33_bb6_cmp180_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_32to33_bb6_cmp180_0_NO_SHIFT_REG;
 logic rnode_32to33_bb6_cmp180_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_32to33_bb6_cmp180_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_32to33_bb6_cmp180_1_NO_SHIFT_REG;
 logic rnode_32to33_bb6_cmp180_0_reg_33_inputs_ready_NO_SHIFT_REG;
 logic rnode_32to33_bb6_cmp180_0_reg_33_NO_SHIFT_REG;
 logic rnode_32to33_bb6_cmp180_0_valid_out_0_reg_33_NO_SHIFT_REG;
 logic rnode_32to33_bb6_cmp180_0_stall_in_0_reg_33_NO_SHIFT_REG;
 logic rnode_32to33_bb6_cmp180_0_stall_out_reg_33_NO_SHIFT_REG;
 logic rnode_32to33_bb6_cmp180_0_reg_33_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_32to33_bb6_cmp180_0_reg_33_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_32to33_bb6_cmp180_0_reg_33_NO_SHIFT_REG),
	.valid_in(rnode_32to33_bb6_cmp180_0_valid_out_0_reg_33_NO_SHIFT_REG),
	.stall_out(rnode_32to33_bb6_cmp180_0_stall_in_0_reg_33_NO_SHIFT_REG),
	.data_out(rnode_32to33_bb6_cmp180_0_reg_33_NO_SHIFT_REG_fa),
	.valid_out({rnode_32to33_bb6_cmp180_0_valid_out_0_NO_SHIFT_REG, rnode_32to33_bb6_cmp180_0_valid_out_1_NO_SHIFT_REG}),
	.stall_in({rnode_32to33_bb6_cmp180_0_stall_in_0_NO_SHIFT_REG, rnode_32to33_bb6_cmp180_0_stall_in_1_NO_SHIFT_REG})
);

defparam rnode_32to33_bb6_cmp180_0_reg_33_fanout_adaptor.DATA_WIDTH = 1;
defparam rnode_32to33_bb6_cmp180_0_reg_33_fanout_adaptor.NUM_FANOUTS = 2;

acl_data_fifo rnode_32to33_bb6_cmp180_0_reg_33_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_32to33_bb6_cmp180_0_reg_33_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_32to33_bb6_cmp180_0_stall_in_0_reg_33_NO_SHIFT_REG),
	.valid_out(rnode_32to33_bb6_cmp180_0_valid_out_0_reg_33_NO_SHIFT_REG),
	.stall_out(rnode_32to33_bb6_cmp180_0_stall_out_reg_33_NO_SHIFT_REG),
	.data_in(rnode_3to32_bb6_cmp180_0_NO_SHIFT_REG),
	.data_out(rnode_32to33_bb6_cmp180_0_reg_33_NO_SHIFT_REG)
);

defparam rnode_32to33_bb6_cmp180_0_reg_33_fifo.DEPTH = 2;
defparam rnode_32to33_bb6_cmp180_0_reg_33_fifo.DATA_WIDTH = 1;
defparam rnode_32to33_bb6_cmp180_0_reg_33_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_32to33_bb6_cmp180_0_reg_33_fifo.IMPL = "ll_reg";

assign rnode_32to33_bb6_cmp180_0_reg_33_inputs_ready_NO_SHIFT_REG = rnode_3to32_bb6_cmp180_0_valid_out_NO_SHIFT_REG;
assign rnode_3to32_bb6_cmp180_0_stall_in_NO_SHIFT_REG = rnode_32to33_bb6_cmp180_0_stall_out_reg_33_NO_SHIFT_REG;
assign rnode_32to33_bb6_cmp180_0_NO_SHIFT_REG = rnode_32to33_bb6_cmp180_0_reg_33_NO_SHIFT_REG_fa;
assign rnode_32to33_bb6_cmp180_1_NO_SHIFT_REG = rnode_32to33_bb6_cmp180_0_reg_33_NO_SHIFT_REG_fa;

// Register node:
//  * latency = 30
//  * capacity = 30
 logic rnode_3to33_bb6_cmp180_xor_0_valid_out_NO_SHIFT_REG;
 logic rnode_3to33_bb6_cmp180_xor_0_stall_in_NO_SHIFT_REG;
 logic rnode_3to33_bb6_cmp180_xor_0_NO_SHIFT_REG;
 logic rnode_3to33_bb6_cmp180_xor_0_reg_33_inputs_ready_NO_SHIFT_REG;
 logic rnode_3to33_bb6_cmp180_xor_0_reg_33_NO_SHIFT_REG;
 logic rnode_3to33_bb6_cmp180_xor_0_valid_out_reg_33_NO_SHIFT_REG;
 logic rnode_3to33_bb6_cmp180_xor_0_stall_in_reg_33_NO_SHIFT_REG;
 logic rnode_3to33_bb6_cmp180_xor_0_stall_out_reg_33_NO_SHIFT_REG;

acl_data_fifo rnode_3to33_bb6_cmp180_xor_0_reg_33_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_3to33_bb6_cmp180_xor_0_reg_33_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_3to33_bb6_cmp180_xor_0_stall_in_reg_33_NO_SHIFT_REG),
	.valid_out(rnode_3to33_bb6_cmp180_xor_0_valid_out_reg_33_NO_SHIFT_REG),
	.stall_out(rnode_3to33_bb6_cmp180_xor_0_stall_out_reg_33_NO_SHIFT_REG),
	.data_in(rstag_3to3_bb6_cmp180_xor),
	.data_out(rnode_3to33_bb6_cmp180_xor_0_reg_33_NO_SHIFT_REG)
);

defparam rnode_3to33_bb6_cmp180_xor_0_reg_33_fifo.DEPTH = 31;
defparam rnode_3to33_bb6_cmp180_xor_0_reg_33_fifo.DATA_WIDTH = 1;
defparam rnode_3to33_bb6_cmp180_xor_0_reg_33_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_3to33_bb6_cmp180_xor_0_reg_33_fifo.IMPL = "ram";

assign rnode_3to33_bb6_cmp180_xor_0_reg_33_inputs_ready_NO_SHIFT_REG = rstag_3to3_bb6_cmp180_xor_valid_out_0;
assign rstag_3to3_bb6_cmp180_xor_stall_in_0 = rnode_3to33_bb6_cmp180_xor_0_stall_out_reg_33_NO_SHIFT_REG;
assign rnode_3to33_bb6_cmp180_xor_0_NO_SHIFT_REG = rnode_3to33_bb6_cmp180_xor_0_reg_33_NO_SHIFT_REG;
assign rnode_3to33_bb6_cmp180_xor_0_stall_in_reg_33_NO_SHIFT_REG = rnode_3to33_bb6_cmp180_xor_0_stall_in_NO_SHIFT_REG;
assign rnode_3to33_bb6_cmp180_xor_0_valid_out_NO_SHIFT_REG = rnode_3to33_bb6_cmp180_xor_0_valid_out_reg_33_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb6_ld__inputs_ready;
 reg local_bb6_ld__valid_out_NO_SHIFT_REG;
wire local_bb6_ld__stall_in;
wire local_bb6_ld__output_regs_ready;
wire local_bb6_ld__fu_stall_out;
wire local_bb6_ld__fu_valid_out;
wire [31:0] local_bb6_ld__lsu_dataout;
 reg [31:0] local_bb6_ld__NO_SHIFT_REG;
wire local_bb6_ld__causedstall;

lsu_top lsu_local_bb6_ld_ (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb6_ld__fu_stall_out),
	.i_valid(local_bb6_ld__inputs_ready),
	.i_address(rstag_3to3_bb6_arrayidx197),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rstag_3to3_bb6_cmp180_xor),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb6_ld__output_regs_ready)),
	.o_valid(local_bb6_ld__fu_valid_out),
	.o_readdata(local_bb6_ld__lsu_dataout),
	.o_input_fifo_depth(local_bb6_ld__input_fifo_depth),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb6_ld__active),
	.avm_address(avm_local_bb6_ld__address),
	.avm_read(avm_local_bb6_ld__read),
	.avm_readdata(avm_local_bb6_ld__readdata),
	.avm_write(avm_local_bb6_ld__write),
	.avm_writeack(avm_local_bb6_ld__writeack),
	.avm_burstcount(avm_local_bb6_ld__burstcount),
	.avm_writedata(avm_local_bb6_ld__writedata),
	.avm_byteenable(avm_local_bb6_ld__byteenable),
	.avm_waitrequest(avm_local_bb6_ld__waitrequest),
	.avm_readdatavalid(avm_local_bb6_ld__readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb6_ld_.AWIDTH = 32;
defparam lsu_local_bb6_ld_.WIDTH_BYTES = 4;
defparam lsu_local_bb6_ld_.MWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld_.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld_.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb6_ld_.READ = 1;
defparam lsu_local_bb6_ld_.ATOMIC = 0;
defparam lsu_local_bb6_ld_.WIDTH = 32;
defparam lsu_local_bb6_ld_.MWIDTH = 512;
defparam lsu_local_bb6_ld_.ATOMIC_WIDTH = 3;
defparam lsu_local_bb6_ld_.BURSTCOUNT_WIDTH = 1;
defparam lsu_local_bb6_ld_.KERNEL_SIDE_MEM_LATENCY = 31;
defparam lsu_local_bb6_ld_.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb6_ld_.USE_WRITE_ACK = 0;
defparam lsu_local_bb6_ld_.ENABLE_BANKED_MEMORY = 1;
defparam lsu_local_bb6_ld_.ABITS_PER_LMEM_BANK = 7;
defparam lsu_local_bb6_ld_.NUMBER_BANKS = 4;
defparam lsu_local_bb6_ld_.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb6_ld_.USEINPUTFIFO = 1;
defparam lsu_local_bb6_ld_.USECACHING = 0;
defparam lsu_local_bb6_ld_.USEOUTPUTFIFO = 1;
defparam lsu_local_bb6_ld_.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb6_ld_.HIGH_FMAX = 1;
defparam lsu_local_bb6_ld_.ADDRSPACE = 5;
defparam lsu_local_bb6_ld_.STYLE = "PIPELINED";

assign local_bb6_ld__inputs_ready = (rstag_3to3_bb6_cmp180_xor_valid_out_1 & rstag_3to3_bb6_arrayidx197_valid_out & rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_valid_out);
assign local_bb6_ld__output_regs_ready = (&(~(local_bb6_ld__valid_out_NO_SHIFT_REG) | ~(local_bb6_ld__stall_in)));
assign rstag_3to3_bb6_cmp180_xor_stall_in_1 = (local_bb6_ld__fu_stall_out | ~(local_bb6_ld__inputs_ready));
assign rstag_3to3_bb6_arrayidx197_stall_in = (local_bb6_ld__fu_stall_out | ~(local_bb6_ld__inputs_ready));
assign rstag_3to3_bb6_memdep_phi7_pop18_acl_pop_i1_0_stall_in = (local_bb6_ld__fu_stall_out | ~(local_bb6_ld__inputs_ready));
assign local_bb6_ld__causedstall = (local_bb6_ld__inputs_ready && (local_bb6_ld__fu_stall_out && !(~(local_bb6_ld__output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_ld__NO_SHIFT_REG <= 'x;
		local_bb6_ld__valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_ld__output_regs_ready)
		begin
			local_bb6_ld__NO_SHIFT_REG <= local_bb6_ld__lsu_dataout;
			local_bb6_ld__valid_out_NO_SHIFT_REG <= local_bb6_ld__fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_ld__stall_in))
			begin
				local_bb6_ld__valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_ld__u41_inputs_ready;
 reg local_bb6_ld__u41_valid_out_NO_SHIFT_REG;
wire local_bb6_ld__u41_stall_in;
wire local_bb6_ld__u41_output_regs_ready;
wire local_bb6_ld__u41_fu_stall_out;
wire local_bb6_ld__u41_fu_valid_out;
wire [31:0] local_bb6_ld__u41_lsu_dataout;
 reg [31:0] local_bb6_ld__u41_NO_SHIFT_REG;
wire local_bb6_ld__u41_causedstall;

lsu_top lsu_local_bb6_ld__u41 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb6_ld__u41_fu_stall_out),
	.i_valid(local_bb6_ld__u41_inputs_ready),
	.i_address(rstag_3to3_bb6_arrayidx192),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rstag_3to3_bb6_cmp180_xor),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb6_ld__u41_output_regs_ready)),
	.o_valid(local_bb6_ld__u41_fu_valid_out),
	.o_readdata(local_bb6_ld__u41_lsu_dataout),
	.o_input_fifo_depth(local_bb6_ld__u41_input_fifo_depth),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb6_ld__u41_active),
	.avm_address(avm_local_bb6_ld__u41_address),
	.avm_read(avm_local_bb6_ld__u41_read),
	.avm_readdata(avm_local_bb6_ld__u41_readdata),
	.avm_write(avm_local_bb6_ld__u41_write),
	.avm_writeack(avm_local_bb6_ld__u41_writeack),
	.avm_burstcount(avm_local_bb6_ld__u41_burstcount),
	.avm_writedata(avm_local_bb6_ld__u41_writedata),
	.avm_byteenable(avm_local_bb6_ld__u41_byteenable),
	.avm_waitrequest(avm_local_bb6_ld__u41_waitrequest),
	.avm_readdatavalid(avm_local_bb6_ld__u41_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb6_ld__u41.AWIDTH = 32;
defparam lsu_local_bb6_ld__u41.WIDTH_BYTES = 4;
defparam lsu_local_bb6_ld__u41.MWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld__u41.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld__u41.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb6_ld__u41.READ = 1;
defparam lsu_local_bb6_ld__u41.ATOMIC = 0;
defparam lsu_local_bb6_ld__u41.WIDTH = 32;
defparam lsu_local_bb6_ld__u41.MWIDTH = 512;
defparam lsu_local_bb6_ld__u41.ATOMIC_WIDTH = 3;
defparam lsu_local_bb6_ld__u41.BURSTCOUNT_WIDTH = 1;
defparam lsu_local_bb6_ld__u41.KERNEL_SIDE_MEM_LATENCY = 31;
defparam lsu_local_bb6_ld__u41.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb6_ld__u41.USE_WRITE_ACK = 0;
defparam lsu_local_bb6_ld__u41.ENABLE_BANKED_MEMORY = 1;
defparam lsu_local_bb6_ld__u41.ABITS_PER_LMEM_BANK = 7;
defparam lsu_local_bb6_ld__u41.NUMBER_BANKS = 4;
defparam lsu_local_bb6_ld__u41.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb6_ld__u41.USEINPUTFIFO = 1;
defparam lsu_local_bb6_ld__u41.USECACHING = 0;
defparam lsu_local_bb6_ld__u41.USEOUTPUTFIFO = 1;
defparam lsu_local_bb6_ld__u41.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb6_ld__u41.HIGH_FMAX = 1;
defparam lsu_local_bb6_ld__u41.ADDRSPACE = 5;
defparam lsu_local_bb6_ld__u41.STYLE = "PIPELINED";

assign local_bb6_ld__u41_inputs_ready = (rstag_3to3_bb6_cmp180_xor_valid_out_2 & rstag_3to3_bb6_arrayidx192_valid_out & rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_valid_out);
assign local_bb6_ld__u41_output_regs_ready = (&(~(local_bb6_ld__u41_valid_out_NO_SHIFT_REG) | ~(local_bb6_ld__u41_stall_in)));
assign rstag_3to3_bb6_cmp180_xor_stall_in_2 = (local_bb6_ld__u41_fu_stall_out | ~(local_bb6_ld__u41_inputs_ready));
assign rstag_3to3_bb6_arrayidx192_stall_in = (local_bb6_ld__u41_fu_stall_out | ~(local_bb6_ld__u41_inputs_ready));
assign rstag_3to3_bb6_memdep_phi6_pop17_acl_pop_i1_0_stall_in = (local_bb6_ld__u41_fu_stall_out | ~(local_bb6_ld__u41_inputs_ready));
assign local_bb6_ld__u41_causedstall = (local_bb6_ld__u41_inputs_ready && (local_bb6_ld__u41_fu_stall_out && !(~(local_bb6_ld__u41_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_ld__u41_NO_SHIFT_REG <= 'x;
		local_bb6_ld__u41_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_ld__u41_output_regs_ready)
		begin
			local_bb6_ld__u41_NO_SHIFT_REG <= local_bb6_ld__u41_lsu_dataout;
			local_bb6_ld__u41_valid_out_NO_SHIFT_REG <= local_bb6_ld__u41_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_ld__u41_stall_in))
			begin
				local_bb6_ld__u41_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_ld__u42_inputs_ready;
 reg local_bb6_ld__u42_valid_out_NO_SHIFT_REG;
wire local_bb6_ld__u42_stall_in;
wire local_bb6_ld__u42_output_regs_ready;
wire local_bb6_ld__u42_fu_stall_out;
wire local_bb6_ld__u42_fu_valid_out;
wire [31:0] local_bb6_ld__u42_lsu_dataout;
 reg [31:0] local_bb6_ld__u42_NO_SHIFT_REG;
wire local_bb6_ld__u42_causedstall;

lsu_top lsu_local_bb6_ld__u42 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb6_ld__u42_fu_stall_out),
	.i_valid(local_bb6_ld__u42_inputs_ready),
	.i_address(rstag_3to3_bb6_arrayidx188),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rstag_3to3_bb6_cmp180_xor),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb6_ld__u42_output_regs_ready)),
	.o_valid(local_bb6_ld__u42_fu_valid_out),
	.o_readdata(local_bb6_ld__u42_lsu_dataout),
	.o_input_fifo_depth(local_bb6_ld__u42_input_fifo_depth),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb6_ld__u42_active),
	.avm_address(avm_local_bb6_ld__u42_address),
	.avm_read(avm_local_bb6_ld__u42_read),
	.avm_readdata(avm_local_bb6_ld__u42_readdata),
	.avm_write(avm_local_bb6_ld__u42_write),
	.avm_writeack(avm_local_bb6_ld__u42_writeack),
	.avm_burstcount(avm_local_bb6_ld__u42_burstcount),
	.avm_writedata(avm_local_bb6_ld__u42_writedata),
	.avm_byteenable(avm_local_bb6_ld__u42_byteenable),
	.avm_waitrequest(avm_local_bb6_ld__u42_waitrequest),
	.avm_readdatavalid(avm_local_bb6_ld__u42_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb6_ld__u42.AWIDTH = 32;
defparam lsu_local_bb6_ld__u42.WIDTH_BYTES = 4;
defparam lsu_local_bb6_ld__u42.MWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld__u42.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld__u42.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb6_ld__u42.READ = 1;
defparam lsu_local_bb6_ld__u42.ATOMIC = 0;
defparam lsu_local_bb6_ld__u42.WIDTH = 32;
defparam lsu_local_bb6_ld__u42.MWIDTH = 512;
defparam lsu_local_bb6_ld__u42.ATOMIC_WIDTH = 3;
defparam lsu_local_bb6_ld__u42.BURSTCOUNT_WIDTH = 1;
defparam lsu_local_bb6_ld__u42.KERNEL_SIDE_MEM_LATENCY = 31;
defparam lsu_local_bb6_ld__u42.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb6_ld__u42.USE_WRITE_ACK = 0;
defparam lsu_local_bb6_ld__u42.ENABLE_BANKED_MEMORY = 1;
defparam lsu_local_bb6_ld__u42.ABITS_PER_LMEM_BANK = 7;
defparam lsu_local_bb6_ld__u42.NUMBER_BANKS = 4;
defparam lsu_local_bb6_ld__u42.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb6_ld__u42.USEINPUTFIFO = 1;
defparam lsu_local_bb6_ld__u42.USECACHING = 0;
defparam lsu_local_bb6_ld__u42.USEOUTPUTFIFO = 1;
defparam lsu_local_bb6_ld__u42.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb6_ld__u42.HIGH_FMAX = 1;
defparam lsu_local_bb6_ld__u42.ADDRSPACE = 5;
defparam lsu_local_bb6_ld__u42.STYLE = "PIPELINED";

assign local_bb6_ld__u42_inputs_ready = (rstag_3to3_bb6_cmp180_xor_valid_out_3 & rstag_3to3_bb6_arrayidx188_valid_out & rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_valid_out);
assign local_bb6_ld__u42_output_regs_ready = (&(~(local_bb6_ld__u42_valid_out_NO_SHIFT_REG) | ~(local_bb6_ld__u42_stall_in)));
assign rstag_3to3_bb6_cmp180_xor_stall_in_3 = (local_bb6_ld__u42_fu_stall_out | ~(local_bb6_ld__u42_inputs_ready));
assign rstag_3to3_bb6_arrayidx188_stall_in = (local_bb6_ld__u42_fu_stall_out | ~(local_bb6_ld__u42_inputs_ready));
assign rstag_3to3_bb6_memdep_phi5_pop16_acl_pop_i1_0_stall_in = (local_bb6_ld__u42_fu_stall_out | ~(local_bb6_ld__u42_inputs_ready));
assign local_bb6_ld__u42_causedstall = (local_bb6_ld__u42_inputs_ready && (local_bb6_ld__u42_fu_stall_out && !(~(local_bb6_ld__u42_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_ld__u42_NO_SHIFT_REG <= 'x;
		local_bb6_ld__u42_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_ld__u42_output_regs_ready)
		begin
			local_bb6_ld__u42_NO_SHIFT_REG <= local_bb6_ld__u42_lsu_dataout;
			local_bb6_ld__u42_valid_out_NO_SHIFT_REG <= local_bb6_ld__u42_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_ld__u42_stall_in))
			begin
				local_bb6_ld__u42_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_ld__u43_inputs_ready;
 reg local_bb6_ld__u43_valid_out_NO_SHIFT_REG;
wire local_bb6_ld__u43_stall_in;
wire local_bb6_ld__u43_output_regs_ready;
wire local_bb6_ld__u43_fu_stall_out;
wire local_bb6_ld__u43_fu_valid_out;
wire [31:0] local_bb6_ld__u43_lsu_dataout;
 reg [31:0] local_bb6_ld__u43_NO_SHIFT_REG;
wire local_bb6_ld__u43_causedstall;

lsu_top lsu_local_bb6_ld__u43 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb6_ld__u43_fu_stall_out),
	.i_valid(local_bb6_ld__u43_inputs_ready),
	.i_address(rstag_3to3_bb6_arrayidx185),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rstag_3to3_bb6_cmp180_xor),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb6_ld__u43_output_regs_ready)),
	.o_valid(local_bb6_ld__u43_fu_valid_out),
	.o_readdata(local_bb6_ld__u43_lsu_dataout),
	.o_input_fifo_depth(local_bb6_ld__u43_input_fifo_depth),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb6_ld__u43_active),
	.avm_address(avm_local_bb6_ld__u43_address),
	.avm_read(avm_local_bb6_ld__u43_read),
	.avm_readdata(avm_local_bb6_ld__u43_readdata),
	.avm_write(avm_local_bb6_ld__u43_write),
	.avm_writeack(avm_local_bb6_ld__u43_writeack),
	.avm_burstcount(avm_local_bb6_ld__u43_burstcount),
	.avm_writedata(avm_local_bb6_ld__u43_writedata),
	.avm_byteenable(avm_local_bb6_ld__u43_byteenable),
	.avm_waitrequest(avm_local_bb6_ld__u43_waitrequest),
	.avm_readdatavalid(avm_local_bb6_ld__u43_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb6_ld__u43.AWIDTH = 32;
defparam lsu_local_bb6_ld__u43.WIDTH_BYTES = 4;
defparam lsu_local_bb6_ld__u43.MWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld__u43.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld__u43.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb6_ld__u43.READ = 1;
defparam lsu_local_bb6_ld__u43.ATOMIC = 0;
defparam lsu_local_bb6_ld__u43.WIDTH = 32;
defparam lsu_local_bb6_ld__u43.MWIDTH = 512;
defparam lsu_local_bb6_ld__u43.ATOMIC_WIDTH = 3;
defparam lsu_local_bb6_ld__u43.BURSTCOUNT_WIDTH = 1;
defparam lsu_local_bb6_ld__u43.KERNEL_SIDE_MEM_LATENCY = 31;
defparam lsu_local_bb6_ld__u43.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb6_ld__u43.USE_WRITE_ACK = 0;
defparam lsu_local_bb6_ld__u43.ENABLE_BANKED_MEMORY = 1;
defparam lsu_local_bb6_ld__u43.ABITS_PER_LMEM_BANK = 7;
defparam lsu_local_bb6_ld__u43.NUMBER_BANKS = 4;
defparam lsu_local_bb6_ld__u43.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb6_ld__u43.USEINPUTFIFO = 1;
defparam lsu_local_bb6_ld__u43.USECACHING = 0;
defparam lsu_local_bb6_ld__u43.USEOUTPUTFIFO = 1;
defparam lsu_local_bb6_ld__u43.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb6_ld__u43.HIGH_FMAX = 1;
defparam lsu_local_bb6_ld__u43.ADDRSPACE = 5;
defparam lsu_local_bb6_ld__u43.STYLE = "PIPELINED";

assign local_bb6_ld__u43_inputs_ready = (rstag_3to3_bb6_cmp180_xor_valid_out_4 & rstag_3to3_bb6_arrayidx185_valid_out & rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_valid_out);
assign local_bb6_ld__u43_output_regs_ready = (&(~(local_bb6_ld__u43_valid_out_NO_SHIFT_REG) | ~(local_bb6_ld__u43_stall_in)));
assign rstag_3to3_bb6_cmp180_xor_stall_in_4 = (local_bb6_ld__u43_fu_stall_out | ~(local_bb6_ld__u43_inputs_ready));
assign rstag_3to3_bb6_arrayidx185_stall_in = (local_bb6_ld__u43_fu_stall_out | ~(local_bb6_ld__u43_inputs_ready));
assign rstag_3to3_bb6_memdep_phi_pop15_acl_pop_i1_0_stall_in = (local_bb6_ld__u43_fu_stall_out | ~(local_bb6_ld__u43_inputs_ready));
assign local_bb6_ld__u43_causedstall = (local_bb6_ld__u43_inputs_ready && (local_bb6_ld__u43_fu_stall_out && !(~(local_bb6_ld__u43_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_ld__u43_NO_SHIFT_REG <= 'x;
		local_bb6_ld__u43_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_ld__u43_output_regs_ready)
		begin
			local_bb6_ld__u43_NO_SHIFT_REG <= local_bb6_ld__u43_lsu_dataout;
			local_bb6_ld__u43_valid_out_NO_SHIFT_REG <= local_bb6_ld__u43_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_ld__u43_stall_in))
			begin
				local_bb6_ld__u43_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_33to34_bb6_arrayidx200_0_valid_out_NO_SHIFT_REG;
 logic rnode_33to34_bb6_arrayidx200_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_33to34_bb6_arrayidx200_0_NO_SHIFT_REG;
 logic rnode_33to34_bb6_arrayidx200_0_reg_34_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_33to34_bb6_arrayidx200_0_reg_34_NO_SHIFT_REG;
 logic rnode_33to34_bb6_arrayidx200_0_valid_out_reg_34_NO_SHIFT_REG;
 logic rnode_33to34_bb6_arrayidx200_0_stall_in_reg_34_NO_SHIFT_REG;
 logic rnode_33to34_bb6_arrayidx200_0_stall_out_reg_34_NO_SHIFT_REG;

acl_data_fifo rnode_33to34_bb6_arrayidx200_0_reg_34_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_33to34_bb6_arrayidx200_0_reg_34_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_33to34_bb6_arrayidx200_0_stall_in_reg_34_NO_SHIFT_REG),
	.valid_out(rnode_33to34_bb6_arrayidx200_0_valid_out_reg_34_NO_SHIFT_REG),
	.stall_out(rnode_33to34_bb6_arrayidx200_0_stall_out_reg_34_NO_SHIFT_REG),
	.data_in(rstag_33to33_bb6_arrayidx200),
	.data_out(rnode_33to34_bb6_arrayidx200_0_reg_34_NO_SHIFT_REG)
);

defparam rnode_33to34_bb6_arrayidx200_0_reg_34_fifo.DEPTH = 2;
defparam rnode_33to34_bb6_arrayidx200_0_reg_34_fifo.DATA_WIDTH = 32;
defparam rnode_33to34_bb6_arrayidx200_0_reg_34_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_33to34_bb6_arrayidx200_0_reg_34_fifo.IMPL = "ll_reg";

assign rnode_33to34_bb6_arrayidx200_0_reg_34_inputs_ready_NO_SHIFT_REG = rstag_33to33_bb6_arrayidx200_valid_out_0;
assign rstag_33to33_bb6_arrayidx200_stall_in_0 = rnode_33to34_bb6_arrayidx200_0_stall_out_reg_34_NO_SHIFT_REG;
assign rnode_33to34_bb6_arrayidx200_0_NO_SHIFT_REG = rnode_33to34_bb6_arrayidx200_0_reg_34_NO_SHIFT_REG;
assign rnode_33to34_bb6_arrayidx200_0_stall_in_reg_34_NO_SHIFT_REG = rnode_33to34_bb6_arrayidx200_0_stall_in_NO_SHIFT_REG;
assign rnode_33to34_bb6_arrayidx200_0_valid_out_NO_SHIFT_REG = rnode_33to34_bb6_arrayidx200_0_valid_out_reg_34_NO_SHIFT_REG;

// This section implements a registered operation.
// 
// Filescope constant lowered to ROM: sha256.K.ROM
wire local_bb6_sha256_K_ROM_arrayidx207_ba_inputs_ready;
 reg local_bb6_sha256_K_ROM_arrayidx207_ba_valid_out_NO_SHIFT_REG;
wire local_bb6_sha256_K_ROM_arrayidx207_ba_stall_in;
wire local_bb6_sha256_K_ROM_arrayidx207_ba_output_regs_ready;
 reg [31:0] local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG;
wire local_bb6_sha256_K_ROM_arrayidx207_ba_causedstall;

assign local_bb6_sha256_K_ROM_arrayidx207_ba_inputs_ready = rnode_32to33_bb6_arrayidx207_ba_0_valid_out_NO_SHIFT_REG;
assign local_bb6_sha256_K_ROM_arrayidx207_ba_output_regs_ready = (&(~(local_bb6_sha256_K_ROM_arrayidx207_ba_valid_out_NO_SHIFT_REG) | ~(local_bb6_sha256_K_ROM_arrayidx207_ba_stall_in)));
assign rnode_32to33_bb6_arrayidx207_ba_0_stall_in_NO_SHIFT_REG = (~(local_bb6_sha256_K_ROM_arrayidx207_ba_output_regs_ready) | ~(local_bb6_sha256_K_ROM_arrayidx207_ba_inputs_ready));
assign local_bb6_sha256_K_ROM_arrayidx207_ba_causedstall = (local_bb6_sha256_K_ROM_arrayidx207_ba_inputs_ready && (~(local_bb6_sha256_K_ROM_arrayidx207_ba_output_regs_ready) && !(~(local_bb6_sha256_K_ROM_arrayidx207_ba_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (local_bb6_sha256_K_ROM_arrayidx207_ba_output_regs_ready)
		begin
			case (rnode_32to33_bb6_arrayidx207_ba_0_NO_SHIFT_REG[10:5])
				6'h0:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h428A2F98;
				end

				6'h1:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h71374491;
				end

				6'h2:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hB5C0FBCF;
				end

				6'h3:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hE9B5DBA5;
				end

				6'h4:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h3956C25B;
				end

				6'h5:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h59F111F1;
				end

				6'h6:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h923F82A4;
				end

				6'h7:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hAB1C5ED5;
				end

				6'h8:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hD807AA98;
				end

				6'h9:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h12835B01;
				end

				6'hA:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h243185BE;
				end

				6'hB:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h550C7DC3;
				end

				6'hC:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h72BE5D74;
				end

				6'hD:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h80DEB1FE;
				end

				6'hE:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h9BDC06A7;
				end

				6'hF:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hC19BF174;
				end

				6'h10:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hE49B69C1;
				end

				6'h11:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hEFBE4786;
				end

				6'h12:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hFC19DC6;
				end

				6'h13:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h240CA1CC;
				end

				6'h14:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h2DE92C6F;
				end

				6'h15:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h4A7484AA;
				end

				6'h16:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h5CB0A9DC;
				end

				6'h17:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h76F988DA;
				end

				6'h18:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h983E5152;
				end

				6'h19:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hA831C66D;
				end

				6'h1A:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hB00327C8;
				end

				6'h1B:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hBF597FC7;
				end

				6'h1C:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hC6E00BF3;
				end

				6'h1D:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hD5A79147;
				end

				6'h1E:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h6CA6351;
				end

				6'h1F:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h14292967;
				end

				6'h20:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h27B70A85;
				end

				6'h21:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h2E1B2138;
				end

				6'h22:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h4D2C6DFC;
				end

				6'h23:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h53380D13;
				end

				6'h24:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h650A7354;
				end

				6'h25:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h766A0ABB;
				end

				6'h26:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h81C2C92E;
				end

				6'h27:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h92722C85;
				end

				6'h28:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hA2BFE8A1;
				end

				6'h29:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hA81A664B;
				end

				6'h2A:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hC24B8B70;
				end

				6'h2B:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hC76C51A3;
				end

				6'h2C:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hD192E819;
				end

				6'h2D:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hD6990624;
				end

				6'h2E:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hF40E3585;
				end

				6'h2F:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h106AA070;
				end

				6'h30:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h19A4C116;
				end

				6'h31:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h1E376C08;
				end

				6'h32:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h2748774C;
				end

				6'h33:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h34B0BCB5;
				end

				6'h34:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h391C0CB3;
				end

				6'h35:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h4ED8AA4A;
				end

				6'h36:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h5B9CCA4F;
				end

				6'h37:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h682E6FF3;
				end

				6'h38:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h748F82EE;
				end

				6'h39:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h78A5636F;
				end

				6'h3A:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h84C87814;
				end

				6'h3B:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h8CC70208;
				end

				6'h3C:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'h90BEFFFA;
				end

				6'h3D:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hA4506CEB;
				end

				6'h3E:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hBEF9A3F7;
				end

				6'h3F:
				begin
					local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG <= 32'hC67178F2;
				end

				default:
				begin
				end

			endcase
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_sha256_K_ROM_arrayidx207_ba_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_sha256_K_ROM_arrayidx207_ba_output_regs_ready)
		begin
			local_bb6_sha256_K_ROM_arrayidx207_ba_valid_out_NO_SHIFT_REG <= local_bb6_sha256_K_ROM_arrayidx207_ba_inputs_ready;
		end
		else
		begin
			if (~(local_bb6_sha256_K_ROM_arrayidx207_ba_stall_in))
			begin
				local_bb6_sha256_K_ROM_arrayidx207_ba_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_reduction_3_stall_local;
wire [31:0] local_bb6_reduction_3;

assign local_bb6_reduction_3 = (local_bb6_xor_i12 + local_bb6_H_143_pop14_acl_pop_i32_1541459225_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb6_xor3_i23_stall_local;
wire [31:0] local_bb6_xor3_i23;

assign local_bb6_xor3_i23 = (local_bb6_xor_i19 ^ local_bb6_or_i_i15);

// This section implements an unregistered operation.
// 
wire local_bb6_xor3_i_stall_local;
wire [31:0] local_bb6_xor3_i;

assign local_bb6_xor3_i = (local_bb6_xor_i1 ^ local_bb6_and2_i);

// This section implements an unregistered operation.
// 
wire local_bb6_xor_i5_stall_local;
wire [31:0] local_bb6_xor_i5;

assign local_bb6_xor_i5 = (local_bb6_or_i8_i ^ local_bb6_or_i3_i8);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_valid_out_NO_SHIFT_REG;
 logic rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_in_NO_SHIFT_REG;
 logic [63:0] rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_NO_SHIFT_REG;
 logic rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [63:0] rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_NO_SHIFT_REG),
	.data_out(rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_66_fifo.DEPTH = 2;
defparam rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_66_fifo.DATA_WIDTH = 64;
defparam rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_66_inputs_ready_NO_SHIFT_REG = rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_valid_out_NO_SHIFT_REG;
assign rnode_3to65_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_in_NO_SHIFT_REG = rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_NO_SHIFT_REG = rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_in_reg_66_NO_SHIFT_REG = rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_in_NO_SHIFT_REG;
assign rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_valid_out_NO_SHIFT_REG = rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_valid_out_reg_66_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb6_notexitcond15_notexit16_inputs_ready;
 reg local_bb6_notexitcond15_notexit16_valid_out_NO_SHIFT_REG;
wire local_bb6_notexitcond15_notexit16_stall_in;
wire local_bb6_notexitcond15_notexit16_output_regs_ready;
wire local_bb6_notexitcond15_notexit16_result;
wire local_bb6_notexitcond15_notexit16_fu_valid_out;
wire local_bb6_notexitcond15_notexit16_fu_stall_out;
 reg local_bb6_notexitcond15_notexit16_NO_SHIFT_REG;
wire local_bb6_notexitcond15_notexit16_causedstall;

acl_push local_bb6_notexitcond15_notexit16_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(1'b1),
	.predicate(1'b0),
	.data_in(rnode_62to63_bb6_notexit16_0_NO_SHIFT_REG),
	.stall_out(local_bb6_notexitcond15_notexit16_fu_stall_out),
	.valid_in(local_bb6_notexitcond15_notexit16_inputs_ready),
	.valid_out(local_bb6_notexitcond15_notexit16_fu_valid_out),
	.stall_in(~(local_bb6_notexitcond15_notexit16_output_regs_ready)),
	.data_out(local_bb6_notexitcond15_notexit16_result),
	.feedback_out(feedback_data_out_5),
	.feedback_valid_out(feedback_valid_out_5),
	.feedback_stall_in(feedback_stall_in_5)
);

defparam local_bb6_notexitcond15_notexit16_feedback.STALLFREE = 0;
defparam local_bb6_notexitcond15_notexit16_feedback.DATA_WIDTH = 1;
defparam local_bb6_notexitcond15_notexit16_feedback.FIFO_DEPTH = 63;
defparam local_bb6_notexitcond15_notexit16_feedback.MIN_FIFO_LATENCY = 0;
defparam local_bb6_notexitcond15_notexit16_feedback.STYLE = "REGULAR";

assign local_bb6_notexitcond15_notexit16_inputs_ready = rnode_62to63_bb6_notexit16_0_valid_out_NO_SHIFT_REG;
assign local_bb6_notexitcond15_notexit16_output_regs_ready = (&(~(local_bb6_notexitcond15_notexit16_valid_out_NO_SHIFT_REG) | ~(local_bb6_notexitcond15_notexit16_stall_in)));
assign rnode_62to63_bb6_notexit16_0_stall_in_NO_SHIFT_REG = (local_bb6_notexitcond15_notexit16_fu_stall_out | ~(local_bb6_notexitcond15_notexit16_inputs_ready));
assign local_bb6_notexitcond15_notexit16_causedstall = (local_bb6_notexitcond15_notexit16_inputs_ready && (local_bb6_notexitcond15_notexit16_fu_stall_out && !(~(local_bb6_notexitcond15_notexit16_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_notexitcond15_notexit16_NO_SHIFT_REG <= 'x;
		local_bb6_notexitcond15_notexit16_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_notexitcond15_notexit16_output_regs_ready)
		begin
			local_bb6_notexitcond15_notexit16_NO_SHIFT_REG <= local_bb6_notexitcond15_notexit16_result;
			local_bb6_notexitcond15_notexit16_valid_out_NO_SHIFT_REG <= local_bb6_notexitcond15_notexit16_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_notexitcond15_notexit16_stall_in))
			begin
				local_bb6_notexitcond15_notexit16_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_ld__pre65_inputs_ready;
 reg local_bb6_ld__pre65_valid_out_NO_SHIFT_REG;
wire local_bb6_ld__pre65_stall_in;
wire local_bb6_ld__pre65_output_regs_ready;
wire local_bb6_ld__pre65_fu_stall_out;
wire local_bb6_ld__pre65_fu_valid_out;
wire [31:0] local_bb6_ld__pre65_lsu_dataout;
 reg [31:0] local_bb6_ld__pre65_NO_SHIFT_REG;
wire local_bb6_ld__pre65_causedstall;

lsu_top lsu_local_bb6_ld__pre65 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb6_ld__pre65_fu_stall_out),
	.i_valid(local_bb6_ld__pre65_inputs_ready),
	.i_address(rstag_33to33_bb6_arrayidx200),
	.i_writedata(),
	.i_cmpdata(),
	.i_predicate(rnode_32to33_bb6_cmp180_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb6_ld__pre65_output_regs_ready)),
	.o_valid(local_bb6_ld__pre65_fu_valid_out),
	.o_readdata(local_bb6_ld__pre65_lsu_dataout),
	.o_input_fifo_depth(local_bb6_ld__pre65_input_fifo_depth),
	.o_writeack(),
	.i_atomic_op(3'h0),
	.o_active(local_bb6_ld__pre65_active),
	.avm_address(avm_local_bb6_ld__pre65_address),
	.avm_read(avm_local_bb6_ld__pre65_read),
	.avm_readdata(avm_local_bb6_ld__pre65_readdata),
	.avm_write(avm_local_bb6_ld__pre65_write),
	.avm_writeack(avm_local_bb6_ld__pre65_writeack),
	.avm_burstcount(avm_local_bb6_ld__pre65_burstcount),
	.avm_writedata(avm_local_bb6_ld__pre65_writedata),
	.avm_byteenable(avm_local_bb6_ld__pre65_byteenable),
	.avm_waitrequest(avm_local_bb6_ld__pre65_waitrequest),
	.avm_readdatavalid(avm_local_bb6_ld__pre65_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb6_ld__pre65.AWIDTH = 32;
defparam lsu_local_bb6_ld__pre65.WIDTH_BYTES = 4;
defparam lsu_local_bb6_ld__pre65.MWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld__pre65.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb6_ld__pre65.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb6_ld__pre65.READ = 1;
defparam lsu_local_bb6_ld__pre65.ATOMIC = 0;
defparam lsu_local_bb6_ld__pre65.WIDTH = 32;
defparam lsu_local_bb6_ld__pre65.MWIDTH = 512;
defparam lsu_local_bb6_ld__pre65.ATOMIC_WIDTH = 3;
defparam lsu_local_bb6_ld__pre65.BURSTCOUNT_WIDTH = 1;
defparam lsu_local_bb6_ld__pre65.KERNEL_SIDE_MEM_LATENCY = 31;
defparam lsu_local_bb6_ld__pre65.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb6_ld__pre65.USE_WRITE_ACK = 0;
defparam lsu_local_bb6_ld__pre65.ENABLE_BANKED_MEMORY = 1;
defparam lsu_local_bb6_ld__pre65.ABITS_PER_LMEM_BANK = 7;
defparam lsu_local_bb6_ld__pre65.NUMBER_BANKS = 4;
defparam lsu_local_bb6_ld__pre65.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb6_ld__pre65.USEINPUTFIFO = 1;
defparam lsu_local_bb6_ld__pre65.USECACHING = 0;
defparam lsu_local_bb6_ld__pre65.USEOUTPUTFIFO = 1;
defparam lsu_local_bb6_ld__pre65.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb6_ld__pre65.HIGH_FMAX = 1;
defparam lsu_local_bb6_ld__pre65.ADDRSPACE = 5;
defparam lsu_local_bb6_ld__pre65.STYLE = "PIPELINED";

assign local_bb6_ld__pre65_inputs_ready = (rnode_32to33_bb6_cmp180_0_valid_out_0_NO_SHIFT_REG & rstag_33to33_bb6_arrayidx200_valid_out_1);
assign local_bb6_ld__pre65_output_regs_ready = (&(~(local_bb6_ld__pre65_valid_out_NO_SHIFT_REG) | ~(local_bb6_ld__pre65_stall_in)));
assign rnode_32to33_bb6_cmp180_0_stall_in_0_NO_SHIFT_REG = (local_bb6_ld__pre65_fu_stall_out | ~(local_bb6_ld__pre65_inputs_ready));
assign rstag_33to33_bb6_arrayidx200_stall_in_1 = (local_bb6_ld__pre65_fu_stall_out | ~(local_bb6_ld__pre65_inputs_ready));
assign local_bb6_ld__pre65_causedstall = (local_bb6_ld__pre65_inputs_ready && (local_bb6_ld__pre65_fu_stall_out && !(~(local_bb6_ld__pre65_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_ld__pre65_NO_SHIFT_REG <= 'x;
		local_bb6_ld__pre65_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_ld__pre65_output_regs_ready)
		begin
			local_bb6_ld__pre65_NO_SHIFT_REG <= local_bb6_ld__pre65_lsu_dataout;
			local_bb6_ld__pre65_valid_out_NO_SHIFT_REG <= local_bb6_ld__pre65_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_ld__pre65_stall_in))
			begin
				local_bb6_ld__pre65_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 30
//  * capacity = 30
 logic rnode_33to63_bb6_cmp180_0_valid_out_NO_SHIFT_REG;
 logic rnode_33to63_bb6_cmp180_0_stall_in_NO_SHIFT_REG;
 logic rnode_33to63_bb6_cmp180_0_NO_SHIFT_REG;
 logic rnode_33to63_bb6_cmp180_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic rnode_33to63_bb6_cmp180_0_reg_63_NO_SHIFT_REG;
 logic rnode_33to63_bb6_cmp180_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_33to63_bb6_cmp180_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_33to63_bb6_cmp180_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_33to63_bb6_cmp180_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_33to63_bb6_cmp180_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_33to63_bb6_cmp180_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_33to63_bb6_cmp180_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_33to63_bb6_cmp180_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(rnode_32to33_bb6_cmp180_1_NO_SHIFT_REG),
	.data_out(rnode_33to63_bb6_cmp180_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_33to63_bb6_cmp180_0_reg_63_fifo.DEPTH = 31;
defparam rnode_33to63_bb6_cmp180_0_reg_63_fifo.DATA_WIDTH = 1;
defparam rnode_33to63_bb6_cmp180_0_reg_63_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_33to63_bb6_cmp180_0_reg_63_fifo.IMPL = "ram";

assign rnode_33to63_bb6_cmp180_0_reg_63_inputs_ready_NO_SHIFT_REG = rnode_32to33_bb6_cmp180_0_valid_out_1_NO_SHIFT_REG;
assign rnode_32to33_bb6_cmp180_0_stall_in_1_NO_SHIFT_REG = rnode_33to63_bb6_cmp180_0_stall_out_reg_63_NO_SHIFT_REG;
assign rnode_33to63_bb6_cmp180_0_NO_SHIFT_REG = rnode_33to63_bb6_cmp180_0_reg_63_NO_SHIFT_REG;
assign rnode_33to63_bb6_cmp180_0_stall_in_reg_63_NO_SHIFT_REG = rnode_33to63_bb6_cmp180_0_stall_in_NO_SHIFT_REG;
assign rnode_33to63_bb6_cmp180_0_valid_out_NO_SHIFT_REG = rnode_33to63_bb6_cmp180_0_valid_out_reg_63_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_33to34_bb6_cmp180_xor_0_valid_out_NO_SHIFT_REG;
 logic rnode_33to34_bb6_cmp180_xor_0_stall_in_NO_SHIFT_REG;
 logic rnode_33to34_bb6_cmp180_xor_0_NO_SHIFT_REG;
 logic rnode_33to34_bb6_cmp180_xor_0_reg_34_inputs_ready_NO_SHIFT_REG;
 logic rnode_33to34_bb6_cmp180_xor_0_reg_34_NO_SHIFT_REG;
 logic rnode_33to34_bb6_cmp180_xor_0_valid_out_reg_34_NO_SHIFT_REG;
 logic rnode_33to34_bb6_cmp180_xor_0_stall_in_reg_34_NO_SHIFT_REG;
 logic rnode_33to34_bb6_cmp180_xor_0_stall_out_reg_34_NO_SHIFT_REG;

acl_data_fifo rnode_33to34_bb6_cmp180_xor_0_reg_34_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_33to34_bb6_cmp180_xor_0_reg_34_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_33to34_bb6_cmp180_xor_0_stall_in_reg_34_NO_SHIFT_REG),
	.valid_out(rnode_33to34_bb6_cmp180_xor_0_valid_out_reg_34_NO_SHIFT_REG),
	.stall_out(rnode_33to34_bb6_cmp180_xor_0_stall_out_reg_34_NO_SHIFT_REG),
	.data_in(rnode_3to33_bb6_cmp180_xor_0_NO_SHIFT_REG),
	.data_out(rnode_33to34_bb6_cmp180_xor_0_reg_34_NO_SHIFT_REG)
);

defparam rnode_33to34_bb6_cmp180_xor_0_reg_34_fifo.DEPTH = 2;
defparam rnode_33to34_bb6_cmp180_xor_0_reg_34_fifo.DATA_WIDTH = 1;
defparam rnode_33to34_bb6_cmp180_xor_0_reg_34_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_33to34_bb6_cmp180_xor_0_reg_34_fifo.IMPL = "ll_reg";

assign rnode_33to34_bb6_cmp180_xor_0_reg_34_inputs_ready_NO_SHIFT_REG = rnode_3to33_bb6_cmp180_xor_0_valid_out_NO_SHIFT_REG;
assign rnode_3to33_bb6_cmp180_xor_0_stall_in_NO_SHIFT_REG = rnode_33to34_bb6_cmp180_xor_0_stall_out_reg_34_NO_SHIFT_REG;
assign rnode_33to34_bb6_cmp180_xor_0_NO_SHIFT_REG = rnode_33to34_bb6_cmp180_xor_0_reg_34_NO_SHIFT_REG;
assign rnode_33to34_bb6_cmp180_xor_0_stall_in_reg_34_NO_SHIFT_REG = rnode_33to34_bb6_cmp180_xor_0_stall_in_NO_SHIFT_REG;
assign rnode_33to34_bb6_cmp180_xor_0_valid_out_NO_SHIFT_REG = rnode_33to34_bb6_cmp180_xor_0_valid_out_reg_34_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_34to34_bb6_ld__valid_out;
wire rstag_34to34_bb6_ld__stall_in;
wire rstag_34to34_bb6_ld__inputs_ready;
wire rstag_34to34_bb6_ld__stall_local;
 reg rstag_34to34_bb6_ld__staging_valid_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__combined_valid;
 reg [31:0] rstag_34to34_bb6_ld__staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_34to34_bb6_ld_;

assign rstag_34to34_bb6_ld__inputs_ready = local_bb6_ld__valid_out_NO_SHIFT_REG;
assign rstag_34to34_bb6_ld_ = (rstag_34to34_bb6_ld__staging_valid_NO_SHIFT_REG ? rstag_34to34_bb6_ld__staging_reg_NO_SHIFT_REG : local_bb6_ld__NO_SHIFT_REG);
assign rstag_34to34_bb6_ld__combined_valid = (rstag_34to34_bb6_ld__staging_valid_NO_SHIFT_REG | rstag_34to34_bb6_ld__inputs_ready);
assign rstag_34to34_bb6_ld__valid_out = rstag_34to34_bb6_ld__combined_valid;
assign rstag_34to34_bb6_ld__stall_local = rstag_34to34_bb6_ld__stall_in;
assign local_bb6_ld__stall_in = (|rstag_34to34_bb6_ld__staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_34to34_bb6_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_ld__staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_34to34_bb6_ld__stall_local)
		begin
			if (~(rstag_34to34_bb6_ld__staging_valid_NO_SHIFT_REG))
			begin
				rstag_34to34_bb6_ld__staging_valid_NO_SHIFT_REG <= rstag_34to34_bb6_ld__inputs_ready;
			end
		end
		else
		begin
			rstag_34to34_bb6_ld__staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_34to34_bb6_ld__staging_valid_NO_SHIFT_REG))
		begin
			rstag_34to34_bb6_ld__staging_reg_NO_SHIFT_REG <= local_bb6_ld__NO_SHIFT_REG;
		end
	end
end


// This section implements a staging register.
// 
wire rstag_34to34_bb6_ld__u41_valid_out_0;
wire rstag_34to34_bb6_ld__u41_stall_in_0;
 reg rstag_34to34_bb6_ld__u41_consumed_0_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__u41_valid_out_1;
wire rstag_34to34_bb6_ld__u41_stall_in_1;
 reg rstag_34to34_bb6_ld__u41_consumed_1_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__u41_valid_out_2;
wire rstag_34to34_bb6_ld__u41_stall_in_2;
 reg rstag_34to34_bb6_ld__u41_consumed_2_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__u41_valid_out_3;
wire rstag_34to34_bb6_ld__u41_stall_in_3;
 reg rstag_34to34_bb6_ld__u41_consumed_3_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__u41_valid_out_4;
wire rstag_34to34_bb6_ld__u41_stall_in_4;
 reg rstag_34to34_bb6_ld__u41_consumed_4_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__u41_inputs_ready;
wire rstag_34to34_bb6_ld__u41_stall_local;
 reg rstag_34to34_bb6_ld__u41_staging_valid_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__u41_combined_valid;
 reg [31:0] rstag_34to34_bb6_ld__u41_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_34to34_bb6_ld__u41;

assign rstag_34to34_bb6_ld__u41_inputs_ready = local_bb6_ld__u41_valid_out_NO_SHIFT_REG;
assign rstag_34to34_bb6_ld__u41 = (rstag_34to34_bb6_ld__u41_staging_valid_NO_SHIFT_REG ? rstag_34to34_bb6_ld__u41_staging_reg_NO_SHIFT_REG : local_bb6_ld__u41_NO_SHIFT_REG);
assign rstag_34to34_bb6_ld__u41_combined_valid = (rstag_34to34_bb6_ld__u41_staging_valid_NO_SHIFT_REG | rstag_34to34_bb6_ld__u41_inputs_ready);
assign rstag_34to34_bb6_ld__u41_stall_local = ((rstag_34to34_bb6_ld__u41_stall_in_0 & ~(rstag_34to34_bb6_ld__u41_consumed_0_NO_SHIFT_REG)) | (rstag_34to34_bb6_ld__u41_stall_in_1 & ~(rstag_34to34_bb6_ld__u41_consumed_1_NO_SHIFT_REG)) | (rstag_34to34_bb6_ld__u41_stall_in_2 & ~(rstag_34to34_bb6_ld__u41_consumed_2_NO_SHIFT_REG)) | (rstag_34to34_bb6_ld__u41_stall_in_3 & ~(rstag_34to34_bb6_ld__u41_consumed_3_NO_SHIFT_REG)) | (rstag_34to34_bb6_ld__u41_stall_in_4 & ~(rstag_34to34_bb6_ld__u41_consumed_4_NO_SHIFT_REG)));
assign rstag_34to34_bb6_ld__u41_valid_out_0 = (rstag_34to34_bb6_ld__u41_combined_valid & ~(rstag_34to34_bb6_ld__u41_consumed_0_NO_SHIFT_REG));
assign rstag_34to34_bb6_ld__u41_valid_out_1 = (rstag_34to34_bb6_ld__u41_combined_valid & ~(rstag_34to34_bb6_ld__u41_consumed_1_NO_SHIFT_REG));
assign rstag_34to34_bb6_ld__u41_valid_out_2 = (rstag_34to34_bb6_ld__u41_combined_valid & ~(rstag_34to34_bb6_ld__u41_consumed_2_NO_SHIFT_REG));
assign rstag_34to34_bb6_ld__u41_valid_out_3 = (rstag_34to34_bb6_ld__u41_combined_valid & ~(rstag_34to34_bb6_ld__u41_consumed_3_NO_SHIFT_REG));
assign rstag_34to34_bb6_ld__u41_valid_out_4 = (rstag_34to34_bb6_ld__u41_combined_valid & ~(rstag_34to34_bb6_ld__u41_consumed_4_NO_SHIFT_REG));
assign local_bb6_ld__u41_stall_in = (|rstag_34to34_bb6_ld__u41_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_34to34_bb6_ld__u41_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_ld__u41_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_34to34_bb6_ld__u41_stall_local)
		begin
			if (~(rstag_34to34_bb6_ld__u41_staging_valid_NO_SHIFT_REG))
			begin
				rstag_34to34_bb6_ld__u41_staging_valid_NO_SHIFT_REG <= rstag_34to34_bb6_ld__u41_inputs_ready;
			end
		end
		else
		begin
			rstag_34to34_bb6_ld__u41_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_34to34_bb6_ld__u41_staging_valid_NO_SHIFT_REG))
		begin
			rstag_34to34_bb6_ld__u41_staging_reg_NO_SHIFT_REG <= local_bb6_ld__u41_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_34to34_bb6_ld__u41_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_ld__u41_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_ld__u41_consumed_2_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_ld__u41_consumed_3_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_ld__u41_consumed_4_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_34to34_bb6_ld__u41_consumed_0_NO_SHIFT_REG <= (rstag_34to34_bb6_ld__u41_combined_valid & (rstag_34to34_bb6_ld__u41_consumed_0_NO_SHIFT_REG | ~(rstag_34to34_bb6_ld__u41_stall_in_0)) & rstag_34to34_bb6_ld__u41_stall_local);
		rstag_34to34_bb6_ld__u41_consumed_1_NO_SHIFT_REG <= (rstag_34to34_bb6_ld__u41_combined_valid & (rstag_34to34_bb6_ld__u41_consumed_1_NO_SHIFT_REG | ~(rstag_34to34_bb6_ld__u41_stall_in_1)) & rstag_34to34_bb6_ld__u41_stall_local);
		rstag_34to34_bb6_ld__u41_consumed_2_NO_SHIFT_REG <= (rstag_34to34_bb6_ld__u41_combined_valid & (rstag_34to34_bb6_ld__u41_consumed_2_NO_SHIFT_REG | ~(rstag_34to34_bb6_ld__u41_stall_in_2)) & rstag_34to34_bb6_ld__u41_stall_local);
		rstag_34to34_bb6_ld__u41_consumed_3_NO_SHIFT_REG <= (rstag_34to34_bb6_ld__u41_combined_valid & (rstag_34to34_bb6_ld__u41_consumed_3_NO_SHIFT_REG | ~(rstag_34to34_bb6_ld__u41_stall_in_3)) & rstag_34to34_bb6_ld__u41_stall_local);
		rstag_34to34_bb6_ld__u41_consumed_4_NO_SHIFT_REG <= (rstag_34to34_bb6_ld__u41_combined_valid & (rstag_34to34_bb6_ld__u41_consumed_4_NO_SHIFT_REG | ~(rstag_34to34_bb6_ld__u41_stall_in_4)) & rstag_34to34_bb6_ld__u41_stall_local);
	end
end


// This section implements a staging register.
// 
wire rstag_34to34_bb6_ld__u42_valid_out;
wire rstag_34to34_bb6_ld__u42_stall_in;
wire rstag_34to34_bb6_ld__u42_inputs_ready;
wire rstag_34to34_bb6_ld__u42_stall_local;
 reg rstag_34to34_bb6_ld__u42_staging_valid_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__u42_combined_valid;
 reg [31:0] rstag_34to34_bb6_ld__u42_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_34to34_bb6_ld__u42;

assign rstag_34to34_bb6_ld__u42_inputs_ready = local_bb6_ld__u42_valid_out_NO_SHIFT_REG;
assign rstag_34to34_bb6_ld__u42 = (rstag_34to34_bb6_ld__u42_staging_valid_NO_SHIFT_REG ? rstag_34to34_bb6_ld__u42_staging_reg_NO_SHIFT_REG : local_bb6_ld__u42_NO_SHIFT_REG);
assign rstag_34to34_bb6_ld__u42_combined_valid = (rstag_34to34_bb6_ld__u42_staging_valid_NO_SHIFT_REG | rstag_34to34_bb6_ld__u42_inputs_ready);
assign rstag_34to34_bb6_ld__u42_valid_out = rstag_34to34_bb6_ld__u42_combined_valid;
assign rstag_34to34_bb6_ld__u42_stall_local = rstag_34to34_bb6_ld__u42_stall_in;
assign local_bb6_ld__u42_stall_in = (|rstag_34to34_bb6_ld__u42_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_34to34_bb6_ld__u42_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_ld__u42_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_34to34_bb6_ld__u42_stall_local)
		begin
			if (~(rstag_34to34_bb6_ld__u42_staging_valid_NO_SHIFT_REG))
			begin
				rstag_34to34_bb6_ld__u42_staging_valid_NO_SHIFT_REG <= rstag_34to34_bb6_ld__u42_inputs_ready;
			end
		end
		else
		begin
			rstag_34to34_bb6_ld__u42_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_34to34_bb6_ld__u42_staging_valid_NO_SHIFT_REG))
		begin
			rstag_34to34_bb6_ld__u42_staging_reg_NO_SHIFT_REG <= local_bb6_ld__u42_NO_SHIFT_REG;
		end
	end
end


// This section implements a staging register.
// 
wire rstag_34to34_bb6_ld__u43_valid_out_0;
wire rstag_34to34_bb6_ld__u43_stall_in_0;
 reg rstag_34to34_bb6_ld__u43_consumed_0_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__u43_valid_out_1;
wire rstag_34to34_bb6_ld__u43_stall_in_1;
 reg rstag_34to34_bb6_ld__u43_consumed_1_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__u43_valid_out_2;
wire rstag_34to34_bb6_ld__u43_stall_in_2;
 reg rstag_34to34_bb6_ld__u43_consumed_2_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__u43_valid_out_3;
wire rstag_34to34_bb6_ld__u43_stall_in_3;
 reg rstag_34to34_bb6_ld__u43_consumed_3_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__u43_valid_out_4;
wire rstag_34to34_bb6_ld__u43_stall_in_4;
 reg rstag_34to34_bb6_ld__u43_consumed_4_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__u43_inputs_ready;
wire rstag_34to34_bb6_ld__u43_stall_local;
 reg rstag_34to34_bb6_ld__u43_staging_valid_NO_SHIFT_REG;
wire rstag_34to34_bb6_ld__u43_combined_valid;
 reg [31:0] rstag_34to34_bb6_ld__u43_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_34to34_bb6_ld__u43;

assign rstag_34to34_bb6_ld__u43_inputs_ready = local_bb6_ld__u43_valid_out_NO_SHIFT_REG;
assign rstag_34to34_bb6_ld__u43 = (rstag_34to34_bb6_ld__u43_staging_valid_NO_SHIFT_REG ? rstag_34to34_bb6_ld__u43_staging_reg_NO_SHIFT_REG : local_bb6_ld__u43_NO_SHIFT_REG);
assign rstag_34to34_bb6_ld__u43_combined_valid = (rstag_34to34_bb6_ld__u43_staging_valid_NO_SHIFT_REG | rstag_34to34_bb6_ld__u43_inputs_ready);
assign rstag_34to34_bb6_ld__u43_stall_local = ((rstag_34to34_bb6_ld__u43_stall_in_0 & ~(rstag_34to34_bb6_ld__u43_consumed_0_NO_SHIFT_REG)) | (rstag_34to34_bb6_ld__u43_stall_in_1 & ~(rstag_34to34_bb6_ld__u43_consumed_1_NO_SHIFT_REG)) | (rstag_34to34_bb6_ld__u43_stall_in_2 & ~(rstag_34to34_bb6_ld__u43_consumed_2_NO_SHIFT_REG)) | (rstag_34to34_bb6_ld__u43_stall_in_3 & ~(rstag_34to34_bb6_ld__u43_consumed_3_NO_SHIFT_REG)) | (rstag_34to34_bb6_ld__u43_stall_in_4 & ~(rstag_34to34_bb6_ld__u43_consumed_4_NO_SHIFT_REG)));
assign rstag_34to34_bb6_ld__u43_valid_out_0 = (rstag_34to34_bb6_ld__u43_combined_valid & ~(rstag_34to34_bb6_ld__u43_consumed_0_NO_SHIFT_REG));
assign rstag_34to34_bb6_ld__u43_valid_out_1 = (rstag_34to34_bb6_ld__u43_combined_valid & ~(rstag_34to34_bb6_ld__u43_consumed_1_NO_SHIFT_REG));
assign rstag_34to34_bb6_ld__u43_valid_out_2 = (rstag_34to34_bb6_ld__u43_combined_valid & ~(rstag_34to34_bb6_ld__u43_consumed_2_NO_SHIFT_REG));
assign rstag_34to34_bb6_ld__u43_valid_out_3 = (rstag_34to34_bb6_ld__u43_combined_valid & ~(rstag_34to34_bb6_ld__u43_consumed_3_NO_SHIFT_REG));
assign rstag_34to34_bb6_ld__u43_valid_out_4 = (rstag_34to34_bb6_ld__u43_combined_valid & ~(rstag_34to34_bb6_ld__u43_consumed_4_NO_SHIFT_REG));
assign local_bb6_ld__u43_stall_in = (|rstag_34to34_bb6_ld__u43_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_34to34_bb6_ld__u43_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_ld__u43_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_34to34_bb6_ld__u43_stall_local)
		begin
			if (~(rstag_34to34_bb6_ld__u43_staging_valid_NO_SHIFT_REG))
			begin
				rstag_34to34_bb6_ld__u43_staging_valid_NO_SHIFT_REG <= rstag_34to34_bb6_ld__u43_inputs_ready;
			end
		end
		else
		begin
			rstag_34to34_bb6_ld__u43_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_34to34_bb6_ld__u43_staging_valid_NO_SHIFT_REG))
		begin
			rstag_34to34_bb6_ld__u43_staging_reg_NO_SHIFT_REG <= local_bb6_ld__u43_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_34to34_bb6_ld__u43_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_ld__u43_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_ld__u43_consumed_2_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_ld__u43_consumed_3_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_ld__u43_consumed_4_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_34to34_bb6_ld__u43_consumed_0_NO_SHIFT_REG <= (rstag_34to34_bb6_ld__u43_combined_valid & (rstag_34to34_bb6_ld__u43_consumed_0_NO_SHIFT_REG | ~(rstag_34to34_bb6_ld__u43_stall_in_0)) & rstag_34to34_bb6_ld__u43_stall_local);
		rstag_34to34_bb6_ld__u43_consumed_1_NO_SHIFT_REG <= (rstag_34to34_bb6_ld__u43_combined_valid & (rstag_34to34_bb6_ld__u43_consumed_1_NO_SHIFT_REG | ~(rstag_34to34_bb6_ld__u43_stall_in_1)) & rstag_34to34_bb6_ld__u43_stall_local);
		rstag_34to34_bb6_ld__u43_consumed_2_NO_SHIFT_REG <= (rstag_34to34_bb6_ld__u43_combined_valid & (rstag_34to34_bb6_ld__u43_consumed_2_NO_SHIFT_REG | ~(rstag_34to34_bb6_ld__u43_stall_in_2)) & rstag_34to34_bb6_ld__u43_stall_local);
		rstag_34to34_bb6_ld__u43_consumed_3_NO_SHIFT_REG <= (rstag_34to34_bb6_ld__u43_combined_valid & (rstag_34to34_bb6_ld__u43_consumed_3_NO_SHIFT_REG | ~(rstag_34to34_bb6_ld__u43_stall_in_3)) & rstag_34to34_bb6_ld__u43_stall_local);
		rstag_34to34_bb6_ld__u43_consumed_4_NO_SHIFT_REG <= (rstag_34to34_bb6_ld__u43_combined_valid & (rstag_34to34_bb6_ld__u43_consumed_4_NO_SHIFT_REG | ~(rstag_34to34_bb6_ld__u43_stall_in_4)) & rstag_34to34_bb6_ld__u43_stall_local);
	end
end


// Register node:
//  * latency = 29
//  * capacity = 29
 logic rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_valid_out_NO_SHIFT_REG;
 logic rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_NO_SHIFT_REG;
 logic rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_63_NO_SHIFT_REG;
 logic rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(local_bb6_sha256_K_ROM_arrayidx207_ba_NO_SHIFT_REG),
	.data_out(rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_63_fifo.DEPTH = 30;
defparam rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_63_fifo.DATA_WIDTH = 32;
defparam rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_63_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_63_fifo.IMPL = "ram";

assign rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_63_inputs_ready_NO_SHIFT_REG = local_bb6_sha256_K_ROM_arrayidx207_ba_valid_out_NO_SHIFT_REG;
assign local_bb6_sha256_K_ROM_arrayidx207_ba_stall_in = rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_out_reg_63_NO_SHIFT_REG;
assign rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_NO_SHIFT_REG = rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_63_NO_SHIFT_REG;
assign rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_in_reg_63_NO_SHIFT_REG = rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_in_NO_SHIFT_REG;
assign rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_valid_out_NO_SHIFT_REG = rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_valid_out_reg_63_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_xor3_i9_stall_local;
wire [31:0] local_bb6_xor3_i9;

assign local_bb6_xor3_i9 = (local_bb6_xor_i5 ^ local_bb6_or_i_i4);

// This section implements a staging register.
// 
wire rstag_64to64_bb6_notexitcond15_notexit16_valid_out_0;
wire rstag_64to64_bb6_notexitcond15_notexit16_stall_in_0;
 reg rstag_64to64_bb6_notexitcond15_notexit16_consumed_0_NO_SHIFT_REG;
wire rstag_64to64_bb6_notexitcond15_notexit16_valid_out_1;
wire rstag_64to64_bb6_notexitcond15_notexit16_stall_in_1;
 reg rstag_64to64_bb6_notexitcond15_notexit16_consumed_1_NO_SHIFT_REG;
wire rstag_64to64_bb6_notexitcond15_notexit16_valid_out_2;
wire rstag_64to64_bb6_notexitcond15_notexit16_stall_in_2;
 reg rstag_64to64_bb6_notexitcond15_notexit16_consumed_2_NO_SHIFT_REG;
wire rstag_64to64_bb6_notexitcond15_notexit16_valid_out_3;
wire rstag_64to64_bb6_notexitcond15_notexit16_stall_in_3;
 reg rstag_64to64_bb6_notexitcond15_notexit16_consumed_3_NO_SHIFT_REG;
wire rstag_64to64_bb6_notexitcond15_notexit16_inputs_ready;
wire rstag_64to64_bb6_notexitcond15_notexit16_stall_local;
 reg rstag_64to64_bb6_notexitcond15_notexit16_staging_valid_NO_SHIFT_REG;
wire rstag_64to64_bb6_notexitcond15_notexit16_combined_valid;
 reg rstag_64to64_bb6_notexitcond15_notexit16_staging_reg_NO_SHIFT_REG;
wire rstag_64to64_bb6_notexitcond15_notexit16;

assign rstag_64to64_bb6_notexitcond15_notexit16_inputs_ready = local_bb6_notexitcond15_notexit16_valid_out_NO_SHIFT_REG;
assign rstag_64to64_bb6_notexitcond15_notexit16 = (rstag_64to64_bb6_notexitcond15_notexit16_staging_valid_NO_SHIFT_REG ? rstag_64to64_bb6_notexitcond15_notexit16_staging_reg_NO_SHIFT_REG : local_bb6_notexitcond15_notexit16_NO_SHIFT_REG);
assign rstag_64to64_bb6_notexitcond15_notexit16_combined_valid = (rstag_64to64_bb6_notexitcond15_notexit16_staging_valid_NO_SHIFT_REG | rstag_64to64_bb6_notexitcond15_notexit16_inputs_ready);
assign rstag_64to64_bb6_notexitcond15_notexit16_stall_local = ((rstag_64to64_bb6_notexitcond15_notexit16_stall_in_0 & ~(rstag_64to64_bb6_notexitcond15_notexit16_consumed_0_NO_SHIFT_REG)) | (rstag_64to64_bb6_notexitcond15_notexit16_stall_in_1 & ~(rstag_64to64_bb6_notexitcond15_notexit16_consumed_1_NO_SHIFT_REG)) | (rstag_64to64_bb6_notexitcond15_notexit16_stall_in_2 & ~(rstag_64to64_bb6_notexitcond15_notexit16_consumed_2_NO_SHIFT_REG)) | (rstag_64to64_bb6_notexitcond15_notexit16_stall_in_3 & ~(rstag_64to64_bb6_notexitcond15_notexit16_consumed_3_NO_SHIFT_REG)));
assign rstag_64to64_bb6_notexitcond15_notexit16_valid_out_0 = (rstag_64to64_bb6_notexitcond15_notexit16_combined_valid & ~(rstag_64to64_bb6_notexitcond15_notexit16_consumed_0_NO_SHIFT_REG));
assign rstag_64to64_bb6_notexitcond15_notexit16_valid_out_1 = (rstag_64to64_bb6_notexitcond15_notexit16_combined_valid & ~(rstag_64to64_bb6_notexitcond15_notexit16_consumed_1_NO_SHIFT_REG));
assign rstag_64to64_bb6_notexitcond15_notexit16_valid_out_2 = (rstag_64to64_bb6_notexitcond15_notexit16_combined_valid & ~(rstag_64to64_bb6_notexitcond15_notexit16_consumed_2_NO_SHIFT_REG));
assign rstag_64to64_bb6_notexitcond15_notexit16_valid_out_3 = (rstag_64to64_bb6_notexitcond15_notexit16_combined_valid & ~(rstag_64to64_bb6_notexitcond15_notexit16_consumed_3_NO_SHIFT_REG));
assign local_bb6_notexitcond15_notexit16_stall_in = (|rstag_64to64_bb6_notexitcond15_notexit16_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_64to64_bb6_notexitcond15_notexit16_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_notexitcond15_notexit16_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_64to64_bb6_notexitcond15_notexit16_stall_local)
		begin
			if (~(rstag_64to64_bb6_notexitcond15_notexit16_staging_valid_NO_SHIFT_REG))
			begin
				rstag_64to64_bb6_notexitcond15_notexit16_staging_valid_NO_SHIFT_REG <= rstag_64to64_bb6_notexitcond15_notexit16_inputs_ready;
			end
		end
		else
		begin
			rstag_64to64_bb6_notexitcond15_notexit16_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_64to64_bb6_notexitcond15_notexit16_staging_valid_NO_SHIFT_REG))
		begin
			rstag_64to64_bb6_notexitcond15_notexit16_staging_reg_NO_SHIFT_REG <= local_bb6_notexitcond15_notexit16_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_64to64_bb6_notexitcond15_notexit16_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_notexitcond15_notexit16_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_notexitcond15_notexit16_consumed_2_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_notexitcond15_notexit16_consumed_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_64to64_bb6_notexitcond15_notexit16_consumed_0_NO_SHIFT_REG <= (rstag_64to64_bb6_notexitcond15_notexit16_combined_valid & (rstag_64to64_bb6_notexitcond15_notexit16_consumed_0_NO_SHIFT_REG | ~(rstag_64to64_bb6_notexitcond15_notexit16_stall_in_0)) & rstag_64to64_bb6_notexitcond15_notexit16_stall_local);
		rstag_64to64_bb6_notexitcond15_notexit16_consumed_1_NO_SHIFT_REG <= (rstag_64to64_bb6_notexitcond15_notexit16_combined_valid & (rstag_64to64_bb6_notexitcond15_notexit16_consumed_1_NO_SHIFT_REG | ~(rstag_64to64_bb6_notexitcond15_notexit16_stall_in_1)) & rstag_64to64_bb6_notexitcond15_notexit16_stall_local);
		rstag_64to64_bb6_notexitcond15_notexit16_consumed_2_NO_SHIFT_REG <= (rstag_64to64_bb6_notexitcond15_notexit16_combined_valid & (rstag_64to64_bb6_notexitcond15_notexit16_consumed_2_NO_SHIFT_REG | ~(rstag_64to64_bb6_notexitcond15_notexit16_stall_in_2)) & rstag_64to64_bb6_notexitcond15_notexit16_stall_local);
		rstag_64to64_bb6_notexitcond15_notexit16_consumed_3_NO_SHIFT_REG <= (rstag_64to64_bb6_notexitcond15_notexit16_combined_valid & (rstag_64to64_bb6_notexitcond15_notexit16_consumed_3_NO_SHIFT_REG | ~(rstag_64to64_bb6_notexitcond15_notexit16_stall_in_3)) & rstag_64to64_bb6_notexitcond15_notexit16_stall_local);
	end
end


// This section implements a staging register.
// 
wire rstag_64to64_bb6_ld__pre65_valid_out;
wire rstag_64to64_bb6_ld__pre65_stall_in;
wire rstag_64to64_bb6_ld__pre65_inputs_ready;
wire rstag_64to64_bb6_ld__pre65_stall_local;
 reg rstag_64to64_bb6_ld__pre65_staging_valid_NO_SHIFT_REG;
wire rstag_64to64_bb6_ld__pre65_combined_valid;
 reg [31:0] rstag_64to64_bb6_ld__pre65_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_64to64_bb6_ld__pre65;

assign rstag_64to64_bb6_ld__pre65_inputs_ready = local_bb6_ld__pre65_valid_out_NO_SHIFT_REG;
assign rstag_64to64_bb6_ld__pre65 = (rstag_64to64_bb6_ld__pre65_staging_valid_NO_SHIFT_REG ? rstag_64to64_bb6_ld__pre65_staging_reg_NO_SHIFT_REG : local_bb6_ld__pre65_NO_SHIFT_REG);
assign rstag_64to64_bb6_ld__pre65_combined_valid = (rstag_64to64_bb6_ld__pre65_staging_valid_NO_SHIFT_REG | rstag_64to64_bb6_ld__pre65_inputs_ready);
assign rstag_64to64_bb6_ld__pre65_valid_out = rstag_64to64_bb6_ld__pre65_combined_valid;
assign rstag_64to64_bb6_ld__pre65_stall_local = rstag_64to64_bb6_ld__pre65_stall_in;
assign local_bb6_ld__pre65_stall_in = (|rstag_64to64_bb6_ld__pre65_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_64to64_bb6_ld__pre65_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_64to64_bb6_ld__pre65_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_64to64_bb6_ld__pre65_stall_local)
		begin
			if (~(rstag_64to64_bb6_ld__pre65_staging_valid_NO_SHIFT_REG))
			begin
				rstag_64to64_bb6_ld__pre65_staging_valid_NO_SHIFT_REG <= rstag_64to64_bb6_ld__pre65_inputs_ready;
			end
		end
		else
		begin
			rstag_64to64_bb6_ld__pre65_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_64to64_bb6_ld__pre65_staging_valid_NO_SHIFT_REG))
		begin
			rstag_64to64_bb6_ld__pre65_staging_reg_NO_SHIFT_REG <= local_bb6_ld__pre65_NO_SHIFT_REG;
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_63to64_bb6_cmp180_0_valid_out_NO_SHIFT_REG;
 logic rnode_63to64_bb6_cmp180_0_stall_in_NO_SHIFT_REG;
 logic rnode_63to64_bb6_cmp180_0_NO_SHIFT_REG;
 logic rnode_63to64_bb6_cmp180_0_reg_64_inputs_ready_NO_SHIFT_REG;
 logic rnode_63to64_bb6_cmp180_0_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_bb6_cmp180_0_valid_out_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_bb6_cmp180_0_stall_in_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_bb6_cmp180_0_stall_out_reg_64_NO_SHIFT_REG;

acl_data_fifo rnode_63to64_bb6_cmp180_0_reg_64_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_63to64_bb6_cmp180_0_reg_64_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_63to64_bb6_cmp180_0_stall_in_reg_64_NO_SHIFT_REG),
	.valid_out(rnode_63to64_bb6_cmp180_0_valid_out_reg_64_NO_SHIFT_REG),
	.stall_out(rnode_63to64_bb6_cmp180_0_stall_out_reg_64_NO_SHIFT_REG),
	.data_in(rnode_33to63_bb6_cmp180_0_NO_SHIFT_REG),
	.data_out(rnode_63to64_bb6_cmp180_0_reg_64_NO_SHIFT_REG)
);

defparam rnode_63to64_bb6_cmp180_0_reg_64_fifo.DEPTH = 2;
defparam rnode_63to64_bb6_cmp180_0_reg_64_fifo.DATA_WIDTH = 1;
defparam rnode_63to64_bb6_cmp180_0_reg_64_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_63to64_bb6_cmp180_0_reg_64_fifo.IMPL = "ll_reg";

assign rnode_63to64_bb6_cmp180_0_reg_64_inputs_ready_NO_SHIFT_REG = rnode_33to63_bb6_cmp180_0_valid_out_NO_SHIFT_REG;
assign rnode_33to63_bb6_cmp180_0_stall_in_NO_SHIFT_REG = rnode_63to64_bb6_cmp180_0_stall_out_reg_64_NO_SHIFT_REG;
assign rnode_63to64_bb6_cmp180_0_NO_SHIFT_REG = rnode_63to64_bb6_cmp180_0_reg_64_NO_SHIFT_REG;
assign rnode_63to64_bb6_cmp180_0_stall_in_reg_64_NO_SHIFT_REG = rnode_63to64_bb6_cmp180_0_stall_in_NO_SHIFT_REG;
assign rnode_63to64_bb6_cmp180_0_valid_out_NO_SHIFT_REG = rnode_63to64_bb6_cmp180_0_valid_out_reg_64_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i31_stall_local;
wire [31:0] local_bb6_shr_i31;

assign local_bb6_shr_i31 = (rstag_34to34_bb6_ld__u41 >> 32'h3);

// This section implements an unregistered operation.
// 
wire local_bb6_shl_i2_i28_stall_local;
wire [31:0] local_bb6_shl_i2_i28;

assign local_bb6_shl_i2_i28 = (rstag_34to34_bb6_ld__u41 << 32'hE);

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i1_i27_stall_local;
wire [31:0] local_bb6_shr_i1_i27;

assign local_bb6_shr_i1_i27 = (rstag_34to34_bb6_ld__u41 >> 32'h12);

// This section implements an unregistered operation.
// 
wire local_bb6_shl_i_i25_stall_local;
wire [31:0] local_bb6_shl_i_i25;

assign local_bb6_shl_i_i25 = (rstag_34to34_bb6_ld__u41 << 32'h19);

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i_i24_stall_local;
wire [31:0] local_bb6_shr_i_i24;

assign local_bb6_shr_i_i24 = (rstag_34to34_bb6_ld__u41 >> 32'h7);

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_8_stall_local;
wire [31:0] local_bb6_reduction_8;

assign local_bb6_reduction_8 = (rstag_34to34_bb6_ld_ + rstag_34to34_bb6_ld__u42);

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i_stall_local;
wire [31:0] local_bb6_shr_i;

assign local_bb6_shr_i = (rstag_34to34_bb6_ld__u43 >> 32'hA);

// This section implements an unregistered operation.
// 
wire local_bb6_shl_i2_i_stall_local;
wire [31:0] local_bb6_shl_i2_i;

assign local_bb6_shl_i2_i = (rstag_34to34_bb6_ld__u43 << 32'hD);

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i1_i_stall_local;
wire [31:0] local_bb6_shr_i1_i;

assign local_bb6_shr_i1_i = (rstag_34to34_bb6_ld__u43 >> 32'h13);

// This section implements an unregistered operation.
// 
wire local_bb6_shl_i_i_stall_local;
wire [31:0] local_bb6_shl_i_i;

assign local_bb6_shl_i_i = (rstag_34to34_bb6_ld__u43 << 32'hF);

// This section implements an unregistered operation.
// 
wire local_bb6_shr_i_i_stall_local;
wire [31:0] local_bb6_shr_i_i;

assign local_bb6_shr_i_i = (rstag_34to34_bb6_ld__u43 >> 32'h11);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_valid_out_NO_SHIFT_REG;
 logic rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_NO_SHIFT_REG;
 logic rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_64_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_valid_out_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_in_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_out_reg_64_NO_SHIFT_REG;

acl_data_fifo rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_64_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_64_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_in_reg_64_NO_SHIFT_REG),
	.valid_out(rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_valid_out_reg_64_NO_SHIFT_REG),
	.stall_out(rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_out_reg_64_NO_SHIFT_REG),
	.data_in(rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_NO_SHIFT_REG),
	.data_out(rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_64_NO_SHIFT_REG)
);

defparam rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_64_fifo.DEPTH = 2;
defparam rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_64_fifo.DATA_WIDTH = 32;
defparam rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_64_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_64_fifo.IMPL = "ll_reg";

assign rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_64_inputs_ready_NO_SHIFT_REG = rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_valid_out_NO_SHIFT_REG;
assign rnode_34to63_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_in_NO_SHIFT_REG = rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_out_reg_64_NO_SHIFT_REG;
assign rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_NO_SHIFT_REG = rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_reg_64_NO_SHIFT_REG;
assign rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_in_reg_64_NO_SHIFT_REG = rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_in_NO_SHIFT_REG;
assign rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_valid_out_NO_SHIFT_REG = rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_valid_out_reg_64_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_add214_stall_local;
wire [31:0] local_bb6_add214;

assign local_bb6_add214 = (local_bb6_xor3_i9 + local_bb6_xor3_i);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_0_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_1_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_1_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_2_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_2_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_2_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_3_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_3_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_3_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_4_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_4_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_4_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_5_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_5_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_5_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_6_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_6_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_6_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_7_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_7_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_7_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_8_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_8_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_8_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_9_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_9_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_9_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_10_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_10_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_10_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_11_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_11_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_11_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_inputs_ready_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_0_reg_65_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_0_reg_65_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_stall_out_reg_65_NO_SHIFT_REG;
 logic rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG),
	.valid_in(rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_0_reg_65_NO_SHIFT_REG),
	.stall_out(rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_0_reg_65_NO_SHIFT_REG),
	.data_out(rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa),
	.valid_out({rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_0_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_1_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_2_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_3_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_4_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_5_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_6_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_7_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_8_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_9_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_10_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_11_NO_SHIFT_REG}),
	.stall_in({rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_0_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_1_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_2_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_3_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_4_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_5_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_6_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_7_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_8_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_9_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_10_NO_SHIFT_REG, rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_11_NO_SHIFT_REG})
);

defparam rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_fanout_adaptor.DATA_WIDTH = 1;
defparam rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_fanout_adaptor.NUM_FANOUTS = 12;

acl_data_fifo rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_0_reg_65_NO_SHIFT_REG),
	.valid_out(rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_0_reg_65_NO_SHIFT_REG),
	.stall_out(rnode_64to65_bb6_notexitcond15_notexit16_0_stall_out_reg_65_NO_SHIFT_REG),
	.data_in(rstag_64to64_bb6_notexitcond15_notexit16),
	.data_out(rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG)
);

defparam rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_fifo.DEPTH = 2;
defparam rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_fifo.DATA_WIDTH = 1;
defparam rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_fifo.IMPL = "ll_reg";

assign rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_inputs_ready_NO_SHIFT_REG = rstag_64to64_bb6_notexitcond15_notexit16_valid_out_0;
assign rstag_64to64_bb6_notexitcond15_notexit16_stall_in_0 = rnode_64to65_bb6_notexitcond15_notexit16_0_stall_out_reg_65_NO_SHIFT_REG;
assign rnode_64to65_bb6_notexitcond15_notexit16_0_NO_SHIFT_REG = rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa;
assign rnode_64to65_bb6_notexitcond15_notexit16_1_NO_SHIFT_REG = rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa;
assign rnode_64to65_bb6_notexitcond15_notexit16_2_NO_SHIFT_REG = rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa;
assign rnode_64to65_bb6_notexitcond15_notexit16_3_NO_SHIFT_REG = rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa;
assign rnode_64to65_bb6_notexitcond15_notexit16_4_NO_SHIFT_REG = rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa;
assign rnode_64to65_bb6_notexitcond15_notexit16_5_NO_SHIFT_REG = rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa;
assign rnode_64to65_bb6_notexitcond15_notexit16_6_NO_SHIFT_REG = rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa;
assign rnode_64to65_bb6_notexitcond15_notexit16_7_NO_SHIFT_REG = rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa;
assign rnode_64to65_bb6_notexitcond15_notexit16_8_NO_SHIFT_REG = rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa;
assign rnode_64to65_bb6_notexitcond15_notexit16_9_NO_SHIFT_REG = rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa;
assign rnode_64to65_bb6_notexitcond15_notexit16_10_NO_SHIFT_REG = rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa;
assign rnode_64to65_bb6_notexitcond15_notexit16_11_NO_SHIFT_REG = rnode_64to65_bb6_notexitcond15_notexit16_0_reg_65_NO_SHIFT_REG_fa;

// This section implements a registered operation.
// 
wire local_bb6_F_145_push12_E_146_pop11_inputs_ready;
 reg local_bb6_F_145_push12_E_146_pop11_valid_out_NO_SHIFT_REG;
wire local_bb6_F_145_push12_E_146_pop11_stall_in;
wire local_bb6_F_145_push12_E_146_pop11_output_regs_ready;
wire [31:0] local_bb6_F_145_push12_E_146_pop11_result;
wire local_bb6_F_145_push12_E_146_pop11_fu_valid_out;
wire local_bb6_F_145_push12_E_146_pop11_fu_stall_out;
 reg [31:0] local_bb6_F_145_push12_E_146_pop11_NO_SHIFT_REG;
wire local_bb6_F_145_push12_E_146_pop11_causedstall;

acl_push local_bb6_F_145_push12_E_146_pop11_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rstag_64to64_bb6_notexitcond15_notexit16),
	.predicate(1'b0),
	.data_in(rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119),
	.stall_out(local_bb6_F_145_push12_E_146_pop11_fu_stall_out),
	.valid_in(local_bb6_F_145_push12_E_146_pop11_inputs_ready),
	.valid_out(local_bb6_F_145_push12_E_146_pop11_fu_valid_out),
	.stall_in(~(local_bb6_F_145_push12_E_146_pop11_output_regs_ready)),
	.data_out(local_bb6_F_145_push12_E_146_pop11_result),
	.feedback_out(feedback_data_out_12),
	.feedback_valid_out(feedback_valid_out_12),
	.feedback_stall_in(feedback_stall_in_12)
);

defparam local_bb6_F_145_push12_E_146_pop11_feedback.STALLFREE = 0;
defparam local_bb6_F_145_push12_E_146_pop11_feedback.DATA_WIDTH = 32;
defparam local_bb6_F_145_push12_E_146_pop11_feedback.FIFO_DEPTH = 64;
defparam local_bb6_F_145_push12_E_146_pop11_feedback.MIN_FIFO_LATENCY = 62;
defparam local_bb6_F_145_push12_E_146_pop11_feedback.STYLE = "REGULAR";

assign local_bb6_F_145_push12_E_146_pop11_inputs_ready = (rstag_64to64_bb6_notexitcond15_notexit16_valid_out_1 & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_9);
assign local_bb6_F_145_push12_E_146_pop11_output_regs_ready = (&(~(local_bb6_F_145_push12_E_146_pop11_valid_out_NO_SHIFT_REG) | ~(local_bb6_F_145_push12_E_146_pop11_stall_in)));
assign rstag_64to64_bb6_notexitcond15_notexit16_stall_in_1 = (local_bb6_F_145_push12_E_146_pop11_fu_stall_out | ~(local_bb6_F_145_push12_E_146_pop11_inputs_ready));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_9 = (local_bb6_F_145_push12_E_146_pop11_fu_stall_out | ~(local_bb6_F_145_push12_E_146_pop11_inputs_ready));
assign local_bb6_F_145_push12_E_146_pop11_causedstall = (local_bb6_F_145_push12_E_146_pop11_inputs_ready && (local_bb6_F_145_push12_E_146_pop11_fu_stall_out && !(~(local_bb6_F_145_push12_E_146_pop11_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_F_145_push12_E_146_pop11_NO_SHIFT_REG <= 'x;
		local_bb6_F_145_push12_E_146_pop11_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_F_145_push12_E_146_pop11_output_regs_ready)
		begin
			local_bb6_F_145_push12_E_146_pop11_NO_SHIFT_REG <= local_bb6_F_145_push12_E_146_pop11_result;
			local_bb6_F_145_push12_E_146_pop11_valid_out_NO_SHIFT_REG <= local_bb6_F_145_push12_E_146_pop11_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_F_145_push12_E_146_pop11_stall_in))
			begin
				local_bb6_F_145_push12_E_146_pop11_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_G_144_push13_F_145_pop12_inputs_ready;
 reg local_bb6_G_144_push13_F_145_pop12_valid_out_NO_SHIFT_REG;
wire local_bb6_G_144_push13_F_145_pop12_stall_in;
wire local_bb6_G_144_push13_F_145_pop12_output_regs_ready;
wire [31:0] local_bb6_G_144_push13_F_145_pop12_result;
wire local_bb6_G_144_push13_F_145_pop12_fu_valid_out;
wire local_bb6_G_144_push13_F_145_pop12_fu_stall_out;
 reg [31:0] local_bb6_G_144_push13_F_145_pop12_NO_SHIFT_REG;
wire local_bb6_G_144_push13_F_145_pop12_causedstall;

acl_push local_bb6_G_144_push13_F_145_pop12_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rstag_64to64_bb6_notexitcond15_notexit16),
	.predicate(1'b0),
	.data_in(rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372),
	.stall_out(local_bb6_G_144_push13_F_145_pop12_fu_stall_out),
	.valid_in(local_bb6_G_144_push13_F_145_pop12_inputs_ready),
	.valid_out(local_bb6_G_144_push13_F_145_pop12_fu_valid_out),
	.stall_in(~(local_bb6_G_144_push13_F_145_pop12_output_regs_ready)),
	.data_out(local_bb6_G_144_push13_F_145_pop12_result),
	.feedback_out(feedback_data_out_13),
	.feedback_valid_out(feedback_valid_out_13),
	.feedback_stall_in(feedback_stall_in_13)
);

defparam local_bb6_G_144_push13_F_145_pop12_feedback.STALLFREE = 0;
defparam local_bb6_G_144_push13_F_145_pop12_feedback.DATA_WIDTH = 32;
defparam local_bb6_G_144_push13_F_145_pop12_feedback.FIFO_DEPTH = 64;
defparam local_bb6_G_144_push13_F_145_pop12_feedback.MIN_FIFO_LATENCY = 62;
defparam local_bb6_G_144_push13_F_145_pop12_feedback.STYLE = "REGULAR";

assign local_bb6_G_144_push13_F_145_pop12_inputs_ready = (rstag_64to64_bb6_notexitcond15_notexit16_valid_out_2 & rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_2);
assign local_bb6_G_144_push13_F_145_pop12_output_regs_ready = (&(~(local_bb6_G_144_push13_F_145_pop12_valid_out_NO_SHIFT_REG) | ~(local_bb6_G_144_push13_F_145_pop12_stall_in)));
assign rstag_64to64_bb6_notexitcond15_notexit16_stall_in_2 = (local_bb6_G_144_push13_F_145_pop12_fu_stall_out | ~(local_bb6_G_144_push13_F_145_pop12_inputs_ready));
assign rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in_2 = (local_bb6_G_144_push13_F_145_pop12_fu_stall_out | ~(local_bb6_G_144_push13_F_145_pop12_inputs_ready));
assign local_bb6_G_144_push13_F_145_pop12_causedstall = (local_bb6_G_144_push13_F_145_pop12_inputs_ready && (local_bb6_G_144_push13_F_145_pop12_fu_stall_out && !(~(local_bb6_G_144_push13_F_145_pop12_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_G_144_push13_F_145_pop12_NO_SHIFT_REG <= 'x;
		local_bb6_G_144_push13_F_145_pop12_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_G_144_push13_F_145_pop12_output_regs_ready)
		begin
			local_bb6_G_144_push13_F_145_pop12_NO_SHIFT_REG <= local_bb6_G_144_push13_F_145_pop12_result;
			local_bb6_G_144_push13_F_145_pop12_valid_out_NO_SHIFT_REG <= local_bb6_G_144_push13_F_145_pop12_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_G_144_push13_F_145_pop12_stall_in))
			begin
				local_bb6_G_144_push13_F_145_pop12_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_H_143_push14_G_144_pop13_inputs_ready;
 reg local_bb6_H_143_push14_G_144_pop13_valid_out_NO_SHIFT_REG;
wire local_bb6_H_143_push14_G_144_pop13_stall_in;
wire local_bb6_H_143_push14_G_144_pop13_output_regs_ready;
wire [31:0] local_bb6_H_143_push14_G_144_pop13_result;
wire local_bb6_H_143_push14_G_144_pop13_fu_valid_out;
wire local_bb6_H_143_push14_G_144_pop13_fu_stall_out;
 reg [31:0] local_bb6_H_143_push14_G_144_pop13_NO_SHIFT_REG;
wire local_bb6_H_143_push14_G_144_pop13_causedstall;

acl_push local_bb6_H_143_push14_G_144_pop13_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rstag_64to64_bb6_notexitcond15_notexit16),
	.predicate(1'b0),
	.data_in(rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635),
	.stall_out(local_bb6_H_143_push14_G_144_pop13_fu_stall_out),
	.valid_in(local_bb6_H_143_push14_G_144_pop13_inputs_ready),
	.valid_out(local_bb6_H_143_push14_G_144_pop13_fu_valid_out),
	.stall_in(~(local_bb6_H_143_push14_G_144_pop13_output_regs_ready)),
	.data_out(local_bb6_H_143_push14_G_144_pop13_result),
	.feedback_out(feedback_data_out_14),
	.feedback_valid_out(feedback_valid_out_14),
	.feedback_stall_in(feedback_stall_in_14)
);

defparam local_bb6_H_143_push14_G_144_pop13_feedback.STALLFREE = 0;
defparam local_bb6_H_143_push14_G_144_pop13_feedback.DATA_WIDTH = 32;
defparam local_bb6_H_143_push14_G_144_pop13_feedback.FIFO_DEPTH = 64;
defparam local_bb6_H_143_push14_G_144_pop13_feedback.MIN_FIFO_LATENCY = 62;
defparam local_bb6_H_143_push14_G_144_pop13_feedback.STYLE = "REGULAR";

assign local_bb6_H_143_push14_G_144_pop13_inputs_ready = (rstag_64to64_bb6_notexitcond15_notexit16_valid_out_3 & rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_2);
assign local_bb6_H_143_push14_G_144_pop13_output_regs_ready = (&(~(local_bb6_H_143_push14_G_144_pop13_valid_out_NO_SHIFT_REG) | ~(local_bb6_H_143_push14_G_144_pop13_stall_in)));
assign rstag_64to64_bb6_notexitcond15_notexit16_stall_in_3 = (local_bb6_H_143_push14_G_144_pop13_fu_stall_out | ~(local_bb6_H_143_push14_G_144_pop13_inputs_ready));
assign rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in_2 = (local_bb6_H_143_push14_G_144_pop13_fu_stall_out | ~(local_bb6_H_143_push14_G_144_pop13_inputs_ready));
assign local_bb6_H_143_push14_G_144_pop13_causedstall = (local_bb6_H_143_push14_G_144_pop13_inputs_ready && (local_bb6_H_143_push14_G_144_pop13_fu_stall_out && !(~(local_bb6_H_143_push14_G_144_pop13_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_H_143_push14_G_144_pop13_NO_SHIFT_REG <= 'x;
		local_bb6_H_143_push14_G_144_pop13_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_H_143_push14_G_144_pop13_output_regs_ready)
		begin
			local_bb6_H_143_push14_G_144_pop13_NO_SHIFT_REG <= local_bb6_H_143_push14_G_144_pop13_result;
			local_bb6_H_143_push14_G_144_pop13_valid_out_NO_SHIFT_REG <= local_bb6_H_143_push14_G_144_pop13_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_H_143_push14_G_144_pop13_stall_in))
			begin
				local_bb6_H_143_push14_G_144_pop13_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_or_i3_i29_stall_local;
wire [31:0] local_bb6_or_i3_i29;

assign local_bb6_or_i3_i29 = (local_bb6_shr_i1_i27 | local_bb6_shl_i2_i28);

// This section implements an unregistered operation.
// 
wire local_bb6_or_i_i26_stall_local;
wire [31:0] local_bb6_or_i_i26;

assign local_bb6_or_i_i26 = (local_bb6_shr_i_i24 | local_bb6_shl_i_i25);

// This section implements an unregistered operation.
// 
wire local_bb6_or_i3_i_stall_local;
wire [31:0] local_bb6_or_i3_i;

assign local_bb6_or_i3_i = (local_bb6_shr_i1_i | local_bb6_shl_i2_i);

// This section implements an unregistered operation.
// 
wire local_bb6_or_i_i_stall_local;
wire [31:0] local_bb6_or_i_i;

assign local_bb6_or_i_i = (local_bb6_shr_i_i | local_bb6_shl_i_i);

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_4_valid_out;
wire local_bb6_reduction_4_stall_in;
wire local_bb6_reduction_4_inputs_ready;
wire local_bb6_reduction_4_stall_local;
wire [31:0] local_bb6_reduction_4;

assign local_bb6_reduction_4_inputs_ready = (rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_3 & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_4 & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_5 & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_6 & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_7 & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_8 & rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_valid_out_NO_SHIFT_REG);
assign local_bb6_reduction_4 = (local_bb6_xor3_i23 + rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_NO_SHIFT_REG);
assign local_bb6_reduction_4_valid_out = local_bb6_reduction_4_inputs_ready;
assign local_bb6_reduction_4_stall_local = local_bb6_reduction_4_stall_in;
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_3 = (local_bb6_reduction_4_stall_local | ~(local_bb6_reduction_4_inputs_ready));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_4 = (local_bb6_reduction_4_stall_local | ~(local_bb6_reduction_4_inputs_ready));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_5 = (local_bb6_reduction_4_stall_local | ~(local_bb6_reduction_4_inputs_ready));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_6 = (local_bb6_reduction_4_stall_local | ~(local_bb6_reduction_4_inputs_ready));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_7 = (local_bb6_reduction_4_stall_local | ~(local_bb6_reduction_4_inputs_ready));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_8 = (local_bb6_reduction_4_stall_local | ~(local_bb6_reduction_4_inputs_ready));
assign rnode_63to64_bb6_sha256_K_ROM_arrayidx207_ba_0_stall_in_NO_SHIFT_REG = (local_bb6_reduction_4_stall_local | ~(local_bb6_reduction_4_inputs_ready));

// This section implements a registered operation.
// 
wire local_bb6_D_147_push10_C_148_pop9_inputs_ready;
 reg local_bb6_D_147_push10_C_148_pop9_valid_out_NO_SHIFT_REG;
wire local_bb6_D_147_push10_C_148_pop9_stall_in;
wire local_bb6_D_147_push10_C_148_pop9_output_regs_ready;
wire [31:0] local_bb6_D_147_push10_C_148_pop9_result;
wire local_bb6_D_147_push10_C_148_pop9_fu_valid_out;
wire local_bb6_D_147_push10_C_148_pop9_fu_stall_out;
 reg [31:0] local_bb6_D_147_push10_C_148_pop9_NO_SHIFT_REG;
wire local_bb6_D_147_push10_C_148_pop9_causedstall;

acl_push local_bb6_D_147_push10_C_148_pop9_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_64to65_bb6_notexitcond15_notexit16_0_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242),
	.stall_out(local_bb6_D_147_push10_C_148_pop9_fu_stall_out),
	.valid_in(local_bb6_D_147_push10_C_148_pop9_inputs_ready),
	.valid_out(local_bb6_D_147_push10_C_148_pop9_fu_valid_out),
	.stall_in(~(local_bb6_D_147_push10_C_148_pop9_output_regs_ready)),
	.data_out(local_bb6_D_147_push10_C_148_pop9_result),
	.feedback_out(feedback_data_out_10),
	.feedback_valid_out(feedback_valid_out_10),
	.feedback_stall_in(feedback_stall_in_10)
);

defparam local_bb6_D_147_push10_C_148_pop9_feedback.STALLFREE = 0;
defparam local_bb6_D_147_push10_C_148_pop9_feedback.DATA_WIDTH = 32;
defparam local_bb6_D_147_push10_C_148_pop9_feedback.FIFO_DEPTH = 64;
defparam local_bb6_D_147_push10_C_148_pop9_feedback.MIN_FIFO_LATENCY = 62;
defparam local_bb6_D_147_push10_C_148_pop9_feedback.STYLE = "REGULAR";

assign local_bb6_D_147_push10_C_148_pop9_inputs_ready = (rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_0_NO_SHIFT_REG & rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_3);
assign local_bb6_D_147_push10_C_148_pop9_output_regs_ready = (&(~(local_bb6_D_147_push10_C_148_pop9_valid_out_NO_SHIFT_REG) | ~(local_bb6_D_147_push10_C_148_pop9_stall_in)));
assign rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_0_NO_SHIFT_REG = (local_bb6_D_147_push10_C_148_pop9_fu_stall_out | ~(local_bb6_D_147_push10_C_148_pop9_inputs_ready));
assign rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_3 = (local_bb6_D_147_push10_C_148_pop9_fu_stall_out | ~(local_bb6_D_147_push10_C_148_pop9_inputs_ready));
assign local_bb6_D_147_push10_C_148_pop9_causedstall = (local_bb6_D_147_push10_C_148_pop9_inputs_ready && (local_bb6_D_147_push10_C_148_pop9_fu_stall_out && !(~(local_bb6_D_147_push10_C_148_pop9_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_D_147_push10_C_148_pop9_NO_SHIFT_REG <= 'x;
		local_bb6_D_147_push10_C_148_pop9_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_D_147_push10_C_148_pop9_output_regs_ready)
		begin
			local_bb6_D_147_push10_C_148_pop9_NO_SHIFT_REG <= local_bb6_D_147_push10_C_148_pop9_result;
			local_bb6_D_147_push10_C_148_pop9_valid_out_NO_SHIFT_REG <= local_bb6_D_147_push10_C_148_pop9_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_D_147_push10_C_148_pop9_stall_in))
			begin
				local_bb6_D_147_push10_C_148_pop9_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_C_148_push9_B_149_pop8_inputs_ready;
 reg local_bb6_C_148_push9_B_149_pop8_valid_out_NO_SHIFT_REG;
wire local_bb6_C_148_push9_B_149_pop8_stall_in;
wire local_bb6_C_148_push9_B_149_pop8_output_regs_ready;
wire [31:0] local_bb6_C_148_push9_B_149_pop8_result;
wire local_bb6_C_148_push9_B_149_pop8_fu_valid_out;
wire local_bb6_C_148_push9_B_149_pop8_fu_stall_out;
 reg [31:0] local_bb6_C_148_push9_B_149_pop8_NO_SHIFT_REG;
wire local_bb6_C_148_push9_B_149_pop8_causedstall;

acl_push local_bb6_C_148_push9_B_149_pop8_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_64to65_bb6_notexitcond15_notexit16_1_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rstag_65to65_bb6_B_149_pop8_B_149),
	.stall_out(local_bb6_C_148_push9_B_149_pop8_fu_stall_out),
	.valid_in(local_bb6_C_148_push9_B_149_pop8_inputs_ready),
	.valid_out(local_bb6_C_148_push9_B_149_pop8_fu_valid_out),
	.stall_in(~(local_bb6_C_148_push9_B_149_pop8_output_regs_ready)),
	.data_out(local_bb6_C_148_push9_B_149_pop8_result),
	.feedback_out(feedback_data_out_9),
	.feedback_valid_out(feedback_valid_out_9),
	.feedback_stall_in(feedback_stall_in_9)
);

defparam local_bb6_C_148_push9_B_149_pop8_feedback.STALLFREE = 0;
defparam local_bb6_C_148_push9_B_149_pop8_feedback.DATA_WIDTH = 32;
defparam local_bb6_C_148_push9_B_149_pop8_feedback.FIFO_DEPTH = 64;
defparam local_bb6_C_148_push9_B_149_pop8_feedback.MIN_FIFO_LATENCY = 62;
defparam local_bb6_C_148_push9_B_149_pop8_feedback.STYLE = "REGULAR";

assign local_bb6_C_148_push9_B_149_pop8_inputs_ready = (rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_1_NO_SHIFT_REG & rstag_65to65_bb6_B_149_pop8_B_149_valid_out_3);
assign local_bb6_C_148_push9_B_149_pop8_output_regs_ready = (&(~(local_bb6_C_148_push9_B_149_pop8_valid_out_NO_SHIFT_REG) | ~(local_bb6_C_148_push9_B_149_pop8_stall_in)));
assign rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_1_NO_SHIFT_REG = (local_bb6_C_148_push9_B_149_pop8_fu_stall_out | ~(local_bb6_C_148_push9_B_149_pop8_inputs_ready));
assign rstag_65to65_bb6_B_149_pop8_B_149_stall_in_3 = (local_bb6_C_148_push9_B_149_pop8_fu_stall_out | ~(local_bb6_C_148_push9_B_149_pop8_inputs_ready));
assign local_bb6_C_148_push9_B_149_pop8_causedstall = (local_bb6_C_148_push9_B_149_pop8_inputs_ready && (local_bb6_C_148_push9_B_149_pop8_fu_stall_out && !(~(local_bb6_C_148_push9_B_149_pop8_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_C_148_push9_B_149_pop8_NO_SHIFT_REG <= 'x;
		local_bb6_C_148_push9_B_149_pop8_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_C_148_push9_B_149_pop8_output_regs_ready)
		begin
			local_bb6_C_148_push9_B_149_pop8_NO_SHIFT_REG <= local_bb6_C_148_push9_B_149_pop8_result;
			local_bb6_C_148_push9_B_149_pop8_valid_out_NO_SHIFT_REG <= local_bb6_C_148_push9_B_149_pop8_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_C_148_push9_B_149_pop8_stall_in))
			begin
				local_bb6_C_148_push9_B_149_pop8_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_B_149_push8_A_150_pop7_inputs_ready;
 reg local_bb6_B_149_push8_A_150_pop7_valid_out_NO_SHIFT_REG;
wire local_bb6_B_149_push8_A_150_pop7_stall_in;
wire local_bb6_B_149_push8_A_150_pop7_output_regs_ready;
wire [31:0] local_bb6_B_149_push8_A_150_pop7_result;
wire local_bb6_B_149_push8_A_150_pop7_fu_valid_out;
wire local_bb6_B_149_push8_A_150_pop7_fu_stall_out;
 reg [31:0] local_bb6_B_149_push8_A_150_pop7_NO_SHIFT_REG;
wire local_bb6_B_149_push8_A_150_pop7_causedstall;

acl_push local_bb6_B_149_push8_A_150_pop7_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_64to65_bb6_notexitcond15_notexit16_2_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rstag_65to65_bb6_A_150_pop7_A_150),
	.stall_out(local_bb6_B_149_push8_A_150_pop7_fu_stall_out),
	.valid_in(local_bb6_B_149_push8_A_150_pop7_inputs_ready),
	.valid_out(local_bb6_B_149_push8_A_150_pop7_fu_valid_out),
	.stall_in(~(local_bb6_B_149_push8_A_150_pop7_output_regs_ready)),
	.data_out(local_bb6_B_149_push8_A_150_pop7_result),
	.feedback_out(feedback_data_out_8),
	.feedback_valid_out(feedback_valid_out_8),
	.feedback_stall_in(feedback_stall_in_8)
);

defparam local_bb6_B_149_push8_A_150_pop7_feedback.STALLFREE = 0;
defparam local_bb6_B_149_push8_A_150_pop7_feedback.DATA_WIDTH = 32;
defparam local_bb6_B_149_push8_A_150_pop7_feedback.FIFO_DEPTH = 64;
defparam local_bb6_B_149_push8_A_150_pop7_feedback.MIN_FIFO_LATENCY = 62;
defparam local_bb6_B_149_push8_A_150_pop7_feedback.STYLE = "REGULAR";

assign local_bb6_B_149_push8_A_150_pop7_inputs_ready = (rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_2_NO_SHIFT_REG & rstag_65to65_bb6_A_150_pop7_A_150_valid_out_8);
assign local_bb6_B_149_push8_A_150_pop7_output_regs_ready = (&(~(local_bb6_B_149_push8_A_150_pop7_valid_out_NO_SHIFT_REG) | ~(local_bb6_B_149_push8_A_150_pop7_stall_in)));
assign rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_2_NO_SHIFT_REG = (local_bb6_B_149_push8_A_150_pop7_fu_stall_out | ~(local_bb6_B_149_push8_A_150_pop7_inputs_ready));
assign rstag_65to65_bb6_A_150_pop7_A_150_stall_in_8 = (local_bb6_B_149_push8_A_150_pop7_fu_stall_out | ~(local_bb6_B_149_push8_A_150_pop7_inputs_ready));
assign local_bb6_B_149_push8_A_150_pop7_causedstall = (local_bb6_B_149_push8_A_150_pop7_inputs_ready && (local_bb6_B_149_push8_A_150_pop7_fu_stall_out && !(~(local_bb6_B_149_push8_A_150_pop7_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_B_149_push8_A_150_pop7_NO_SHIFT_REG <= 'x;
		local_bb6_B_149_push8_A_150_pop7_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_B_149_push8_A_150_pop7_output_regs_ready)
		begin
			local_bb6_B_149_push8_A_150_pop7_NO_SHIFT_REG <= local_bb6_B_149_push8_A_150_pop7_result;
			local_bb6_B_149_push8_A_150_pop7_valid_out_NO_SHIFT_REG <= local_bb6_B_149_push8_A_150_pop7_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_B_149_push8_A_150_pop7_stall_in))
			begin
				local_bb6_B_149_push8_A_150_pop7_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6__push19__pop19_inputs_ready;
 reg local_bb6__push19__pop19_valid_out_NO_SHIFT_REG;
wire local_bb6__push19__pop19_stall_in;
wire local_bb6__push19__pop19_output_regs_ready;
wire [31:0] local_bb6__push19__pop19_result;
wire local_bb6__push19__pop19_fu_valid_out;
wire local_bb6__push19__pop19_fu_stall_out;
 reg [31:0] local_bb6__push19__pop19_NO_SHIFT_REG;
wire local_bb6__push19__pop19_causedstall;

acl_push local_bb6__push19__pop19_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_64to65_bb6_notexitcond15_notexit16_9_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb6__pop19__NO_SHIFT_REG),
	.stall_out(local_bb6__push19__pop19_fu_stall_out),
	.valid_in(local_bb6__push19__pop19_inputs_ready),
	.valid_out(local_bb6__push19__pop19_fu_valid_out),
	.stall_in(~(local_bb6__push19__pop19_output_regs_ready)),
	.data_out(local_bb6__push19__pop19_result),
	.feedback_out(feedback_data_out_19),
	.feedback_valid_out(feedback_valid_out_19),
	.feedback_stall_in(feedback_stall_in_19)
);

defparam local_bb6__push19__pop19_feedback.STALLFREE = 0;
defparam local_bb6__push19__pop19_feedback.DATA_WIDTH = 32;
defparam local_bb6__push19__pop19_feedback.FIFO_DEPTH = 64;
defparam local_bb6__push19__pop19_feedback.MIN_FIFO_LATENCY = 62;
defparam local_bb6__push19__pop19_feedback.STYLE = "REGULAR";

assign local_bb6__push19__pop19_inputs_ready = (local_bb6__pop19__valid_out_0_NO_SHIFT_REG & rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_9_NO_SHIFT_REG);
assign local_bb6__push19__pop19_output_regs_ready = (&(~(local_bb6__push19__pop19_valid_out_NO_SHIFT_REG) | ~(local_bb6__push19__pop19_stall_in)));
assign local_bb6__pop19__stall_in_0 = (local_bb6__push19__pop19_fu_stall_out | ~(local_bb6__push19__pop19_inputs_ready));
assign rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_9_NO_SHIFT_REG = (local_bb6__push19__pop19_fu_stall_out | ~(local_bb6__push19__pop19_inputs_ready));
assign local_bb6__push19__pop19_causedstall = (local_bb6__push19__pop19_inputs_ready && (local_bb6__push19__pop19_fu_stall_out && !(~(local_bb6__push19__pop19_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6__push19__pop19_NO_SHIFT_REG <= 'x;
		local_bb6__push19__pop19_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6__push19__pop19_output_regs_ready)
		begin
			local_bb6__push19__pop19_NO_SHIFT_REG <= local_bb6__push19__pop19_result;
			local_bb6__push19__pop19_valid_out_NO_SHIFT_REG <= local_bb6__push19__pop19_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6__push19__pop19_stall_in))
			begin
				local_bb6__push19__pop19_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6__push20__pop20_inputs_ready;
 reg local_bb6__push20__pop20_valid_out_NO_SHIFT_REG;
wire local_bb6__push20__pop20_stall_in;
wire local_bb6__push20__pop20_output_regs_ready;
wire [31:0] local_bb6__push20__pop20_result;
wire local_bb6__push20__pop20_fu_valid_out;
wire local_bb6__push20__pop20_fu_stall_out;
 reg [31:0] local_bb6__push20__pop20_NO_SHIFT_REG;
wire local_bb6__push20__pop20_causedstall;

acl_push local_bb6__push20__pop20_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_64to65_bb6_notexitcond15_notexit16_10_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb6__pop20__NO_SHIFT_REG),
	.stall_out(local_bb6__push20__pop20_fu_stall_out),
	.valid_in(local_bb6__push20__pop20_inputs_ready),
	.valid_out(local_bb6__push20__pop20_fu_valid_out),
	.stall_in(~(local_bb6__push20__pop20_output_regs_ready)),
	.data_out(local_bb6__push20__pop20_result),
	.feedback_out(feedback_data_out_20),
	.feedback_valid_out(feedback_valid_out_20),
	.feedback_stall_in(feedback_stall_in_20)
);

defparam local_bb6__push20__pop20_feedback.STALLFREE = 0;
defparam local_bb6__push20__pop20_feedback.DATA_WIDTH = 32;
defparam local_bb6__push20__pop20_feedback.FIFO_DEPTH = 64;
defparam local_bb6__push20__pop20_feedback.MIN_FIFO_LATENCY = 62;
defparam local_bb6__push20__pop20_feedback.STYLE = "REGULAR";

assign local_bb6__push20__pop20_inputs_ready = (local_bb6__pop20__valid_out_0_NO_SHIFT_REG & rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_10_NO_SHIFT_REG);
assign local_bb6__push20__pop20_output_regs_ready = (&(~(local_bb6__push20__pop20_valid_out_NO_SHIFT_REG) | ~(local_bb6__push20__pop20_stall_in)));
assign local_bb6__pop20__stall_in_0 = (local_bb6__push20__pop20_fu_stall_out | ~(local_bb6__push20__pop20_inputs_ready));
assign rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_10_NO_SHIFT_REG = (local_bb6__push20__pop20_fu_stall_out | ~(local_bb6__push20__pop20_inputs_ready));
assign local_bb6__push20__pop20_causedstall = (local_bb6__push20__pop20_inputs_ready && (local_bb6__push20__pop20_fu_stall_out && !(~(local_bb6__push20__pop20_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6__push20__pop20_NO_SHIFT_REG <= 'x;
		local_bb6__push20__pop20_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6__push20__pop20_output_regs_ready)
		begin
			local_bb6__push20__pop20_NO_SHIFT_REG <= local_bb6__push20__pop20_result;
			local_bb6__push20__pop20_valid_out_NO_SHIFT_REG <= local_bb6__push20__pop20_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6__push20__pop20_stall_in))
			begin
				local_bb6__push20__pop20_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_select10817_push21_select10817_pop21_inputs_ready;
 reg local_bb6_select10817_push21_select10817_pop21_valid_out_NO_SHIFT_REG;
wire local_bb6_select10817_push21_select10817_pop21_stall_in;
wire local_bb6_select10817_push21_select10817_pop21_output_regs_ready;
wire [31:0] local_bb6_select10817_push21_select10817_pop21_result;
wire local_bb6_select10817_push21_select10817_pop21_fu_valid_out;
wire local_bb6_select10817_push21_select10817_pop21_fu_stall_out;
 reg [31:0] local_bb6_select10817_push21_select10817_pop21_NO_SHIFT_REG;
wire local_bb6_select10817_push21_select10817_pop21_causedstall;

acl_push local_bb6_select10817_push21_select10817_pop21_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_64to65_bb6_notexitcond15_notexit16_11_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(local_bb6_select10817_pop21_select10817_NO_SHIFT_REG),
	.stall_out(local_bb6_select10817_push21_select10817_pop21_fu_stall_out),
	.valid_in(local_bb6_select10817_push21_select10817_pop21_inputs_ready),
	.valid_out(local_bb6_select10817_push21_select10817_pop21_fu_valid_out),
	.stall_in(~(local_bb6_select10817_push21_select10817_pop21_output_regs_ready)),
	.data_out(local_bb6_select10817_push21_select10817_pop21_result),
	.feedback_out(feedback_data_out_21),
	.feedback_valid_out(feedback_valid_out_21),
	.feedback_stall_in(feedback_stall_in_21)
);

defparam local_bb6_select10817_push21_select10817_pop21_feedback.STALLFREE = 0;
defparam local_bb6_select10817_push21_select10817_pop21_feedback.DATA_WIDTH = 32;
defparam local_bb6_select10817_push21_select10817_pop21_feedback.FIFO_DEPTH = 64;
defparam local_bb6_select10817_push21_select10817_pop21_feedback.MIN_FIFO_LATENCY = 62;
defparam local_bb6_select10817_push21_select10817_pop21_feedback.STYLE = "REGULAR";

assign local_bb6_select10817_push21_select10817_pop21_inputs_ready = (local_bb6_select10817_pop21_select10817_valid_out_0_NO_SHIFT_REG & rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_11_NO_SHIFT_REG);
assign local_bb6_select10817_push21_select10817_pop21_output_regs_ready = (&(~(local_bb6_select10817_push21_select10817_pop21_valid_out_NO_SHIFT_REG) | ~(local_bb6_select10817_push21_select10817_pop21_stall_in)));
assign local_bb6_select10817_pop21_select10817_stall_in_0 = (local_bb6_select10817_push21_select10817_pop21_fu_stall_out | ~(local_bb6_select10817_push21_select10817_pop21_inputs_ready));
assign rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_11_NO_SHIFT_REG = (local_bb6_select10817_push21_select10817_pop21_fu_stall_out | ~(local_bb6_select10817_push21_select10817_pop21_inputs_ready));
assign local_bb6_select10817_push21_select10817_pop21_causedstall = (local_bb6_select10817_push21_select10817_pop21_inputs_ready && (local_bb6_select10817_push21_select10817_pop21_fu_stall_out && !(~(local_bb6_select10817_push21_select10817_pop21_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_select10817_push21_select10817_pop21_NO_SHIFT_REG <= 'x;
		local_bb6_select10817_push21_select10817_pop21_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_select10817_push21_select10817_pop21_output_regs_ready)
		begin
			local_bb6_select10817_push21_select10817_pop21_NO_SHIFT_REG <= local_bb6_select10817_push21_select10817_pop21_result;
			local_bb6_select10817_push21_select10817_pop21_valid_out_NO_SHIFT_REG <= local_bb6_select10817_push21_select10817_pop21_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_select10817_push21_select10817_pop21_stall_in))
			begin
				local_bb6_select10817_push21_select10817_pop21_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_65to66_bb6_F_145_push12_E_146_pop11_0_valid_out_NO_SHIFT_REG;
 logic rnode_65to66_bb6_F_145_push12_E_146_pop11_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_F_145_push12_E_146_pop11_0_NO_SHIFT_REG;
 logic rnode_65to66_bb6_F_145_push12_E_146_pop11_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_F_145_push12_E_146_pop11_0_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_F_145_push12_E_146_pop11_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_F_145_push12_E_146_pop11_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_F_145_push12_E_146_pop11_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_65to66_bb6_F_145_push12_E_146_pop11_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_65to66_bb6_F_145_push12_E_146_pop11_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_65to66_bb6_F_145_push12_E_146_pop11_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_65to66_bb6_F_145_push12_E_146_pop11_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_65to66_bb6_F_145_push12_E_146_pop11_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(local_bb6_F_145_push12_E_146_pop11_NO_SHIFT_REG),
	.data_out(rnode_65to66_bb6_F_145_push12_E_146_pop11_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_65to66_bb6_F_145_push12_E_146_pop11_0_reg_66_fifo.DEPTH = 2;
defparam rnode_65to66_bb6_F_145_push12_E_146_pop11_0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_65to66_bb6_F_145_push12_E_146_pop11_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_65to66_bb6_F_145_push12_E_146_pop11_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_65to66_bb6_F_145_push12_E_146_pop11_0_reg_66_inputs_ready_NO_SHIFT_REG = local_bb6_F_145_push12_E_146_pop11_valid_out_NO_SHIFT_REG;
assign local_bb6_F_145_push12_E_146_pop11_stall_in = rnode_65to66_bb6_F_145_push12_E_146_pop11_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_F_145_push12_E_146_pop11_0_NO_SHIFT_REG = rnode_65to66_bb6_F_145_push12_E_146_pop11_0_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_F_145_push12_E_146_pop11_0_stall_in_reg_66_NO_SHIFT_REG = rnode_65to66_bb6_F_145_push12_E_146_pop11_0_stall_in_NO_SHIFT_REG;
assign rnode_65to66_bb6_F_145_push12_E_146_pop11_0_valid_out_NO_SHIFT_REG = rnode_65to66_bb6_F_145_push12_E_146_pop11_0_valid_out_reg_66_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_65to66_bb6_G_144_push13_F_145_pop12_0_valid_out_NO_SHIFT_REG;
 logic rnode_65to66_bb6_G_144_push13_F_145_pop12_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_G_144_push13_F_145_pop12_0_NO_SHIFT_REG;
 logic rnode_65to66_bb6_G_144_push13_F_145_pop12_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_G_144_push13_F_145_pop12_0_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_G_144_push13_F_145_pop12_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_G_144_push13_F_145_pop12_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_G_144_push13_F_145_pop12_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_65to66_bb6_G_144_push13_F_145_pop12_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_65to66_bb6_G_144_push13_F_145_pop12_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_65to66_bb6_G_144_push13_F_145_pop12_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_65to66_bb6_G_144_push13_F_145_pop12_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_65to66_bb6_G_144_push13_F_145_pop12_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(local_bb6_G_144_push13_F_145_pop12_NO_SHIFT_REG),
	.data_out(rnode_65to66_bb6_G_144_push13_F_145_pop12_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_65to66_bb6_G_144_push13_F_145_pop12_0_reg_66_fifo.DEPTH = 2;
defparam rnode_65to66_bb6_G_144_push13_F_145_pop12_0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_65to66_bb6_G_144_push13_F_145_pop12_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_65to66_bb6_G_144_push13_F_145_pop12_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_65to66_bb6_G_144_push13_F_145_pop12_0_reg_66_inputs_ready_NO_SHIFT_REG = local_bb6_G_144_push13_F_145_pop12_valid_out_NO_SHIFT_REG;
assign local_bb6_G_144_push13_F_145_pop12_stall_in = rnode_65to66_bb6_G_144_push13_F_145_pop12_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_G_144_push13_F_145_pop12_0_NO_SHIFT_REG = rnode_65to66_bb6_G_144_push13_F_145_pop12_0_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_G_144_push13_F_145_pop12_0_stall_in_reg_66_NO_SHIFT_REG = rnode_65to66_bb6_G_144_push13_F_145_pop12_0_stall_in_NO_SHIFT_REG;
assign rnode_65to66_bb6_G_144_push13_F_145_pop12_0_valid_out_NO_SHIFT_REG = rnode_65to66_bb6_G_144_push13_F_145_pop12_0_valid_out_reg_66_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_65to66_bb6_H_143_push14_G_144_pop13_0_valid_out_NO_SHIFT_REG;
 logic rnode_65to66_bb6_H_143_push14_G_144_pop13_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_H_143_push14_G_144_pop13_0_NO_SHIFT_REG;
 logic rnode_65to66_bb6_H_143_push14_G_144_pop13_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_H_143_push14_G_144_pop13_0_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_H_143_push14_G_144_pop13_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_H_143_push14_G_144_pop13_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_H_143_push14_G_144_pop13_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_65to66_bb6_H_143_push14_G_144_pop13_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_65to66_bb6_H_143_push14_G_144_pop13_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_65to66_bb6_H_143_push14_G_144_pop13_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_65to66_bb6_H_143_push14_G_144_pop13_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_65to66_bb6_H_143_push14_G_144_pop13_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(local_bb6_H_143_push14_G_144_pop13_NO_SHIFT_REG),
	.data_out(rnode_65to66_bb6_H_143_push14_G_144_pop13_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_65to66_bb6_H_143_push14_G_144_pop13_0_reg_66_fifo.DEPTH = 2;
defparam rnode_65to66_bb6_H_143_push14_G_144_pop13_0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_65to66_bb6_H_143_push14_G_144_pop13_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_65to66_bb6_H_143_push14_G_144_pop13_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_65to66_bb6_H_143_push14_G_144_pop13_0_reg_66_inputs_ready_NO_SHIFT_REG = local_bb6_H_143_push14_G_144_pop13_valid_out_NO_SHIFT_REG;
assign local_bb6_H_143_push14_G_144_pop13_stall_in = rnode_65to66_bb6_H_143_push14_G_144_pop13_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_H_143_push14_G_144_pop13_0_NO_SHIFT_REG = rnode_65to66_bb6_H_143_push14_G_144_pop13_0_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_H_143_push14_G_144_pop13_0_stall_in_reg_66_NO_SHIFT_REG = rnode_65to66_bb6_H_143_push14_G_144_pop13_0_stall_in_NO_SHIFT_REG;
assign rnode_65to66_bb6_H_143_push14_G_144_pop13_0_valid_out_NO_SHIFT_REG = rnode_65to66_bb6_H_143_push14_G_144_pop13_0_valid_out_reg_66_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_xor_i30_stall_local;
wire [31:0] local_bb6_xor_i30;

assign local_bb6_xor_i30 = (local_bb6_or_i3_i29 ^ local_bb6_shr_i31);

// This section implements an unregistered operation.
// 
wire local_bb6_xor_i_stall_local;
wire [31:0] local_bb6_xor_i;

assign local_bb6_xor_i = (local_bb6_or_i3_i ^ local_bb6_shr_i);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_64to65_bb6_reduction_4_0_valid_out_NO_SHIFT_REG;
 logic rnode_64to65_bb6_reduction_4_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_64to65_bb6_reduction_4_0_NO_SHIFT_REG;
 logic rnode_64to65_bb6_reduction_4_0_reg_65_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_64to65_bb6_reduction_4_0_reg_65_NO_SHIFT_REG;
 logic rnode_64to65_bb6_reduction_4_0_valid_out_reg_65_NO_SHIFT_REG;
 logic rnode_64to65_bb6_reduction_4_0_stall_in_reg_65_NO_SHIFT_REG;
 logic rnode_64to65_bb6_reduction_4_0_stall_out_reg_65_NO_SHIFT_REG;

acl_data_fifo rnode_64to65_bb6_reduction_4_0_reg_65_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_64to65_bb6_reduction_4_0_reg_65_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_64to65_bb6_reduction_4_0_stall_in_reg_65_NO_SHIFT_REG),
	.valid_out(rnode_64to65_bb6_reduction_4_0_valid_out_reg_65_NO_SHIFT_REG),
	.stall_out(rnode_64to65_bb6_reduction_4_0_stall_out_reg_65_NO_SHIFT_REG),
	.data_in(local_bb6_reduction_4),
	.data_out(rnode_64to65_bb6_reduction_4_0_reg_65_NO_SHIFT_REG)
);

defparam rnode_64to65_bb6_reduction_4_0_reg_65_fifo.DEPTH = 2;
defparam rnode_64to65_bb6_reduction_4_0_reg_65_fifo.DATA_WIDTH = 32;
defparam rnode_64to65_bb6_reduction_4_0_reg_65_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_64to65_bb6_reduction_4_0_reg_65_fifo.IMPL = "ll_reg";

assign rnode_64to65_bb6_reduction_4_0_reg_65_inputs_ready_NO_SHIFT_REG = local_bb6_reduction_4_valid_out;
assign local_bb6_reduction_4_stall_in = rnode_64to65_bb6_reduction_4_0_stall_out_reg_65_NO_SHIFT_REG;
assign rnode_64to65_bb6_reduction_4_0_NO_SHIFT_REG = rnode_64to65_bb6_reduction_4_0_reg_65_NO_SHIFT_REG;
assign rnode_64to65_bb6_reduction_4_0_stall_in_reg_65_NO_SHIFT_REG = rnode_64to65_bb6_reduction_4_0_stall_in_NO_SHIFT_REG;
assign rnode_64to65_bb6_reduction_4_0_valid_out_NO_SHIFT_REG = rnode_64to65_bb6_reduction_4_0_valid_out_reg_65_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_xor2_i32_stall_local;
wire [31:0] local_bb6_xor2_i32;

assign local_bb6_xor2_i32 = (local_bb6_xor_i30 ^ local_bb6_or_i_i26);

// This section implements an unregistered operation.
// 
wire local_bb6_xor2_i_stall_local;
wire [31:0] local_bb6_xor2_i;

assign local_bb6_xor2_i = (local_bb6_xor_i ^ local_bb6_or_i_i);

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_7_stall_local;
wire [31:0] local_bb6_reduction_7;

assign local_bb6_reduction_7 = (local_bb6_xor2_i + local_bb6_xor2_i32);

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_9_valid_out;
wire local_bb6_reduction_9_stall_in;
wire local_bb6_reduction_9_inputs_ready;
wire local_bb6_reduction_9_stall_local;
wire [31:0] local_bb6_reduction_9;

assign local_bb6_reduction_9_inputs_ready = (rstag_34to34_bb6_ld__u43_valid_out_0 & rstag_34to34_bb6_ld__u43_valid_out_1 & rstag_34to34_bb6_ld__u43_valid_out_2 & rstag_34to34_bb6_ld__u43_valid_out_3 & rstag_34to34_bb6_ld__u43_valid_out_4 & rstag_34to34_bb6_ld__u41_valid_out_0 & rstag_34to34_bb6_ld__u41_valid_out_1 & rstag_34to34_bb6_ld__u41_valid_out_2 & rstag_34to34_bb6_ld__u41_valid_out_3 & rstag_34to34_bb6_ld__u41_valid_out_4 & rstag_34to34_bb6_ld__valid_out & rstag_34to34_bb6_ld__u42_valid_out);
assign local_bb6_reduction_9 = (local_bb6_reduction_7 + local_bb6_reduction_8);
assign local_bb6_reduction_9_valid_out = local_bb6_reduction_9_inputs_ready;
assign local_bb6_reduction_9_stall_local = local_bb6_reduction_9_stall_in;
assign rstag_34to34_bb6_ld__u43_stall_in_0 = (local_bb6_reduction_9_stall_local | ~(local_bb6_reduction_9_inputs_ready));
assign rstag_34to34_bb6_ld__u43_stall_in_1 = (local_bb6_reduction_9_stall_local | ~(local_bb6_reduction_9_inputs_ready));
assign rstag_34to34_bb6_ld__u43_stall_in_2 = (local_bb6_reduction_9_stall_local | ~(local_bb6_reduction_9_inputs_ready));
assign rstag_34to34_bb6_ld__u43_stall_in_3 = (local_bb6_reduction_9_stall_local | ~(local_bb6_reduction_9_inputs_ready));
assign rstag_34to34_bb6_ld__u43_stall_in_4 = (local_bb6_reduction_9_stall_local | ~(local_bb6_reduction_9_inputs_ready));
assign rstag_34to34_bb6_ld__u41_stall_in_0 = (local_bb6_reduction_9_stall_local | ~(local_bb6_reduction_9_inputs_ready));
assign rstag_34to34_bb6_ld__u41_stall_in_1 = (local_bb6_reduction_9_stall_local | ~(local_bb6_reduction_9_inputs_ready));
assign rstag_34to34_bb6_ld__u41_stall_in_2 = (local_bb6_reduction_9_stall_local | ~(local_bb6_reduction_9_inputs_ready));
assign rstag_34to34_bb6_ld__u41_stall_in_3 = (local_bb6_reduction_9_stall_local | ~(local_bb6_reduction_9_inputs_ready));
assign rstag_34to34_bb6_ld__u41_stall_in_4 = (local_bb6_reduction_9_stall_local | ~(local_bb6_reduction_9_inputs_ready));
assign rstag_34to34_bb6_ld__stall_in = (local_bb6_reduction_9_stall_local | ~(local_bb6_reduction_9_inputs_ready));
assign rstag_34to34_bb6_ld__u42_stall_in = (local_bb6_reduction_9_stall_local | ~(local_bb6_reduction_9_inputs_ready));

// This section implements a staging register.
// 
wire rstag_34to34_bb6_reduction_9_valid_out_0;
wire rstag_34to34_bb6_reduction_9_stall_in_0;
 reg rstag_34to34_bb6_reduction_9_consumed_0_NO_SHIFT_REG;
wire rstag_34to34_bb6_reduction_9_valid_out_1;
wire rstag_34to34_bb6_reduction_9_stall_in_1;
 reg rstag_34to34_bb6_reduction_9_consumed_1_NO_SHIFT_REG;
wire rstag_34to34_bb6_reduction_9_inputs_ready;
wire rstag_34to34_bb6_reduction_9_stall_local;
 reg rstag_34to34_bb6_reduction_9_staging_valid_NO_SHIFT_REG;
wire rstag_34to34_bb6_reduction_9_combined_valid;
 reg [31:0] rstag_34to34_bb6_reduction_9_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_34to34_bb6_reduction_9;

assign rstag_34to34_bb6_reduction_9_inputs_ready = local_bb6_reduction_9_valid_out;
assign rstag_34to34_bb6_reduction_9 = (rstag_34to34_bb6_reduction_9_staging_valid_NO_SHIFT_REG ? rstag_34to34_bb6_reduction_9_staging_reg_NO_SHIFT_REG : local_bb6_reduction_9);
assign rstag_34to34_bb6_reduction_9_combined_valid = (rstag_34to34_bb6_reduction_9_staging_valid_NO_SHIFT_REG | rstag_34to34_bb6_reduction_9_inputs_ready);
assign rstag_34to34_bb6_reduction_9_stall_local = ((rstag_34to34_bb6_reduction_9_stall_in_0 & ~(rstag_34to34_bb6_reduction_9_consumed_0_NO_SHIFT_REG)) | (rstag_34to34_bb6_reduction_9_stall_in_1 & ~(rstag_34to34_bb6_reduction_9_consumed_1_NO_SHIFT_REG)));
assign rstag_34to34_bb6_reduction_9_valid_out_0 = (rstag_34to34_bb6_reduction_9_combined_valid & ~(rstag_34to34_bb6_reduction_9_consumed_0_NO_SHIFT_REG));
assign rstag_34to34_bb6_reduction_9_valid_out_1 = (rstag_34to34_bb6_reduction_9_combined_valid & ~(rstag_34to34_bb6_reduction_9_consumed_1_NO_SHIFT_REG));
assign local_bb6_reduction_9_stall_in = (|rstag_34to34_bb6_reduction_9_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_34to34_bb6_reduction_9_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_reduction_9_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_34to34_bb6_reduction_9_stall_local)
		begin
			if (~(rstag_34to34_bb6_reduction_9_staging_valid_NO_SHIFT_REG))
			begin
				rstag_34to34_bb6_reduction_9_staging_valid_NO_SHIFT_REG <= rstag_34to34_bb6_reduction_9_inputs_ready;
			end
		end
		else
		begin
			rstag_34to34_bb6_reduction_9_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_34to34_bb6_reduction_9_staging_valid_NO_SHIFT_REG))
		begin
			rstag_34to34_bb6_reduction_9_staging_reg_NO_SHIFT_REG <= local_bb6_reduction_9;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_34to34_bb6_reduction_9_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_34to34_bb6_reduction_9_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_34to34_bb6_reduction_9_consumed_0_NO_SHIFT_REG <= (rstag_34to34_bb6_reduction_9_combined_valid & (rstag_34to34_bb6_reduction_9_consumed_0_NO_SHIFT_REG | ~(rstag_34to34_bb6_reduction_9_stall_in_0)) & rstag_34to34_bb6_reduction_9_stall_local);
		rstag_34to34_bb6_reduction_9_consumed_1_NO_SHIFT_REG <= (rstag_34to34_bb6_reduction_9_combined_valid & (rstag_34to34_bb6_reduction_9_consumed_1_NO_SHIFT_REG | ~(rstag_34to34_bb6_reduction_9_stall_in_1)) & rstag_34to34_bb6_reduction_9_stall_local);
	end
end


// Register node:
//  * latency = 29
//  * capacity = 29
 logic rnode_34to63_bb6_reduction_9_0_valid_out_NO_SHIFT_REG;
 logic rnode_34to63_bb6_reduction_9_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_34to63_bb6_reduction_9_0_NO_SHIFT_REG;
 logic rnode_34to63_bb6_reduction_9_0_reg_63_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_34to63_bb6_reduction_9_0_reg_63_NO_SHIFT_REG;
 logic rnode_34to63_bb6_reduction_9_0_valid_out_reg_63_NO_SHIFT_REG;
 logic rnode_34to63_bb6_reduction_9_0_stall_in_reg_63_NO_SHIFT_REG;
 logic rnode_34to63_bb6_reduction_9_0_stall_out_reg_63_NO_SHIFT_REG;

acl_data_fifo rnode_34to63_bb6_reduction_9_0_reg_63_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_34to63_bb6_reduction_9_0_reg_63_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_34to63_bb6_reduction_9_0_stall_in_reg_63_NO_SHIFT_REG),
	.valid_out(rnode_34to63_bb6_reduction_9_0_valid_out_reg_63_NO_SHIFT_REG),
	.stall_out(rnode_34to63_bb6_reduction_9_0_stall_out_reg_63_NO_SHIFT_REG),
	.data_in(rstag_34to34_bb6_reduction_9),
	.data_out(rnode_34to63_bb6_reduction_9_0_reg_63_NO_SHIFT_REG)
);

defparam rnode_34to63_bb6_reduction_9_0_reg_63_fifo.DEPTH = 30;
defparam rnode_34to63_bb6_reduction_9_0_reg_63_fifo.DATA_WIDTH = 32;
defparam rnode_34to63_bb6_reduction_9_0_reg_63_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_34to63_bb6_reduction_9_0_reg_63_fifo.IMPL = "ram";

assign rnode_34to63_bb6_reduction_9_0_reg_63_inputs_ready_NO_SHIFT_REG = rstag_34to34_bb6_reduction_9_valid_out_0;
assign rstag_34to34_bb6_reduction_9_stall_in_0 = rnode_34to63_bb6_reduction_9_0_stall_out_reg_63_NO_SHIFT_REG;
assign rnode_34to63_bb6_reduction_9_0_NO_SHIFT_REG = rnode_34to63_bb6_reduction_9_0_reg_63_NO_SHIFT_REG;
assign rnode_34to63_bb6_reduction_9_0_stall_in_reg_63_NO_SHIFT_REG = rnode_34to63_bb6_reduction_9_0_stall_in_NO_SHIFT_REG;
assign rnode_34to63_bb6_reduction_9_0_valid_out_NO_SHIFT_REG = rnode_34to63_bb6_reduction_9_0_valid_out_reg_63_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb6_st_reduction_9_inputs_ready;
 reg local_bb6_st_reduction_9_valid_out_NO_SHIFT_REG;
wire local_bb6_st_reduction_9_stall_in;
wire local_bb6_st_reduction_9_output_regs_ready;
wire local_bb6_st_reduction_9_fu_stall_out;
wire local_bb6_st_reduction_9_fu_valid_out;
wire [31:0] local_bb6_st_reduction_9_lsu_wackout;
 reg local_bb6_st_reduction_9_NO_SHIFT_REG;
wire local_bb6_st_reduction_9_causedstall;

lsu_top lsu_local_bb6_st_reduction_9 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb6_st_reduction_9_fu_stall_out),
	.i_valid(local_bb6_st_reduction_9_inputs_ready),
	.i_address(rnode_33to34_bb6_arrayidx200_0_NO_SHIFT_REG),
	.i_writedata(rstag_34to34_bb6_reduction_9),
	.i_cmpdata(),
	.i_predicate(rnode_33to34_bb6_cmp180_xor_0_NO_SHIFT_REG),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb6_st_reduction_9_output_regs_ready)),
	.o_valid(local_bb6_st_reduction_9_fu_valid_out),
	.o_readdata(),
	.o_input_fifo_depth(local_bb6_st_reduction_9_input_fifo_depth),
	.o_writeack(local_bb6_st_reduction_9_lsu_wackout),
	.i_atomic_op(3'h0),
	.o_active(local_bb6_st_reduction_9_active),
	.avm_address(avm_local_bb6_st_reduction_9_address),
	.avm_read(avm_local_bb6_st_reduction_9_read),
	.avm_readdata(avm_local_bb6_st_reduction_9_readdata),
	.avm_write(avm_local_bb6_st_reduction_9_write),
	.avm_writeack(avm_local_bb6_st_reduction_9_writeack),
	.avm_burstcount(avm_local_bb6_st_reduction_9_burstcount),
	.avm_writedata(avm_local_bb6_st_reduction_9_writedata),
	.avm_byteenable(avm_local_bb6_st_reduction_9_byteenable),
	.avm_waitrequest(avm_local_bb6_st_reduction_9_waitrequest),
	.avm_readdatavalid(avm_local_bb6_st_reduction_9_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb6_st_reduction_9.AWIDTH = 32;
defparam lsu_local_bb6_st_reduction_9.WIDTH_BYTES = 4;
defparam lsu_local_bb6_st_reduction_9.MWIDTH_BYTES = 64;
defparam lsu_local_bb6_st_reduction_9.WRITEDATAWIDTH_BYTES = 64;
defparam lsu_local_bb6_st_reduction_9.ALIGNMENT_BYTES = 4;
defparam lsu_local_bb6_st_reduction_9.READ = 0;
defparam lsu_local_bb6_st_reduction_9.ATOMIC = 0;
defparam lsu_local_bb6_st_reduction_9.WIDTH = 32;
defparam lsu_local_bb6_st_reduction_9.MWIDTH = 512;
defparam lsu_local_bb6_st_reduction_9.ATOMIC_WIDTH = 3;
defparam lsu_local_bb6_st_reduction_9.BURSTCOUNT_WIDTH = 1;
defparam lsu_local_bb6_st_reduction_9.KERNEL_SIDE_MEM_LATENCY = 31;
defparam lsu_local_bb6_st_reduction_9.MEMORY_SIDE_MEM_LATENCY = 0;
defparam lsu_local_bb6_st_reduction_9.USE_WRITE_ACK = 0;
defparam lsu_local_bb6_st_reduction_9.ENABLE_BANKED_MEMORY = 1;
defparam lsu_local_bb6_st_reduction_9.ABITS_PER_LMEM_BANK = 7;
defparam lsu_local_bb6_st_reduction_9.NUMBER_BANKS = 4;
defparam lsu_local_bb6_st_reduction_9.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb6_st_reduction_9.USEINPUTFIFO = 1;
defparam lsu_local_bb6_st_reduction_9.USECACHING = 0;
defparam lsu_local_bb6_st_reduction_9.USEOUTPUTFIFO = 1;
defparam lsu_local_bb6_st_reduction_9.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb6_st_reduction_9.HIGH_FMAX = 1;
defparam lsu_local_bb6_st_reduction_9.ADDRSPACE = 5;
defparam lsu_local_bb6_st_reduction_9.STYLE = "PIPELINED";
defparam lsu_local_bb6_st_reduction_9.USE_BYTE_EN = 0;

assign local_bb6_st_reduction_9_inputs_ready = (rnode_33to34_bb6_arrayidx200_0_valid_out_NO_SHIFT_REG & rnode_33to34_bb6_cmp180_xor_0_valid_out_NO_SHIFT_REG & rstag_34to34_bb6_reduction_9_valid_out_1);
assign local_bb6_st_reduction_9_output_regs_ready = (&(~(local_bb6_st_reduction_9_valid_out_NO_SHIFT_REG) | ~(local_bb6_st_reduction_9_stall_in)));
assign rnode_33to34_bb6_arrayidx200_0_stall_in_NO_SHIFT_REG = (local_bb6_st_reduction_9_fu_stall_out | ~(local_bb6_st_reduction_9_inputs_ready));
assign rnode_33to34_bb6_cmp180_xor_0_stall_in_NO_SHIFT_REG = (local_bb6_st_reduction_9_fu_stall_out | ~(local_bb6_st_reduction_9_inputs_ready));
assign rstag_34to34_bb6_reduction_9_stall_in_1 = (local_bb6_st_reduction_9_fu_stall_out | ~(local_bb6_st_reduction_9_inputs_ready));
assign local_bb6_st_reduction_9_causedstall = (local_bb6_st_reduction_9_inputs_ready && (local_bb6_st_reduction_9_fu_stall_out && !(~(local_bb6_st_reduction_9_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_st_reduction_9_NO_SHIFT_REG <= 'x;
		local_bb6_st_reduction_9_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_st_reduction_9_output_regs_ready)
		begin
			local_bb6_st_reduction_9_NO_SHIFT_REG <= local_bb6_st_reduction_9_lsu_wackout;
			local_bb6_st_reduction_9_valid_out_NO_SHIFT_REG <= local_bb6_st_reduction_9_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_st_reduction_9_stall_in))
			begin
				local_bb6_st_reduction_9_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_63to64_bb6_reduction_9_0_valid_out_NO_SHIFT_REG;
 logic rnode_63to64_bb6_reduction_9_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_bb6_reduction_9_0_NO_SHIFT_REG;
 logic rnode_63to64_bb6_reduction_9_0_reg_64_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_63to64_bb6_reduction_9_0_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_bb6_reduction_9_0_valid_out_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_bb6_reduction_9_0_stall_in_reg_64_NO_SHIFT_REG;
 logic rnode_63to64_bb6_reduction_9_0_stall_out_reg_64_NO_SHIFT_REG;

acl_data_fifo rnode_63to64_bb6_reduction_9_0_reg_64_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_63to64_bb6_reduction_9_0_reg_64_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_63to64_bb6_reduction_9_0_stall_in_reg_64_NO_SHIFT_REG),
	.valid_out(rnode_63to64_bb6_reduction_9_0_valid_out_reg_64_NO_SHIFT_REG),
	.stall_out(rnode_63to64_bb6_reduction_9_0_stall_out_reg_64_NO_SHIFT_REG),
	.data_in(rnode_34to63_bb6_reduction_9_0_NO_SHIFT_REG),
	.data_out(rnode_63to64_bb6_reduction_9_0_reg_64_NO_SHIFT_REG)
);

defparam rnode_63to64_bb6_reduction_9_0_reg_64_fifo.DEPTH = 2;
defparam rnode_63to64_bb6_reduction_9_0_reg_64_fifo.DATA_WIDTH = 32;
defparam rnode_63to64_bb6_reduction_9_0_reg_64_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_63to64_bb6_reduction_9_0_reg_64_fifo.IMPL = "ll_reg";

assign rnode_63to64_bb6_reduction_9_0_reg_64_inputs_ready_NO_SHIFT_REG = rnode_34to63_bb6_reduction_9_0_valid_out_NO_SHIFT_REG;
assign rnode_34to63_bb6_reduction_9_0_stall_in_NO_SHIFT_REG = rnode_63to64_bb6_reduction_9_0_stall_out_reg_64_NO_SHIFT_REG;
assign rnode_63to64_bb6_reduction_9_0_NO_SHIFT_REG = rnode_63to64_bb6_reduction_9_0_reg_64_NO_SHIFT_REG;
assign rnode_63to64_bb6_reduction_9_0_stall_in_reg_64_NO_SHIFT_REG = rnode_63to64_bb6_reduction_9_0_stall_in_NO_SHIFT_REG;
assign rnode_63to64_bb6_reduction_9_0_valid_out_NO_SHIFT_REG = rnode_63to64_bb6_reduction_9_0_valid_out_reg_64_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_65to65_bb6_st_reduction_9_valid_out_0;
wire rstag_65to65_bb6_st_reduction_9_stall_in_0;
 reg rstag_65to65_bb6_st_reduction_9_consumed_0_NO_SHIFT_REG;
wire rstag_65to65_bb6_st_reduction_9_valid_out_1;
wire rstag_65to65_bb6_st_reduction_9_stall_in_1;
 reg rstag_65to65_bb6_st_reduction_9_consumed_1_NO_SHIFT_REG;
wire rstag_65to65_bb6_st_reduction_9_valid_out_2;
wire rstag_65to65_bb6_st_reduction_9_stall_in_2;
 reg rstag_65to65_bb6_st_reduction_9_consumed_2_NO_SHIFT_REG;
wire rstag_65to65_bb6_st_reduction_9_valid_out_3;
wire rstag_65to65_bb6_st_reduction_9_stall_in_3;
 reg rstag_65to65_bb6_st_reduction_9_consumed_3_NO_SHIFT_REG;
wire rstag_65to65_bb6_st_reduction_9_inputs_ready;
wire rstag_65to65_bb6_st_reduction_9_stall_local;
 reg rstag_65to65_bb6_st_reduction_9_staging_valid_NO_SHIFT_REG;
wire rstag_65to65_bb6_st_reduction_9_combined_valid;
 reg rstag_65to65_bb6_st_reduction_9_staging_reg_NO_SHIFT_REG;
wire rstag_65to65_bb6_st_reduction_9;

assign rstag_65to65_bb6_st_reduction_9_inputs_ready = local_bb6_st_reduction_9_valid_out_NO_SHIFT_REG;
assign rstag_65to65_bb6_st_reduction_9 = (rstag_65to65_bb6_st_reduction_9_staging_valid_NO_SHIFT_REG ? rstag_65to65_bb6_st_reduction_9_staging_reg_NO_SHIFT_REG : local_bb6_st_reduction_9_NO_SHIFT_REG);
assign rstag_65to65_bb6_st_reduction_9_combined_valid = (rstag_65to65_bb6_st_reduction_9_staging_valid_NO_SHIFT_REG | rstag_65to65_bb6_st_reduction_9_inputs_ready);
assign rstag_65to65_bb6_st_reduction_9_stall_local = ((rstag_65to65_bb6_st_reduction_9_stall_in_0 & ~(rstag_65to65_bb6_st_reduction_9_consumed_0_NO_SHIFT_REG)) | (rstag_65to65_bb6_st_reduction_9_stall_in_1 & ~(rstag_65to65_bb6_st_reduction_9_consumed_1_NO_SHIFT_REG)) | (rstag_65to65_bb6_st_reduction_9_stall_in_2 & ~(rstag_65to65_bb6_st_reduction_9_consumed_2_NO_SHIFT_REG)) | (rstag_65to65_bb6_st_reduction_9_stall_in_3 & ~(rstag_65to65_bb6_st_reduction_9_consumed_3_NO_SHIFT_REG)));
assign rstag_65to65_bb6_st_reduction_9_valid_out_0 = (rstag_65to65_bb6_st_reduction_9_combined_valid & ~(rstag_65to65_bb6_st_reduction_9_consumed_0_NO_SHIFT_REG));
assign rstag_65to65_bb6_st_reduction_9_valid_out_1 = (rstag_65to65_bb6_st_reduction_9_combined_valid & ~(rstag_65to65_bb6_st_reduction_9_consumed_1_NO_SHIFT_REG));
assign rstag_65to65_bb6_st_reduction_9_valid_out_2 = (rstag_65to65_bb6_st_reduction_9_combined_valid & ~(rstag_65to65_bb6_st_reduction_9_consumed_2_NO_SHIFT_REG));
assign rstag_65to65_bb6_st_reduction_9_valid_out_3 = (rstag_65to65_bb6_st_reduction_9_combined_valid & ~(rstag_65to65_bb6_st_reduction_9_consumed_3_NO_SHIFT_REG));
assign local_bb6_st_reduction_9_stall_in = (|rstag_65to65_bb6_st_reduction_9_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_65to65_bb6_st_reduction_9_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_st_reduction_9_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_65to65_bb6_st_reduction_9_stall_local)
		begin
			if (~(rstag_65to65_bb6_st_reduction_9_staging_valid_NO_SHIFT_REG))
			begin
				rstag_65to65_bb6_st_reduction_9_staging_valid_NO_SHIFT_REG <= rstag_65to65_bb6_st_reduction_9_inputs_ready;
			end
		end
		else
		begin
			rstag_65to65_bb6_st_reduction_9_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_65to65_bb6_st_reduction_9_staging_valid_NO_SHIFT_REG))
		begin
			rstag_65to65_bb6_st_reduction_9_staging_reg_NO_SHIFT_REG <= local_bb6_st_reduction_9_NO_SHIFT_REG;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_65to65_bb6_st_reduction_9_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_st_reduction_9_consumed_1_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_st_reduction_9_consumed_2_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_st_reduction_9_consumed_3_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_65to65_bb6_st_reduction_9_consumed_0_NO_SHIFT_REG <= (rstag_65to65_bb6_st_reduction_9_combined_valid & (rstag_65to65_bb6_st_reduction_9_consumed_0_NO_SHIFT_REG | ~(rstag_65to65_bb6_st_reduction_9_stall_in_0)) & rstag_65to65_bb6_st_reduction_9_stall_local);
		rstag_65to65_bb6_st_reduction_9_consumed_1_NO_SHIFT_REG <= (rstag_65to65_bb6_st_reduction_9_combined_valid & (rstag_65to65_bb6_st_reduction_9_consumed_1_NO_SHIFT_REG | ~(rstag_65to65_bb6_st_reduction_9_stall_in_1)) & rstag_65to65_bb6_st_reduction_9_stall_local);
		rstag_65to65_bb6_st_reduction_9_consumed_2_NO_SHIFT_REG <= (rstag_65to65_bb6_st_reduction_9_combined_valid & (rstag_65to65_bb6_st_reduction_9_consumed_2_NO_SHIFT_REG | ~(rstag_65to65_bb6_st_reduction_9_stall_in_2)) & rstag_65to65_bb6_st_reduction_9_stall_local);
		rstag_65to65_bb6_st_reduction_9_consumed_3_NO_SHIFT_REG <= (rstag_65to65_bb6_st_reduction_9_combined_valid & (rstag_65to65_bb6_st_reduction_9_consumed_3_NO_SHIFT_REG | ~(rstag_65to65_bb6_st_reduction_9_stall_in_3)) & rstag_65to65_bb6_st_reduction_9_stall_local);
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6__96_stall_local;
wire [31:0] local_bb6__96;

assign local_bb6__96 = (rnode_63to64_bb6_cmp180_0_NO_SHIFT_REG ? rnode_63to64_bb6_reduction_9_0_NO_SHIFT_REG : rstag_64to64_bb6_ld__pre65);

// This section implements a registered operation.
// 
wire local_bb6_memdep_phi_push15_memdep_4_inputs_ready;
 reg local_bb6_memdep_phi_push15_memdep_4_valid_out_NO_SHIFT_REG;
wire local_bb6_memdep_phi_push15_memdep_4_stall_in;
wire local_bb6_memdep_phi_push15_memdep_4_output_regs_ready;
wire local_bb6_memdep_phi_push15_memdep_4_result;
wire local_bb6_memdep_phi_push15_memdep_4_fu_valid_out;
wire local_bb6_memdep_phi_push15_memdep_4_fu_stall_out;
 reg local_bb6_memdep_phi_push15_memdep_4_NO_SHIFT_REG;
wire local_bb6_memdep_phi_push15_memdep_4_causedstall;

acl_push local_bb6_memdep_phi_push15_memdep_4_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_64to65_bb6_notexitcond15_notexit16_6_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rstag_65to65_bb6_st_reduction_9),
	.stall_out(local_bb6_memdep_phi_push15_memdep_4_fu_stall_out),
	.valid_in(local_bb6_memdep_phi_push15_memdep_4_inputs_ready),
	.valid_out(local_bb6_memdep_phi_push15_memdep_4_fu_valid_out),
	.stall_in(~(local_bb6_memdep_phi_push15_memdep_4_output_regs_ready)),
	.data_out(local_bb6_memdep_phi_push15_memdep_4_result),
	.feedback_out(feedback_data_out_15),
	.feedback_valid_out(feedback_valid_out_15),
	.feedback_stall_in(feedback_stall_in_15)
);

defparam local_bb6_memdep_phi_push15_memdep_4_feedback.STALLFREE = 0;
defparam local_bb6_memdep_phi_push15_memdep_4_feedback.DATA_WIDTH = 1;
defparam local_bb6_memdep_phi_push15_memdep_4_feedback.FIFO_DEPTH = 64;
defparam local_bb6_memdep_phi_push15_memdep_4_feedback.MIN_FIFO_LATENCY = 0;
defparam local_bb6_memdep_phi_push15_memdep_4_feedback.STYLE = "REGULAR";

assign local_bb6_memdep_phi_push15_memdep_4_inputs_ready = (rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_6_NO_SHIFT_REG & rstag_65to65_bb6_st_reduction_9_valid_out_0);
assign local_bb6_memdep_phi_push15_memdep_4_output_regs_ready = (&(~(local_bb6_memdep_phi_push15_memdep_4_valid_out_NO_SHIFT_REG) | ~(local_bb6_memdep_phi_push15_memdep_4_stall_in)));
assign rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_6_NO_SHIFT_REG = (local_bb6_memdep_phi_push15_memdep_4_fu_stall_out | ~(local_bb6_memdep_phi_push15_memdep_4_inputs_ready));
assign rstag_65to65_bb6_st_reduction_9_stall_in_0 = (local_bb6_memdep_phi_push15_memdep_4_fu_stall_out | ~(local_bb6_memdep_phi_push15_memdep_4_inputs_ready));
assign local_bb6_memdep_phi_push15_memdep_4_causedstall = (local_bb6_memdep_phi_push15_memdep_4_inputs_ready && (local_bb6_memdep_phi_push15_memdep_4_fu_stall_out && !(~(local_bb6_memdep_phi_push15_memdep_4_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_memdep_phi_push15_memdep_4_NO_SHIFT_REG <= 'x;
		local_bb6_memdep_phi_push15_memdep_4_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_memdep_phi_push15_memdep_4_output_regs_ready)
		begin
			local_bb6_memdep_phi_push15_memdep_4_NO_SHIFT_REG <= local_bb6_memdep_phi_push15_memdep_4_result;
			local_bb6_memdep_phi_push15_memdep_4_valid_out_NO_SHIFT_REG <= local_bb6_memdep_phi_push15_memdep_4_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_memdep_phi_push15_memdep_4_stall_in))
			begin
				local_bb6_memdep_phi_push15_memdep_4_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_memdep_phi5_push16_memdep_4_inputs_ready;
 reg local_bb6_memdep_phi5_push16_memdep_4_valid_out_NO_SHIFT_REG;
wire local_bb6_memdep_phi5_push16_memdep_4_stall_in;
wire local_bb6_memdep_phi5_push16_memdep_4_output_regs_ready;
wire local_bb6_memdep_phi5_push16_memdep_4_result;
wire local_bb6_memdep_phi5_push16_memdep_4_fu_valid_out;
wire local_bb6_memdep_phi5_push16_memdep_4_fu_stall_out;
 reg local_bb6_memdep_phi5_push16_memdep_4_NO_SHIFT_REG;
wire local_bb6_memdep_phi5_push16_memdep_4_causedstall;

acl_push local_bb6_memdep_phi5_push16_memdep_4_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_64to65_bb6_notexitcond15_notexit16_5_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rstag_65to65_bb6_st_reduction_9),
	.stall_out(local_bb6_memdep_phi5_push16_memdep_4_fu_stall_out),
	.valid_in(local_bb6_memdep_phi5_push16_memdep_4_inputs_ready),
	.valid_out(local_bb6_memdep_phi5_push16_memdep_4_fu_valid_out),
	.stall_in(~(local_bb6_memdep_phi5_push16_memdep_4_output_regs_ready)),
	.data_out(local_bb6_memdep_phi5_push16_memdep_4_result),
	.feedback_out(feedback_data_out_16),
	.feedback_valid_out(feedback_valid_out_16),
	.feedback_stall_in(feedback_stall_in_16)
);

defparam local_bb6_memdep_phi5_push16_memdep_4_feedback.STALLFREE = 0;
defparam local_bb6_memdep_phi5_push16_memdep_4_feedback.DATA_WIDTH = 1;
defparam local_bb6_memdep_phi5_push16_memdep_4_feedback.FIFO_DEPTH = 64;
defparam local_bb6_memdep_phi5_push16_memdep_4_feedback.MIN_FIFO_LATENCY = 0;
defparam local_bb6_memdep_phi5_push16_memdep_4_feedback.STYLE = "REGULAR";

assign local_bb6_memdep_phi5_push16_memdep_4_inputs_ready = (rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_5_NO_SHIFT_REG & rstag_65to65_bb6_st_reduction_9_valid_out_1);
assign local_bb6_memdep_phi5_push16_memdep_4_output_regs_ready = (&(~(local_bb6_memdep_phi5_push16_memdep_4_valid_out_NO_SHIFT_REG) | ~(local_bb6_memdep_phi5_push16_memdep_4_stall_in)));
assign rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_5_NO_SHIFT_REG = (local_bb6_memdep_phi5_push16_memdep_4_fu_stall_out | ~(local_bb6_memdep_phi5_push16_memdep_4_inputs_ready));
assign rstag_65to65_bb6_st_reduction_9_stall_in_1 = (local_bb6_memdep_phi5_push16_memdep_4_fu_stall_out | ~(local_bb6_memdep_phi5_push16_memdep_4_inputs_ready));
assign local_bb6_memdep_phi5_push16_memdep_4_causedstall = (local_bb6_memdep_phi5_push16_memdep_4_inputs_ready && (local_bb6_memdep_phi5_push16_memdep_4_fu_stall_out && !(~(local_bb6_memdep_phi5_push16_memdep_4_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_memdep_phi5_push16_memdep_4_NO_SHIFT_REG <= 'x;
		local_bb6_memdep_phi5_push16_memdep_4_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_memdep_phi5_push16_memdep_4_output_regs_ready)
		begin
			local_bb6_memdep_phi5_push16_memdep_4_NO_SHIFT_REG <= local_bb6_memdep_phi5_push16_memdep_4_result;
			local_bb6_memdep_phi5_push16_memdep_4_valid_out_NO_SHIFT_REG <= local_bb6_memdep_phi5_push16_memdep_4_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_memdep_phi5_push16_memdep_4_stall_in))
			begin
				local_bb6_memdep_phi5_push16_memdep_4_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_memdep_phi6_push17_memdep_4_inputs_ready;
 reg local_bb6_memdep_phi6_push17_memdep_4_valid_out_NO_SHIFT_REG;
wire local_bb6_memdep_phi6_push17_memdep_4_stall_in;
wire local_bb6_memdep_phi6_push17_memdep_4_output_regs_ready;
wire local_bb6_memdep_phi6_push17_memdep_4_result;
wire local_bb6_memdep_phi6_push17_memdep_4_fu_valid_out;
wire local_bb6_memdep_phi6_push17_memdep_4_fu_stall_out;
 reg local_bb6_memdep_phi6_push17_memdep_4_NO_SHIFT_REG;
wire local_bb6_memdep_phi6_push17_memdep_4_causedstall;

acl_push local_bb6_memdep_phi6_push17_memdep_4_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_64to65_bb6_notexitcond15_notexit16_4_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rstag_65to65_bb6_st_reduction_9),
	.stall_out(local_bb6_memdep_phi6_push17_memdep_4_fu_stall_out),
	.valid_in(local_bb6_memdep_phi6_push17_memdep_4_inputs_ready),
	.valid_out(local_bb6_memdep_phi6_push17_memdep_4_fu_valid_out),
	.stall_in(~(local_bb6_memdep_phi6_push17_memdep_4_output_regs_ready)),
	.data_out(local_bb6_memdep_phi6_push17_memdep_4_result),
	.feedback_out(feedback_data_out_17),
	.feedback_valid_out(feedback_valid_out_17),
	.feedback_stall_in(feedback_stall_in_17)
);

defparam local_bb6_memdep_phi6_push17_memdep_4_feedback.STALLFREE = 0;
defparam local_bb6_memdep_phi6_push17_memdep_4_feedback.DATA_WIDTH = 1;
defparam local_bb6_memdep_phi6_push17_memdep_4_feedback.FIFO_DEPTH = 64;
defparam local_bb6_memdep_phi6_push17_memdep_4_feedback.MIN_FIFO_LATENCY = 0;
defparam local_bb6_memdep_phi6_push17_memdep_4_feedback.STYLE = "REGULAR";

assign local_bb6_memdep_phi6_push17_memdep_4_inputs_ready = (rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_4_NO_SHIFT_REG & rstag_65to65_bb6_st_reduction_9_valid_out_2);
assign local_bb6_memdep_phi6_push17_memdep_4_output_regs_ready = (&(~(local_bb6_memdep_phi6_push17_memdep_4_valid_out_NO_SHIFT_REG) | ~(local_bb6_memdep_phi6_push17_memdep_4_stall_in)));
assign rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_4_NO_SHIFT_REG = (local_bb6_memdep_phi6_push17_memdep_4_fu_stall_out | ~(local_bb6_memdep_phi6_push17_memdep_4_inputs_ready));
assign rstag_65to65_bb6_st_reduction_9_stall_in_2 = (local_bb6_memdep_phi6_push17_memdep_4_fu_stall_out | ~(local_bb6_memdep_phi6_push17_memdep_4_inputs_ready));
assign local_bb6_memdep_phi6_push17_memdep_4_causedstall = (local_bb6_memdep_phi6_push17_memdep_4_inputs_ready && (local_bb6_memdep_phi6_push17_memdep_4_fu_stall_out && !(~(local_bb6_memdep_phi6_push17_memdep_4_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_memdep_phi6_push17_memdep_4_NO_SHIFT_REG <= 'x;
		local_bb6_memdep_phi6_push17_memdep_4_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_memdep_phi6_push17_memdep_4_output_regs_ready)
		begin
			local_bb6_memdep_phi6_push17_memdep_4_NO_SHIFT_REG <= local_bb6_memdep_phi6_push17_memdep_4_result;
			local_bb6_memdep_phi6_push17_memdep_4_valid_out_NO_SHIFT_REG <= local_bb6_memdep_phi6_push17_memdep_4_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_memdep_phi6_push17_memdep_4_stall_in))
			begin
				local_bb6_memdep_phi6_push17_memdep_4_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb6_memdep_phi7_push18_memdep_4_inputs_ready;
 reg local_bb6_memdep_phi7_push18_memdep_4_valid_out_NO_SHIFT_REG;
wire local_bb6_memdep_phi7_push18_memdep_4_stall_in;
wire local_bb6_memdep_phi7_push18_memdep_4_output_regs_ready;
wire local_bb6_memdep_phi7_push18_memdep_4_result;
wire local_bb6_memdep_phi7_push18_memdep_4_fu_valid_out;
wire local_bb6_memdep_phi7_push18_memdep_4_fu_stall_out;
 reg local_bb6_memdep_phi7_push18_memdep_4_NO_SHIFT_REG;
wire local_bb6_memdep_phi7_push18_memdep_4_causedstall;

acl_push local_bb6_memdep_phi7_push18_memdep_4_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_64to65_bb6_notexitcond15_notexit16_3_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rstag_65to65_bb6_st_reduction_9),
	.stall_out(local_bb6_memdep_phi7_push18_memdep_4_fu_stall_out),
	.valid_in(local_bb6_memdep_phi7_push18_memdep_4_inputs_ready),
	.valid_out(local_bb6_memdep_phi7_push18_memdep_4_fu_valid_out),
	.stall_in(~(local_bb6_memdep_phi7_push18_memdep_4_output_regs_ready)),
	.data_out(local_bb6_memdep_phi7_push18_memdep_4_result),
	.feedback_out(feedback_data_out_18),
	.feedback_valid_out(feedback_valid_out_18),
	.feedback_stall_in(feedback_stall_in_18)
);

defparam local_bb6_memdep_phi7_push18_memdep_4_feedback.STALLFREE = 0;
defparam local_bb6_memdep_phi7_push18_memdep_4_feedback.DATA_WIDTH = 1;
defparam local_bb6_memdep_phi7_push18_memdep_4_feedback.FIFO_DEPTH = 64;
defparam local_bb6_memdep_phi7_push18_memdep_4_feedback.MIN_FIFO_LATENCY = 0;
defparam local_bb6_memdep_phi7_push18_memdep_4_feedback.STYLE = "REGULAR";

assign local_bb6_memdep_phi7_push18_memdep_4_inputs_ready = (rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_3_NO_SHIFT_REG & rstag_65to65_bb6_st_reduction_9_valid_out_3);
assign local_bb6_memdep_phi7_push18_memdep_4_output_regs_ready = (&(~(local_bb6_memdep_phi7_push18_memdep_4_valid_out_NO_SHIFT_REG) | ~(local_bb6_memdep_phi7_push18_memdep_4_stall_in)));
assign rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_3_NO_SHIFT_REG = (local_bb6_memdep_phi7_push18_memdep_4_fu_stall_out | ~(local_bb6_memdep_phi7_push18_memdep_4_inputs_ready));
assign rstag_65to65_bb6_st_reduction_9_stall_in_3 = (local_bb6_memdep_phi7_push18_memdep_4_fu_stall_out | ~(local_bb6_memdep_phi7_push18_memdep_4_inputs_ready));
assign local_bb6_memdep_phi7_push18_memdep_4_causedstall = (local_bb6_memdep_phi7_push18_memdep_4_inputs_ready && (local_bb6_memdep_phi7_push18_memdep_4_fu_stall_out && !(~(local_bb6_memdep_phi7_push18_memdep_4_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_memdep_phi7_push18_memdep_4_NO_SHIFT_REG <= 'x;
		local_bb6_memdep_phi7_push18_memdep_4_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_memdep_phi7_push18_memdep_4_output_regs_ready)
		begin
			local_bb6_memdep_phi7_push18_memdep_4_NO_SHIFT_REG <= local_bb6_memdep_phi7_push18_memdep_4_result;
			local_bb6_memdep_phi7_push18_memdep_4_valid_out_NO_SHIFT_REG <= local_bb6_memdep_phi7_push18_memdep_4_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_memdep_phi7_push18_memdep_4_stall_in))
			begin
				local_bb6_memdep_phi7_push18_memdep_4_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements an unregistered operation.
// 
wire local_bb6_reduction_5_valid_out;
wire local_bb6_reduction_5_stall_in;
wire local_bb6_reduction_5_inputs_ready;
wire local_bb6_reduction_5_stall_local;
wire [31:0] local_bb6_reduction_5;

assign local_bb6_reduction_5_inputs_ready = (local_bb6_H_143_pop14_acl_pop_i32_1541459225_valid_out_NO_SHIFT_REG & rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_valid_out_1 & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_2 & rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_valid_out_1 & rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_valid_out_1 & rnode_63to64_bb6_reduction_9_0_valid_out_NO_SHIFT_REG & rnode_63to64_bb6_cmp180_0_valid_out_NO_SHIFT_REG & rstag_64to64_bb6_ld__pre65_valid_out);
assign local_bb6_reduction_5 = (local_bb6__96 + local_bb6_reduction_3);
assign local_bb6_reduction_5_valid_out = local_bb6_reduction_5_inputs_ready;
assign local_bb6_reduction_5_stall_local = local_bb6_reduction_5_stall_in;
assign local_bb6_H_143_pop14_acl_pop_i32_1541459225_stall_in = (local_bb6_reduction_5_stall_local | ~(local_bb6_reduction_5_inputs_ready));
assign rstag_64to64_bb6_G_144_pop13_acl_pop_i32_528734635_stall_in_1 = (local_bb6_reduction_5_stall_local | ~(local_bb6_reduction_5_inputs_ready));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_2 = (local_bb6_reduction_5_stall_local | ~(local_bb6_reduction_5_inputs_ready));
assign rstag_64to64_bb6_F_145_pop12_acl_pop_i32__1694144372_stall_in_1 = (local_bb6_reduction_5_stall_local | ~(local_bb6_reduction_5_inputs_ready));
assign rstag_64to64_bb6_E_146_pop11_acl_pop_i32_1359893119_stall_in_1 = (local_bb6_reduction_5_stall_local | ~(local_bb6_reduction_5_inputs_ready));
assign rnode_63to64_bb6_reduction_9_0_stall_in_NO_SHIFT_REG = (local_bb6_reduction_5_stall_local | ~(local_bb6_reduction_5_inputs_ready));
assign rnode_63to64_bb6_cmp180_0_stall_in_NO_SHIFT_REG = (local_bb6_reduction_5_stall_local | ~(local_bb6_reduction_5_inputs_ready));
assign rstag_64to64_bb6_ld__pre65_stall_in = (local_bb6_reduction_5_stall_local | ~(local_bb6_reduction_5_inputs_ready));

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_64to65_bb6_reduction_5_0_valid_out_NO_SHIFT_REG;
 logic rnode_64to65_bb6_reduction_5_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_64to65_bb6_reduction_5_0_NO_SHIFT_REG;
 logic rnode_64to65_bb6_reduction_5_0_reg_65_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_64to65_bb6_reduction_5_0_reg_65_NO_SHIFT_REG;
 logic rnode_64to65_bb6_reduction_5_0_valid_out_reg_65_NO_SHIFT_REG;
 logic rnode_64to65_bb6_reduction_5_0_stall_in_reg_65_NO_SHIFT_REG;
 logic rnode_64to65_bb6_reduction_5_0_stall_out_reg_65_NO_SHIFT_REG;

acl_data_fifo rnode_64to65_bb6_reduction_5_0_reg_65_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_64to65_bb6_reduction_5_0_reg_65_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_64to65_bb6_reduction_5_0_stall_in_reg_65_NO_SHIFT_REG),
	.valid_out(rnode_64to65_bb6_reduction_5_0_valid_out_reg_65_NO_SHIFT_REG),
	.stall_out(rnode_64to65_bb6_reduction_5_0_stall_out_reg_65_NO_SHIFT_REG),
	.data_in(local_bb6_reduction_5),
	.data_out(rnode_64to65_bb6_reduction_5_0_reg_65_NO_SHIFT_REG)
);

defparam rnode_64to65_bb6_reduction_5_0_reg_65_fifo.DEPTH = 2;
defparam rnode_64to65_bb6_reduction_5_0_reg_65_fifo.DATA_WIDTH = 32;
defparam rnode_64to65_bb6_reduction_5_0_reg_65_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_64to65_bb6_reduction_5_0_reg_65_fifo.IMPL = "ll_reg";

assign rnode_64to65_bb6_reduction_5_0_reg_65_inputs_ready_NO_SHIFT_REG = local_bb6_reduction_5_valid_out;
assign local_bb6_reduction_5_stall_in = rnode_64to65_bb6_reduction_5_0_stall_out_reg_65_NO_SHIFT_REG;
assign rnode_64to65_bb6_reduction_5_0_NO_SHIFT_REG = rnode_64to65_bb6_reduction_5_0_reg_65_NO_SHIFT_REG;
assign rnode_64to65_bb6_reduction_5_0_stall_in_reg_65_NO_SHIFT_REG = rnode_64to65_bb6_reduction_5_0_stall_in_NO_SHIFT_REG;
assign rnode_64to65_bb6_reduction_5_0_valid_out_NO_SHIFT_REG = rnode_64to65_bb6_reduction_5_0_valid_out_reg_65_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb6_reduction_6_stall_local;
wire [31:0] local_bb6_reduction_6;

assign local_bb6_reduction_6 = (rnode_64to65_bb6_reduction_4_0_NO_SHIFT_REG + rnode_64to65_bb6_reduction_5_0_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb6_add215_stall_local;
wire [31:0] local_bb6_add215;

assign local_bb6_add215 = (local_bb6_reduction_6 + rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534);

// This section implements an unregistered operation.
// 
wire local_bb6_add216_valid_out;
wire local_bb6_add216_stall_in;
 reg local_bb6_add216_consumed_0_NO_SHIFT_REG;
wire local_bb6_add215_valid_out;
wire local_bb6_add215_stall_in;
 reg local_bb6_add215_consumed_0_NO_SHIFT_REG;
wire local_bb6_add216_inputs_ready;
wire local_bb6_add216_stall_local;
wire [31:0] local_bb6_add216;

assign local_bb6_add216_inputs_ready = (rstag_65to65_bb6_B_149_pop8_B_149_valid_out_1 & rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_1 & rstag_65to65_bb6_B_149_pop8_B_149_valid_out_2 & rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_valid_out_2 & rstag_65to65_bb6_A_150_pop7_A_150_valid_out_1 & rstag_65to65_bb6_A_150_pop7_A_150_valid_out_2 & rstag_65to65_bb6_A_150_pop7_A_150_valid_out_3 & rstag_65to65_bb6_A_150_pop7_A_150_valid_out_4 & rstag_65to65_bb6_A_150_pop7_A_150_valid_out_5 & rstag_65to65_bb6_A_150_pop7_A_150_valid_out_6 & rstag_65to65_bb6_A_150_pop7_A_150_valid_out_7 & rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_valid_out & rnode_64to65_bb6_reduction_4_0_valid_out_NO_SHIFT_REG & rnode_64to65_bb6_reduction_5_0_valid_out_NO_SHIFT_REG);
assign local_bb6_add216 = (local_bb6_add214 + local_bb6_reduction_6);
assign local_bb6_add216_stall_local = ((local_bb6_add216_stall_in & ~(local_bb6_add216_consumed_0_NO_SHIFT_REG)) | (local_bb6_add215_stall_in & ~(local_bb6_add215_consumed_0_NO_SHIFT_REG)));
assign local_bb6_add216_valid_out = (local_bb6_add216_inputs_ready & ~(local_bb6_add216_consumed_0_NO_SHIFT_REG));
assign local_bb6_add215_valid_out = (local_bb6_add216_inputs_ready & ~(local_bb6_add215_consumed_0_NO_SHIFT_REG));
assign rstag_65to65_bb6_B_149_pop8_B_149_stall_in_1 = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));
assign rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_1 = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));
assign rstag_65to65_bb6_B_149_pop8_B_149_stall_in_2 = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));
assign rstag_65to65_bb6_C_148_pop9_acl_pop_i32_1013904242_stall_in_2 = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));
assign rstag_65to65_bb6_A_150_pop7_A_150_stall_in_1 = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));
assign rstag_65to65_bb6_A_150_pop7_A_150_stall_in_2 = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));
assign rstag_65to65_bb6_A_150_pop7_A_150_stall_in_3 = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));
assign rstag_65to65_bb6_A_150_pop7_A_150_stall_in_4 = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));
assign rstag_65to65_bb6_A_150_pop7_A_150_stall_in_5 = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));
assign rstag_65to65_bb6_A_150_pop7_A_150_stall_in_6 = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));
assign rstag_65to65_bb6_A_150_pop7_A_150_stall_in_7 = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));
assign rstag_65to65_bb6_D_147_pop10_acl_pop_i32__1521486534_stall_in = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));
assign rnode_64to65_bb6_reduction_4_0_stall_in_NO_SHIFT_REG = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));
assign rnode_64to65_bb6_reduction_5_0_stall_in_NO_SHIFT_REG = (local_bb6_add216_stall_local | ~(local_bb6_add216_inputs_ready));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_add216_consumed_0_NO_SHIFT_REG <= 1'b0;
		local_bb6_add215_consumed_0_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		local_bb6_add216_consumed_0_NO_SHIFT_REG <= (local_bb6_add216_inputs_ready & (local_bb6_add216_consumed_0_NO_SHIFT_REG | ~(local_bb6_add216_stall_in)) & local_bb6_add216_stall_local);
		local_bb6_add215_consumed_0_NO_SHIFT_REG <= (local_bb6_add216_inputs_ready & (local_bb6_add215_consumed_0_NO_SHIFT_REG | ~(local_bb6_add215_stall_in)) & local_bb6_add216_stall_local);
	end
end


// This section implements a staging register.
// 
wire rstag_65to65_bb6_add216_valid_out_0;
wire rstag_65to65_bb6_add216_stall_in_0;
 reg rstag_65to65_bb6_add216_consumed_0_NO_SHIFT_REG;
wire rstag_65to65_bb6_add216_valid_out_1;
wire rstag_65to65_bb6_add216_stall_in_1;
 reg rstag_65to65_bb6_add216_consumed_1_NO_SHIFT_REG;
wire rstag_65to65_bb6_add216_inputs_ready;
wire rstag_65to65_bb6_add216_stall_local;
 reg rstag_65to65_bb6_add216_staging_valid_NO_SHIFT_REG;
wire rstag_65to65_bb6_add216_combined_valid;
 reg [31:0] rstag_65to65_bb6_add216_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_65to65_bb6_add216;

assign rstag_65to65_bb6_add216_inputs_ready = local_bb6_add216_valid_out;
assign rstag_65to65_bb6_add216 = (rstag_65to65_bb6_add216_staging_valid_NO_SHIFT_REG ? rstag_65to65_bb6_add216_staging_reg_NO_SHIFT_REG : local_bb6_add216);
assign rstag_65to65_bb6_add216_combined_valid = (rstag_65to65_bb6_add216_staging_valid_NO_SHIFT_REG | rstag_65to65_bb6_add216_inputs_ready);
assign rstag_65to65_bb6_add216_stall_local = ((rstag_65to65_bb6_add216_stall_in_0 & ~(rstag_65to65_bb6_add216_consumed_0_NO_SHIFT_REG)) | (rstag_65to65_bb6_add216_stall_in_1 & ~(rstag_65to65_bb6_add216_consumed_1_NO_SHIFT_REG)));
assign rstag_65to65_bb6_add216_valid_out_0 = (rstag_65to65_bb6_add216_combined_valid & ~(rstag_65to65_bb6_add216_consumed_0_NO_SHIFT_REG));
assign rstag_65to65_bb6_add216_valid_out_1 = (rstag_65to65_bb6_add216_combined_valid & ~(rstag_65to65_bb6_add216_consumed_1_NO_SHIFT_REG));
assign local_bb6_add216_stall_in = (|rstag_65to65_bb6_add216_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_65to65_bb6_add216_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_add216_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_65to65_bb6_add216_stall_local)
		begin
			if (~(rstag_65to65_bb6_add216_staging_valid_NO_SHIFT_REG))
			begin
				rstag_65to65_bb6_add216_staging_valid_NO_SHIFT_REG <= rstag_65to65_bb6_add216_inputs_ready;
			end
		end
		else
		begin
			rstag_65to65_bb6_add216_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_65to65_bb6_add216_staging_valid_NO_SHIFT_REG))
		begin
			rstag_65to65_bb6_add216_staging_reg_NO_SHIFT_REG <= local_bb6_add216;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_65to65_bb6_add216_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_add216_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_65to65_bb6_add216_consumed_0_NO_SHIFT_REG <= (rstag_65to65_bb6_add216_combined_valid & (rstag_65to65_bb6_add216_consumed_0_NO_SHIFT_REG | ~(rstag_65to65_bb6_add216_stall_in_0)) & rstag_65to65_bb6_add216_stall_local);
		rstag_65to65_bb6_add216_consumed_1_NO_SHIFT_REG <= (rstag_65to65_bb6_add216_combined_valid & (rstag_65to65_bb6_add216_consumed_1_NO_SHIFT_REG | ~(rstag_65to65_bb6_add216_stall_in_1)) & rstag_65to65_bb6_add216_stall_local);
	end
end


// This section implements a staging register.
// 
wire rstag_65to65_bb6_add215_valid_out_0;
wire rstag_65to65_bb6_add215_stall_in_0;
 reg rstag_65to65_bb6_add215_consumed_0_NO_SHIFT_REG;
wire rstag_65to65_bb6_add215_valid_out_1;
wire rstag_65to65_bb6_add215_stall_in_1;
 reg rstag_65to65_bb6_add215_consumed_1_NO_SHIFT_REG;
wire rstag_65to65_bb6_add215_inputs_ready;
wire rstag_65to65_bb6_add215_stall_local;
 reg rstag_65to65_bb6_add215_staging_valid_NO_SHIFT_REG;
wire rstag_65to65_bb6_add215_combined_valid;
 reg [31:0] rstag_65to65_bb6_add215_staging_reg_NO_SHIFT_REG;
wire [31:0] rstag_65to65_bb6_add215;

assign rstag_65to65_bb6_add215_inputs_ready = local_bb6_add215_valid_out;
assign rstag_65to65_bb6_add215 = (rstag_65to65_bb6_add215_staging_valid_NO_SHIFT_REG ? rstag_65to65_bb6_add215_staging_reg_NO_SHIFT_REG : local_bb6_add215);
assign rstag_65to65_bb6_add215_combined_valid = (rstag_65to65_bb6_add215_staging_valid_NO_SHIFT_REG | rstag_65to65_bb6_add215_inputs_ready);
assign rstag_65to65_bb6_add215_stall_local = ((rstag_65to65_bb6_add215_stall_in_0 & ~(rstag_65to65_bb6_add215_consumed_0_NO_SHIFT_REG)) | (rstag_65to65_bb6_add215_stall_in_1 & ~(rstag_65to65_bb6_add215_consumed_1_NO_SHIFT_REG)));
assign rstag_65to65_bb6_add215_valid_out_0 = (rstag_65to65_bb6_add215_combined_valid & ~(rstag_65to65_bb6_add215_consumed_0_NO_SHIFT_REG));
assign rstag_65to65_bb6_add215_valid_out_1 = (rstag_65to65_bb6_add215_combined_valid & ~(rstag_65to65_bb6_add215_consumed_1_NO_SHIFT_REG));
assign local_bb6_add215_stall_in = (|rstag_65to65_bb6_add215_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_65to65_bb6_add215_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_add215_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_65to65_bb6_add215_stall_local)
		begin
			if (~(rstag_65to65_bb6_add215_staging_valid_NO_SHIFT_REG))
			begin
				rstag_65to65_bb6_add215_staging_valid_NO_SHIFT_REG <= rstag_65to65_bb6_add215_inputs_ready;
			end
		end
		else
		begin
			rstag_65to65_bb6_add215_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_65to65_bb6_add215_staging_valid_NO_SHIFT_REG))
		begin
			rstag_65to65_bb6_add215_staging_reg_NO_SHIFT_REG <= local_bb6_add215;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_65to65_bb6_add215_consumed_0_NO_SHIFT_REG <= 1'b0;
		rstag_65to65_bb6_add215_consumed_1_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		rstag_65to65_bb6_add215_consumed_0_NO_SHIFT_REG <= (rstag_65to65_bb6_add215_combined_valid & (rstag_65to65_bb6_add215_consumed_0_NO_SHIFT_REG | ~(rstag_65to65_bb6_add215_stall_in_0)) & rstag_65to65_bb6_add215_stall_local);
		rstag_65to65_bb6_add215_consumed_1_NO_SHIFT_REG <= (rstag_65to65_bb6_add215_combined_valid & (rstag_65to65_bb6_add215_consumed_1_NO_SHIFT_REG | ~(rstag_65to65_bb6_add215_stall_in_1)) & rstag_65to65_bb6_add215_stall_local);
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_65to66_bb6_add216_0_valid_out_NO_SHIFT_REG;
 logic rnode_65to66_bb6_add216_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_add216_0_NO_SHIFT_REG;
 logic rnode_65to66_bb6_add216_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_add216_0_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_add216_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_add216_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_add216_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_65to66_bb6_add216_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_65to66_bb6_add216_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_65to66_bb6_add216_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_65to66_bb6_add216_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_65to66_bb6_add216_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(rstag_65to65_bb6_add216),
	.data_out(rnode_65to66_bb6_add216_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_65to66_bb6_add216_0_reg_66_fifo.DEPTH = 2;
defparam rnode_65to66_bb6_add216_0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_65to66_bb6_add216_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_65to66_bb6_add216_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_65to66_bb6_add216_0_reg_66_inputs_ready_NO_SHIFT_REG = rstag_65to65_bb6_add216_valid_out_0;
assign rstag_65to65_bb6_add216_stall_in_0 = rnode_65to66_bb6_add216_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_add216_0_NO_SHIFT_REG = rnode_65to66_bb6_add216_0_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_add216_0_stall_in_reg_66_NO_SHIFT_REG = rnode_65to66_bb6_add216_0_stall_in_NO_SHIFT_REG;
assign rnode_65to66_bb6_add216_0_valid_out_NO_SHIFT_REG = rnode_65to66_bb6_add216_0_valid_out_reg_66_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb6_A_150_push7_add216_inputs_ready;
 reg local_bb6_A_150_push7_add216_valid_out_NO_SHIFT_REG;
wire local_bb6_A_150_push7_add216_stall_in;
wire local_bb6_A_150_push7_add216_output_regs_ready;
wire [31:0] local_bb6_A_150_push7_add216_result;
wire local_bb6_A_150_push7_add216_fu_valid_out;
wire local_bb6_A_150_push7_add216_fu_stall_out;
 reg [31:0] local_bb6_A_150_push7_add216_NO_SHIFT_REG;
wire local_bb6_A_150_push7_add216_causedstall;

acl_push local_bb6_A_150_push7_add216_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_64to65_bb6_notexitcond15_notexit16_8_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rstag_65to65_bb6_add216),
	.stall_out(local_bb6_A_150_push7_add216_fu_stall_out),
	.valid_in(local_bb6_A_150_push7_add216_inputs_ready),
	.valid_out(local_bb6_A_150_push7_add216_fu_valid_out),
	.stall_in(~(local_bb6_A_150_push7_add216_output_regs_ready)),
	.data_out(local_bb6_A_150_push7_add216_result),
	.feedback_out(feedback_data_out_7),
	.feedback_valid_out(feedback_valid_out_7),
	.feedback_stall_in(feedback_stall_in_7)
);

defparam local_bb6_A_150_push7_add216_feedback.STALLFREE = 0;
defparam local_bb6_A_150_push7_add216_feedback.DATA_WIDTH = 32;
defparam local_bb6_A_150_push7_add216_feedback.FIFO_DEPTH = 64;
defparam local_bb6_A_150_push7_add216_feedback.MIN_FIFO_LATENCY = 62;
defparam local_bb6_A_150_push7_add216_feedback.STYLE = "REGULAR";

assign local_bb6_A_150_push7_add216_inputs_ready = (rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_8_NO_SHIFT_REG & rstag_65to65_bb6_add216_valid_out_1);
assign local_bb6_A_150_push7_add216_output_regs_ready = (&(~(local_bb6_A_150_push7_add216_valid_out_NO_SHIFT_REG) | ~(local_bb6_A_150_push7_add216_stall_in)));
assign rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_8_NO_SHIFT_REG = (local_bb6_A_150_push7_add216_fu_stall_out | ~(local_bb6_A_150_push7_add216_inputs_ready));
assign rstag_65to65_bb6_add216_stall_in_1 = (local_bb6_A_150_push7_add216_fu_stall_out | ~(local_bb6_A_150_push7_add216_inputs_ready));
assign local_bb6_A_150_push7_add216_causedstall = (local_bb6_A_150_push7_add216_inputs_ready && (local_bb6_A_150_push7_add216_fu_stall_out && !(~(local_bb6_A_150_push7_add216_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_A_150_push7_add216_NO_SHIFT_REG <= 'x;
		local_bb6_A_150_push7_add216_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_A_150_push7_add216_output_regs_ready)
		begin
			local_bb6_A_150_push7_add216_NO_SHIFT_REG <= local_bb6_A_150_push7_add216_result;
			local_bb6_A_150_push7_add216_valid_out_NO_SHIFT_REG <= local_bb6_A_150_push7_add216_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_A_150_push7_add216_stall_in))
			begin
				local_bb6_A_150_push7_add216_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_65to66_bb6_add215_0_valid_out_NO_SHIFT_REG;
 logic rnode_65to66_bb6_add215_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_add215_0_NO_SHIFT_REG;
 logic rnode_65to66_bb6_add215_0_reg_66_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_65to66_bb6_add215_0_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_add215_0_valid_out_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_add215_0_stall_in_reg_66_NO_SHIFT_REG;
 logic rnode_65to66_bb6_add215_0_stall_out_reg_66_NO_SHIFT_REG;

acl_data_fifo rnode_65to66_bb6_add215_0_reg_66_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_65to66_bb6_add215_0_reg_66_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_65to66_bb6_add215_0_stall_in_reg_66_NO_SHIFT_REG),
	.valid_out(rnode_65to66_bb6_add215_0_valid_out_reg_66_NO_SHIFT_REG),
	.stall_out(rnode_65to66_bb6_add215_0_stall_out_reg_66_NO_SHIFT_REG),
	.data_in(rstag_65to65_bb6_add215),
	.data_out(rnode_65to66_bb6_add215_0_reg_66_NO_SHIFT_REG)
);

defparam rnode_65to66_bb6_add215_0_reg_66_fifo.DEPTH = 2;
defparam rnode_65to66_bb6_add215_0_reg_66_fifo.DATA_WIDTH = 32;
defparam rnode_65to66_bb6_add215_0_reg_66_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_65to66_bb6_add215_0_reg_66_fifo.IMPL = "ll_reg";

assign rnode_65to66_bb6_add215_0_reg_66_inputs_ready_NO_SHIFT_REG = rstag_65to65_bb6_add215_valid_out_0;
assign rstag_65to65_bb6_add215_stall_in_0 = rnode_65to66_bb6_add215_0_stall_out_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_add215_0_NO_SHIFT_REG = rnode_65to66_bb6_add215_0_reg_66_NO_SHIFT_REG;
assign rnode_65to66_bb6_add215_0_stall_in_reg_66_NO_SHIFT_REG = rnode_65to66_bb6_add215_0_stall_in_NO_SHIFT_REG;
assign rnode_65to66_bb6_add215_0_valid_out_NO_SHIFT_REG = rnode_65to66_bb6_add215_0_valid_out_reg_66_NO_SHIFT_REG;

// This section implements a registered operation.
// 
wire local_bb6_E_146_push11_add215_inputs_ready;
 reg local_bb6_E_146_push11_add215_valid_out_NO_SHIFT_REG;
wire local_bb6_E_146_push11_add215_stall_in;
wire local_bb6_E_146_push11_add215_output_regs_ready;
wire [31:0] local_bb6_E_146_push11_add215_result;
wire local_bb6_E_146_push11_add215_fu_valid_out;
wire local_bb6_E_146_push11_add215_fu_stall_out;
 reg [31:0] local_bb6_E_146_push11_add215_NO_SHIFT_REG;
wire local_bb6_E_146_push11_add215_causedstall;

acl_push local_bb6_E_146_push11_add215_feedback (
	.clock(clock),
	.resetn(resetn),
	.dir(rnode_64to65_bb6_notexitcond15_notexit16_7_NO_SHIFT_REG),
	.predicate(1'b0),
	.data_in(rstag_65to65_bb6_add215),
	.stall_out(local_bb6_E_146_push11_add215_fu_stall_out),
	.valid_in(local_bb6_E_146_push11_add215_inputs_ready),
	.valid_out(local_bb6_E_146_push11_add215_fu_valid_out),
	.stall_in(~(local_bb6_E_146_push11_add215_output_regs_ready)),
	.data_out(local_bb6_E_146_push11_add215_result),
	.feedback_out(feedback_data_out_11),
	.feedback_valid_out(feedback_valid_out_11),
	.feedback_stall_in(feedback_stall_in_11)
);

defparam local_bb6_E_146_push11_add215_feedback.STALLFREE = 0;
defparam local_bb6_E_146_push11_add215_feedback.DATA_WIDTH = 32;
defparam local_bb6_E_146_push11_add215_feedback.FIFO_DEPTH = 64;
defparam local_bb6_E_146_push11_add215_feedback.MIN_FIFO_LATENCY = 61;
defparam local_bb6_E_146_push11_add215_feedback.STYLE = "REGULAR";

assign local_bb6_E_146_push11_add215_inputs_ready = (rnode_64to65_bb6_notexitcond15_notexit16_0_valid_out_7_NO_SHIFT_REG & rstag_65to65_bb6_add215_valid_out_1);
assign local_bb6_E_146_push11_add215_output_regs_ready = (&(~(local_bb6_E_146_push11_add215_valid_out_NO_SHIFT_REG) | ~(local_bb6_E_146_push11_add215_stall_in)));
assign rnode_64to65_bb6_notexitcond15_notexit16_0_stall_in_7_NO_SHIFT_REG = (local_bb6_E_146_push11_add215_fu_stall_out | ~(local_bb6_E_146_push11_add215_inputs_ready));
assign rstag_65to65_bb6_add215_stall_in_1 = (local_bb6_E_146_push11_add215_fu_stall_out | ~(local_bb6_E_146_push11_add215_inputs_ready));
assign local_bb6_E_146_push11_add215_causedstall = (local_bb6_E_146_push11_add215_inputs_ready && (local_bb6_E_146_push11_add215_fu_stall_out && !(~(local_bb6_E_146_push11_add215_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb6_E_146_push11_add215_NO_SHIFT_REG <= 'x;
		local_bb6_E_146_push11_add215_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb6_E_146_push11_add215_output_regs_ready)
		begin
			local_bb6_E_146_push11_add215_NO_SHIFT_REG <= local_bb6_E_146_push11_add215_result;
			local_bb6_E_146_push11_add215_valid_out_NO_SHIFT_REG <= local_bb6_E_146_push11_add215_fu_valid_out;
		end
		else
		begin
			if (~(local_bb6_E_146_push11_add215_stall_in))
			begin
				local_bb6_E_146_push11_add215_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_B_149_pop8_B_149_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_A_150_pop7_A_150_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_add215_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_add216_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6__pop19__0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6__pop20__0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb6_select10817_pop21_select10817_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (local_bb6_select10817_push21_select10817_pop21_valid_out_NO_SHIFT_REG & local_bb6__push20__pop20_valid_out_NO_SHIFT_REG & local_bb6__push19__pop19_valid_out_NO_SHIFT_REG & local_bb6_A_150_push7_add216_valid_out_NO_SHIFT_REG & local_bb6_E_146_push11_add215_valid_out_NO_SHIFT_REG & local_bb6_memdep_phi_push15_memdep_4_valid_out_NO_SHIFT_REG & local_bb6_memdep_phi5_push16_memdep_4_valid_out_NO_SHIFT_REG & local_bb6_memdep_phi6_push17_memdep_4_valid_out_NO_SHIFT_REG & local_bb6_memdep_phi7_push18_memdep_4_valid_out_NO_SHIFT_REG & local_bb6_B_149_push8_A_150_pop7_valid_out_NO_SHIFT_REG & local_bb6_C_148_push9_B_149_pop8_valid_out_NO_SHIFT_REG & local_bb6_D_147_push10_C_148_pop9_valid_out_NO_SHIFT_REG & rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_valid_out_NO_SHIFT_REG & rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_valid_out_NO_SHIFT_REG & rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_valid_out_NO_SHIFT_REG & rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_valid_out_NO_SHIFT_REG & rnode_65to66_bb6_B_149_pop8_B_149_0_valid_out_NO_SHIFT_REG & rnode_65to66_bb6_A_150_pop7_A_150_0_valid_out_NO_SHIFT_REG & rnode_65to66_bb6_add215_0_valid_out_NO_SHIFT_REG & rnode_65to66_bb6_add216_0_valid_out_NO_SHIFT_REG & rnode_65to66_bb6__pop19__0_valid_out_NO_SHIFT_REG & rnode_65to66_bb6__pop20__0_valid_out_NO_SHIFT_REG & rnode_65to66_bb6_select10817_pop21_select10817_0_valid_out_NO_SHIFT_REG & rnode_65to66_bb6_F_145_push12_E_146_pop11_0_valid_out_NO_SHIFT_REG & rnode_65to66_bb6_G_144_push13_F_145_pop12_0_valid_out_NO_SHIFT_REG & rnode_65to66_bb6_H_143_push14_G_144_pop13_0_valid_out_NO_SHIFT_REG & rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_valid_out_NO_SHIFT_REG & rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_valid_out_NO_SHIFT_REG & rnode_65to66_bb6_exitcond63_0_valid_out_NO_SHIFT_REG);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign local_bb6_select10817_push21_select10817_pop21_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb6__push20__pop20_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb6__push19__pop19_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb6_A_150_push7_add216_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb6_E_146_push11_add215_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb6_memdep_phi_push15_memdep_4_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb6_memdep_phi5_push16_memdep_4_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb6_memdep_phi6_push17_memdep_4_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb6_memdep_phi7_push18_memdep_4_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb6_B_149_push8_A_150_pop7_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb6_C_148_push9_B_149_pop8_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign local_bb6_D_147_push10_C_148_pop9_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_65to66_bb6_B_149_pop8_B_149_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_65to66_bb6_A_150_pop7_A_150_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_65to66_bb6_add215_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_65to66_bb6_add216_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_65to66_bb6__pop19__0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_65to66_bb6__pop20__0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_65to66_bb6_select10817_pop21_select10817_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_65to66_bb6_F_145_push12_E_146_pop11_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_65to66_bb6_G_144_push13_F_145_pop12_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_65to66_bb6_H_143_push14_G_144_pop13_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_64to66_bb6_keep_going14_acl_pipeline_1_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_65to66_bb6_indvars_iv56_push6_indvars_iv_next57_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_65to66_bb6_exitcond63_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb6_G_144_pop13_acl_pop_i32_528734635_0 = lvb_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_NO_SHIFT_REG;
assign lvb_bb6_G_144_pop13_acl_pop_i32_528734635_1 = lvb_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_NO_SHIFT_REG;
assign lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_0 = lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_NO_SHIFT_REG;
assign lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_1 = lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_NO_SHIFT_REG;
assign lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_0 = lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_NO_SHIFT_REG;
assign lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_1 = lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_NO_SHIFT_REG;
assign lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_0 = lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_NO_SHIFT_REG;
assign lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_1 = lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_NO_SHIFT_REG;
assign lvb_bb6_B_149_pop8_B_149_0 = lvb_bb6_B_149_pop8_B_149_0_reg_NO_SHIFT_REG;
assign lvb_bb6_B_149_pop8_B_149_1 = lvb_bb6_B_149_pop8_B_149_0_reg_NO_SHIFT_REG;
assign lvb_bb6_A_150_pop7_A_150_0 = lvb_bb6_A_150_pop7_A_150_0_reg_NO_SHIFT_REG;
assign lvb_bb6_A_150_pop7_A_150_1 = lvb_bb6_A_150_pop7_A_150_0_reg_NO_SHIFT_REG;
assign lvb_bb6_add215_0 = lvb_bb6_add215_0_reg_NO_SHIFT_REG;
assign lvb_bb6_add215_1 = lvb_bb6_add215_0_reg_NO_SHIFT_REG;
assign lvb_bb6_add216_0 = lvb_bb6_add216_0_reg_NO_SHIFT_REG;
assign lvb_bb6_add216_1 = lvb_bb6_add216_0_reg_NO_SHIFT_REG;
assign lvb_bb6__pop19__0 = lvb_bb6__pop19__0_reg_NO_SHIFT_REG;
assign lvb_bb6__pop19__1 = lvb_bb6__pop19__0_reg_NO_SHIFT_REG;
assign lvb_bb6__pop20__0 = lvb_bb6__pop20__0_reg_NO_SHIFT_REG;
assign lvb_bb6__pop20__1 = lvb_bb6__pop20__0_reg_NO_SHIFT_REG;
assign lvb_bb6_select10817_pop21_select10817_0 = lvb_bb6_select10817_pop21_select10817_0_reg_NO_SHIFT_REG;
assign lvb_bb6_select10817_pop21_select10817_1 = lvb_bb6_select10817_pop21_select10817_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_B_149_pop8_B_149_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_A_150_pop7_A_150_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_add215_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_add216_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6__pop19__0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6__pop20__0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb6_select10817_pop21_select10817_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb6_G_144_pop13_acl_pop_i32_528734635_0_reg_NO_SHIFT_REG <= rnode_64to66_bb6_G_144_pop13_acl_pop_i32_528734635_0_NO_SHIFT_REG;
			lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_0_reg_NO_SHIFT_REG <= rnode_64to66_bb6_F_145_pop12_acl_pop_i32__1694144372_0_NO_SHIFT_REG;
			lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_0_reg_NO_SHIFT_REG <= rnode_64to66_bb6_E_146_pop11_acl_pop_i32_1359893119_0_NO_SHIFT_REG;
			lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_0_reg_NO_SHIFT_REG <= rnode_65to66_bb6_C_148_pop9_acl_pop_i32_1013904242_0_NO_SHIFT_REG;
			lvb_bb6_B_149_pop8_B_149_0_reg_NO_SHIFT_REG <= rnode_65to66_bb6_B_149_pop8_B_149_0_NO_SHIFT_REG;
			lvb_bb6_A_150_pop7_A_150_0_reg_NO_SHIFT_REG <= rnode_65to66_bb6_A_150_pop7_A_150_0_NO_SHIFT_REG;
			lvb_bb6_add215_0_reg_NO_SHIFT_REG <= rnode_65to66_bb6_add215_0_NO_SHIFT_REG;
			lvb_bb6_add216_0_reg_NO_SHIFT_REG <= rnode_65to66_bb6_add216_0_NO_SHIFT_REG;
			lvb_bb6__pop19__0_reg_NO_SHIFT_REG <= rnode_65to66_bb6__pop19__0_NO_SHIFT_REG;
			lvb_bb6__pop20__0_reg_NO_SHIFT_REG <= rnode_65to66_bb6__pop20__0_NO_SHIFT_REG;
			lvb_bb6_select10817_pop21_select10817_0_reg_NO_SHIFT_REG <= rnode_65to66_bb6_select10817_pop21_select10817_0_NO_SHIFT_REG;
			branch_compare_result_NO_SHIFT_REG <= rnode_65to66_bb6_exitcond63_0_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

module sha256_basic_block_7
	(
		input 		clock,
		input 		resetn,
		input [31:0] 		input_wii_ld_,
		input [31:0] 		input_wii_mul158,
		input [31:0] 		input_wii__,
		input 		input_wii_cmp166_xor,
		input [63:0] 		input_wii_memcoalesce_digest_bitcast_08,
		input [511:0] 		input_wii_memcoalesce_null_insertValue_0,
		input 		valid_in,
		output 		stall_out,
		input [31:0] 		input_G_144_pop13_acl_pop_i32_528734635,
		input [31:0] 		input_F_145_pop12_acl_pop_i32__1694144372,
		input [31:0] 		input_E_146_pop11_acl_pop_i32_1359893119,
		input [31:0] 		input_C_148_pop9_acl_pop_i32_1013904242,
		input [31:0] 		input_B_149_pop8_B_149,
		input [31:0] 		input_A_150_pop7_A_150,
		input [31:0] 		input_add215,
		input [31:0] 		input_add216,
		input [31:0] 		input__pop19_,
		input [31:0] 		input__pop20_,
		input [31:0] 		input_select10817_pop21_select10817,
		output 		valid_out_0,
		input 		stall_in_0,
		output [31:0] 		lvb_bb7_reduction_17_0,
		output [31:0] 		lvb_bb7_reduction_13_0,
		output [31:0] 		lvb_bb7_inc237_0,
		output 		valid_out_1,
		input 		stall_in_1,
		output [31:0] 		lvb_bb7_reduction_17_1,
		output [31:0] 		lvb_bb7_reduction_13_1,
		output [31:0] 		lvb_bb7_inc237_1,
		input [31:0] 		workgroup_size,
		input 		start,
		input [255:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_readdata,
		input 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_readdatavalid,
		input 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_waitrequest,
		output [29:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_address,
		output 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_read,
		output 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_write,
		input 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_writeack,
		output [255:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_writedata,
		output [31:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_byteenable,
		output [4:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_burstcount,
		output 		local_bb7_st_memcoalesce_digest_insertValue_17_active,
		input 		clock2x
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((valid_out_0 & valid_out_1) & ~((stall_in_0 | stall_in_1)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in_0;
 reg merge_node_valid_out_0_NO_SHIFT_REG;
wire merge_node_stall_in_1;
 reg merge_node_valid_out_1_NO_SHIFT_REG;
wire merge_node_stall_in_2;
 reg merge_node_valid_out_2_NO_SHIFT_REG;
wire merge_node_stall_in_3;
 reg merge_node_valid_out_3_NO_SHIFT_REG;
wire merge_node_stall_in_4;
 reg merge_node_valid_out_4_NO_SHIFT_REG;
wire merge_node_stall_in_5;
 reg merge_node_valid_out_5_NO_SHIFT_REG;
wire merge_node_stall_in_6;
 reg merge_node_valid_out_6_NO_SHIFT_REG;
wire merge_node_stall_in_7;
 reg merge_node_valid_out_7_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_G_144_pop13_acl_pop_i32_528734635_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_F_145_pop12_acl_pop_i32__1694144372_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_E_146_pop11_acl_pop_i32_1359893119_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_C_148_pop9_acl_pop_i32_1013904242_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_B_149_pop8_B_149_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_A_150_pop7_A_150_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_add215_staging_reg_NO_SHIFT_REG;
 reg [31:0] input_add216_staging_reg_NO_SHIFT_REG;
 reg [31:0] input__pop19__staging_reg_NO_SHIFT_REG;
 reg [31:0] input__pop20__staging_reg_NO_SHIFT_REG;
 reg [31:0] input_select10817_pop21_select10817_staging_reg_NO_SHIFT_REG;
 reg [31:0] local_lvm_G_144_pop13_acl_pop_i32_528734635_NO_SHIFT_REG;
 reg [31:0] local_lvm_F_145_pop12_acl_pop_i32__1694144372_NO_SHIFT_REG;
 reg [31:0] local_lvm_E_146_pop11_acl_pop_i32_1359893119_NO_SHIFT_REG;
 reg [31:0] local_lvm_C_148_pop9_acl_pop_i32_1013904242_NO_SHIFT_REG;
 reg [31:0] local_lvm_B_149_pop8_B_149_NO_SHIFT_REG;
 reg [31:0] local_lvm_A_150_pop7_A_150_NO_SHIFT_REG;
 reg [31:0] local_lvm_add215_NO_SHIFT_REG;
 reg [31:0] local_lvm_add216_NO_SHIFT_REG;
 reg [31:0] local_lvm__pop19__NO_SHIFT_REG;
 reg [31:0] local_lvm__pop20__NO_SHIFT_REG;
 reg [31:0] local_lvm_select10817_pop21_select10817_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = ((merge_node_stall_in_0 & merge_node_valid_out_0_NO_SHIFT_REG) | (merge_node_stall_in_1 & merge_node_valid_out_1_NO_SHIFT_REG) | (merge_node_stall_in_2 & merge_node_valid_out_2_NO_SHIFT_REG) | (merge_node_stall_in_3 & merge_node_valid_out_3_NO_SHIFT_REG) | (merge_node_stall_in_4 & merge_node_valid_out_4_NO_SHIFT_REG) | (merge_node_stall_in_5 & merge_node_valid_out_5_NO_SHIFT_REG) | (merge_node_stall_in_6 & merge_node_valid_out_6_NO_SHIFT_REG) | (merge_node_stall_in_7 & merge_node_valid_out_7_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		input_G_144_pop13_acl_pop_i32_528734635_staging_reg_NO_SHIFT_REG <= 'x;
		input_F_145_pop12_acl_pop_i32__1694144372_staging_reg_NO_SHIFT_REG <= 'x;
		input_E_146_pop11_acl_pop_i32_1359893119_staging_reg_NO_SHIFT_REG <= 'x;
		input_C_148_pop9_acl_pop_i32_1013904242_staging_reg_NO_SHIFT_REG <= 'x;
		input_B_149_pop8_B_149_staging_reg_NO_SHIFT_REG <= 'x;
		input_A_150_pop7_A_150_staging_reg_NO_SHIFT_REG <= 'x;
		input_add215_staging_reg_NO_SHIFT_REG <= 'x;
		input_add216_staging_reg_NO_SHIFT_REG <= 'x;
		input__pop19__staging_reg_NO_SHIFT_REG <= 'x;
		input__pop20__staging_reg_NO_SHIFT_REG <= 'x;
		input_select10817_pop21_select10817_staging_reg_NO_SHIFT_REG <= 'x;
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				input_G_144_pop13_acl_pop_i32_528734635_staging_reg_NO_SHIFT_REG <= input_G_144_pop13_acl_pop_i32_528734635;
				input_F_145_pop12_acl_pop_i32__1694144372_staging_reg_NO_SHIFT_REG <= input_F_145_pop12_acl_pop_i32__1694144372;
				input_E_146_pop11_acl_pop_i32_1359893119_staging_reg_NO_SHIFT_REG <= input_E_146_pop11_acl_pop_i32_1359893119;
				input_C_148_pop9_acl_pop_i32_1013904242_staging_reg_NO_SHIFT_REG <= input_C_148_pop9_acl_pop_i32_1013904242;
				input_B_149_pop8_B_149_staging_reg_NO_SHIFT_REG <= input_B_149_pop8_B_149;
				input_A_150_pop7_A_150_staging_reg_NO_SHIFT_REG <= input_A_150_pop7_A_150;
				input_add215_staging_reg_NO_SHIFT_REG <= input_add215;
				input_add216_staging_reg_NO_SHIFT_REG <= input_add216;
				input__pop19__staging_reg_NO_SHIFT_REG <= input__pop19_;
				input__pop20__staging_reg_NO_SHIFT_REG <= input__pop20_;
				input_select10817_pop21_select10817_staging_reg_NO_SHIFT_REG <= input_select10817_pop21_select10817;
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock)
begin
	if (~(merge_stalled_by_successors))
	begin
		case (merge_block_selector_NO_SHIFT_REG)
			1'b0:
			begin
				if (merge_node_valid_in_staging_reg_NO_SHIFT_REG)
				begin
					local_lvm_G_144_pop13_acl_pop_i32_528734635_NO_SHIFT_REG <= input_G_144_pop13_acl_pop_i32_528734635_staging_reg_NO_SHIFT_REG;
					local_lvm_F_145_pop12_acl_pop_i32__1694144372_NO_SHIFT_REG <= input_F_145_pop12_acl_pop_i32__1694144372_staging_reg_NO_SHIFT_REG;
					local_lvm_E_146_pop11_acl_pop_i32_1359893119_NO_SHIFT_REG <= input_E_146_pop11_acl_pop_i32_1359893119_staging_reg_NO_SHIFT_REG;
					local_lvm_C_148_pop9_acl_pop_i32_1013904242_NO_SHIFT_REG <= input_C_148_pop9_acl_pop_i32_1013904242_staging_reg_NO_SHIFT_REG;
					local_lvm_B_149_pop8_B_149_NO_SHIFT_REG <= input_B_149_pop8_B_149_staging_reg_NO_SHIFT_REG;
					local_lvm_A_150_pop7_A_150_NO_SHIFT_REG <= input_A_150_pop7_A_150_staging_reg_NO_SHIFT_REG;
					local_lvm_add215_NO_SHIFT_REG <= input_add215_staging_reg_NO_SHIFT_REG;
					local_lvm_add216_NO_SHIFT_REG <= input_add216_staging_reg_NO_SHIFT_REG;
					local_lvm__pop19__NO_SHIFT_REG <= input__pop19__staging_reg_NO_SHIFT_REG;
					local_lvm__pop20__NO_SHIFT_REG <= input__pop20__staging_reg_NO_SHIFT_REG;
					local_lvm_select10817_pop21_select10817_NO_SHIFT_REG <= input_select10817_pop21_select10817_staging_reg_NO_SHIFT_REG;
				end
				else
				begin
					local_lvm_G_144_pop13_acl_pop_i32_528734635_NO_SHIFT_REG <= input_G_144_pop13_acl_pop_i32_528734635;
					local_lvm_F_145_pop12_acl_pop_i32__1694144372_NO_SHIFT_REG <= input_F_145_pop12_acl_pop_i32__1694144372;
					local_lvm_E_146_pop11_acl_pop_i32_1359893119_NO_SHIFT_REG <= input_E_146_pop11_acl_pop_i32_1359893119;
					local_lvm_C_148_pop9_acl_pop_i32_1013904242_NO_SHIFT_REG <= input_C_148_pop9_acl_pop_i32_1013904242;
					local_lvm_B_149_pop8_B_149_NO_SHIFT_REG <= input_B_149_pop8_B_149;
					local_lvm_A_150_pop7_A_150_NO_SHIFT_REG <= input_A_150_pop7_A_150;
					local_lvm_add215_NO_SHIFT_REG <= input_add215;
					local_lvm_add216_NO_SHIFT_REG <= input_add216;
					local_lvm__pop19__NO_SHIFT_REG <= input__pop19_;
					local_lvm__pop20__NO_SHIFT_REG <= input__pop20_;
					local_lvm_select10817_pop21_select10817_NO_SHIFT_REG <= input_select10817_pop21_select10817;
				end
			end

			default:
			begin
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
		merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_0_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_1_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_2_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_3_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_4_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_5_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_6_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
			merge_node_valid_out_7_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in_0))
			begin
				merge_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_1))
			begin
				merge_node_valid_out_1_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_2))
			begin
				merge_node_valid_out_2_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_3))
			begin
				merge_node_valid_out_3_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_4))
			begin
				merge_node_valid_out_4_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_5))
			begin
				merge_node_valid_out_5_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_6))
			begin
				merge_node_valid_out_6_NO_SHIFT_REG <= 1'b0;
			end
			if (~(merge_node_stall_in_7))
			begin
				merge_node_valid_out_7_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section implements an unregistered operation.
// 
wire local_bb7_reduction_14_stall_local;
wire [31:0] local_bb7_reduction_14;

assign local_bb7_reduction_14 = (local_lvm__pop20__NO_SHIFT_REG + local_lvm_add216_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb7_reduction_15_stall_local;
wire [31:0] local_bb7_reduction_15;

assign local_bb7_reduction_15 = (local_lvm_B_149_pop8_B_149_NO_SHIFT_REG + local_lvm_add215_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb7_reduction_10_stall_local;
wire [31:0] local_bb7_reduction_10;

assign local_bb7_reduction_10 = (local_lvm__pop19__NO_SHIFT_REG + local_lvm_A_150_pop7_A_150_NO_SHIFT_REG);

// This section implements an unregistered operation.
// 
wire local_bb7_reduction_11_stall_local;
wire [31:0] local_bb7_reduction_11;

assign local_bb7_reduction_11 = (local_lvm_C_148_pop9_acl_pop_i32_1013904242_NO_SHIFT_REG + local_lvm_E_146_pop11_acl_pop_i32_1359893119_NO_SHIFT_REG);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_memcoalesce_digest_bitcast_08_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_digest_bitcast_08_0_stall_in_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_digest_bitcast_08_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_digest_bitcast_08_0_valid_out_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_digest_bitcast_08_0_stall_in_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_memcoalesce_digest_bitcast_08_0_stall_out_reg_2_NO_SHIFT_REG;

acl_data_fifo rnode_1to2_memcoalesce_digest_bitcast_08_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_memcoalesce_digest_bitcast_08_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_memcoalesce_digest_bitcast_08_0_stall_in_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_memcoalesce_digest_bitcast_08_0_valid_out_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_memcoalesce_digest_bitcast_08_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(),
	.data_out()
);

defparam rnode_1to2_memcoalesce_digest_bitcast_08_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_memcoalesce_digest_bitcast_08_0_reg_2_fifo.DATA_WIDTH = 0;
defparam rnode_1to2_memcoalesce_digest_bitcast_08_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_memcoalesce_digest_bitcast_08_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_memcoalesce_digest_bitcast_08_0_reg_2_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_6_NO_SHIFT_REG;
assign merge_node_stall_in_6 = rnode_1to2_memcoalesce_digest_bitcast_08_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_memcoalesce_digest_bitcast_08_0_stall_in_reg_2_NO_SHIFT_REG = rnode_1to2_memcoalesce_digest_bitcast_08_0_stall_in_NO_SHIFT_REG;
assign rnode_1to2_memcoalesce_digest_bitcast_08_0_valid_out_NO_SHIFT_REG = rnode_1to2_memcoalesce_digest_bitcast_08_0_valid_out_reg_2_NO_SHIFT_REG;

// Register node:
//  * latency = 136
//  * capacity = 136
 logic rnode_1to137_select10817_pop21_select10817_0_valid_out_NO_SHIFT_REG;
 logic rnode_1to137_select10817_pop21_select10817_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_1to137_select10817_pop21_select10817_0_NO_SHIFT_REG;
 logic rnode_1to137_select10817_pop21_select10817_0_reg_137_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to137_select10817_pop21_select10817_0_reg_137_NO_SHIFT_REG;
 logic rnode_1to137_select10817_pop21_select10817_0_valid_out_reg_137_NO_SHIFT_REG;
 logic rnode_1to137_select10817_pop21_select10817_0_stall_in_reg_137_NO_SHIFT_REG;
 logic rnode_1to137_select10817_pop21_select10817_0_stall_out_reg_137_NO_SHIFT_REG;

acl_data_fifo rnode_1to137_select10817_pop21_select10817_0_reg_137_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to137_select10817_pop21_select10817_0_reg_137_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to137_select10817_pop21_select10817_0_stall_in_reg_137_NO_SHIFT_REG),
	.valid_out(rnode_1to137_select10817_pop21_select10817_0_valid_out_reg_137_NO_SHIFT_REG),
	.stall_out(rnode_1to137_select10817_pop21_select10817_0_stall_out_reg_137_NO_SHIFT_REG),
	.data_in(local_lvm_select10817_pop21_select10817_NO_SHIFT_REG),
	.data_out(rnode_1to137_select10817_pop21_select10817_0_reg_137_NO_SHIFT_REG)
);

defparam rnode_1to137_select10817_pop21_select10817_0_reg_137_fifo.DEPTH = 137;
defparam rnode_1to137_select10817_pop21_select10817_0_reg_137_fifo.DATA_WIDTH = 32;
defparam rnode_1to137_select10817_pop21_select10817_0_reg_137_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to137_select10817_pop21_select10817_0_reg_137_fifo.IMPL = "ram";

assign rnode_1to137_select10817_pop21_select10817_0_reg_137_inputs_ready_NO_SHIFT_REG = merge_node_valid_out_7_NO_SHIFT_REG;
assign merge_node_stall_in_7 = rnode_1to137_select10817_pop21_select10817_0_stall_out_reg_137_NO_SHIFT_REG;
assign rnode_1to137_select10817_pop21_select10817_0_NO_SHIFT_REG = rnode_1to137_select10817_pop21_select10817_0_reg_137_NO_SHIFT_REG;
assign rnode_1to137_select10817_pop21_select10817_0_stall_in_reg_137_NO_SHIFT_REG = rnode_1to137_select10817_pop21_select10817_0_stall_in_NO_SHIFT_REG;
assign rnode_1to137_select10817_pop21_select10817_0_valid_out_NO_SHIFT_REG = rnode_1to137_select10817_pop21_select10817_0_valid_out_reg_137_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb7_reduction_16_stall_local;
wire [31:0] local_bb7_reduction_16;

assign local_bb7_reduction_16 = (local_lvm_F_145_pop12_acl_pop_i32__1694144372_NO_SHIFT_REG + local_bb7_reduction_14);

// This section implements an unregistered operation.
// 
wire local_bb7_reduction_12_stall_local;
wire [31:0] local_bb7_reduction_12;

assign local_bb7_reduction_12 = (local_lvm_G_144_pop13_acl_pop_i32_528734635_NO_SHIFT_REG + local_bb7_reduction_10);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_137to138_select10817_pop21_select10817_0_valid_out_NO_SHIFT_REG;
 logic rnode_137to138_select10817_pop21_select10817_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_137to138_select10817_pop21_select10817_0_NO_SHIFT_REG;
 logic rnode_137to138_select10817_pop21_select10817_0_reg_138_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_137to138_select10817_pop21_select10817_0_reg_138_NO_SHIFT_REG;
 logic rnode_137to138_select10817_pop21_select10817_0_valid_out_reg_138_NO_SHIFT_REG;
 logic rnode_137to138_select10817_pop21_select10817_0_stall_in_reg_138_NO_SHIFT_REG;
 logic rnode_137to138_select10817_pop21_select10817_0_stall_out_reg_138_NO_SHIFT_REG;

acl_data_fifo rnode_137to138_select10817_pop21_select10817_0_reg_138_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_137to138_select10817_pop21_select10817_0_reg_138_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_137to138_select10817_pop21_select10817_0_stall_in_reg_138_NO_SHIFT_REG),
	.valid_out(rnode_137to138_select10817_pop21_select10817_0_valid_out_reg_138_NO_SHIFT_REG),
	.stall_out(rnode_137to138_select10817_pop21_select10817_0_stall_out_reg_138_NO_SHIFT_REG),
	.data_in(rnode_1to137_select10817_pop21_select10817_0_NO_SHIFT_REG),
	.data_out(rnode_137to138_select10817_pop21_select10817_0_reg_138_NO_SHIFT_REG)
);

defparam rnode_137to138_select10817_pop21_select10817_0_reg_138_fifo.DEPTH = 2;
defparam rnode_137to138_select10817_pop21_select10817_0_reg_138_fifo.DATA_WIDTH = 32;
defparam rnode_137to138_select10817_pop21_select10817_0_reg_138_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_137to138_select10817_pop21_select10817_0_reg_138_fifo.IMPL = "ll_reg";

assign rnode_137to138_select10817_pop21_select10817_0_reg_138_inputs_ready_NO_SHIFT_REG = rnode_1to137_select10817_pop21_select10817_0_valid_out_NO_SHIFT_REG;
assign rnode_1to137_select10817_pop21_select10817_0_stall_in_NO_SHIFT_REG = rnode_137to138_select10817_pop21_select10817_0_stall_out_reg_138_NO_SHIFT_REG;
assign rnode_137to138_select10817_pop21_select10817_0_NO_SHIFT_REG = rnode_137to138_select10817_pop21_select10817_0_reg_138_NO_SHIFT_REG;
assign rnode_137to138_select10817_pop21_select10817_0_stall_in_reg_138_NO_SHIFT_REG = rnode_137to138_select10817_pop21_select10817_0_stall_in_NO_SHIFT_REG;
assign rnode_137to138_select10817_pop21_select10817_0_valid_out_NO_SHIFT_REG = rnode_137to138_select10817_pop21_select10817_0_valid_out_reg_138_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb7_reduction_17_valid_out;
wire local_bb7_reduction_17_stall_in;
wire local_bb7_reduction_17_inputs_ready;
wire local_bb7_reduction_17_stall_local;
wire [31:0] local_bb7_reduction_17;

assign local_bb7_reduction_17_inputs_ready = (merge_node_valid_out_0_NO_SHIFT_REG & merge_node_valid_out_2_NO_SHIFT_REG & merge_node_valid_out_1_NO_SHIFT_REG);
assign local_bb7_reduction_17 = (local_bb7_reduction_15 + local_bb7_reduction_16);
assign local_bb7_reduction_17_valid_out = local_bb7_reduction_17_inputs_ready;
assign local_bb7_reduction_17_stall_local = local_bb7_reduction_17_stall_in;
assign merge_node_stall_in_0 = (local_bb7_reduction_17_stall_local | ~(local_bb7_reduction_17_inputs_ready));
assign merge_node_stall_in_2 = (local_bb7_reduction_17_stall_local | ~(local_bb7_reduction_17_inputs_ready));
assign merge_node_stall_in_1 = (local_bb7_reduction_17_stall_local | ~(local_bb7_reduction_17_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb7_reduction_13_valid_out;
wire local_bb7_reduction_13_stall_in;
wire local_bb7_reduction_13_inputs_ready;
wire local_bb7_reduction_13_stall_local;
wire [31:0] local_bb7_reduction_13;

assign local_bb7_reduction_13_inputs_ready = (merge_node_valid_out_3_NO_SHIFT_REG & merge_node_valid_out_5_NO_SHIFT_REG & merge_node_valid_out_4_NO_SHIFT_REG);
assign local_bb7_reduction_13 = (local_bb7_reduction_11 + local_bb7_reduction_12);
assign local_bb7_reduction_13_valid_out = local_bb7_reduction_13_inputs_ready;
assign local_bb7_reduction_13_stall_local = local_bb7_reduction_13_stall_in;
assign merge_node_stall_in_3 = (local_bb7_reduction_13_stall_local | ~(local_bb7_reduction_13_inputs_ready));
assign merge_node_stall_in_5 = (local_bb7_reduction_13_stall_local | ~(local_bb7_reduction_13_inputs_ready));
assign merge_node_stall_in_4 = (local_bb7_reduction_13_stall_local | ~(local_bb7_reduction_13_inputs_ready));

// This section implements an unregistered operation.
// 
wire local_bb7_inc237_valid_out;
wire local_bb7_inc237_stall_in;
wire local_bb7_inc237_inputs_ready;
wire local_bb7_inc237_stall_local;
wire [31:0] local_bb7_inc237;

assign local_bb7_inc237_inputs_ready = rnode_137to138_select10817_pop21_select10817_0_valid_out_NO_SHIFT_REG;
assign local_bb7_inc237 = (rnode_137to138_select10817_pop21_select10817_0_NO_SHIFT_REG + 32'h1);
assign local_bb7_inc237_valid_out = local_bb7_inc237_inputs_ready;
assign local_bb7_inc237_stall_local = local_bb7_inc237_stall_in;
assign rnode_137to138_select10817_pop21_select10817_0_stall_in_NO_SHIFT_REG = (|local_bb7_inc237_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb7_reduction_17_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_17_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_reduction_17_0_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_17_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_17_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_reduction_17_1_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_17_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_reduction_17_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_17_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_17_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_17_0_stall_out_reg_2_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_reduction_17_0_reg_2_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_1to2_bb7_reduction_17_0_reg_2_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_1to2_bb7_reduction_17_0_reg_2_NO_SHIFT_REG),
	.valid_in(rnode_1to2_bb7_reduction_17_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb7_reduction_17_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.data_out(rnode_1to2_bb7_reduction_17_0_reg_2_NO_SHIFT_REG_fa),
	.valid_out({rnode_1to2_bb7_reduction_17_0_valid_out_0_NO_SHIFT_REG, rnode_1to2_bb7_reduction_17_0_valid_out_1_NO_SHIFT_REG}),
	.stall_in({rnode_1to2_bb7_reduction_17_0_stall_in_0_NO_SHIFT_REG, rnode_1to2_bb7_reduction_17_0_stall_in_1_NO_SHIFT_REG})
);

defparam rnode_1to2_bb7_reduction_17_0_reg_2_fanout_adaptor.DATA_WIDTH = 32;
defparam rnode_1to2_bb7_reduction_17_0_reg_2_fanout_adaptor.NUM_FANOUTS = 2;

acl_data_fifo rnode_1to2_bb7_reduction_17_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb7_reduction_17_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb7_reduction_17_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb7_reduction_17_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb7_reduction_17_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb7_reduction_17),
	.data_out(rnode_1to2_bb7_reduction_17_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb7_reduction_17_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_bb7_reduction_17_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb7_reduction_17_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_bb7_reduction_17_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb7_reduction_17_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb7_reduction_17_valid_out;
assign local_bb7_reduction_17_stall_in = rnode_1to2_bb7_reduction_17_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb7_reduction_17_0_NO_SHIFT_REG = rnode_1to2_bb7_reduction_17_0_reg_2_NO_SHIFT_REG_fa;
assign rnode_1to2_bb7_reduction_17_1_NO_SHIFT_REG = rnode_1to2_bb7_reduction_17_0_reg_2_NO_SHIFT_REG_fa;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_1to2_bb7_reduction_13_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_13_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_reduction_13_0_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_13_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_13_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_reduction_13_1_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_13_0_reg_2_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_reduction_13_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_13_0_valid_out_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_13_0_stall_in_0_reg_2_NO_SHIFT_REG;
 logic rnode_1to2_bb7_reduction_13_0_stall_out_reg_2_NO_SHIFT_REG;
 logic [31:0] rnode_1to2_bb7_reduction_13_0_reg_2_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_1to2_bb7_reduction_13_0_reg_2_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_1to2_bb7_reduction_13_0_reg_2_NO_SHIFT_REG),
	.valid_in(rnode_1to2_bb7_reduction_13_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb7_reduction_13_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.data_out(rnode_1to2_bb7_reduction_13_0_reg_2_NO_SHIFT_REG_fa),
	.valid_out({rnode_1to2_bb7_reduction_13_0_valid_out_0_NO_SHIFT_REG, rnode_1to2_bb7_reduction_13_0_valid_out_1_NO_SHIFT_REG}),
	.stall_in({rnode_1to2_bb7_reduction_13_0_stall_in_0_NO_SHIFT_REG, rnode_1to2_bb7_reduction_13_0_stall_in_1_NO_SHIFT_REG})
);

defparam rnode_1to2_bb7_reduction_13_0_reg_2_fanout_adaptor.DATA_WIDTH = 32;
defparam rnode_1to2_bb7_reduction_13_0_reg_2_fanout_adaptor.NUM_FANOUTS = 2;

acl_data_fifo rnode_1to2_bb7_reduction_13_0_reg_2_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_1to2_bb7_reduction_13_0_reg_2_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_1to2_bb7_reduction_13_0_stall_in_0_reg_2_NO_SHIFT_REG),
	.valid_out(rnode_1to2_bb7_reduction_13_0_valid_out_0_reg_2_NO_SHIFT_REG),
	.stall_out(rnode_1to2_bb7_reduction_13_0_stall_out_reg_2_NO_SHIFT_REG),
	.data_in(local_bb7_reduction_13),
	.data_out(rnode_1to2_bb7_reduction_13_0_reg_2_NO_SHIFT_REG)
);

defparam rnode_1to2_bb7_reduction_13_0_reg_2_fifo.DEPTH = 2;
defparam rnode_1to2_bb7_reduction_13_0_reg_2_fifo.DATA_WIDTH = 32;
defparam rnode_1to2_bb7_reduction_13_0_reg_2_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_1to2_bb7_reduction_13_0_reg_2_fifo.IMPL = "ll_reg";

assign rnode_1to2_bb7_reduction_13_0_reg_2_inputs_ready_NO_SHIFT_REG = local_bb7_reduction_13_valid_out;
assign local_bb7_reduction_13_stall_in = rnode_1to2_bb7_reduction_13_0_stall_out_reg_2_NO_SHIFT_REG;
assign rnode_1to2_bb7_reduction_13_0_NO_SHIFT_REG = rnode_1to2_bb7_reduction_13_0_reg_2_NO_SHIFT_REG_fa;
assign rnode_1to2_bb7_reduction_13_1_NO_SHIFT_REG = rnode_1to2_bb7_reduction_13_0_reg_2_NO_SHIFT_REG_fa;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_138to139_bb7_inc237_0_valid_out_0_NO_SHIFT_REG;
 logic rnode_138to139_bb7_inc237_0_stall_in_0_NO_SHIFT_REG;
 logic [31:0] rnode_138to139_bb7_inc237_0_NO_SHIFT_REG;
 logic rnode_138to139_bb7_inc237_0_valid_out_1_NO_SHIFT_REG;
 logic rnode_138to139_bb7_inc237_0_stall_in_1_NO_SHIFT_REG;
 logic [31:0] rnode_138to139_bb7_inc237_1_NO_SHIFT_REG;
 logic rnode_138to139_bb7_inc237_0_reg_139_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_138to139_bb7_inc237_0_reg_139_NO_SHIFT_REG;
 logic rnode_138to139_bb7_inc237_0_valid_out_0_reg_139_NO_SHIFT_REG;
 logic rnode_138to139_bb7_inc237_0_stall_in_0_reg_139_NO_SHIFT_REG;
 logic rnode_138to139_bb7_inc237_0_stall_out_reg_139_NO_SHIFT_REG;
 logic [31:0] rnode_138to139_bb7_inc237_0_reg_139_NO_SHIFT_REG_fa;

acl_multi_fanout_adaptor rnode_138to139_bb7_inc237_0_reg_139_fanout_adaptor (
	.clock(clock),
	.resetn(resetn),
	.data_in(rnode_138to139_bb7_inc237_0_reg_139_NO_SHIFT_REG),
	.valid_in(rnode_138to139_bb7_inc237_0_valid_out_0_reg_139_NO_SHIFT_REG),
	.stall_out(rnode_138to139_bb7_inc237_0_stall_in_0_reg_139_NO_SHIFT_REG),
	.data_out(rnode_138to139_bb7_inc237_0_reg_139_NO_SHIFT_REG_fa),
	.valid_out({rnode_138to139_bb7_inc237_0_valid_out_0_NO_SHIFT_REG, rnode_138to139_bb7_inc237_0_valid_out_1_NO_SHIFT_REG}),
	.stall_in({rnode_138to139_bb7_inc237_0_stall_in_0_NO_SHIFT_REG, rnode_138to139_bb7_inc237_0_stall_in_1_NO_SHIFT_REG})
);

defparam rnode_138to139_bb7_inc237_0_reg_139_fanout_adaptor.DATA_WIDTH = 32;
defparam rnode_138to139_bb7_inc237_0_reg_139_fanout_adaptor.NUM_FANOUTS = 2;

acl_data_fifo rnode_138to139_bb7_inc237_0_reg_139_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_138to139_bb7_inc237_0_reg_139_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_138to139_bb7_inc237_0_stall_in_0_reg_139_NO_SHIFT_REG),
	.valid_out(rnode_138to139_bb7_inc237_0_valid_out_0_reg_139_NO_SHIFT_REG),
	.stall_out(rnode_138to139_bb7_inc237_0_stall_out_reg_139_NO_SHIFT_REG),
	.data_in(local_bb7_inc237),
	.data_out(rnode_138to139_bb7_inc237_0_reg_139_NO_SHIFT_REG)
);

defparam rnode_138to139_bb7_inc237_0_reg_139_fifo.DEPTH = 2;
defparam rnode_138to139_bb7_inc237_0_reg_139_fifo.DATA_WIDTH = 32;
defparam rnode_138to139_bb7_inc237_0_reg_139_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_138to139_bb7_inc237_0_reg_139_fifo.IMPL = "ll_reg";

assign rnode_138to139_bb7_inc237_0_reg_139_inputs_ready_NO_SHIFT_REG = local_bb7_inc237_valid_out;
assign local_bb7_inc237_stall_in = rnode_138to139_bb7_inc237_0_stall_out_reg_139_NO_SHIFT_REG;
assign rnode_138to139_bb7_inc237_0_NO_SHIFT_REG = rnode_138to139_bb7_inc237_0_reg_139_NO_SHIFT_REG_fa;
assign rnode_138to139_bb7_inc237_1_NO_SHIFT_REG = rnode_138to139_bb7_inc237_0_reg_139_NO_SHIFT_REG_fa;

// This section implements an unregistered operation.
// 
wire local_bb7_memcoalesce_digest_insertValue_06_stall_local;
wire [63:0] local_bb7_memcoalesce_digest_insertValue_06;

assign local_bb7_memcoalesce_digest_insertValue_06[31:0] = rnode_1to2_bb7_reduction_17_0_NO_SHIFT_REG;
assign local_bb7_memcoalesce_digest_insertValue_06[63:32] = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;

// Register node:
//  * latency = 137
//  * capacity = 137
 logic rnode_2to139_bb7_reduction_17_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to139_bb7_reduction_17_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to139_bb7_reduction_17_0_NO_SHIFT_REG;
 logic rnode_2to139_bb7_reduction_17_0_reg_139_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to139_bb7_reduction_17_0_reg_139_NO_SHIFT_REG;
 logic rnode_2to139_bb7_reduction_17_0_valid_out_reg_139_NO_SHIFT_REG;
 logic rnode_2to139_bb7_reduction_17_0_stall_in_reg_139_NO_SHIFT_REG;
 logic rnode_2to139_bb7_reduction_17_0_stall_out_reg_139_NO_SHIFT_REG;

acl_data_fifo rnode_2to139_bb7_reduction_17_0_reg_139_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to139_bb7_reduction_17_0_reg_139_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to139_bb7_reduction_17_0_stall_in_reg_139_NO_SHIFT_REG),
	.valid_out(rnode_2to139_bb7_reduction_17_0_valid_out_reg_139_NO_SHIFT_REG),
	.stall_out(rnode_2to139_bb7_reduction_17_0_stall_out_reg_139_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb7_reduction_17_1_NO_SHIFT_REG),
	.data_out(rnode_2to139_bb7_reduction_17_0_reg_139_NO_SHIFT_REG)
);

defparam rnode_2to139_bb7_reduction_17_0_reg_139_fifo.DEPTH = 138;
defparam rnode_2to139_bb7_reduction_17_0_reg_139_fifo.DATA_WIDTH = 32;
defparam rnode_2to139_bb7_reduction_17_0_reg_139_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to139_bb7_reduction_17_0_reg_139_fifo.IMPL = "ram";

assign rnode_2to139_bb7_reduction_17_0_reg_139_inputs_ready_NO_SHIFT_REG = rnode_1to2_bb7_reduction_17_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_bb7_reduction_17_0_stall_in_1_NO_SHIFT_REG = rnode_2to139_bb7_reduction_17_0_stall_out_reg_139_NO_SHIFT_REG;
assign rnode_2to139_bb7_reduction_17_0_NO_SHIFT_REG = rnode_2to139_bb7_reduction_17_0_reg_139_NO_SHIFT_REG;
assign rnode_2to139_bb7_reduction_17_0_stall_in_reg_139_NO_SHIFT_REG = rnode_2to139_bb7_reduction_17_0_stall_in_NO_SHIFT_REG;
assign rnode_2to139_bb7_reduction_17_0_valid_out_NO_SHIFT_REG = rnode_2to139_bb7_reduction_17_0_valid_out_reg_139_NO_SHIFT_REG;

// Register node:
//  * latency = 137
//  * capacity = 137
 logic rnode_2to139_bb7_reduction_13_0_valid_out_NO_SHIFT_REG;
 logic rnode_2to139_bb7_reduction_13_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_2to139_bb7_reduction_13_0_NO_SHIFT_REG;
 logic rnode_2to139_bb7_reduction_13_0_reg_139_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_2to139_bb7_reduction_13_0_reg_139_NO_SHIFT_REG;
 logic rnode_2to139_bb7_reduction_13_0_valid_out_reg_139_NO_SHIFT_REG;
 logic rnode_2to139_bb7_reduction_13_0_stall_in_reg_139_NO_SHIFT_REG;
 logic rnode_2to139_bb7_reduction_13_0_stall_out_reg_139_NO_SHIFT_REG;

acl_data_fifo rnode_2to139_bb7_reduction_13_0_reg_139_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_2to139_bb7_reduction_13_0_reg_139_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_2to139_bb7_reduction_13_0_stall_in_reg_139_NO_SHIFT_REG),
	.valid_out(rnode_2to139_bb7_reduction_13_0_valid_out_reg_139_NO_SHIFT_REG),
	.stall_out(rnode_2to139_bb7_reduction_13_0_stall_out_reg_139_NO_SHIFT_REG),
	.data_in(rnode_1to2_bb7_reduction_13_1_NO_SHIFT_REG),
	.data_out(rnode_2to139_bb7_reduction_13_0_reg_139_NO_SHIFT_REG)
);

defparam rnode_2to139_bb7_reduction_13_0_reg_139_fifo.DEPTH = 138;
defparam rnode_2to139_bb7_reduction_13_0_reg_139_fifo.DATA_WIDTH = 32;
defparam rnode_2to139_bb7_reduction_13_0_reg_139_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_2to139_bb7_reduction_13_0_reg_139_fifo.IMPL = "ram";

assign rnode_2to139_bb7_reduction_13_0_reg_139_inputs_ready_NO_SHIFT_REG = rnode_1to2_bb7_reduction_13_0_valid_out_1_NO_SHIFT_REG;
assign rnode_1to2_bb7_reduction_13_0_stall_in_1_NO_SHIFT_REG = rnode_2to139_bb7_reduction_13_0_stall_out_reg_139_NO_SHIFT_REG;
assign rnode_2to139_bb7_reduction_13_0_NO_SHIFT_REG = rnode_2to139_bb7_reduction_13_0_reg_139_NO_SHIFT_REG;
assign rnode_2to139_bb7_reduction_13_0_stall_in_reg_139_NO_SHIFT_REG = rnode_2to139_bb7_reduction_13_0_stall_in_NO_SHIFT_REG;
assign rnode_2to139_bb7_reduction_13_0_valid_out_NO_SHIFT_REG = rnode_2to139_bb7_reduction_13_0_valid_out_reg_139_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb7_cmp10_valid_out;
wire local_bb7_cmp10_stall_in;
wire local_bb7_cmp10_inputs_ready;
wire local_bb7_cmp10_stall_local;
wire local_bb7_cmp10;

assign local_bb7_cmp10_inputs_ready = rnode_138to139_bb7_inc237_0_valid_out_0_NO_SHIFT_REG;
assign local_bb7_cmp10 = ($signed(rnode_138to139_bb7_inc237_0_NO_SHIFT_REG) < $signed(input_wii__));
assign local_bb7_cmp10_valid_out = local_bb7_cmp10_inputs_ready;
assign local_bb7_cmp10_stall_local = local_bb7_cmp10_stall_in;
assign rnode_138to139_bb7_inc237_0_stall_in_0_NO_SHIFT_REG = (|local_bb7_cmp10_stall_local);

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_139to140_bb7_inc237_0_valid_out_NO_SHIFT_REG;
 logic rnode_139to140_bb7_inc237_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_139to140_bb7_inc237_0_NO_SHIFT_REG;
 logic rnode_139to140_bb7_inc237_0_reg_140_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_139to140_bb7_inc237_0_reg_140_NO_SHIFT_REG;
 logic rnode_139to140_bb7_inc237_0_valid_out_reg_140_NO_SHIFT_REG;
 logic rnode_139to140_bb7_inc237_0_stall_in_reg_140_NO_SHIFT_REG;
 logic rnode_139to140_bb7_inc237_0_stall_out_reg_140_NO_SHIFT_REG;

acl_data_fifo rnode_139to140_bb7_inc237_0_reg_140_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_139to140_bb7_inc237_0_reg_140_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_139to140_bb7_inc237_0_stall_in_reg_140_NO_SHIFT_REG),
	.valid_out(rnode_139to140_bb7_inc237_0_valid_out_reg_140_NO_SHIFT_REG),
	.stall_out(rnode_139to140_bb7_inc237_0_stall_out_reg_140_NO_SHIFT_REG),
	.data_in(rnode_138to139_bb7_inc237_1_NO_SHIFT_REG),
	.data_out(rnode_139to140_bb7_inc237_0_reg_140_NO_SHIFT_REG)
);

defparam rnode_139to140_bb7_inc237_0_reg_140_fifo.DEPTH = 2;
defparam rnode_139to140_bb7_inc237_0_reg_140_fifo.DATA_WIDTH = 32;
defparam rnode_139to140_bb7_inc237_0_reg_140_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_139to140_bb7_inc237_0_reg_140_fifo.IMPL = "ll_reg";

assign rnode_139to140_bb7_inc237_0_reg_140_inputs_ready_NO_SHIFT_REG = rnode_138to139_bb7_inc237_0_valid_out_1_NO_SHIFT_REG;
assign rnode_138to139_bb7_inc237_0_stall_in_1_NO_SHIFT_REG = rnode_139to140_bb7_inc237_0_stall_out_reg_140_NO_SHIFT_REG;
assign rnode_139to140_bb7_inc237_0_NO_SHIFT_REG = rnode_139to140_bb7_inc237_0_reg_140_NO_SHIFT_REG;
assign rnode_139to140_bb7_inc237_0_stall_in_reg_140_NO_SHIFT_REG = rnode_139to140_bb7_inc237_0_stall_in_NO_SHIFT_REG;
assign rnode_139to140_bb7_inc237_0_valid_out_NO_SHIFT_REG = rnode_139to140_bb7_inc237_0_valid_out_reg_140_NO_SHIFT_REG;

// This section implements an unregistered operation.
// 
wire local_bb7_memcoalesce_digest_insertValue_17_valid_out;
wire local_bb7_memcoalesce_digest_insertValue_17_stall_in;
wire local_bb7_memcoalesce_digest_insertValue_17_inputs_ready;
wire local_bb7_memcoalesce_digest_insertValue_17_stall_local;
wire [63:0] local_bb7_memcoalesce_digest_insertValue_17;

assign local_bb7_memcoalesce_digest_insertValue_17_inputs_ready = (rnode_1to2_bb7_reduction_17_0_valid_out_0_NO_SHIFT_REG & rnode_1to2_bb7_reduction_13_0_valid_out_0_NO_SHIFT_REG);
assign local_bb7_memcoalesce_digest_insertValue_17[31:0] = local_bb7_memcoalesce_digest_insertValue_06[31:0];
assign local_bb7_memcoalesce_digest_insertValue_17[63:32] = rnode_1to2_bb7_reduction_13_0_NO_SHIFT_REG;
assign local_bb7_memcoalesce_digest_insertValue_17_valid_out = local_bb7_memcoalesce_digest_insertValue_17_inputs_ready;
assign local_bb7_memcoalesce_digest_insertValue_17_stall_local = local_bb7_memcoalesce_digest_insertValue_17_stall_in;
assign rnode_1to2_bb7_reduction_17_0_stall_in_0_NO_SHIFT_REG = (local_bb7_memcoalesce_digest_insertValue_17_stall_local | ~(local_bb7_memcoalesce_digest_insertValue_17_inputs_ready));
assign rnode_1to2_bb7_reduction_13_0_stall_in_0_NO_SHIFT_REG = (local_bb7_memcoalesce_digest_insertValue_17_stall_local | ~(local_bb7_memcoalesce_digest_insertValue_17_inputs_ready));

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_139to140_bb7_reduction_17_0_valid_out_NO_SHIFT_REG;
 logic rnode_139to140_bb7_reduction_17_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_139to140_bb7_reduction_17_0_NO_SHIFT_REG;
 logic rnode_139to140_bb7_reduction_17_0_reg_140_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_139to140_bb7_reduction_17_0_reg_140_NO_SHIFT_REG;
 logic rnode_139to140_bb7_reduction_17_0_valid_out_reg_140_NO_SHIFT_REG;
 logic rnode_139to140_bb7_reduction_17_0_stall_in_reg_140_NO_SHIFT_REG;
 logic rnode_139to140_bb7_reduction_17_0_stall_out_reg_140_NO_SHIFT_REG;

acl_data_fifo rnode_139to140_bb7_reduction_17_0_reg_140_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_139to140_bb7_reduction_17_0_reg_140_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_139to140_bb7_reduction_17_0_stall_in_reg_140_NO_SHIFT_REG),
	.valid_out(rnode_139to140_bb7_reduction_17_0_valid_out_reg_140_NO_SHIFT_REG),
	.stall_out(rnode_139to140_bb7_reduction_17_0_stall_out_reg_140_NO_SHIFT_REG),
	.data_in(rnode_2to139_bb7_reduction_17_0_NO_SHIFT_REG),
	.data_out(rnode_139to140_bb7_reduction_17_0_reg_140_NO_SHIFT_REG)
);

defparam rnode_139to140_bb7_reduction_17_0_reg_140_fifo.DEPTH = 2;
defparam rnode_139to140_bb7_reduction_17_0_reg_140_fifo.DATA_WIDTH = 32;
defparam rnode_139to140_bb7_reduction_17_0_reg_140_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_139to140_bb7_reduction_17_0_reg_140_fifo.IMPL = "ll_reg";

assign rnode_139to140_bb7_reduction_17_0_reg_140_inputs_ready_NO_SHIFT_REG = rnode_2to139_bb7_reduction_17_0_valid_out_NO_SHIFT_REG;
assign rnode_2to139_bb7_reduction_17_0_stall_in_NO_SHIFT_REG = rnode_139to140_bb7_reduction_17_0_stall_out_reg_140_NO_SHIFT_REG;
assign rnode_139to140_bb7_reduction_17_0_NO_SHIFT_REG = rnode_139to140_bb7_reduction_17_0_reg_140_NO_SHIFT_REG;
assign rnode_139to140_bb7_reduction_17_0_stall_in_reg_140_NO_SHIFT_REG = rnode_139to140_bb7_reduction_17_0_stall_in_NO_SHIFT_REG;
assign rnode_139to140_bb7_reduction_17_0_valid_out_NO_SHIFT_REG = rnode_139to140_bb7_reduction_17_0_valid_out_reg_140_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_139to140_bb7_reduction_13_0_valid_out_NO_SHIFT_REG;
 logic rnode_139to140_bb7_reduction_13_0_stall_in_NO_SHIFT_REG;
 logic [31:0] rnode_139to140_bb7_reduction_13_0_NO_SHIFT_REG;
 logic rnode_139to140_bb7_reduction_13_0_reg_140_inputs_ready_NO_SHIFT_REG;
 logic [31:0] rnode_139to140_bb7_reduction_13_0_reg_140_NO_SHIFT_REG;
 logic rnode_139to140_bb7_reduction_13_0_valid_out_reg_140_NO_SHIFT_REG;
 logic rnode_139to140_bb7_reduction_13_0_stall_in_reg_140_NO_SHIFT_REG;
 logic rnode_139to140_bb7_reduction_13_0_stall_out_reg_140_NO_SHIFT_REG;

acl_data_fifo rnode_139to140_bb7_reduction_13_0_reg_140_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_139to140_bb7_reduction_13_0_reg_140_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_139to140_bb7_reduction_13_0_stall_in_reg_140_NO_SHIFT_REG),
	.valid_out(rnode_139to140_bb7_reduction_13_0_valid_out_reg_140_NO_SHIFT_REG),
	.stall_out(rnode_139to140_bb7_reduction_13_0_stall_out_reg_140_NO_SHIFT_REG),
	.data_in(rnode_2to139_bb7_reduction_13_0_NO_SHIFT_REG),
	.data_out(rnode_139to140_bb7_reduction_13_0_reg_140_NO_SHIFT_REG)
);

defparam rnode_139to140_bb7_reduction_13_0_reg_140_fifo.DEPTH = 2;
defparam rnode_139to140_bb7_reduction_13_0_reg_140_fifo.DATA_WIDTH = 32;
defparam rnode_139to140_bb7_reduction_13_0_reg_140_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_139to140_bb7_reduction_13_0_reg_140_fifo.IMPL = "ll_reg";

assign rnode_139to140_bb7_reduction_13_0_reg_140_inputs_ready_NO_SHIFT_REG = rnode_2to139_bb7_reduction_13_0_valid_out_NO_SHIFT_REG;
assign rnode_2to139_bb7_reduction_13_0_stall_in_NO_SHIFT_REG = rnode_139to140_bb7_reduction_13_0_stall_out_reg_140_NO_SHIFT_REG;
assign rnode_139to140_bb7_reduction_13_0_NO_SHIFT_REG = rnode_139to140_bb7_reduction_13_0_reg_140_NO_SHIFT_REG;
assign rnode_139to140_bb7_reduction_13_0_stall_in_reg_140_NO_SHIFT_REG = rnode_139to140_bb7_reduction_13_0_stall_in_NO_SHIFT_REG;
assign rnode_139to140_bb7_reduction_13_0_valid_out_NO_SHIFT_REG = rnode_139to140_bb7_reduction_13_0_valid_out_reg_140_NO_SHIFT_REG;

// Register node:
//  * latency = 1
//  * capacity = 1
 logic rnode_139to140_bb7_cmp10_0_valid_out_NO_SHIFT_REG;
 logic rnode_139to140_bb7_cmp10_0_stall_in_NO_SHIFT_REG;
 logic rnode_139to140_bb7_cmp10_0_NO_SHIFT_REG;
 logic rnode_139to140_bb7_cmp10_0_reg_140_inputs_ready_NO_SHIFT_REG;
 logic rnode_139to140_bb7_cmp10_0_reg_140_NO_SHIFT_REG;
 logic rnode_139to140_bb7_cmp10_0_valid_out_reg_140_NO_SHIFT_REG;
 logic rnode_139to140_bb7_cmp10_0_stall_in_reg_140_NO_SHIFT_REG;
 logic rnode_139to140_bb7_cmp10_0_stall_out_reg_140_NO_SHIFT_REG;

acl_data_fifo rnode_139to140_bb7_cmp10_0_reg_140_fifo (
	.clock(clock),
	.resetn(resetn),
	.valid_in(rnode_139to140_bb7_cmp10_0_reg_140_inputs_ready_NO_SHIFT_REG),
	.stall_in(rnode_139to140_bb7_cmp10_0_stall_in_reg_140_NO_SHIFT_REG),
	.valid_out(rnode_139to140_bb7_cmp10_0_valid_out_reg_140_NO_SHIFT_REG),
	.stall_out(rnode_139to140_bb7_cmp10_0_stall_out_reg_140_NO_SHIFT_REG),
	.data_in(local_bb7_cmp10),
	.data_out(rnode_139to140_bb7_cmp10_0_reg_140_NO_SHIFT_REG)
);

defparam rnode_139to140_bb7_cmp10_0_reg_140_fifo.DEPTH = 2;
defparam rnode_139to140_bb7_cmp10_0_reg_140_fifo.DATA_WIDTH = 1;
defparam rnode_139to140_bb7_cmp10_0_reg_140_fifo.ALLOW_FULL_WRITE = 0;
defparam rnode_139to140_bb7_cmp10_0_reg_140_fifo.IMPL = "ll_reg";

assign rnode_139to140_bb7_cmp10_0_reg_140_inputs_ready_NO_SHIFT_REG = local_bb7_cmp10_valid_out;
assign local_bb7_cmp10_stall_in = rnode_139to140_bb7_cmp10_0_stall_out_reg_140_NO_SHIFT_REG;
assign rnode_139to140_bb7_cmp10_0_NO_SHIFT_REG = rnode_139to140_bb7_cmp10_0_reg_140_NO_SHIFT_REG;
assign rnode_139to140_bb7_cmp10_0_stall_in_reg_140_NO_SHIFT_REG = rnode_139to140_bb7_cmp10_0_stall_in_NO_SHIFT_REG;
assign rnode_139to140_bb7_cmp10_0_valid_out_NO_SHIFT_REG = rnode_139to140_bb7_cmp10_0_valid_out_reg_140_NO_SHIFT_REG;

// This section implements a staging register.
// 
wire rstag_2to2_bb7_memcoalesce_digest_insertValue_17_valid_out;
wire rstag_2to2_bb7_memcoalesce_digest_insertValue_17_stall_in;
wire rstag_2to2_bb7_memcoalesce_digest_insertValue_17_inputs_ready;
wire rstag_2to2_bb7_memcoalesce_digest_insertValue_17_stall_local;
 reg rstag_2to2_bb7_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG;
wire rstag_2to2_bb7_memcoalesce_digest_insertValue_17_combined_valid;
 reg [63:0] rstag_2to2_bb7_memcoalesce_digest_insertValue_17_staging_reg_NO_SHIFT_REG;
wire [63:0] rstag_2to2_bb7_memcoalesce_digest_insertValue_17;

assign rstag_2to2_bb7_memcoalesce_digest_insertValue_17_inputs_ready = local_bb7_memcoalesce_digest_insertValue_17_valid_out;
assign rstag_2to2_bb7_memcoalesce_digest_insertValue_17 = (rstag_2to2_bb7_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG ? rstag_2to2_bb7_memcoalesce_digest_insertValue_17_staging_reg_NO_SHIFT_REG : local_bb7_memcoalesce_digest_insertValue_17);
assign rstag_2to2_bb7_memcoalesce_digest_insertValue_17_combined_valid = (rstag_2to2_bb7_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG | rstag_2to2_bb7_memcoalesce_digest_insertValue_17_inputs_ready);
assign rstag_2to2_bb7_memcoalesce_digest_insertValue_17_valid_out = rstag_2to2_bb7_memcoalesce_digest_insertValue_17_combined_valid;
assign rstag_2to2_bb7_memcoalesce_digest_insertValue_17_stall_local = rstag_2to2_bb7_memcoalesce_digest_insertValue_17_stall_in;
assign local_bb7_memcoalesce_digest_insertValue_17_stall_in = (|rstag_2to2_bb7_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_2to2_bb7_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_2to2_bb7_memcoalesce_digest_insertValue_17_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_2to2_bb7_memcoalesce_digest_insertValue_17_stall_local)
		begin
			if (~(rstag_2to2_bb7_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG))
			begin
				rstag_2to2_bb7_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG <= rstag_2to2_bb7_memcoalesce_digest_insertValue_17_inputs_ready;
			end
		end
		else
		begin
			rstag_2to2_bb7_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_2to2_bb7_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG))
		begin
			rstag_2to2_bb7_memcoalesce_digest_insertValue_17_staging_reg_NO_SHIFT_REG <= local_bb7_memcoalesce_digest_insertValue_17;
		end
	end
end


// This section implements a registered operation.
// 
wire local_bb7_st_memcoalesce_digest_insertValue_17_inputs_ready;
 reg local_bb7_st_memcoalesce_digest_insertValue_17_valid_out_NO_SHIFT_REG;
wire local_bb7_st_memcoalesce_digest_insertValue_17_stall_in;
wire local_bb7_st_memcoalesce_digest_insertValue_17_output_regs_ready;
wire local_bb7_st_memcoalesce_digest_insertValue_17_fu_stall_out;
wire local_bb7_st_memcoalesce_digest_insertValue_17_fu_valid_out;
wire [63:0] local_bb7_st_memcoalesce_digest_insertValue_17_lsu_wackout;
 reg local_bb7_st_memcoalesce_digest_insertValue_17_NO_SHIFT_REG;
wire local_bb7_st_memcoalesce_digest_insertValue_17_causedstall;

lsu_top lsu_local_bb7_st_memcoalesce_digest_insertValue_17 (
	.clock(clock),
	.clock2x(clock2x),
	.resetn(resetn),
	.flush(start),
	.stream_base_addr(),
	.stream_size(),
	.stream_reset(),
	.o_stall(local_bb7_st_memcoalesce_digest_insertValue_17_fu_stall_out),
	.i_valid(local_bb7_st_memcoalesce_digest_insertValue_17_inputs_ready),
	.i_address(input_wii_memcoalesce_digest_bitcast_08),
	.i_writedata(rstag_2to2_bb7_memcoalesce_digest_insertValue_17),
	.i_cmpdata(),
	.i_predicate(1'b0),
	.i_bitwiseor(64'h0),
	.i_byteenable(),
	.i_stall(~(local_bb7_st_memcoalesce_digest_insertValue_17_output_regs_ready)),
	.o_valid(local_bb7_st_memcoalesce_digest_insertValue_17_fu_valid_out),
	.o_readdata(),
	.o_input_fifo_depth(),
	.o_writeack(local_bb7_st_memcoalesce_digest_insertValue_17_lsu_wackout),
	.i_atomic_op(3'h0),
	.o_active(local_bb7_st_memcoalesce_digest_insertValue_17_active),
	.avm_address(avm_local_bb7_st_memcoalesce_digest_insertValue_17_address),
	.avm_read(avm_local_bb7_st_memcoalesce_digest_insertValue_17_read),
	.avm_readdata(avm_local_bb7_st_memcoalesce_digest_insertValue_17_readdata),
	.avm_write(avm_local_bb7_st_memcoalesce_digest_insertValue_17_write),
	.avm_writeack(avm_local_bb7_st_memcoalesce_digest_insertValue_17_writeack),
	.avm_burstcount(avm_local_bb7_st_memcoalesce_digest_insertValue_17_burstcount),
	.avm_writedata(avm_local_bb7_st_memcoalesce_digest_insertValue_17_writedata),
	.avm_byteenable(avm_local_bb7_st_memcoalesce_digest_insertValue_17_byteenable),
	.avm_waitrequest(avm_local_bb7_st_memcoalesce_digest_insertValue_17_waitrequest),
	.avm_readdatavalid(avm_local_bb7_st_memcoalesce_digest_insertValue_17_readdatavalid),
	.profile_bw(),
	.profile_bw_incr(),
	.profile_total_ivalid(),
	.profile_total_req(),
	.profile_i_stall_count(),
	.profile_o_stall_count(),
	.profile_avm_readwrite_count(),
	.profile_avm_burstcount_total(),
	.profile_avm_burstcount_total_incr(),
	.profile_req_cache_hit_count(),
	.profile_extra_unaligned_reqs(),
	.profile_avm_stall()
);

defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.AWIDTH = 30;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.WIDTH_BYTES = 8;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.MWIDTH_BYTES = 32;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.WRITEDATAWIDTH_BYTES = 32;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.ALIGNMENT_BYTES = 32;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.READ = 0;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.ATOMIC = 0;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.WIDTH = 64;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.MWIDTH = 256;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.ATOMIC_WIDTH = 3;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.BURSTCOUNT_WIDTH = 5;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.KERNEL_SIDE_MEM_LATENCY = 138;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.MEMORY_SIDE_MEM_LATENCY = 10;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.USE_WRITE_ACK = 1;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.ENABLE_BANKED_MEMORY = 0;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.ABITS_PER_LMEM_BANK = 0;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.NUMBER_BANKS = 1;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.LMEM_ADDR_PERMUTATION_STYLE = 0;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.USEINPUTFIFO = 0;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.USECACHING = 0;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.USEOUTPUTFIFO = 1;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.FORCE_NOP_SUPPORT = 0;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.HIGH_FMAX = 1;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.ADDRSPACE = 1;
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.STYLE = "BURST-COALESCED";
defparam lsu_local_bb7_st_memcoalesce_digest_insertValue_17.USE_BYTE_EN = 0;

assign local_bb7_st_memcoalesce_digest_insertValue_17_inputs_ready = (rnode_1to2_memcoalesce_digest_bitcast_08_0_valid_out_NO_SHIFT_REG & rstag_2to2_bb7_memcoalesce_digest_insertValue_17_valid_out);
assign local_bb7_st_memcoalesce_digest_insertValue_17_output_regs_ready = (&(~(local_bb7_st_memcoalesce_digest_insertValue_17_valid_out_NO_SHIFT_REG) | ~(local_bb7_st_memcoalesce_digest_insertValue_17_stall_in)));
assign rnode_1to2_memcoalesce_digest_bitcast_08_0_stall_in_NO_SHIFT_REG = (local_bb7_st_memcoalesce_digest_insertValue_17_fu_stall_out | ~(local_bb7_st_memcoalesce_digest_insertValue_17_inputs_ready));
assign rstag_2to2_bb7_memcoalesce_digest_insertValue_17_stall_in = (local_bb7_st_memcoalesce_digest_insertValue_17_fu_stall_out | ~(local_bb7_st_memcoalesce_digest_insertValue_17_inputs_ready));
assign local_bb7_st_memcoalesce_digest_insertValue_17_causedstall = (local_bb7_st_memcoalesce_digest_insertValue_17_inputs_ready && (local_bb7_st_memcoalesce_digest_insertValue_17_fu_stall_out && !(~(local_bb7_st_memcoalesce_digest_insertValue_17_output_regs_ready))));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		local_bb7_st_memcoalesce_digest_insertValue_17_NO_SHIFT_REG <= 'x;
		local_bb7_st_memcoalesce_digest_insertValue_17_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (local_bb7_st_memcoalesce_digest_insertValue_17_output_regs_ready)
		begin
			local_bb7_st_memcoalesce_digest_insertValue_17_NO_SHIFT_REG <= local_bb7_st_memcoalesce_digest_insertValue_17_lsu_wackout;
			local_bb7_st_memcoalesce_digest_insertValue_17_valid_out_NO_SHIFT_REG <= local_bb7_st_memcoalesce_digest_insertValue_17_fu_valid_out;
		end
		else
		begin
			if (~(local_bb7_st_memcoalesce_digest_insertValue_17_stall_in))
			begin
				local_bb7_st_memcoalesce_digest_insertValue_17_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


// This section implements a staging register.
// 
wire rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_valid_out;
wire rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_stall_in;
wire rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_inputs_ready;
wire rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_stall_local;
 reg rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG;
wire rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_combined_valid;
 reg rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_staging_reg_NO_SHIFT_REG;
wire rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17;

assign rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_inputs_ready = local_bb7_st_memcoalesce_digest_insertValue_17_valid_out_NO_SHIFT_REG;
assign rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17 = (rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG ? rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_staging_reg_NO_SHIFT_REG : local_bb7_st_memcoalesce_digest_insertValue_17_NO_SHIFT_REG);
assign rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_combined_valid = (rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG | rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_inputs_ready);
assign rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_valid_out = rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_combined_valid;
assign rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_stall_local = rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_stall_in;
assign local_bb7_st_memcoalesce_digest_insertValue_17_stall_in = (|rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG <= 1'b0;
		rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_staging_reg_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_stall_local)
		begin
			if (~(rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG))
			begin
				rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG <= rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_inputs_ready;
			end
		end
		else
		begin
			rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG <= 1'b0;
		end
		if (~(rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_staging_valid_NO_SHIFT_REG))
		begin
			rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_staging_reg_NO_SHIFT_REG <= local_bb7_st_memcoalesce_digest_insertValue_17_NO_SHIFT_REG;
		end
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
 reg branch_node_valid_out_0_NO_SHIFT_REG;
 reg branch_compare_result_NO_SHIFT_REG;
wire branch_var__output_regs_ready;
wire combined_branch_stall_in_signal;
 reg [31:0] lvb_bb7_reduction_17_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb7_reduction_13_0_reg_NO_SHIFT_REG;
 reg [31:0] lvb_bb7_inc237_0_reg_NO_SHIFT_REG;

assign branch_var__inputs_ready = (rnode_139to140_bb7_cmp10_0_valid_out_NO_SHIFT_REG & rnode_139to140_bb7_inc237_0_valid_out_NO_SHIFT_REG & rnode_139to140_bb7_reduction_17_0_valid_out_NO_SHIFT_REG & rnode_139to140_bb7_reduction_13_0_valid_out_NO_SHIFT_REG & rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_valid_out);
assign branch_var__output_regs_ready = (~(branch_node_valid_out_0_NO_SHIFT_REG) | (((branch_compare_result_NO_SHIFT_REG != 1'b1) & ~(stall_in_1)) | (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & ~(stall_in_0))));
assign rnode_139to140_bb7_cmp10_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_139to140_bb7_inc237_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_139to140_bb7_reduction_17_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rnode_139to140_bb7_reduction_13_0_stall_in_NO_SHIFT_REG = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign rstag_140to140_bb7_st_memcoalesce_digest_insertValue_17_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign lvb_bb7_reduction_17_0 = lvb_bb7_reduction_17_0_reg_NO_SHIFT_REG;
assign lvb_bb7_reduction_17_1 = lvb_bb7_reduction_17_0_reg_NO_SHIFT_REG;
assign lvb_bb7_reduction_13_0 = lvb_bb7_reduction_13_0_reg_NO_SHIFT_REG;
assign lvb_bb7_reduction_13_1 = lvb_bb7_reduction_13_0_reg_NO_SHIFT_REG;
assign lvb_bb7_inc237_0 = lvb_bb7_inc237_0_reg_NO_SHIFT_REG;
assign lvb_bb7_inc237_1 = lvb_bb7_inc237_0_reg_NO_SHIFT_REG;
assign valid_out_0 = (~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG);
assign valid_out_1 = ((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG);
assign combined_branch_stall_in_signal = ((((branch_compare_result_NO_SHIFT_REG != 1'b1) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_1) | ((~((branch_compare_result_NO_SHIFT_REG != 1'b1)) & branch_node_valid_out_0_NO_SHIFT_REG) & stall_in_0));

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
		lvb_bb7_reduction_17_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb7_reduction_13_0_reg_NO_SHIFT_REG <= 'x;
		lvb_bb7_inc237_0_reg_NO_SHIFT_REG <= 'x;
		branch_compare_result_NO_SHIFT_REG <= 'x;
	end
	else
	begin
		if (branch_var__output_regs_ready)
		begin
			branch_node_valid_out_0_NO_SHIFT_REG <= branch_var__inputs_ready;
			lvb_bb7_reduction_17_0_reg_NO_SHIFT_REG <= rnode_139to140_bb7_reduction_17_0_NO_SHIFT_REG;
			lvb_bb7_reduction_13_0_reg_NO_SHIFT_REG <= rnode_139to140_bb7_reduction_13_0_NO_SHIFT_REG;
			lvb_bb7_inc237_0_reg_NO_SHIFT_REG <= rnode_139to140_bb7_inc237_0_NO_SHIFT_REG;
			branch_compare_result_NO_SHIFT_REG <= rnode_139to140_bb7_cmp10_0_NO_SHIFT_REG;
		end
		else
		begin
			if (~(combined_branch_stall_in_signal))
			begin
				branch_node_valid_out_0_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end


endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

module sha256_basic_block_8
	(
		input 		clock,
		input 		resetn,
		input 		valid_in,
		output 		stall_out,
		output 		valid_out,
		input 		stall_in,
		input [31:0] 		workgroup_size,
		input 		start
	);


// Values used for debugging.  These are swept away by synthesis.
wire _entry;
wire _exit;
 reg [31:0] _num_entry_NO_SHIFT_REG;
 reg [31:0] _num_exit_NO_SHIFT_REG;
wire [31:0] _num_live;

assign _entry = ((&valid_in) & ~((|stall_out)));
assign _exit = ((&valid_out) & ~((|stall_in)));
assign _num_live = (_num_entry_NO_SHIFT_REG - _num_exit_NO_SHIFT_REG);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		_num_entry_NO_SHIFT_REG <= 32'h0;
		_num_exit_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		if (_entry)
		begin
			_num_entry_NO_SHIFT_REG <= (_num_entry_NO_SHIFT_REG + 2'h1);
		end
		if (_exit)
		begin
			_num_exit_NO_SHIFT_REG <= (_num_exit_NO_SHIFT_REG + 2'h1);
		end
	end
end



// This section defines the behaviour of the MERGE node
wire merge_node_stall_in;
 reg merge_node_valid_out_NO_SHIFT_REG;
wire merge_stalled_by_successors;
 reg merge_block_selector_NO_SHIFT_REG;
 reg merge_node_valid_in_staging_reg_NO_SHIFT_REG;
 reg is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
 reg invariant_valid_NO_SHIFT_REG;

assign merge_stalled_by_successors = (|(merge_node_stall_in & merge_node_valid_out_NO_SHIFT_REG));
assign stall_out = merge_node_valid_in_staging_reg_NO_SHIFT_REG;

always @(*)
begin
	if ((merge_node_valid_in_staging_reg_NO_SHIFT_REG | valid_in))
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b1;
	end
	else
	begin
		merge_block_selector_NO_SHIFT_REG = 1'b0;
		is_merge_data_to_local_regs_valid_NO_SHIFT_REG = 1'b0;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (((merge_block_selector_NO_SHIFT_REG != 1'b0) | merge_stalled_by_successors))
		begin
			if (~(merge_node_valid_in_staging_reg_NO_SHIFT_REG))
			begin
				merge_node_valid_in_staging_reg_NO_SHIFT_REG <= valid_in;
			end
		end
		else
		begin
			merge_node_valid_in_staging_reg_NO_SHIFT_REG <= 1'b0;
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		if (~(merge_stalled_by_successors))
		begin
			merge_node_valid_out_NO_SHIFT_REG <= is_merge_data_to_local_regs_valid_NO_SHIFT_REG;
		end
		else
		begin
			if (~(merge_node_stall_in))
			begin
				merge_node_valid_out_NO_SHIFT_REG <= 1'b0;
			end
		end
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		invariant_valid_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		invariant_valid_NO_SHIFT_REG <= (~(start) & (invariant_valid_NO_SHIFT_REG | is_merge_data_to_local_regs_valid_NO_SHIFT_REG));
	end
end


// This section describes the behaviour of the BRANCH node.
wire branch_var__inputs_ready;
wire branch_var__output_regs_ready;

assign branch_var__inputs_ready = merge_node_valid_out_NO_SHIFT_REG;
assign branch_var__output_regs_ready = ~(stall_in);
assign merge_node_stall_in = (~(branch_var__output_regs_ready) | ~(branch_var__inputs_ready));
assign valid_out = branch_var__inputs_ready;

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

module sha256_function
	(
		input 		clock,
		input 		resetn,
		output 		stall_out,
		input 		valid_in,
		output 		valid_out,
		input 		stall_in,
		input [255:0] 		avm_local_bb0_ld__readdata,
		input 		avm_local_bb0_ld__readdatavalid,
		input 		avm_local_bb0_ld__waitrequest,
		output [29:0] 		avm_local_bb0_ld__address,
		output 		avm_local_bb0_ld__read,
		output 		avm_local_bb0_ld__write,
		input 		avm_local_bb0_ld__writeack,
		output [255:0] 		avm_local_bb0_ld__writedata,
		output [31:0] 		avm_local_bb0_ld__byteenable,
		output [4:0] 		avm_local_bb0_ld__burstcount,
		input [255:0] 		avm_local_bb0_st__readdata,
		input 		avm_local_bb0_st__readdatavalid,
		input 		avm_local_bb0_st__waitrequest,
		output [29:0] 		avm_local_bb0_st__address,
		output 		avm_local_bb0_st__read,
		output 		avm_local_bb0_st__write,
		input 		avm_local_bb0_st__writeack,
		output [255:0] 		avm_local_bb0_st__writedata,
		output [31:0] 		avm_local_bb0_st__byteenable,
		output [4:0] 		avm_local_bb0_st__burstcount,
		input [511:0] 		avm_local_bb2_st__readdata,
		input 		avm_local_bb2_st__readdatavalid,
		input 		avm_local_bb2_st__waitrequest,
		output [31:0] 		avm_local_bb2_st__address,
		output 		avm_local_bb2_st__read,
		output 		avm_local_bb2_st__write,
		input 		avm_local_bb2_st__writeack,
		output [511:0] 		avm_local_bb2_st__writedata,
		output [63:0] 		avm_local_bb2_st__byteenable,
		output 		avm_local_bb2_st__burstcount,
		input [255:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_readdata,
		input 		avm_local_bb4_ld_memcoalesce_key_load_0_readdatavalid,
		input 		avm_local_bb4_ld_memcoalesce_key_load_0_waitrequest,
		output [29:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_address,
		output 		avm_local_bb4_ld_memcoalesce_key_load_0_read,
		output 		avm_local_bb4_ld_memcoalesce_key_load_0_write,
		input 		avm_local_bb4_ld_memcoalesce_key_load_0_writeack,
		output [255:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_writedata,
		output [31:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_byteenable,
		output [4:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_burstcount,
		input [511:0] 		avm_local_bb4_st_reduction_2_readdata,
		input 		avm_local_bb4_st_reduction_2_readdatavalid,
		input 		avm_local_bb4_st_reduction_2_waitrequest,
		output [31:0] 		avm_local_bb4_st_reduction_2_address,
		output 		avm_local_bb4_st_reduction_2_read,
		output 		avm_local_bb4_st_reduction_2_write,
		input 		avm_local_bb4_st_reduction_2_writeack,
		output [511:0] 		avm_local_bb4_st_reduction_2_writedata,
		output [63:0] 		avm_local_bb4_st_reduction_2_byteenable,
		output 		avm_local_bb4_st_reduction_2_burstcount,
		input [255:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_readdata,
		input 		avm_local_bb5_ld_memcoalesce_key_load_02_readdatavalid,
		input 		avm_local_bb5_ld_memcoalesce_key_load_02_waitrequest,
		output [29:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_address,
		output 		avm_local_bb5_ld_memcoalesce_key_load_02_read,
		output 		avm_local_bb5_ld_memcoalesce_key_load_02_write,
		input 		avm_local_bb5_ld_memcoalesce_key_load_02_writeack,
		output [255:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_writedata,
		output [31:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_byteenable,
		output [4:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_burstcount,
		input [511:0] 		avm_local_bb5_st_memcoalesce_null_insertValue_0_readdata,
		input 		avm_local_bb5_st_memcoalesce_null_insertValue_0_readdatavalid,
		input 		avm_local_bb5_st_memcoalesce_null_insertValue_0_waitrequest,
		output [31:0] 		avm_local_bb5_st_memcoalesce_null_insertValue_0_address,
		output 		avm_local_bb5_st_memcoalesce_null_insertValue_0_read,
		output 		avm_local_bb5_st_memcoalesce_null_insertValue_0_write,
		input 		avm_local_bb5_st_memcoalesce_null_insertValue_0_writeack,
		output [511:0] 		avm_local_bb5_st_memcoalesce_null_insertValue_0_writedata,
		output [63:0] 		avm_local_bb5_st_memcoalesce_null_insertValue_0_byteenable,
		output 		avm_local_bb5_st_memcoalesce_null_insertValue_0_burstcount,
		input [511:0] 		avm_local_bb5_st__113_readdata,
		input 		avm_local_bb5_st__113_readdatavalid,
		input 		avm_local_bb5_st__113_waitrequest,
		output [31:0] 		avm_local_bb5_st__113_address,
		output 		avm_local_bb5_st__113_read,
		output 		avm_local_bb5_st__113_write,
		input 		avm_local_bb5_st__113_writeack,
		output [511:0] 		avm_local_bb5_st__113_writedata,
		output [63:0] 		avm_local_bb5_st__113_byteenable,
		output 		avm_local_bb5_st__113_burstcount,
		input [511:0] 		avm_local_bb6_ld__readdata,
		input 		avm_local_bb6_ld__readdatavalid,
		input 		avm_local_bb6_ld__waitrequest,
		output [31:0] 		avm_local_bb6_ld__address,
		output 		avm_local_bb6_ld__read,
		output 		avm_local_bb6_ld__write,
		input 		avm_local_bb6_ld__writeack,
		output [511:0] 		avm_local_bb6_ld__writedata,
		output [63:0] 		avm_local_bb6_ld__byteenable,
		output 		avm_local_bb6_ld__burstcount,
		input [511:0] 		avm_local_bb6_ld__u41_readdata,
		input 		avm_local_bb6_ld__u41_readdatavalid,
		input 		avm_local_bb6_ld__u41_waitrequest,
		output [31:0] 		avm_local_bb6_ld__u41_address,
		output 		avm_local_bb6_ld__u41_read,
		output 		avm_local_bb6_ld__u41_write,
		input 		avm_local_bb6_ld__u41_writeack,
		output [511:0] 		avm_local_bb6_ld__u41_writedata,
		output [63:0] 		avm_local_bb6_ld__u41_byteenable,
		output 		avm_local_bb6_ld__u41_burstcount,
		input [511:0] 		avm_local_bb6_ld__u42_readdata,
		input 		avm_local_bb6_ld__u42_readdatavalid,
		input 		avm_local_bb6_ld__u42_waitrequest,
		output [31:0] 		avm_local_bb6_ld__u42_address,
		output 		avm_local_bb6_ld__u42_read,
		output 		avm_local_bb6_ld__u42_write,
		input 		avm_local_bb6_ld__u42_writeack,
		output [511:0] 		avm_local_bb6_ld__u42_writedata,
		output [63:0] 		avm_local_bb6_ld__u42_byteenable,
		output 		avm_local_bb6_ld__u42_burstcount,
		input [511:0] 		avm_local_bb6_ld__u43_readdata,
		input 		avm_local_bb6_ld__u43_readdatavalid,
		input 		avm_local_bb6_ld__u43_waitrequest,
		output [31:0] 		avm_local_bb6_ld__u43_address,
		output 		avm_local_bb6_ld__u43_read,
		output 		avm_local_bb6_ld__u43_write,
		input 		avm_local_bb6_ld__u43_writeack,
		output [511:0] 		avm_local_bb6_ld__u43_writedata,
		output [63:0] 		avm_local_bb6_ld__u43_byteenable,
		output 		avm_local_bb6_ld__u43_burstcount,
		input [511:0] 		avm_local_bb6_ld__pre65_readdata,
		input 		avm_local_bb6_ld__pre65_readdatavalid,
		input 		avm_local_bb6_ld__pre65_waitrequest,
		output [31:0] 		avm_local_bb6_ld__pre65_address,
		output 		avm_local_bb6_ld__pre65_read,
		output 		avm_local_bb6_ld__pre65_write,
		input 		avm_local_bb6_ld__pre65_writeack,
		output [511:0] 		avm_local_bb6_ld__pre65_writedata,
		output [63:0] 		avm_local_bb6_ld__pre65_byteenable,
		output 		avm_local_bb6_ld__pre65_burstcount,
		input [511:0] 		avm_local_bb6_st_reduction_9_readdata,
		input 		avm_local_bb6_st_reduction_9_readdatavalid,
		input 		avm_local_bb6_st_reduction_9_waitrequest,
		output [31:0] 		avm_local_bb6_st_reduction_9_address,
		output 		avm_local_bb6_st_reduction_9_read,
		output 		avm_local_bb6_st_reduction_9_write,
		input 		avm_local_bb6_st_reduction_9_writeack,
		output [511:0] 		avm_local_bb6_st_reduction_9_writedata,
		output [63:0] 		avm_local_bb6_st_reduction_9_byteenable,
		output 		avm_local_bb6_st_reduction_9_burstcount,
		input [255:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_readdata,
		input 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_readdatavalid,
		input 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_waitrequest,
		output [29:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_address,
		output 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_read,
		output 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_write,
		input 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_writeack,
		output [255:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_writedata,
		output [31:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_byteenable,
		output [4:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_burstcount,
		input 		clock2x,
		input 		start,
		input [63:0] 		input_data,
		input [63:0] 		input_digest,
		input [63:0] 		input_key,
		output reg 		has_a_write_pending,
		output reg 		has_a_lsu_active
	);


wire [31:0] workgroup_size;
wire [31:0] cur_cycle;
wire bb_0_stall_out;
wire bb_0_valid_out;
wire [31:0] bb_0_lvb_bb0_ld_;
wire [31:0] bb_0_lvb_bb0_mul158;
wire [31:0] bb_0_lvb_bb0__;
wire bb_0_lvb_bb0_cmp166_xor;
wire [63:0] bb_0_lvb_bb0_memcoalesce_digest_bitcast_08;
wire [511:0] bb_0_lvb_bb0_memcoalesce_null_insertValue_0;
wire bb_0_local_bb0_ld__active;
wire bb_0_local_bb0_st__active;
wire bb_1_stall_out_0;
wire bb_1_stall_out_1;
wire bb_1_valid_out;
wire [31:0] bb_1_lvb_var_;
wire [31:0] bb_1_lvb_var__u0;
wire [31:0] bb_1_lvb_i9_052;
wire bb_2_stall_out_0;
wire bb_2_stall_out_1;
wire bb_2_valid_out_0;
wire [255:0] bb_2_lvb_bb2_c0_exit_c0_exi6_0;
wire [31:0] bb_2_lvb_bb2_c0_exe6_0;
wire bb_2_valid_out_1;
wire [255:0] bb_2_lvb_bb2_c0_exit_c0_exi6_1;
wire [31:0] bb_2_lvb_bb2_c0_exe6_1;
wire bb_2_feedback_stall_out_33;
wire bb_2_feedback_stall_out_0;
wire bb_2_feedback_stall_out_1;
wire bb_2_acl_pipelined_valid;
wire bb_2_acl_pipelined_exiting_valid;
wire bb_2_acl_pipelined_exiting_stall;
wire bb_2_feedback_valid_out_1;
wire bb_2_feedback_data_out_1;
wire bb_2_feedback_valid_out_33;
wire [63:0] bb_2_feedback_data_out_33;
wire bb_2_feedback_stall_out_34;
wire bb_2_feedback_stall_out_35;
wire bb_2_feedback_stall_out_36;
wire bb_2_feedback_valid_out_34;
wire [31:0] bb_2_feedback_data_out_34;
wire bb_2_feedback_valid_out_35;
wire [31:0] bb_2_feedback_data_out_35;
wire bb_2_feedback_valid_out_36;
wire [31:0] bb_2_feedback_data_out_36;
wire [7:0] bb_2_local_bb2_st__input_fifo_depth;
wire bb_2_local_bb2_st__active;
wire bb_3_stall_out;
wire bb_3_valid_out;
wire [31:0] bb_3_lvb_c0_exe6;
wire [31:0] bb_3_lvb_bb3_c0_exe5;
wire [31:0] bb_3_lvb_bb3_c0_exe4;
wire [31:0] bb_3_lvb_bb3_c0_exe138;
wire [31:0] bb_3_lvb_bb3_c0_exe239;
wire bb_3_lvb_bb3_c0_exe340;
wire [31:0] bb_3_lvb_bb3_c0_exe441;
wire bb_3_lvb_bb3_c0_exe542;
wire bb_3_lvb_bb3_c0_exe643;
wire bb_3_lvb_bb3_c0_exe7;
wire bb_4_stall_out_0;
wire bb_4_stall_out_1;
wire bb_4_valid_out_0;
wire [511:0] bb_4_lvb_bb4_c0_exit60_c0_exi14_0;
wire [31:0] bb_4_lvb_bb4_c0_exe565_0;
wire bb_4_lvb_bb4_c0_exe767_0;
wire [31:0] bb_4_lvb_bb4_c0_exe9_0;
wire [31:0] bb_4_lvb_bb4_c0_exe10_0;
wire bb_4_lvb_bb4_c0_exe13_0;
wire bb_4_valid_out_1;
wire [511:0] bb_4_lvb_bb4_c0_exit60_c0_exi14_1;
wire [31:0] bb_4_lvb_bb4_c0_exe565_1;
wire bb_4_lvb_bb4_c0_exe767_1;
wire [31:0] bb_4_lvb_bb4_c0_exe9_1;
wire [31:0] bb_4_lvb_bb4_c0_exe10_1;
wire bb_4_lvb_bb4_c0_exe13_1;
wire bb_4_feedback_stall_out_22;
wire bb_4_feedback_stall_out_29;
wire bb_4_feedback_stall_out_30;
wire bb_4_feedback_stall_out_2;
wire bb_4_feedback_stall_out_3;
wire bb_4_acl_pipelined_valid;
wire bb_4_acl_pipelined_exiting_valid;
wire bb_4_acl_pipelined_exiting_stall;
wire bb_4_feedback_valid_out_3;
wire bb_4_feedback_data_out_3;
wire bb_4_feedback_valid_out_22;
wire [63:0] bb_4_feedback_data_out_22;
wire bb_4_feedback_stall_out_26;
wire bb_4_feedback_stall_out_32;
wire bb_4_feedback_stall_out_23;
wire bb_4_feedback_stall_out_24;
wire bb_4_feedback_stall_out_25;
wire bb_4_feedback_stall_out_27;
wire bb_4_feedback_stall_out_28;
wire bb_4_feedback_stall_out_31;
wire bb_4_feedback_valid_out_30;
wire bb_4_feedback_data_out_30;
wire bb_4_feedback_valid_out_29;
wire [31:0] bb_4_feedback_data_out_29;
wire bb_4_feedback_valid_out_26;
wire [31:0] bb_4_feedback_data_out_26;
wire bb_4_feedback_valid_out_32;
wire bb_4_feedback_data_out_32;
wire bb_4_feedback_valid_out_23;
wire [31:0] bb_4_feedback_data_out_23;
wire bb_4_feedback_valid_out_24;
wire [31:0] bb_4_feedback_data_out_24;
wire bb_4_feedback_valid_out_25;
wire [31:0] bb_4_feedback_data_out_25;
wire bb_4_feedback_valid_out_27;
wire [31:0] bb_4_feedback_data_out_27;
wire bb_4_feedback_valid_out_28;
wire bb_4_feedback_data_out_28;
wire bb_4_feedback_valid_out_31;
wire bb_4_feedback_data_out_31;
wire bb_4_local_bb4_ld_memcoalesce_key_load_0_active;
wire [7:0] bb_4_local_bb4_st_reduction_2_input_fifo_depth;
wire bb_4_local_bb4_st_reduction_2_active;
wire bb_5_stall_out;
wire bb_5_valid_out;
wire [31:0] bb_5_lvb_c0_exe9;
wire [31:0] bb_5_lvb_c0_exe10;
wire [31:0] bb_5_lvb_bb5_c0_exe895;
wire bb_5_local_bb5_ld_memcoalesce_key_load_02_active;
wire [7:0] bb_5_local_bb5_st_memcoalesce_null_insertValue_0_input_fifo_depth;
wire bb_5_local_bb5_st_memcoalesce_null_insertValue_0_active;
wire [7:0] bb_5_local_bb5_st__113_input_fifo_depth;
wire bb_5_local_bb5_st__113_active;
wire bb_6_stall_out_0;
wire bb_6_stall_out_1;
wire bb_6_valid_out_0;
wire [31:0] bb_6_lvb_bb6_G_144_pop13_acl_pop_i32_528734635_0;
wire [31:0] bb_6_lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_0;
wire [31:0] bb_6_lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_0;
wire [31:0] bb_6_lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_0;
wire [31:0] bb_6_lvb_bb6_B_149_pop8_B_149_0;
wire [31:0] bb_6_lvb_bb6_A_150_pop7_A_150_0;
wire [31:0] bb_6_lvb_bb6_add215_0;
wire [31:0] bb_6_lvb_bb6_add216_0;
wire [31:0] bb_6_lvb_bb6__pop19__0;
wire [31:0] bb_6_lvb_bb6__pop20__0;
wire [31:0] bb_6_lvb_bb6_select10817_pop21_select10817_0;
wire bb_6_valid_out_1;
wire [31:0] bb_6_lvb_bb6_G_144_pop13_acl_pop_i32_528734635_1;
wire [31:0] bb_6_lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_1;
wire [31:0] bb_6_lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_1;
wire [31:0] bb_6_lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_1;
wire [31:0] bb_6_lvb_bb6_B_149_pop8_B_149_1;
wire [31:0] bb_6_lvb_bb6_A_150_pop7_A_150_1;
wire [31:0] bb_6_lvb_bb6_add215_1;
wire [31:0] bb_6_lvb_bb6_add216_1;
wire [31:0] bb_6_lvb_bb6__pop19__1;
wire [31:0] bb_6_lvb_bb6__pop20__1;
wire [31:0] bb_6_lvb_bb6_select10817_pop21_select10817_1;
wire bb_6_feedback_stall_out_6;
wire bb_6_feedback_stall_out_15;
wire bb_6_feedback_stall_out_16;
wire bb_6_feedback_stall_out_17;
wire bb_6_feedback_stall_out_18;
wire bb_6_feedback_stall_out_4;
wire bb_6_feedback_stall_out_5;
wire bb_6_acl_pipelined_valid;
wire bb_6_acl_pipelined_exiting_valid;
wire bb_6_acl_pipelined_exiting_stall;
wire bb_6_feedback_stall_out_13;
wire bb_6_feedback_stall_out_12;
wire bb_6_feedback_stall_out_11;
wire bb_6_feedback_stall_out_14;
wire bb_6_feedback_stall_out_9;
wire bb_6_feedback_stall_out_8;
wire bb_6_feedback_stall_out_7;
wire bb_6_feedback_stall_out_10;
wire bb_6_feedback_stall_out_19;
wire bb_6_feedback_stall_out_20;
wire bb_6_feedback_stall_out_21;
wire bb_6_feedback_valid_out_6;
wire [63:0] bb_6_feedback_data_out_6;
wire [7:0] bb_6_local_bb6_ld__input_fifo_depth;
wire bb_6_local_bb6_ld__active;
wire [7:0] bb_6_local_bb6_ld__u41_input_fifo_depth;
wire bb_6_local_bb6_ld__u41_active;
wire [7:0] bb_6_local_bb6_ld__u42_input_fifo_depth;
wire bb_6_local_bb6_ld__u42_active;
wire [7:0] bb_6_local_bb6_ld__u43_input_fifo_depth;
wire bb_6_local_bb6_ld__u43_active;
wire bb_6_feedback_valid_out_5;
wire bb_6_feedback_data_out_5;
wire [7:0] bb_6_local_bb6_ld__pre65_input_fifo_depth;
wire bb_6_local_bb6_ld__pre65_active;
wire bb_6_feedback_valid_out_12;
wire [31:0] bb_6_feedback_data_out_12;
wire bb_6_feedback_valid_out_13;
wire [31:0] bb_6_feedback_data_out_13;
wire bb_6_feedback_valid_out_14;
wire [31:0] bb_6_feedback_data_out_14;
wire bb_6_feedback_valid_out_10;
wire [31:0] bb_6_feedback_data_out_10;
wire bb_6_feedback_valid_out_9;
wire [31:0] bb_6_feedback_data_out_9;
wire bb_6_feedback_valid_out_8;
wire [31:0] bb_6_feedback_data_out_8;
wire bb_6_feedback_valid_out_19;
wire [31:0] bb_6_feedback_data_out_19;
wire bb_6_feedback_valid_out_20;
wire [31:0] bb_6_feedback_data_out_20;
wire bb_6_feedback_valid_out_21;
wire [31:0] bb_6_feedback_data_out_21;
wire [7:0] bb_6_local_bb6_st_reduction_9_input_fifo_depth;
wire bb_6_local_bb6_st_reduction_9_active;
wire bb_6_feedback_valid_out_15;
wire bb_6_feedback_data_out_15;
wire bb_6_feedback_valid_out_16;
wire bb_6_feedback_data_out_16;
wire bb_6_feedback_valid_out_17;
wire bb_6_feedback_data_out_17;
wire bb_6_feedback_valid_out_18;
wire bb_6_feedback_data_out_18;
wire bb_6_feedback_valid_out_7;
wire [31:0] bb_6_feedback_data_out_7;
wire bb_6_feedback_valid_out_11;
wire [31:0] bb_6_feedback_data_out_11;
wire bb_7_stall_out;
wire bb_7_valid_out_0;
wire [31:0] bb_7_lvb_bb7_reduction_17_0;
wire [31:0] bb_7_lvb_bb7_reduction_13_0;
wire [31:0] bb_7_lvb_bb7_inc237_0;
wire bb_7_valid_out_1;
wire [31:0] bb_7_lvb_bb7_reduction_17_1;
wire [31:0] bb_7_lvb_bb7_reduction_13_1;
wire [31:0] bb_7_lvb_bb7_inc237_1;
wire bb_7_local_bb7_st_memcoalesce_digest_insertValue_17_active;
wire bb_8_stall_out;
wire bb_8_valid_out;
wire feedback_stall_1;
wire feedback_valid_1;
wire feedback_data_1;
wire feedback_stall_33;
wire feedback_valid_33;
wire [63:0] feedback_data_33;
wire feedback_stall_34;
wire feedback_valid_34;
wire [31:0] feedback_data_34;
wire feedback_stall_35;
wire feedback_valid_35;
wire [31:0] feedback_data_35;
wire feedback_stall_36;
wire feedback_valid_36;
wire [31:0] feedback_data_36;
wire feedback_stall_3;
wire feedback_valid_3;
wire feedback_data_3;
wire feedback_stall_30;
wire feedback_valid_30;
wire feedback_data_30;
wire feedback_stall_29;
wire feedback_valid_29;
wire [31:0] feedback_data_29;
wire feedback_stall_22;
wire feedback_valid_22;
wire [63:0] feedback_data_22;
wire feedback_stall_26;
wire feedback_valid_26;
wire [31:0] feedback_data_26;
wire feedback_stall_32;
wire feedback_valid_32;
wire feedback_data_32;
wire feedback_stall_23;
wire feedback_valid_23;
wire [31:0] feedback_data_23;
wire feedback_stall_24;
wire feedback_valid_24;
wire [31:0] feedback_data_24;
wire feedback_stall_25;
wire feedback_valid_25;
wire [31:0] feedback_data_25;
wire feedback_stall_27;
wire feedback_valid_27;
wire [31:0] feedback_data_27;
wire feedback_stall_28;
wire feedback_valid_28;
wire feedback_data_28;
wire feedback_stall_31;
wire feedback_valid_31;
wire feedback_data_31;
wire feedback_stall_5;
wire feedback_valid_5;
wire feedback_data_5;
wire feedback_stall_14;
wire feedback_valid_14;
wire [31:0] feedback_data_14;
wire feedback_stall_13;
wire feedback_valid_13;
wire [31:0] feedback_data_13;
wire feedback_stall_12;
wire feedback_valid_12;
wire [31:0] feedback_data_12;
wire feedback_stall_10;
wire feedback_valid_10;
wire [31:0] feedback_data_10;
wire feedback_stall_9;
wire feedback_valid_9;
wire [31:0] feedback_data_9;
wire feedback_stall_8;
wire feedback_valid_8;
wire [31:0] feedback_data_8;
wire feedback_stall_6;
wire feedback_valid_6;
wire [63:0] feedback_data_6;
wire feedback_stall_18;
wire feedback_valid_18;
wire feedback_data_18;
wire feedback_stall_17;
wire feedback_valid_17;
wire feedback_data_17;
wire feedback_stall_16;
wire feedback_valid_16;
wire feedback_data_16;
wire feedback_stall_15;
wire feedback_valid_15;
wire feedback_data_15;
wire feedback_stall_11;
wire feedback_valid_11;
wire [31:0] feedback_data_11;
wire feedback_stall_7;
wire feedback_valid_7;
wire [31:0] feedback_data_7;
wire feedback_stall_19;
wire feedback_valid_19;
wire [31:0] feedback_data_19;
wire feedback_stall_20;
wire feedback_valid_20;
wire [31:0] feedback_data_20;
wire feedback_stall_21;
wire feedback_valid_21;
wire [31:0] feedback_data_21;
wire loop_limiter_1_stall_out;
wire loop_limiter_1_valid_out;
wire loop_limiter_2_stall_out;
wire loop_limiter_2_valid_out;
wire loop_limiter_3_stall_out;
wire loop_limiter_3_valid_out;
wire [6:0] writes_pending;
wire [14:0] lsus_active;

acl_loop_limiter loop_limiter_1 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_5_valid_out),
	.i_stall(bb_6_stall_out_1),
	.i_valid_exit(bb_6_acl_pipelined_exiting_valid),
	.i_stall_exit(bb_6_acl_pipelined_exiting_stall),
	.o_valid(loop_limiter_1_valid_out),
	.o_stall(loop_limiter_1_stall_out)
);

defparam loop_limiter_1.ENTRY_WIDTH = 1;
defparam loop_limiter_1.EXIT_WIDTH = 1;
defparam loop_limiter_1.THRESHOLD = 63;

acl_loop_limiter loop_limiter_2 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_3_valid_out),
	.i_stall(bb_4_stall_out_1),
	.i_valid_exit(bb_4_acl_pipelined_exiting_valid),
	.i_stall_exit(bb_4_acl_pipelined_exiting_stall),
	.o_valid(loop_limiter_2_valid_out),
	.o_stall(loop_limiter_2_stall_out)
);

defparam loop_limiter_2.ENTRY_WIDTH = 1;
defparam loop_limiter_2.EXIT_WIDTH = 1;
defparam loop_limiter_2.THRESHOLD = 1;

acl_loop_limiter loop_limiter_3 (
	.clock(clock),
	.resetn(resetn),
	.i_valid(bb_1_valid_out),
	.i_stall(bb_2_stall_out_1),
	.i_valid_exit(bb_2_acl_pipelined_exiting_valid),
	.i_stall_exit(bb_2_acl_pipelined_exiting_stall),
	.o_valid(loop_limiter_3_valid_out),
	.o_stall(loop_limiter_3_stall_out)
);

defparam loop_limiter_3.ENTRY_WIDTH = 1;
defparam loop_limiter_3.EXIT_WIDTH = 1;
defparam loop_limiter_3.THRESHOLD = 1;

sha256_basic_block_0 sha256_basic_block_0 (
	.clock(clock),
	.resetn(resetn),
	.start(start),
	.input_data(input_data),
	.input_digest(input_digest),
	.valid_in(valid_in),
	.stall_out(bb_0_stall_out),
	.valid_out(bb_0_valid_out),
	.stall_in(bb_1_stall_out_1),
	.lvb_bb0_ld_(bb_0_lvb_bb0_ld_),
	.lvb_bb0_mul158(bb_0_lvb_bb0_mul158),
	.lvb_bb0__(bb_0_lvb_bb0__),
	.lvb_bb0_cmp166_xor(bb_0_lvb_bb0_cmp166_xor),
	.lvb_bb0_memcoalesce_digest_bitcast_08(bb_0_lvb_bb0_memcoalesce_digest_bitcast_08),
	.lvb_bb0_memcoalesce_null_insertValue_0(bb_0_lvb_bb0_memcoalesce_null_insertValue_0),
	.workgroup_size(workgroup_size),
	.avm_local_bb0_ld__readdata(avm_local_bb0_ld__readdata),
	.avm_local_bb0_ld__readdatavalid(avm_local_bb0_ld__readdatavalid),
	.avm_local_bb0_ld__waitrequest(avm_local_bb0_ld__waitrequest),
	.avm_local_bb0_ld__address(avm_local_bb0_ld__address),
	.avm_local_bb0_ld__read(avm_local_bb0_ld__read),
	.avm_local_bb0_ld__write(avm_local_bb0_ld__write),
	.avm_local_bb0_ld__writeack(avm_local_bb0_ld__writeack),
	.avm_local_bb0_ld__writedata(avm_local_bb0_ld__writedata),
	.avm_local_bb0_ld__byteenable(avm_local_bb0_ld__byteenable),
	.avm_local_bb0_ld__burstcount(avm_local_bb0_ld__burstcount),
	.local_bb0_ld__active(bb_0_local_bb0_ld__active),
	.clock2x(clock2x),
	.avm_local_bb0_st__readdata(avm_local_bb0_st__readdata),
	.avm_local_bb0_st__readdatavalid(avm_local_bb0_st__readdatavalid),
	.avm_local_bb0_st__waitrequest(avm_local_bb0_st__waitrequest),
	.avm_local_bb0_st__address(avm_local_bb0_st__address),
	.avm_local_bb0_st__read(avm_local_bb0_st__read),
	.avm_local_bb0_st__write(avm_local_bb0_st__write),
	.avm_local_bb0_st__writeack(avm_local_bb0_st__writeack),
	.avm_local_bb0_st__writedata(avm_local_bb0_st__writedata),
	.avm_local_bb0_st__byteenable(avm_local_bb0_st__byteenable),
	.avm_local_bb0_st__burstcount(avm_local_bb0_st__burstcount),
	.local_bb0_st__active(bb_0_local_bb0_st__active)
);


sha256_basic_block_1 sha256_basic_block_1 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_ld_(bb_0_lvb_bb0_ld_),
	.input_wii_mul158(bb_0_lvb_bb0_mul158),
	.input_wii__(bb_0_lvb_bb0__),
	.input_wii_cmp166_xor(bb_0_lvb_bb0_cmp166_xor),
	.input_wii_memcoalesce_digest_bitcast_08(bb_0_lvb_bb0_memcoalesce_digest_bitcast_08),
	.input_wii_memcoalesce_null_insertValue_0(bb_0_lvb_bb0_memcoalesce_null_insertValue_0),
	.valid_in_0(bb_7_valid_out_0),
	.stall_out_0(bb_1_stall_out_0),
	.input_var__0(bb_7_lvb_bb7_reduction_13_0),
	.input_var__u0_0(bb_7_lvb_bb7_reduction_17_0),
	.input_i9_052_0(bb_7_lvb_bb7_inc237_0),
	.valid_in_1(bb_0_valid_out),
	.stall_out_1(bb_1_stall_out_1),
	.input_var__1(32'hBB67AE85),
	.input_var__u0_1(32'h6A09E667),
	.input_i9_052_1(32'h0),
	.valid_out(bb_1_valid_out),
	.stall_in(loop_limiter_3_stall_out),
	.lvb_var_(bb_1_lvb_var_),
	.lvb_var__u0(bb_1_lvb_var__u0),
	.lvb_i9_052(bb_1_lvb_i9_052),
	.workgroup_size(workgroup_size),
	.start(start)
);


sha256_basic_block_2 sha256_basic_block_2 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_ld_(bb_0_lvb_bb0_ld_),
	.input_wii_mul158(bb_0_lvb_bb0_mul158),
	.input_wii__(bb_0_lvb_bb0__),
	.input_wii_cmp166_xor(bb_0_lvb_bb0_cmp166_xor),
	.input_wii_memcoalesce_digest_bitcast_08(bb_0_lvb_bb0_memcoalesce_digest_bitcast_08),
	.input_wii_memcoalesce_null_insertValue_0(bb_0_lvb_bb0_memcoalesce_null_insertValue_0),
	.valid_in_0(bb_2_acl_pipelined_valid),
	.stall_out_0(bb_2_stall_out_0),
	.input_forked26_0(1'b0),
	.input_var__0('x),
	.input_var__u1_0('x),
	.input_i9_05227_0('x),
	.valid_in_1(loop_limiter_3_valid_out),
	.stall_out_1(bb_2_stall_out_1),
	.input_forked26_1(1'b1),
	.input_var__1(bb_1_lvb_var_),
	.input_var__u1_1(bb_1_lvb_var__u0),
	.input_i9_05227_1(bb_1_lvb_i9_052),
	.valid_out_0(bb_2_valid_out_0),
	.stall_in_0(bb_3_stall_out),
	.lvb_bb2_c0_exit_c0_exi6_0(bb_2_lvb_bb2_c0_exit_c0_exi6_0),
	.lvb_bb2_c0_exe6_0(bb_2_lvb_bb2_c0_exe6_0),
	.valid_out_1(bb_2_valid_out_1),
	.stall_in_1(1'b0),
	.lvb_bb2_c0_exit_c0_exi6_1(bb_2_lvb_bb2_c0_exit_c0_exi6_1),
	.lvb_bb2_c0_exe6_1(bb_2_lvb_bb2_c0_exe6_1),
	.workgroup_size(workgroup_size),
	.start(start),
	.feedback_valid_in_33(feedback_valid_33),
	.feedback_stall_out_33(feedback_stall_33),
	.feedback_data_in_33(feedback_data_33),
	.feedback_stall_out_0(bb_2_feedback_stall_out_0),
	.feedback_valid_in_1(feedback_valid_1),
	.feedback_stall_out_1(feedback_stall_1),
	.feedback_data_in_1(feedback_data_1),
	.acl_pipelined_valid(bb_2_acl_pipelined_valid),
	.acl_pipelined_stall(bb_2_stall_out_0),
	.acl_pipelined_exiting_valid(bb_2_acl_pipelined_exiting_valid),
	.acl_pipelined_exiting_stall(bb_2_acl_pipelined_exiting_stall),
	.feedback_valid_out_1(feedback_valid_1),
	.feedback_stall_in_1(feedback_stall_1),
	.feedback_data_out_1(feedback_data_1),
	.feedback_valid_out_33(feedback_valid_33),
	.feedback_stall_in_33(feedback_stall_33),
	.feedback_data_out_33(feedback_data_33),
	.feedback_valid_in_34(feedback_valid_34),
	.feedback_stall_out_34(feedback_stall_34),
	.feedback_data_in_34(feedback_data_34),
	.feedback_valid_in_35(feedback_valid_35),
	.feedback_stall_out_35(feedback_stall_35),
	.feedback_data_in_35(feedback_data_35),
	.feedback_valid_in_36(feedback_valid_36),
	.feedback_stall_out_36(feedback_stall_36),
	.feedback_data_in_36(feedback_data_36),
	.feedback_valid_out_34(feedback_valid_34),
	.feedback_stall_in_34(feedback_stall_34),
	.feedback_data_out_34(feedback_data_34),
	.feedback_valid_out_35(feedback_valid_35),
	.feedback_stall_in_35(feedback_stall_35),
	.feedback_data_out_35(feedback_data_35),
	.feedback_valid_out_36(feedback_valid_36),
	.feedback_stall_in_36(feedback_stall_36),
	.feedback_data_out_36(feedback_data_36),
	.avm_local_bb2_st__readdata(avm_local_bb2_st__readdata),
	.avm_local_bb2_st__readdatavalid(avm_local_bb2_st__readdatavalid),
	.avm_local_bb2_st__waitrequest(avm_local_bb2_st__waitrequest),
	.avm_local_bb2_st__address(avm_local_bb2_st__address),
	.avm_local_bb2_st__read(avm_local_bb2_st__read),
	.avm_local_bb2_st__write(avm_local_bb2_st__write),
	.avm_local_bb2_st__writeack(avm_local_bb2_st__writeack),
	.avm_local_bb2_st__writedata(avm_local_bb2_st__writedata),
	.avm_local_bb2_st__byteenable(avm_local_bb2_st__byteenable),
	.avm_local_bb2_st__burstcount(avm_local_bb2_st__burstcount),
	.local_bb2_st__input_fifo_depth(bb_2_local_bb2_st__input_fifo_depth),
	.local_bb2_st__active(bb_2_local_bb2_st__active),
	.clock2x(clock2x)
);


sha256_basic_block_3 sha256_basic_block_3 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_ld_(bb_0_lvb_bb0_ld_),
	.input_wii_mul158(bb_0_lvb_bb0_mul158),
	.input_wii__(bb_0_lvb_bb0__),
	.input_wii_cmp166_xor(bb_0_lvb_bb0_cmp166_xor),
	.input_wii_memcoalesce_digest_bitcast_08(bb_0_lvb_bb0_memcoalesce_digest_bitcast_08),
	.input_wii_memcoalesce_null_insertValue_0(bb_0_lvb_bb0_memcoalesce_null_insertValue_0),
	.valid_in(bb_2_valid_out_0),
	.stall_out(bb_3_stall_out),
	.input_c0_exit_c0_exi6(bb_2_lvb_bb2_c0_exit_c0_exi6_0),
	.input_c0_exe6(bb_2_lvb_bb2_c0_exe6_0),
	.valid_out(bb_3_valid_out),
	.stall_in(loop_limiter_2_stall_out),
	.lvb_c0_exe6(bb_3_lvb_c0_exe6),
	.lvb_bb3_c0_exe5(bb_3_lvb_bb3_c0_exe5),
	.lvb_bb3_c0_exe4(bb_3_lvb_bb3_c0_exe4),
	.lvb_bb3_c0_exe138(bb_3_lvb_bb3_c0_exe138),
	.lvb_bb3_c0_exe239(bb_3_lvb_bb3_c0_exe239),
	.lvb_bb3_c0_exe340(bb_3_lvb_bb3_c0_exe340),
	.lvb_bb3_c0_exe441(bb_3_lvb_bb3_c0_exe441),
	.lvb_bb3_c0_exe542(bb_3_lvb_bb3_c0_exe542),
	.lvb_bb3_c0_exe643(bb_3_lvb_bb3_c0_exe643),
	.lvb_bb3_c0_exe7(bb_3_lvb_bb3_c0_exe7),
	.workgroup_size(workgroup_size),
	.start(start)
);


sha256_basic_block_4 sha256_basic_block_4 (
	.clock(clock),
	.resetn(resetn),
	.input_key(input_key),
	.input_wii_ld_(bb_0_lvb_bb0_ld_),
	.input_wii_mul158(bb_0_lvb_bb0_mul158),
	.input_wii__(bb_0_lvb_bb0__),
	.input_wii_cmp166_xor(bb_0_lvb_bb0_cmp166_xor),
	.input_wii_memcoalesce_digest_bitcast_08(bb_0_lvb_bb0_memcoalesce_digest_bitcast_08),
	.input_wii_memcoalesce_null_insertValue_0(bb_0_lvb_bb0_memcoalesce_null_insertValue_0),
	.valid_in_0(bb_4_acl_pipelined_valid),
	.stall_out_0(bb_4_stall_out_0),
	.input_forked18_0(1'b0),
	.input_var__0('x),
	.input_var__u2_0('x),
	.input_i9_05219_0('x),
	.input_mul20_0('x),
	.input__7221_0('x),
	.input_cmp3022_0('x),
	.input_div3223_0('x),
	.input_cmp354124_0('x),
	.input_var__u3_0('x),
	.input__phi_decision136_xor25_0('x),
	.valid_in_1(loop_limiter_2_valid_out),
	.stall_out_1(bb_4_stall_out_1),
	.input_forked18_1(1'b1),
	.input_var__1(bb_3_lvb_bb3_c0_exe4),
	.input_var__u2_1(bb_3_lvb_bb3_c0_exe5),
	.input_i9_05219_1(bb_3_lvb_c0_exe6),
	.input_mul20_1(bb_3_lvb_bb3_c0_exe138),
	.input__7221_1(bb_3_lvb_bb3_c0_exe239),
	.input_cmp3022_1(bb_3_lvb_bb3_c0_exe340),
	.input_div3223_1(bb_3_lvb_bb3_c0_exe441),
	.input_cmp354124_1(bb_3_lvb_bb3_c0_exe542),
	.input_var__u3_1(bb_3_lvb_bb3_c0_exe643),
	.input__phi_decision136_xor25_1(bb_3_lvb_bb3_c0_exe7),
	.valid_out_0(bb_4_valid_out_0),
	.stall_in_0(1'b0),
	.lvb_bb4_c0_exit60_c0_exi14_0(bb_4_lvb_bb4_c0_exit60_c0_exi14_0),
	.lvb_bb4_c0_exe565_0(bb_4_lvb_bb4_c0_exe565_0),
	.lvb_bb4_c0_exe767_0(bb_4_lvb_bb4_c0_exe767_0),
	.lvb_bb4_c0_exe9_0(bb_4_lvb_bb4_c0_exe9_0),
	.lvb_bb4_c0_exe10_0(bb_4_lvb_bb4_c0_exe10_0),
	.lvb_bb4_c0_exe13_0(bb_4_lvb_bb4_c0_exe13_0),
	.valid_out_1(bb_4_valid_out_1),
	.stall_in_1(bb_5_stall_out),
	.lvb_bb4_c0_exit60_c0_exi14_1(bb_4_lvb_bb4_c0_exit60_c0_exi14_1),
	.lvb_bb4_c0_exe565_1(bb_4_lvb_bb4_c0_exe565_1),
	.lvb_bb4_c0_exe767_1(bb_4_lvb_bb4_c0_exe767_1),
	.lvb_bb4_c0_exe9_1(bb_4_lvb_bb4_c0_exe9_1),
	.lvb_bb4_c0_exe10_1(bb_4_lvb_bb4_c0_exe10_1),
	.lvb_bb4_c0_exe13_1(bb_4_lvb_bb4_c0_exe13_1),
	.workgroup_size(workgroup_size),
	.start(start),
	.feedback_valid_in_22(feedback_valid_22),
	.feedback_stall_out_22(feedback_stall_22),
	.feedback_data_in_22(feedback_data_22),
	.feedback_valid_in_29(feedback_valid_29),
	.feedback_stall_out_29(feedback_stall_29),
	.feedback_data_in_29(feedback_data_29),
	.feedback_valid_in_30(feedback_valid_30),
	.feedback_stall_out_30(feedback_stall_30),
	.feedback_data_in_30(feedback_data_30),
	.feedback_stall_out_2(bb_4_feedback_stall_out_2),
	.feedback_valid_in_3(feedback_valid_3),
	.feedback_stall_out_3(feedback_stall_3),
	.feedback_data_in_3(feedback_data_3),
	.acl_pipelined_valid(bb_4_acl_pipelined_valid),
	.acl_pipelined_stall(bb_4_stall_out_0),
	.acl_pipelined_exiting_valid(bb_4_acl_pipelined_exiting_valid),
	.acl_pipelined_exiting_stall(bb_4_acl_pipelined_exiting_stall),
	.feedback_valid_out_3(feedback_valid_3),
	.feedback_stall_in_3(feedback_stall_3),
	.feedback_data_out_3(feedback_data_3),
	.feedback_valid_out_22(feedback_valid_22),
	.feedback_stall_in_22(feedback_stall_22),
	.feedback_data_out_22(feedback_data_22),
	.feedback_valid_in_26(feedback_valid_26),
	.feedback_stall_out_26(feedback_stall_26),
	.feedback_data_in_26(feedback_data_26),
	.feedback_valid_in_32(feedback_valid_32),
	.feedback_stall_out_32(feedback_stall_32),
	.feedback_data_in_32(feedback_data_32),
	.feedback_valid_in_23(feedback_valid_23),
	.feedback_stall_out_23(feedback_stall_23),
	.feedback_data_in_23(feedback_data_23),
	.feedback_valid_in_24(feedback_valid_24),
	.feedback_stall_out_24(feedback_stall_24),
	.feedback_data_in_24(feedback_data_24),
	.feedback_valid_in_25(feedback_valid_25),
	.feedback_stall_out_25(feedback_stall_25),
	.feedback_data_in_25(feedback_data_25),
	.feedback_valid_in_27(feedback_valid_27),
	.feedback_stall_out_27(feedback_stall_27),
	.feedback_data_in_27(feedback_data_27),
	.feedback_valid_in_28(feedback_valid_28),
	.feedback_stall_out_28(feedback_stall_28),
	.feedback_data_in_28(feedback_data_28),
	.feedback_valid_in_31(feedback_valid_31),
	.feedback_stall_out_31(feedback_stall_31),
	.feedback_data_in_31(feedback_data_31),
	.feedback_valid_out_30(feedback_valid_30),
	.feedback_stall_in_30(feedback_stall_30),
	.feedback_data_out_30(feedback_data_30),
	.feedback_valid_out_29(feedback_valid_29),
	.feedback_stall_in_29(feedback_stall_29),
	.feedback_data_out_29(feedback_data_29),
	.feedback_valid_out_26(feedback_valid_26),
	.feedback_stall_in_26(feedback_stall_26),
	.feedback_data_out_26(feedback_data_26),
	.feedback_valid_out_32(feedback_valid_32),
	.feedback_stall_in_32(feedback_stall_32),
	.feedback_data_out_32(feedback_data_32),
	.feedback_valid_out_23(feedback_valid_23),
	.feedback_stall_in_23(feedback_stall_23),
	.feedback_data_out_23(feedback_data_23),
	.feedback_valid_out_24(feedback_valid_24),
	.feedback_stall_in_24(feedback_stall_24),
	.feedback_data_out_24(feedback_data_24),
	.feedback_valid_out_25(feedback_valid_25),
	.feedback_stall_in_25(feedback_stall_25),
	.feedback_data_out_25(feedback_data_25),
	.feedback_valid_out_27(feedback_valid_27),
	.feedback_stall_in_27(feedback_stall_27),
	.feedback_data_out_27(feedback_data_27),
	.feedback_valid_out_28(feedback_valid_28),
	.feedback_stall_in_28(feedback_stall_28),
	.feedback_data_out_28(feedback_data_28),
	.feedback_valid_out_31(feedback_valid_31),
	.feedback_stall_in_31(feedback_stall_31),
	.feedback_data_out_31(feedback_data_31),
	.avm_local_bb4_ld_memcoalesce_key_load_0_readdata(avm_local_bb4_ld_memcoalesce_key_load_0_readdata),
	.avm_local_bb4_ld_memcoalesce_key_load_0_readdatavalid(avm_local_bb4_ld_memcoalesce_key_load_0_readdatavalid),
	.avm_local_bb4_ld_memcoalesce_key_load_0_waitrequest(avm_local_bb4_ld_memcoalesce_key_load_0_waitrequest),
	.avm_local_bb4_ld_memcoalesce_key_load_0_address(avm_local_bb4_ld_memcoalesce_key_load_0_address),
	.avm_local_bb4_ld_memcoalesce_key_load_0_read(avm_local_bb4_ld_memcoalesce_key_load_0_read),
	.avm_local_bb4_ld_memcoalesce_key_load_0_write(avm_local_bb4_ld_memcoalesce_key_load_0_write),
	.avm_local_bb4_ld_memcoalesce_key_load_0_writeack(avm_local_bb4_ld_memcoalesce_key_load_0_writeack),
	.avm_local_bb4_ld_memcoalesce_key_load_0_writedata(avm_local_bb4_ld_memcoalesce_key_load_0_writedata),
	.avm_local_bb4_ld_memcoalesce_key_load_0_byteenable(avm_local_bb4_ld_memcoalesce_key_load_0_byteenable),
	.avm_local_bb4_ld_memcoalesce_key_load_0_burstcount(avm_local_bb4_ld_memcoalesce_key_load_0_burstcount),
	.local_bb4_ld_memcoalesce_key_load_0_active(bb_4_local_bb4_ld_memcoalesce_key_load_0_active),
	.clock2x(clock2x),
	.avm_local_bb4_st_reduction_2_readdata(avm_local_bb4_st_reduction_2_readdata),
	.avm_local_bb4_st_reduction_2_readdatavalid(avm_local_bb4_st_reduction_2_readdatavalid),
	.avm_local_bb4_st_reduction_2_waitrequest(avm_local_bb4_st_reduction_2_waitrequest),
	.avm_local_bb4_st_reduction_2_address(avm_local_bb4_st_reduction_2_address),
	.avm_local_bb4_st_reduction_2_read(avm_local_bb4_st_reduction_2_read),
	.avm_local_bb4_st_reduction_2_write(avm_local_bb4_st_reduction_2_write),
	.avm_local_bb4_st_reduction_2_writeack(avm_local_bb4_st_reduction_2_writeack),
	.avm_local_bb4_st_reduction_2_writedata(avm_local_bb4_st_reduction_2_writedata),
	.avm_local_bb4_st_reduction_2_byteenable(avm_local_bb4_st_reduction_2_byteenable),
	.avm_local_bb4_st_reduction_2_burstcount(avm_local_bb4_st_reduction_2_burstcount),
	.local_bb4_st_reduction_2_input_fifo_depth(bb_4_local_bb4_st_reduction_2_input_fifo_depth),
	.local_bb4_st_reduction_2_active(bb_4_local_bb4_st_reduction_2_active)
);


sha256_basic_block_5 sha256_basic_block_5 (
	.clock(clock),
	.resetn(resetn),
	.input_key(input_key),
	.input_wii_ld_(bb_0_lvb_bb0_ld_),
	.input_wii_mul158(bb_0_lvb_bb0_mul158),
	.input_wii__(bb_0_lvb_bb0__),
	.input_wii_cmp166_xor(bb_0_lvb_bb0_cmp166_xor),
	.input_wii_memcoalesce_digest_bitcast_08(bb_0_lvb_bb0_memcoalesce_digest_bitcast_08),
	.input_wii_memcoalesce_null_insertValue_0(bb_0_lvb_bb0_memcoalesce_null_insertValue_0),
	.valid_in(bb_4_valid_out_1),
	.stall_out(bb_5_stall_out),
	.input_c0_exit60_c0_exi14(bb_4_lvb_bb4_c0_exit60_c0_exi14_1),
	.input_c0_exe565(bb_4_lvb_bb4_c0_exe565_1),
	.input_c0_exe767(bb_4_lvb_bb4_c0_exe767_1),
	.input_c0_exe9(bb_4_lvb_bb4_c0_exe9_1),
	.input_c0_exe10(bb_4_lvb_bb4_c0_exe10_1),
	.input_c0_exe13(bb_4_lvb_bb4_c0_exe13_1),
	.valid_out(bb_5_valid_out),
	.stall_in(loop_limiter_1_stall_out),
	.lvb_c0_exe9(bb_5_lvb_c0_exe9),
	.lvb_c0_exe10(bb_5_lvb_c0_exe10),
	.lvb_bb5_c0_exe895(bb_5_lvb_bb5_c0_exe895),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb5_ld_memcoalesce_key_load_02_readdata(avm_local_bb5_ld_memcoalesce_key_load_02_readdata),
	.avm_local_bb5_ld_memcoalesce_key_load_02_readdatavalid(avm_local_bb5_ld_memcoalesce_key_load_02_readdatavalid),
	.avm_local_bb5_ld_memcoalesce_key_load_02_waitrequest(avm_local_bb5_ld_memcoalesce_key_load_02_waitrequest),
	.avm_local_bb5_ld_memcoalesce_key_load_02_address(avm_local_bb5_ld_memcoalesce_key_load_02_address),
	.avm_local_bb5_ld_memcoalesce_key_load_02_read(avm_local_bb5_ld_memcoalesce_key_load_02_read),
	.avm_local_bb5_ld_memcoalesce_key_load_02_write(avm_local_bb5_ld_memcoalesce_key_load_02_write),
	.avm_local_bb5_ld_memcoalesce_key_load_02_writeack(avm_local_bb5_ld_memcoalesce_key_load_02_writeack),
	.avm_local_bb5_ld_memcoalesce_key_load_02_writedata(avm_local_bb5_ld_memcoalesce_key_load_02_writedata),
	.avm_local_bb5_ld_memcoalesce_key_load_02_byteenable(avm_local_bb5_ld_memcoalesce_key_load_02_byteenable),
	.avm_local_bb5_ld_memcoalesce_key_load_02_burstcount(avm_local_bb5_ld_memcoalesce_key_load_02_burstcount),
	.local_bb5_ld_memcoalesce_key_load_02_active(bb_5_local_bb5_ld_memcoalesce_key_load_02_active),
	.clock2x(clock2x),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_readdata(avm_local_bb5_st_memcoalesce_null_insertValue_0_readdata),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_readdatavalid(avm_local_bb5_st_memcoalesce_null_insertValue_0_readdatavalid),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_waitrequest(avm_local_bb5_st_memcoalesce_null_insertValue_0_waitrequest),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_address(avm_local_bb5_st_memcoalesce_null_insertValue_0_address),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_read(avm_local_bb5_st_memcoalesce_null_insertValue_0_read),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_write(avm_local_bb5_st_memcoalesce_null_insertValue_0_write),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_writeack(avm_local_bb5_st_memcoalesce_null_insertValue_0_writeack),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_writedata(avm_local_bb5_st_memcoalesce_null_insertValue_0_writedata),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_byteenable(avm_local_bb5_st_memcoalesce_null_insertValue_0_byteenable),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_burstcount(avm_local_bb5_st_memcoalesce_null_insertValue_0_burstcount),
	.local_bb5_st_memcoalesce_null_insertValue_0_input_fifo_depth(bb_5_local_bb5_st_memcoalesce_null_insertValue_0_input_fifo_depth),
	.local_bb5_st_memcoalesce_null_insertValue_0_active(bb_5_local_bb5_st_memcoalesce_null_insertValue_0_active),
	.avm_local_bb5_st__113_readdata(avm_local_bb5_st__113_readdata),
	.avm_local_bb5_st__113_readdatavalid(avm_local_bb5_st__113_readdatavalid),
	.avm_local_bb5_st__113_waitrequest(avm_local_bb5_st__113_waitrequest),
	.avm_local_bb5_st__113_address(avm_local_bb5_st__113_address),
	.avm_local_bb5_st__113_read(avm_local_bb5_st__113_read),
	.avm_local_bb5_st__113_write(avm_local_bb5_st__113_write),
	.avm_local_bb5_st__113_writeack(avm_local_bb5_st__113_writeack),
	.avm_local_bb5_st__113_writedata(avm_local_bb5_st__113_writedata),
	.avm_local_bb5_st__113_byteenable(avm_local_bb5_st__113_byteenable),
	.avm_local_bb5_st__113_burstcount(avm_local_bb5_st__113_burstcount),
	.local_bb5_st__113_input_fifo_depth(bb_5_local_bb5_st__113_input_fifo_depth),
	.local_bb5_st__113_active(bb_5_local_bb5_st__113_active)
);


sha256_basic_block_6 sha256_basic_block_6 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_ld_(bb_0_lvb_bb0_ld_),
	.input_wii_mul158(bb_0_lvb_bb0_mul158),
	.input_wii__(bb_0_lvb_bb0__),
	.input_wii_cmp166_xor(bb_0_lvb_bb0_cmp166_xor),
	.input_wii_memcoalesce_digest_bitcast_08(bb_0_lvb_bb0_memcoalesce_digest_bitcast_08),
	.input_wii_memcoalesce_null_insertValue_0(bb_0_lvb_bb0_memcoalesce_null_insertValue_0),
	.valid_in_0(bb_6_acl_pipelined_valid),
	.stall_out_0(bb_6_stall_out_0),
	.input_A_150_0('x),
	.input_B_149_0('x),
	.input_forked_0(1'b0),
	.input_var__0('x),
	.input_var__u36_0('x),
	.input_select10817_0('x),
	.valid_in_1(loop_limiter_1_valid_out),
	.stall_out_1(bb_6_stall_out_1),
	.input_A_150_1(bb_5_lvb_c0_exe10),
	.input_B_149_1(bb_5_lvb_c0_exe9),
	.input_forked_1(1'b1),
	.input_var__1(bb_5_lvb_c0_exe9),
	.input_var__u36_1(bb_5_lvb_c0_exe10),
	.input_select10817_1(bb_5_lvb_bb5_c0_exe895),
	.valid_out_0(bb_6_valid_out_0),
	.stall_in_0(bb_7_stall_out),
	.lvb_bb6_G_144_pop13_acl_pop_i32_528734635_0(bb_6_lvb_bb6_G_144_pop13_acl_pop_i32_528734635_0),
	.lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_0(bb_6_lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_0),
	.lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_0(bb_6_lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_0),
	.lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_0(bb_6_lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_0),
	.lvb_bb6_B_149_pop8_B_149_0(bb_6_lvb_bb6_B_149_pop8_B_149_0),
	.lvb_bb6_A_150_pop7_A_150_0(bb_6_lvb_bb6_A_150_pop7_A_150_0),
	.lvb_bb6_add215_0(bb_6_lvb_bb6_add215_0),
	.lvb_bb6_add216_0(bb_6_lvb_bb6_add216_0),
	.lvb_bb6__pop19__0(bb_6_lvb_bb6__pop19__0),
	.lvb_bb6__pop20__0(bb_6_lvb_bb6__pop20__0),
	.lvb_bb6_select10817_pop21_select10817_0(bb_6_lvb_bb6_select10817_pop21_select10817_0),
	.valid_out_1(bb_6_valid_out_1),
	.stall_in_1(1'b0),
	.lvb_bb6_G_144_pop13_acl_pop_i32_528734635_1(bb_6_lvb_bb6_G_144_pop13_acl_pop_i32_528734635_1),
	.lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_1(bb_6_lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_1),
	.lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_1(bb_6_lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_1),
	.lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_1(bb_6_lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_1),
	.lvb_bb6_B_149_pop8_B_149_1(bb_6_lvb_bb6_B_149_pop8_B_149_1),
	.lvb_bb6_A_150_pop7_A_150_1(bb_6_lvb_bb6_A_150_pop7_A_150_1),
	.lvb_bb6_add215_1(bb_6_lvb_bb6_add215_1),
	.lvb_bb6_add216_1(bb_6_lvb_bb6_add216_1),
	.lvb_bb6__pop19__1(bb_6_lvb_bb6__pop19__1),
	.lvb_bb6__pop20__1(bb_6_lvb_bb6__pop20__1),
	.lvb_bb6_select10817_pop21_select10817_1(bb_6_lvb_bb6_select10817_pop21_select10817_1),
	.workgroup_size(workgroup_size),
	.start(start),
	.feedback_valid_in_6(feedback_valid_6),
	.feedback_stall_out_6(feedback_stall_6),
	.feedback_data_in_6(feedback_data_6),
	.feedback_valid_in_15(feedback_valid_15),
	.feedback_stall_out_15(feedback_stall_15),
	.feedback_data_in_15(feedback_data_15),
	.feedback_valid_in_16(feedback_valid_16),
	.feedback_stall_out_16(feedback_stall_16),
	.feedback_data_in_16(feedback_data_16),
	.feedback_valid_in_17(feedback_valid_17),
	.feedback_stall_out_17(feedback_stall_17),
	.feedback_data_in_17(feedback_data_17),
	.feedback_valid_in_18(feedback_valid_18),
	.feedback_stall_out_18(feedback_stall_18),
	.feedback_data_in_18(feedback_data_18),
	.feedback_stall_out_4(bb_6_feedback_stall_out_4),
	.feedback_valid_in_5(feedback_valid_5),
	.feedback_stall_out_5(feedback_stall_5),
	.feedback_data_in_5(feedback_data_5),
	.acl_pipelined_valid(bb_6_acl_pipelined_valid),
	.acl_pipelined_stall(bb_6_stall_out_0),
	.acl_pipelined_exiting_valid(bb_6_acl_pipelined_exiting_valid),
	.acl_pipelined_exiting_stall(bb_6_acl_pipelined_exiting_stall),
	.feedback_valid_in_13(feedback_valid_13),
	.feedback_stall_out_13(feedback_stall_13),
	.feedback_data_in_13(feedback_data_13),
	.feedback_valid_in_12(feedback_valid_12),
	.feedback_stall_out_12(feedback_stall_12),
	.feedback_data_in_12(feedback_data_12),
	.feedback_valid_in_11(feedback_valid_11),
	.feedback_stall_out_11(feedback_stall_11),
	.feedback_data_in_11(feedback_data_11),
	.feedback_valid_in_14(feedback_valid_14),
	.feedback_stall_out_14(feedback_stall_14),
	.feedback_data_in_14(feedback_data_14),
	.feedback_valid_in_9(feedback_valid_9),
	.feedback_stall_out_9(feedback_stall_9),
	.feedback_data_in_9(feedback_data_9),
	.feedback_valid_in_8(feedback_valid_8),
	.feedback_stall_out_8(feedback_stall_8),
	.feedback_data_in_8(feedback_data_8),
	.feedback_valid_in_7(feedback_valid_7),
	.feedback_stall_out_7(feedback_stall_7),
	.feedback_data_in_7(feedback_data_7),
	.feedback_valid_in_10(feedback_valid_10),
	.feedback_stall_out_10(feedback_stall_10),
	.feedback_data_in_10(feedback_data_10),
	.feedback_valid_in_19(feedback_valid_19),
	.feedback_stall_out_19(feedback_stall_19),
	.feedback_data_in_19(feedback_data_19),
	.feedback_valid_in_20(feedback_valid_20),
	.feedback_stall_out_20(feedback_stall_20),
	.feedback_data_in_20(feedback_data_20),
	.feedback_valid_in_21(feedback_valid_21),
	.feedback_stall_out_21(feedback_stall_21),
	.feedback_data_in_21(feedback_data_21),
	.feedback_valid_out_6(feedback_valid_6),
	.feedback_stall_in_6(feedback_stall_6),
	.feedback_data_out_6(feedback_data_6),
	.avm_local_bb6_ld__readdata(avm_local_bb6_ld__readdata),
	.avm_local_bb6_ld__readdatavalid(avm_local_bb6_ld__readdatavalid),
	.avm_local_bb6_ld__waitrequest(avm_local_bb6_ld__waitrequest),
	.avm_local_bb6_ld__address(avm_local_bb6_ld__address),
	.avm_local_bb6_ld__read(avm_local_bb6_ld__read),
	.avm_local_bb6_ld__write(avm_local_bb6_ld__write),
	.avm_local_bb6_ld__writeack(avm_local_bb6_ld__writeack),
	.avm_local_bb6_ld__writedata(avm_local_bb6_ld__writedata),
	.avm_local_bb6_ld__byteenable(avm_local_bb6_ld__byteenable),
	.avm_local_bb6_ld__burstcount(avm_local_bb6_ld__burstcount),
	.local_bb6_ld__input_fifo_depth(bb_6_local_bb6_ld__input_fifo_depth),
	.local_bb6_ld__active(bb_6_local_bb6_ld__active),
	.clock2x(clock2x),
	.avm_local_bb6_ld__u41_readdata(avm_local_bb6_ld__u41_readdata),
	.avm_local_bb6_ld__u41_readdatavalid(avm_local_bb6_ld__u41_readdatavalid),
	.avm_local_bb6_ld__u41_waitrequest(avm_local_bb6_ld__u41_waitrequest),
	.avm_local_bb6_ld__u41_address(avm_local_bb6_ld__u41_address),
	.avm_local_bb6_ld__u41_read(avm_local_bb6_ld__u41_read),
	.avm_local_bb6_ld__u41_write(avm_local_bb6_ld__u41_write),
	.avm_local_bb6_ld__u41_writeack(avm_local_bb6_ld__u41_writeack),
	.avm_local_bb6_ld__u41_writedata(avm_local_bb6_ld__u41_writedata),
	.avm_local_bb6_ld__u41_byteenable(avm_local_bb6_ld__u41_byteenable),
	.avm_local_bb6_ld__u41_burstcount(avm_local_bb6_ld__u41_burstcount),
	.local_bb6_ld__u41_input_fifo_depth(bb_6_local_bb6_ld__u41_input_fifo_depth),
	.local_bb6_ld__u41_active(bb_6_local_bb6_ld__u41_active),
	.avm_local_bb6_ld__u42_readdata(avm_local_bb6_ld__u42_readdata),
	.avm_local_bb6_ld__u42_readdatavalid(avm_local_bb6_ld__u42_readdatavalid),
	.avm_local_bb6_ld__u42_waitrequest(avm_local_bb6_ld__u42_waitrequest),
	.avm_local_bb6_ld__u42_address(avm_local_bb6_ld__u42_address),
	.avm_local_bb6_ld__u42_read(avm_local_bb6_ld__u42_read),
	.avm_local_bb6_ld__u42_write(avm_local_bb6_ld__u42_write),
	.avm_local_bb6_ld__u42_writeack(avm_local_bb6_ld__u42_writeack),
	.avm_local_bb6_ld__u42_writedata(avm_local_bb6_ld__u42_writedata),
	.avm_local_bb6_ld__u42_byteenable(avm_local_bb6_ld__u42_byteenable),
	.avm_local_bb6_ld__u42_burstcount(avm_local_bb6_ld__u42_burstcount),
	.local_bb6_ld__u42_input_fifo_depth(bb_6_local_bb6_ld__u42_input_fifo_depth),
	.local_bb6_ld__u42_active(bb_6_local_bb6_ld__u42_active),
	.avm_local_bb6_ld__u43_readdata(avm_local_bb6_ld__u43_readdata),
	.avm_local_bb6_ld__u43_readdatavalid(avm_local_bb6_ld__u43_readdatavalid),
	.avm_local_bb6_ld__u43_waitrequest(avm_local_bb6_ld__u43_waitrequest),
	.avm_local_bb6_ld__u43_address(avm_local_bb6_ld__u43_address),
	.avm_local_bb6_ld__u43_read(avm_local_bb6_ld__u43_read),
	.avm_local_bb6_ld__u43_write(avm_local_bb6_ld__u43_write),
	.avm_local_bb6_ld__u43_writeack(avm_local_bb6_ld__u43_writeack),
	.avm_local_bb6_ld__u43_writedata(avm_local_bb6_ld__u43_writedata),
	.avm_local_bb6_ld__u43_byteenable(avm_local_bb6_ld__u43_byteenable),
	.avm_local_bb6_ld__u43_burstcount(avm_local_bb6_ld__u43_burstcount),
	.local_bb6_ld__u43_input_fifo_depth(bb_6_local_bb6_ld__u43_input_fifo_depth),
	.local_bb6_ld__u43_active(bb_6_local_bb6_ld__u43_active),
	.feedback_valid_out_5(feedback_valid_5),
	.feedback_stall_in_5(feedback_stall_5),
	.feedback_data_out_5(feedback_data_5),
	.avm_local_bb6_ld__pre65_readdata(avm_local_bb6_ld__pre65_readdata),
	.avm_local_bb6_ld__pre65_readdatavalid(avm_local_bb6_ld__pre65_readdatavalid),
	.avm_local_bb6_ld__pre65_waitrequest(avm_local_bb6_ld__pre65_waitrequest),
	.avm_local_bb6_ld__pre65_address(avm_local_bb6_ld__pre65_address),
	.avm_local_bb6_ld__pre65_read(avm_local_bb6_ld__pre65_read),
	.avm_local_bb6_ld__pre65_write(avm_local_bb6_ld__pre65_write),
	.avm_local_bb6_ld__pre65_writeack(avm_local_bb6_ld__pre65_writeack),
	.avm_local_bb6_ld__pre65_writedata(avm_local_bb6_ld__pre65_writedata),
	.avm_local_bb6_ld__pre65_byteenable(avm_local_bb6_ld__pre65_byteenable),
	.avm_local_bb6_ld__pre65_burstcount(avm_local_bb6_ld__pre65_burstcount),
	.local_bb6_ld__pre65_input_fifo_depth(bb_6_local_bb6_ld__pre65_input_fifo_depth),
	.local_bb6_ld__pre65_active(bb_6_local_bb6_ld__pre65_active),
	.feedback_valid_out_12(feedback_valid_12),
	.feedback_stall_in_12(feedback_stall_12),
	.feedback_data_out_12(feedback_data_12),
	.feedback_valid_out_13(feedback_valid_13),
	.feedback_stall_in_13(feedback_stall_13),
	.feedback_data_out_13(feedback_data_13),
	.feedback_valid_out_14(feedback_valid_14),
	.feedback_stall_in_14(feedback_stall_14),
	.feedback_data_out_14(feedback_data_14),
	.feedback_valid_out_10(feedback_valid_10),
	.feedback_stall_in_10(feedback_stall_10),
	.feedback_data_out_10(feedback_data_10),
	.feedback_valid_out_9(feedback_valid_9),
	.feedback_stall_in_9(feedback_stall_9),
	.feedback_data_out_9(feedback_data_9),
	.feedback_valid_out_8(feedback_valid_8),
	.feedback_stall_in_8(feedback_stall_8),
	.feedback_data_out_8(feedback_data_8),
	.feedback_valid_out_19(feedback_valid_19),
	.feedback_stall_in_19(feedback_stall_19),
	.feedback_data_out_19(feedback_data_19),
	.feedback_valid_out_20(feedback_valid_20),
	.feedback_stall_in_20(feedback_stall_20),
	.feedback_data_out_20(feedback_data_20),
	.feedback_valid_out_21(feedback_valid_21),
	.feedback_stall_in_21(feedback_stall_21),
	.feedback_data_out_21(feedback_data_21),
	.avm_local_bb6_st_reduction_9_readdata(avm_local_bb6_st_reduction_9_readdata),
	.avm_local_bb6_st_reduction_9_readdatavalid(avm_local_bb6_st_reduction_9_readdatavalid),
	.avm_local_bb6_st_reduction_9_waitrequest(avm_local_bb6_st_reduction_9_waitrequest),
	.avm_local_bb6_st_reduction_9_address(avm_local_bb6_st_reduction_9_address),
	.avm_local_bb6_st_reduction_9_read(avm_local_bb6_st_reduction_9_read),
	.avm_local_bb6_st_reduction_9_write(avm_local_bb6_st_reduction_9_write),
	.avm_local_bb6_st_reduction_9_writeack(avm_local_bb6_st_reduction_9_writeack),
	.avm_local_bb6_st_reduction_9_writedata(avm_local_bb6_st_reduction_9_writedata),
	.avm_local_bb6_st_reduction_9_byteenable(avm_local_bb6_st_reduction_9_byteenable),
	.avm_local_bb6_st_reduction_9_burstcount(avm_local_bb6_st_reduction_9_burstcount),
	.local_bb6_st_reduction_9_input_fifo_depth(bb_6_local_bb6_st_reduction_9_input_fifo_depth),
	.local_bb6_st_reduction_9_active(bb_6_local_bb6_st_reduction_9_active),
	.feedback_valid_out_15(feedback_valid_15),
	.feedback_stall_in_15(feedback_stall_15),
	.feedback_data_out_15(feedback_data_15),
	.feedback_valid_out_16(feedback_valid_16),
	.feedback_stall_in_16(feedback_stall_16),
	.feedback_data_out_16(feedback_data_16),
	.feedback_valid_out_17(feedback_valid_17),
	.feedback_stall_in_17(feedback_stall_17),
	.feedback_data_out_17(feedback_data_17),
	.feedback_valid_out_18(feedback_valid_18),
	.feedback_stall_in_18(feedback_stall_18),
	.feedback_data_out_18(feedback_data_18),
	.feedback_valid_out_7(feedback_valid_7),
	.feedback_stall_in_7(feedback_stall_7),
	.feedback_data_out_7(feedback_data_7),
	.feedback_valid_out_11(feedback_valid_11),
	.feedback_stall_in_11(feedback_stall_11),
	.feedback_data_out_11(feedback_data_11)
);


sha256_basic_block_7 sha256_basic_block_7 (
	.clock(clock),
	.resetn(resetn),
	.input_wii_ld_(bb_0_lvb_bb0_ld_),
	.input_wii_mul158(bb_0_lvb_bb0_mul158),
	.input_wii__(bb_0_lvb_bb0__),
	.input_wii_cmp166_xor(bb_0_lvb_bb0_cmp166_xor),
	.input_wii_memcoalesce_digest_bitcast_08(bb_0_lvb_bb0_memcoalesce_digest_bitcast_08),
	.input_wii_memcoalesce_null_insertValue_0(bb_0_lvb_bb0_memcoalesce_null_insertValue_0),
	.valid_in(bb_6_valid_out_0),
	.stall_out(bb_7_stall_out),
	.input_G_144_pop13_acl_pop_i32_528734635(bb_6_lvb_bb6_G_144_pop13_acl_pop_i32_528734635_0),
	.input_F_145_pop12_acl_pop_i32__1694144372(bb_6_lvb_bb6_F_145_pop12_acl_pop_i32__1694144372_0),
	.input_E_146_pop11_acl_pop_i32_1359893119(bb_6_lvb_bb6_E_146_pop11_acl_pop_i32_1359893119_0),
	.input_C_148_pop9_acl_pop_i32_1013904242(bb_6_lvb_bb6_C_148_pop9_acl_pop_i32_1013904242_0),
	.input_B_149_pop8_B_149(bb_6_lvb_bb6_B_149_pop8_B_149_0),
	.input_A_150_pop7_A_150(bb_6_lvb_bb6_A_150_pop7_A_150_0),
	.input_add215(bb_6_lvb_bb6_add215_0),
	.input_add216(bb_6_lvb_bb6_add216_0),
	.input__pop19_(bb_6_lvb_bb6__pop19__0),
	.input__pop20_(bb_6_lvb_bb6__pop20__0),
	.input_select10817_pop21_select10817(bb_6_lvb_bb6_select10817_pop21_select10817_0),
	.valid_out_0(bb_7_valid_out_0),
	.stall_in_0(bb_1_stall_out_0),
	.lvb_bb7_reduction_17_0(bb_7_lvb_bb7_reduction_17_0),
	.lvb_bb7_reduction_13_0(bb_7_lvb_bb7_reduction_13_0),
	.lvb_bb7_inc237_0(bb_7_lvb_bb7_inc237_0),
	.valid_out_1(bb_7_valid_out_1),
	.stall_in_1(bb_8_stall_out),
	.lvb_bb7_reduction_17_1(bb_7_lvb_bb7_reduction_17_1),
	.lvb_bb7_reduction_13_1(bb_7_lvb_bb7_reduction_13_1),
	.lvb_bb7_inc237_1(bb_7_lvb_bb7_inc237_1),
	.workgroup_size(workgroup_size),
	.start(start),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_readdata(avm_local_bb7_st_memcoalesce_digest_insertValue_17_readdata),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_readdatavalid(avm_local_bb7_st_memcoalesce_digest_insertValue_17_readdatavalid),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_waitrequest(avm_local_bb7_st_memcoalesce_digest_insertValue_17_waitrequest),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_address(avm_local_bb7_st_memcoalesce_digest_insertValue_17_address),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_read(avm_local_bb7_st_memcoalesce_digest_insertValue_17_read),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_write(avm_local_bb7_st_memcoalesce_digest_insertValue_17_write),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_writeack(avm_local_bb7_st_memcoalesce_digest_insertValue_17_writeack),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_writedata(avm_local_bb7_st_memcoalesce_digest_insertValue_17_writedata),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_byteenable(avm_local_bb7_st_memcoalesce_digest_insertValue_17_byteenable),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_burstcount(avm_local_bb7_st_memcoalesce_digest_insertValue_17_burstcount),
	.local_bb7_st_memcoalesce_digest_insertValue_17_active(bb_7_local_bb7_st_memcoalesce_digest_insertValue_17_active),
	.clock2x(clock2x)
);


sha256_basic_block_8 sha256_basic_block_8 (
	.clock(clock),
	.resetn(resetn),
	.valid_in(bb_7_valid_out_1),
	.stall_out(bb_8_stall_out),
	.valid_out(bb_8_valid_out),
	.stall_in(stall_in),
	.workgroup_size(workgroup_size),
	.start(start)
);


sha256_sys_cycle_time system_cycle_time_module (
	.clock(clock),
	.resetn(resetn),
	.cur_cycle(cur_cycle)
);


assign workgroup_size = 32'h1;
assign valid_out = bb_8_valid_out;
assign stall_out = bb_0_stall_out;
assign writes_pending[0] = bb_0_local_bb0_st__active;
assign writes_pending[1] = bb_2_local_bb2_st__active;
assign writes_pending[2] = bb_4_local_bb4_st_reduction_2_active;
assign writes_pending[3] = bb_5_local_bb5_st_memcoalesce_null_insertValue_0_active;
assign writes_pending[4] = bb_5_local_bb5_st__113_active;
assign writes_pending[5] = bb_6_local_bb6_st_reduction_9_active;
assign writes_pending[6] = bb_7_local_bb7_st_memcoalesce_digest_insertValue_17_active;
assign lsus_active[0] = bb_0_local_bb0_ld__active;
assign lsus_active[1] = bb_0_local_bb0_st__active;
assign lsus_active[2] = bb_2_local_bb2_st__active;
assign lsus_active[3] = bb_4_local_bb4_ld_memcoalesce_key_load_0_active;
assign lsus_active[4] = bb_4_local_bb4_st_reduction_2_active;
assign lsus_active[5] = bb_5_local_bb5_ld_memcoalesce_key_load_02_active;
assign lsus_active[6] = bb_5_local_bb5_st_memcoalesce_null_insertValue_0_active;
assign lsus_active[7] = bb_5_local_bb5_st__113_active;
assign lsus_active[8] = bb_6_local_bb6_ld__active;
assign lsus_active[9] = bb_6_local_bb6_ld__u41_active;
assign lsus_active[10] = bb_6_local_bb6_ld__u42_active;
assign lsus_active[11] = bb_6_local_bb6_ld__u43_active;
assign lsus_active[12] = bb_6_local_bb6_ld__pre65_active;
assign lsus_active[13] = bb_6_local_bb6_st_reduction_9_active;
assign lsus_active[14] = bb_7_local_bb7_st_memcoalesce_digest_insertValue_17_active;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		has_a_write_pending <= 1'b0;
		has_a_lsu_active <= 1'b0;
	end
	else
	begin
		has_a_write_pending <= (|writes_pending);
		has_a_lsu_active <= (|lsus_active);
	end
end

endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

module sha256_function_wrapper
	(
		input 		clock,
		input 		resetn,
		input 		clock2x,
		input 		local_router_hang,
		input 		avs_cra_read,
		input 		avs_cra_write,
		input [3:0] 		avs_cra_address,
		input [63:0] 		avs_cra_writedata,
		input [7:0] 		avs_cra_byteenable,
		output 		avs_cra_waitrequest,
		output reg [63:0] 		avs_cra_readdata,
		output reg 		avs_cra_readdatavalid,
		output 		cra_irq,
		input [255:0] 		avm_local_bb0_ld__inst0_readdata,
		input 		avm_local_bb0_ld__inst0_readdatavalid,
		input 		avm_local_bb0_ld__inst0_waitrequest,
		output [29:0] 		avm_local_bb0_ld__inst0_address,
		output 		avm_local_bb0_ld__inst0_read,
		output 		avm_local_bb0_ld__inst0_write,
		input 		avm_local_bb0_ld__inst0_writeack,
		output [255:0] 		avm_local_bb0_ld__inst0_writedata,
		output [31:0] 		avm_local_bb0_ld__inst0_byteenable,
		output [4:0] 		avm_local_bb0_ld__inst0_burstcount,
		input [255:0] 		avm_local_bb0_st__inst0_readdata,
		input 		avm_local_bb0_st__inst0_readdatavalid,
		input 		avm_local_bb0_st__inst0_waitrequest,
		output [29:0] 		avm_local_bb0_st__inst0_address,
		output 		avm_local_bb0_st__inst0_read,
		output 		avm_local_bb0_st__inst0_write,
		input 		avm_local_bb0_st__inst0_writeack,
		output [255:0] 		avm_local_bb0_st__inst0_writedata,
		output [31:0] 		avm_local_bb0_st__inst0_byteenable,
		output [4:0] 		avm_local_bb0_st__inst0_burstcount,
		input [511:0] 		avm_local_bb2_st__inst0_readdata,
		input 		avm_local_bb2_st__inst0_readdatavalid,
		input 		avm_local_bb2_st__inst0_waitrequest,
		output [31:0] 		avm_local_bb2_st__inst0_address,
		output 		avm_local_bb2_st__inst0_read,
		output 		avm_local_bb2_st__inst0_write,
		input 		avm_local_bb2_st__inst0_writeack,
		output [511:0] 		avm_local_bb2_st__inst0_writedata,
		output [63:0] 		avm_local_bb2_st__inst0_byteenable,
		output 		avm_local_bb2_st__inst0_burstcount,
		input [255:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_inst0_readdata,
		input 		avm_local_bb4_ld_memcoalesce_key_load_0_inst0_readdatavalid,
		input 		avm_local_bb4_ld_memcoalesce_key_load_0_inst0_waitrequest,
		output [29:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_inst0_address,
		output 		avm_local_bb4_ld_memcoalesce_key_load_0_inst0_read,
		output 		avm_local_bb4_ld_memcoalesce_key_load_0_inst0_write,
		input 		avm_local_bb4_ld_memcoalesce_key_load_0_inst0_writeack,
		output [255:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_inst0_writedata,
		output [31:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_inst0_byteenable,
		output [4:0] 		avm_local_bb4_ld_memcoalesce_key_load_0_inst0_burstcount,
		input [511:0] 		avm_local_bb4_st_reduction_2_inst0_readdata,
		input 		avm_local_bb4_st_reduction_2_inst0_readdatavalid,
		input 		avm_local_bb4_st_reduction_2_inst0_waitrequest,
		output [31:0] 		avm_local_bb4_st_reduction_2_inst0_address,
		output 		avm_local_bb4_st_reduction_2_inst0_read,
		output 		avm_local_bb4_st_reduction_2_inst0_write,
		input 		avm_local_bb4_st_reduction_2_inst0_writeack,
		output [511:0] 		avm_local_bb4_st_reduction_2_inst0_writedata,
		output [63:0] 		avm_local_bb4_st_reduction_2_inst0_byteenable,
		output 		avm_local_bb4_st_reduction_2_inst0_burstcount,
		input [255:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_inst0_readdata,
		input 		avm_local_bb5_ld_memcoalesce_key_load_02_inst0_readdatavalid,
		input 		avm_local_bb5_ld_memcoalesce_key_load_02_inst0_waitrequest,
		output [29:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_inst0_address,
		output 		avm_local_bb5_ld_memcoalesce_key_load_02_inst0_read,
		output 		avm_local_bb5_ld_memcoalesce_key_load_02_inst0_write,
		input 		avm_local_bb5_ld_memcoalesce_key_load_02_inst0_writeack,
		output [255:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_inst0_writedata,
		output [31:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_inst0_byteenable,
		output [4:0] 		avm_local_bb5_ld_memcoalesce_key_load_02_inst0_burstcount,
		input [511:0] 		avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_readdata,
		input 		avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_readdatavalid,
		input 		avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_waitrequest,
		output [31:0] 		avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_address,
		output 		avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_read,
		output 		avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_write,
		input 		avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_writeack,
		output [511:0] 		avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_writedata,
		output [63:0] 		avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_byteenable,
		output 		avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_burstcount,
		input [511:0] 		avm_local_bb5_st__113_inst0_readdata,
		input 		avm_local_bb5_st__113_inst0_readdatavalid,
		input 		avm_local_bb5_st__113_inst0_waitrequest,
		output [31:0] 		avm_local_bb5_st__113_inst0_address,
		output 		avm_local_bb5_st__113_inst0_read,
		output 		avm_local_bb5_st__113_inst0_write,
		input 		avm_local_bb5_st__113_inst0_writeack,
		output [511:0] 		avm_local_bb5_st__113_inst0_writedata,
		output [63:0] 		avm_local_bb5_st__113_inst0_byteenable,
		output 		avm_local_bb5_st__113_inst0_burstcount,
		input [511:0] 		avm_local_bb6_ld__inst0_readdata,
		input 		avm_local_bb6_ld__inst0_readdatavalid,
		input 		avm_local_bb6_ld__inst0_waitrequest,
		output [31:0] 		avm_local_bb6_ld__inst0_address,
		output 		avm_local_bb6_ld__inst0_read,
		output 		avm_local_bb6_ld__inst0_write,
		input 		avm_local_bb6_ld__inst0_writeack,
		output [511:0] 		avm_local_bb6_ld__inst0_writedata,
		output [63:0] 		avm_local_bb6_ld__inst0_byteenable,
		output 		avm_local_bb6_ld__inst0_burstcount,
		input [511:0] 		avm_local_bb6_ld__u41_inst0_readdata,
		input 		avm_local_bb6_ld__u41_inst0_readdatavalid,
		input 		avm_local_bb6_ld__u41_inst0_waitrequest,
		output [31:0] 		avm_local_bb6_ld__u41_inst0_address,
		output 		avm_local_bb6_ld__u41_inst0_read,
		output 		avm_local_bb6_ld__u41_inst0_write,
		input 		avm_local_bb6_ld__u41_inst0_writeack,
		output [511:0] 		avm_local_bb6_ld__u41_inst0_writedata,
		output [63:0] 		avm_local_bb6_ld__u41_inst0_byteenable,
		output 		avm_local_bb6_ld__u41_inst0_burstcount,
		input [511:0] 		avm_local_bb6_ld__u42_inst0_readdata,
		input 		avm_local_bb6_ld__u42_inst0_readdatavalid,
		input 		avm_local_bb6_ld__u42_inst0_waitrequest,
		output [31:0] 		avm_local_bb6_ld__u42_inst0_address,
		output 		avm_local_bb6_ld__u42_inst0_read,
		output 		avm_local_bb6_ld__u42_inst0_write,
		input 		avm_local_bb6_ld__u42_inst0_writeack,
		output [511:0] 		avm_local_bb6_ld__u42_inst0_writedata,
		output [63:0] 		avm_local_bb6_ld__u42_inst0_byteenable,
		output 		avm_local_bb6_ld__u42_inst0_burstcount,
		input [511:0] 		avm_local_bb6_ld__u43_inst0_readdata,
		input 		avm_local_bb6_ld__u43_inst0_readdatavalid,
		input 		avm_local_bb6_ld__u43_inst0_waitrequest,
		output [31:0] 		avm_local_bb6_ld__u43_inst0_address,
		output 		avm_local_bb6_ld__u43_inst0_read,
		output 		avm_local_bb6_ld__u43_inst0_write,
		input 		avm_local_bb6_ld__u43_inst0_writeack,
		output [511:0] 		avm_local_bb6_ld__u43_inst0_writedata,
		output [63:0] 		avm_local_bb6_ld__u43_inst0_byteenable,
		output 		avm_local_bb6_ld__u43_inst0_burstcount,
		input [511:0] 		avm_local_bb6_ld__pre65_inst0_readdata,
		input 		avm_local_bb6_ld__pre65_inst0_readdatavalid,
		input 		avm_local_bb6_ld__pre65_inst0_waitrequest,
		output [31:0] 		avm_local_bb6_ld__pre65_inst0_address,
		output 		avm_local_bb6_ld__pre65_inst0_read,
		output 		avm_local_bb6_ld__pre65_inst0_write,
		input 		avm_local_bb6_ld__pre65_inst0_writeack,
		output [511:0] 		avm_local_bb6_ld__pre65_inst0_writedata,
		output [63:0] 		avm_local_bb6_ld__pre65_inst0_byteenable,
		output 		avm_local_bb6_ld__pre65_inst0_burstcount,
		input [511:0] 		avm_local_bb6_st_reduction_9_inst0_readdata,
		input 		avm_local_bb6_st_reduction_9_inst0_readdatavalid,
		input 		avm_local_bb6_st_reduction_9_inst0_waitrequest,
		output [31:0] 		avm_local_bb6_st_reduction_9_inst0_address,
		output 		avm_local_bb6_st_reduction_9_inst0_read,
		output 		avm_local_bb6_st_reduction_9_inst0_write,
		input 		avm_local_bb6_st_reduction_9_inst0_writeack,
		output [511:0] 		avm_local_bb6_st_reduction_9_inst0_writedata,
		output [63:0] 		avm_local_bb6_st_reduction_9_inst0_byteenable,
		output 		avm_local_bb6_st_reduction_9_inst0_burstcount,
		input [255:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_readdata,
		input 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_readdatavalid,
		input 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_waitrequest,
		output [29:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_address,
		output 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_read,
		output 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_write,
		input 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_writeack,
		output [255:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_writedata,
		output [31:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_byteenable,
		output [4:0] 		avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_burstcount
	);

// Responsible for interfacing a kernel with the outside world. It comprises a
// slave interface to specify the kernel arguments and retain kernel status. 

// This section of the wrapper implements the slave interface.
// twoXclock_consumer uses clock2x, even if nobody inside the kernel does. Keeps interface to acl_iface consistent for all kernels.
 reg start_NO_SHIFT_REG;
 reg started_NO_SHIFT_REG;
wire finish;
 reg [31:0] status_NO_SHIFT_REG;
wire has_a_write_pending;
wire has_a_lsu_active;
 reg [191:0] kernel_arguments_NO_SHIFT_REG;
 reg twoXclock_consumer_NO_SHIFT_REG /* synthesis  preserve  noprune  */;
 reg [31:0] workgroup_size_NO_SHIFT_REG;
 reg [31:0] global_size_NO_SHIFT_REG[2:0];
 reg [31:0] num_groups_NO_SHIFT_REG[2:0];
 reg [31:0] local_size_NO_SHIFT_REG[2:0];
 reg [31:0] work_dim_NO_SHIFT_REG;
 reg [31:0] global_offset_NO_SHIFT_REG[2:0];
 reg [63:0] profile_data_NO_SHIFT_REG;
 reg [31:0] profile_ctrl_NO_SHIFT_REG;
 reg [63:0] profile_start_cycle_NO_SHIFT_REG;
 reg [63:0] profile_stop_cycle_NO_SHIFT_REG;
wire dispatched_all_groups;
wire [31:0] group_id_tmp[2:0];
wire [31:0] global_id_base_out[2:0];
wire start_out;
wire [31:0] local_id[0:0][2:0];
wire [31:0] global_id[0:0][2:0];
wire [31:0] group_id[0:0][2:0];
wire iter_valid_in;
wire iter_stall_out;
wire stall_in;
wire stall_out;
wire valid_in;
wire valid_out;

always @(posedge clock2x or negedge resetn)
begin
	if (~(resetn))
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b0;
	end
	else
	begin
		twoXclock_consumer_NO_SHIFT_REG <= 1'b1;
	end
end



// Work group dispatcher is responsible for issuing work-groups to id iterator(s)
acl_work_group_dispatcher group_dispatcher (
	.clock(clock),
	.resetn(resetn),
	.start(start_NO_SHIFT_REG),
	.num_groups(num_groups_NO_SHIFT_REG),
	.local_size(local_size_NO_SHIFT_REG),
	.stall_in(iter_stall_out),
	.valid_out(iter_valid_in),
	.group_id_out(group_id_tmp),
	.global_id_base_out(global_id_base_out),
	.start_out(start_out),
	.dispatched_all_groups(dispatched_all_groups)
);

defparam group_dispatcher.NUM_COPIES = 1;
defparam group_dispatcher.RUN_FOREVER = 0;


// This section of the wrapper implements an Avalon Slave Interface used to configure a kernel invocation.
// The few words words contain the status and the workgroup size registers.
// The remaining addressable space is reserved for kernel arguments.
wire [63:0] bitenable;

assign bitenable[7:0] = (avs_cra_byteenable[0] ? 8'hFF : 8'h0);
assign bitenable[15:8] = (avs_cra_byteenable[1] ? 8'hFF : 8'h0);
assign bitenable[23:16] = (avs_cra_byteenable[2] ? 8'hFF : 8'h0);
assign bitenable[31:24] = (avs_cra_byteenable[3] ? 8'hFF : 8'h0);
assign bitenable[39:32] = (avs_cra_byteenable[4] ? 8'hFF : 8'h0);
assign bitenable[47:40] = (avs_cra_byteenable[5] ? 8'hFF : 8'h0);
assign bitenable[55:48] = (avs_cra_byteenable[6] ? 8'hFF : 8'h0);
assign bitenable[63:56] = (avs_cra_byteenable[7] ? 8'hFF : 8'h0);
assign avs_cra_waitrequest = 1'b0;
assign cra_irq = (status_NO_SHIFT_REG[1] | status_NO_SHIFT_REG[3]);

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		start_NO_SHIFT_REG <= 1'b0;
		started_NO_SHIFT_REG <= 1'b0;
		kernel_arguments_NO_SHIFT_REG <= 192'h0;
		status_NO_SHIFT_REG <= 32'h30000;
		profile_ctrl_NO_SHIFT_REG <= 32'h4;
		profile_start_cycle_NO_SHIFT_REG <= 64'h0;
		profile_stop_cycle_NO_SHIFT_REG <= 64'hFFFFFFFFFFFFFFFF;
		work_dim_NO_SHIFT_REG <= 32'h0;
		workgroup_size_NO_SHIFT_REG <= 32'h0;
		global_size_NO_SHIFT_REG[0] <= 32'h0;
		global_size_NO_SHIFT_REG[1] <= 32'h0;
		global_size_NO_SHIFT_REG[2] <= 32'h0;
		num_groups_NO_SHIFT_REG[0] <= 32'h0;
		num_groups_NO_SHIFT_REG[1] <= 32'h0;
		num_groups_NO_SHIFT_REG[2] <= 32'h0;
		local_size_NO_SHIFT_REG[0] <= 32'h0;
		local_size_NO_SHIFT_REG[1] <= 32'h0;
		local_size_NO_SHIFT_REG[2] <= 32'h0;
		global_offset_NO_SHIFT_REG[0] <= 32'h0;
		global_offset_NO_SHIFT_REG[1] <= 32'h0;
		global_offset_NO_SHIFT_REG[2] <= 32'h0;
	end
	else
	begin
		if (avs_cra_write)
		begin
			case (avs_cra_address)
				4'h0:
				begin
					status_NO_SHIFT_REG[31:16] <= 16'h3;
					status_NO_SHIFT_REG[15:0] <= ((status_NO_SHIFT_REG[15:0] & ~(bitenable[15:0])) | (avs_cra_writedata[15:0] & bitenable[15:0]));
				end

				4'h1:
				begin
					profile_ctrl_NO_SHIFT_REG <= ((profile_ctrl_NO_SHIFT_REG & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				4'h3:
				begin
					profile_start_cycle_NO_SHIFT_REG[31:0] <= ((profile_start_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_start_cycle_NO_SHIFT_REG[63:32] <= ((profile_start_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				4'h4:
				begin
					profile_stop_cycle_NO_SHIFT_REG[31:0] <= ((profile_stop_cycle_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					profile_stop_cycle_NO_SHIFT_REG[63:32] <= ((profile_stop_cycle_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				4'h5:
				begin
					work_dim_NO_SHIFT_REG <= ((work_dim_NO_SHIFT_REG & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					workgroup_size_NO_SHIFT_REG <= ((workgroup_size_NO_SHIFT_REG & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				4'h6:
				begin
					global_size_NO_SHIFT_REG[0] <= ((global_size_NO_SHIFT_REG[0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_size_NO_SHIFT_REG[1] <= ((global_size_NO_SHIFT_REG[1] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				4'h7:
				begin
					global_size_NO_SHIFT_REG[2] <= ((global_size_NO_SHIFT_REG[2] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_NO_SHIFT_REG[0] <= ((num_groups_NO_SHIFT_REG[0] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				4'h8:
				begin
					num_groups_NO_SHIFT_REG[1] <= ((num_groups_NO_SHIFT_REG[1] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					num_groups_NO_SHIFT_REG[2] <= ((num_groups_NO_SHIFT_REG[2] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				4'h9:
				begin
					local_size_NO_SHIFT_REG[0] <= ((local_size_NO_SHIFT_REG[0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					local_size_NO_SHIFT_REG[1] <= ((local_size_NO_SHIFT_REG[1] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				4'hA:
				begin
					local_size_NO_SHIFT_REG[2] <= ((local_size_NO_SHIFT_REG[2] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_NO_SHIFT_REG[0] <= ((global_offset_NO_SHIFT_REG[0] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				4'hB:
				begin
					global_offset_NO_SHIFT_REG[1] <= ((global_offset_NO_SHIFT_REG[1] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					global_offset_NO_SHIFT_REG[2] <= ((global_offset_NO_SHIFT_REG[2] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				4'hC:
				begin
					kernel_arguments_NO_SHIFT_REG[31:0] <= ((kernel_arguments_NO_SHIFT_REG[31:0] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments_NO_SHIFT_REG[63:32] <= ((kernel_arguments_NO_SHIFT_REG[63:32] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				4'hD:
				begin
					kernel_arguments_NO_SHIFT_REG[95:64] <= ((kernel_arguments_NO_SHIFT_REG[95:64] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments_NO_SHIFT_REG[127:96] <= ((kernel_arguments_NO_SHIFT_REG[127:96] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				4'hE:
				begin
					kernel_arguments_NO_SHIFT_REG[159:128] <= ((kernel_arguments_NO_SHIFT_REG[159:128] & ~(bitenable[31:0])) | (avs_cra_writedata[31:0] & bitenable[31:0]));
					kernel_arguments_NO_SHIFT_REG[191:160] <= ((kernel_arguments_NO_SHIFT_REG[191:160] & ~(bitenable[63:32])) | (avs_cra_writedata[63:32] & bitenable[63:32]));
				end

				default:
				begin
				end

			endcase
		end
		else
		begin
			if (status_NO_SHIFT_REG[0])
			begin
				start_NO_SHIFT_REG <= 1'b1;
			end
			if (start_NO_SHIFT_REG)
			begin
				status_NO_SHIFT_REG[0] <= 1'b0;
				started_NO_SHIFT_REG <= 1'b1;
			end
			if (started_NO_SHIFT_REG)
			begin
				start_NO_SHIFT_REG <= 1'b0;
			end
			if (finish)
			begin
				status_NO_SHIFT_REG[1] <= 1'b1;
				started_NO_SHIFT_REG <= 1'b0;
			end
		end
		status_NO_SHIFT_REG[11] <= local_router_hang;
		status_NO_SHIFT_REG[12] <= (|has_a_lsu_active);
		status_NO_SHIFT_REG[13] <= (|has_a_write_pending);
		status_NO_SHIFT_REG[14] <= (|valid_in);
		status_NO_SHIFT_REG[15] <= started_NO_SHIFT_REG;
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		avs_cra_readdata <= 64'h0;
	end
	else
	begin
		case (avs_cra_address)
			4'h0:
			begin
				avs_cra_readdata[31:0] <= status_NO_SHIFT_REG;
				avs_cra_readdata[63:32] <= 32'h0;
			end

			4'h1:
			begin
				avs_cra_readdata[31:0] <= 'x;
				avs_cra_readdata[63:32] <= 32'h0;
			end

			4'h2:
			begin
				avs_cra_readdata[63:0] <= 64'h0;
			end

			4'h3:
			begin
				avs_cra_readdata[63:0] <= 64'h0;
			end

			4'h4:
			begin
				avs_cra_readdata[63:0] <= 64'h0;
			end

			4'h5:
			begin
				avs_cra_readdata[31:0] <= work_dim_NO_SHIFT_REG;
				avs_cra_readdata[63:32] <= workgroup_size_NO_SHIFT_REG;
			end

			4'h6:
			begin
				avs_cra_readdata[31:0] <= global_size_NO_SHIFT_REG[0];
				avs_cra_readdata[63:32] <= global_size_NO_SHIFT_REG[1];
			end

			4'h7:
			begin
				avs_cra_readdata[31:0] <= global_size_NO_SHIFT_REG[2];
				avs_cra_readdata[63:32] <= num_groups_NO_SHIFT_REG[0];
			end

			4'h8:
			begin
				avs_cra_readdata[31:0] <= num_groups_NO_SHIFT_REG[1];
				avs_cra_readdata[63:32] <= num_groups_NO_SHIFT_REG[2];
			end

			4'h9:
			begin
				avs_cra_readdata[31:0] <= local_size_NO_SHIFT_REG[0];
				avs_cra_readdata[63:32] <= local_size_NO_SHIFT_REG[1];
			end

			4'hA:
			begin
				avs_cra_readdata[31:0] <= local_size_NO_SHIFT_REG[2];
				avs_cra_readdata[63:32] <= global_offset_NO_SHIFT_REG[0];
			end

			4'hB:
			begin
				avs_cra_readdata[31:0] <= global_offset_NO_SHIFT_REG[1];
				avs_cra_readdata[63:32] <= global_offset_NO_SHIFT_REG[2];
			end

			4'hC:
			begin
				avs_cra_readdata[31:0] <= kernel_arguments_NO_SHIFT_REG[31:0];
				avs_cra_readdata[63:32] <= kernel_arguments_NO_SHIFT_REG[63:32];
			end

			4'hD:
			begin
				avs_cra_readdata[31:0] <= kernel_arguments_NO_SHIFT_REG[95:64];
				avs_cra_readdata[63:32] <= kernel_arguments_NO_SHIFT_REG[127:96];
			end

			4'hE:
			begin
				avs_cra_readdata[31:0] <= kernel_arguments_NO_SHIFT_REG[159:128];
				avs_cra_readdata[63:32] <= kernel_arguments_NO_SHIFT_REG[191:160];
			end

			default:
			begin
				avs_cra_readdata <= status_NO_SHIFT_REG;
			end

		endcase
	end
end

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		avs_cra_readdatavalid <= 1'b0;
	end
	else
	begin
		avs_cra_readdatavalid <= (avs_cra_read & ~(avs_cra_waitrequest));
	end
end


// Handshaking signals used to control data through the pipeline

// Determine when the kernel is finished.
acl_kernel_finish_detector kernel_finish_detector (
	.clock(clock),
	.resetn(resetn),
	.start(start_NO_SHIFT_REG),
	.wg_size(workgroup_size_NO_SHIFT_REG),
	.wg_dispatch_valid_out(iter_valid_in),
	.wg_dispatch_stall_in(iter_stall_out),
	.dispatched_all_groups(dispatched_all_groups),
	.kernel_copy_valid_out(valid_out),
	.kernel_copy_stall_in(stall_in),
	.pending_writes(has_a_write_pending),
	.finish(finish)
);

defparam kernel_finish_detector.NUM_COPIES = 1;
defparam kernel_finish_detector.WG_SIZE_W = 32;

assign stall_in = 1'b0;

// Creating ID iterator and kernel instance for every requested kernel copy

// ID iterator is responsible for iterating over all local ids for given work-groups
acl_id_iterator id_iter_inst0 (
	.clock(clock),
	.resetn(resetn),
	.start(start_out),
	.valid_in(iter_valid_in),
	.stall_out(iter_stall_out),
	.stall_in(stall_out),
	.valid_out(valid_in),
	.group_id_in(group_id_tmp),
	.global_id_base_in(global_id_base_out),
	.local_size(local_size_NO_SHIFT_REG),
	.global_size(global_size_NO_SHIFT_REG),
	.local_id(local_id[0]),
	.global_id(global_id[0]),
	.group_id(group_id[0])
);



// This section instantiates a kernel function block
sha256_function sha256_function_inst0 (
	.clock(clock),
	.resetn(resetn),
	.stall_out(stall_out),
	.valid_in(valid_in),
	.valid_out(valid_out),
	.stall_in(stall_in),
	.avm_local_bb0_ld__readdata(avm_local_bb0_ld__inst0_readdata),
	.avm_local_bb0_ld__readdatavalid(avm_local_bb0_ld__inst0_readdatavalid),
	.avm_local_bb0_ld__waitrequest(avm_local_bb0_ld__inst0_waitrequest),
	.avm_local_bb0_ld__address(avm_local_bb0_ld__inst0_address),
	.avm_local_bb0_ld__read(avm_local_bb0_ld__inst0_read),
	.avm_local_bb0_ld__write(avm_local_bb0_ld__inst0_write),
	.avm_local_bb0_ld__writeack(avm_local_bb0_ld__inst0_writeack),
	.avm_local_bb0_ld__writedata(avm_local_bb0_ld__inst0_writedata),
	.avm_local_bb0_ld__byteenable(avm_local_bb0_ld__inst0_byteenable),
	.avm_local_bb0_ld__burstcount(avm_local_bb0_ld__inst0_burstcount),
	.avm_local_bb0_st__readdata(avm_local_bb0_st__inst0_readdata),
	.avm_local_bb0_st__readdatavalid(avm_local_bb0_st__inst0_readdatavalid),
	.avm_local_bb0_st__waitrequest(avm_local_bb0_st__inst0_waitrequest),
	.avm_local_bb0_st__address(avm_local_bb0_st__inst0_address),
	.avm_local_bb0_st__read(avm_local_bb0_st__inst0_read),
	.avm_local_bb0_st__write(avm_local_bb0_st__inst0_write),
	.avm_local_bb0_st__writeack(avm_local_bb0_st__inst0_writeack),
	.avm_local_bb0_st__writedata(avm_local_bb0_st__inst0_writedata),
	.avm_local_bb0_st__byteenable(avm_local_bb0_st__inst0_byteenable),
	.avm_local_bb0_st__burstcount(avm_local_bb0_st__inst0_burstcount),
	.avm_local_bb2_st__readdata(avm_local_bb2_st__inst0_readdata),
	.avm_local_bb2_st__readdatavalid(avm_local_bb2_st__inst0_readdatavalid),
	.avm_local_bb2_st__waitrequest(avm_local_bb2_st__inst0_waitrequest),
	.avm_local_bb2_st__address(avm_local_bb2_st__inst0_address),
	.avm_local_bb2_st__read(avm_local_bb2_st__inst0_read),
	.avm_local_bb2_st__write(avm_local_bb2_st__inst0_write),
	.avm_local_bb2_st__writeack(avm_local_bb2_st__inst0_writeack),
	.avm_local_bb2_st__writedata(avm_local_bb2_st__inst0_writedata),
	.avm_local_bb2_st__byteenable(avm_local_bb2_st__inst0_byteenable),
	.avm_local_bb2_st__burstcount(avm_local_bb2_st__inst0_burstcount),
	.avm_local_bb4_ld_memcoalesce_key_load_0_readdata(avm_local_bb4_ld_memcoalesce_key_load_0_inst0_readdata),
	.avm_local_bb4_ld_memcoalesce_key_load_0_readdatavalid(avm_local_bb4_ld_memcoalesce_key_load_0_inst0_readdatavalid),
	.avm_local_bb4_ld_memcoalesce_key_load_0_waitrequest(avm_local_bb4_ld_memcoalesce_key_load_0_inst0_waitrequest),
	.avm_local_bb4_ld_memcoalesce_key_load_0_address(avm_local_bb4_ld_memcoalesce_key_load_0_inst0_address),
	.avm_local_bb4_ld_memcoalesce_key_load_0_read(avm_local_bb4_ld_memcoalesce_key_load_0_inst0_read),
	.avm_local_bb4_ld_memcoalesce_key_load_0_write(avm_local_bb4_ld_memcoalesce_key_load_0_inst0_write),
	.avm_local_bb4_ld_memcoalesce_key_load_0_writeack(avm_local_bb4_ld_memcoalesce_key_load_0_inst0_writeack),
	.avm_local_bb4_ld_memcoalesce_key_load_0_writedata(avm_local_bb4_ld_memcoalesce_key_load_0_inst0_writedata),
	.avm_local_bb4_ld_memcoalesce_key_load_0_byteenable(avm_local_bb4_ld_memcoalesce_key_load_0_inst0_byteenable),
	.avm_local_bb4_ld_memcoalesce_key_load_0_burstcount(avm_local_bb4_ld_memcoalesce_key_load_0_inst0_burstcount),
	.avm_local_bb4_st_reduction_2_readdata(avm_local_bb4_st_reduction_2_inst0_readdata),
	.avm_local_bb4_st_reduction_2_readdatavalid(avm_local_bb4_st_reduction_2_inst0_readdatavalid),
	.avm_local_bb4_st_reduction_2_waitrequest(avm_local_bb4_st_reduction_2_inst0_waitrequest),
	.avm_local_bb4_st_reduction_2_address(avm_local_bb4_st_reduction_2_inst0_address),
	.avm_local_bb4_st_reduction_2_read(avm_local_bb4_st_reduction_2_inst0_read),
	.avm_local_bb4_st_reduction_2_write(avm_local_bb4_st_reduction_2_inst0_write),
	.avm_local_bb4_st_reduction_2_writeack(avm_local_bb4_st_reduction_2_inst0_writeack),
	.avm_local_bb4_st_reduction_2_writedata(avm_local_bb4_st_reduction_2_inst0_writedata),
	.avm_local_bb4_st_reduction_2_byteenable(avm_local_bb4_st_reduction_2_inst0_byteenable),
	.avm_local_bb4_st_reduction_2_burstcount(avm_local_bb4_st_reduction_2_inst0_burstcount),
	.avm_local_bb5_ld_memcoalesce_key_load_02_readdata(avm_local_bb5_ld_memcoalesce_key_load_02_inst0_readdata),
	.avm_local_bb5_ld_memcoalesce_key_load_02_readdatavalid(avm_local_bb5_ld_memcoalesce_key_load_02_inst0_readdatavalid),
	.avm_local_bb5_ld_memcoalesce_key_load_02_waitrequest(avm_local_bb5_ld_memcoalesce_key_load_02_inst0_waitrequest),
	.avm_local_bb5_ld_memcoalesce_key_load_02_address(avm_local_bb5_ld_memcoalesce_key_load_02_inst0_address),
	.avm_local_bb5_ld_memcoalesce_key_load_02_read(avm_local_bb5_ld_memcoalesce_key_load_02_inst0_read),
	.avm_local_bb5_ld_memcoalesce_key_load_02_write(avm_local_bb5_ld_memcoalesce_key_load_02_inst0_write),
	.avm_local_bb5_ld_memcoalesce_key_load_02_writeack(avm_local_bb5_ld_memcoalesce_key_load_02_inst0_writeack),
	.avm_local_bb5_ld_memcoalesce_key_load_02_writedata(avm_local_bb5_ld_memcoalesce_key_load_02_inst0_writedata),
	.avm_local_bb5_ld_memcoalesce_key_load_02_byteenable(avm_local_bb5_ld_memcoalesce_key_load_02_inst0_byteenable),
	.avm_local_bb5_ld_memcoalesce_key_load_02_burstcount(avm_local_bb5_ld_memcoalesce_key_load_02_inst0_burstcount),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_readdata(avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_readdata),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_readdatavalid(avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_readdatavalid),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_waitrequest(avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_waitrequest),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_address(avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_address),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_read(avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_read),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_write(avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_write),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_writeack(avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_writeack),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_writedata(avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_writedata),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_byteenable(avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_byteenable),
	.avm_local_bb5_st_memcoalesce_null_insertValue_0_burstcount(avm_local_bb5_st_memcoalesce_null_insertValue_0_inst0_burstcount),
	.avm_local_bb5_st__113_readdata(avm_local_bb5_st__113_inst0_readdata),
	.avm_local_bb5_st__113_readdatavalid(avm_local_bb5_st__113_inst0_readdatavalid),
	.avm_local_bb5_st__113_waitrequest(avm_local_bb5_st__113_inst0_waitrequest),
	.avm_local_bb5_st__113_address(avm_local_bb5_st__113_inst0_address),
	.avm_local_bb5_st__113_read(avm_local_bb5_st__113_inst0_read),
	.avm_local_bb5_st__113_write(avm_local_bb5_st__113_inst0_write),
	.avm_local_bb5_st__113_writeack(avm_local_bb5_st__113_inst0_writeack),
	.avm_local_bb5_st__113_writedata(avm_local_bb5_st__113_inst0_writedata),
	.avm_local_bb5_st__113_byteenable(avm_local_bb5_st__113_inst0_byteenable),
	.avm_local_bb5_st__113_burstcount(avm_local_bb5_st__113_inst0_burstcount),
	.avm_local_bb6_ld__readdata(avm_local_bb6_ld__inst0_readdata),
	.avm_local_bb6_ld__readdatavalid(avm_local_bb6_ld__inst0_readdatavalid),
	.avm_local_bb6_ld__waitrequest(avm_local_bb6_ld__inst0_waitrequest),
	.avm_local_bb6_ld__address(avm_local_bb6_ld__inst0_address),
	.avm_local_bb6_ld__read(avm_local_bb6_ld__inst0_read),
	.avm_local_bb6_ld__write(avm_local_bb6_ld__inst0_write),
	.avm_local_bb6_ld__writeack(avm_local_bb6_ld__inst0_writeack),
	.avm_local_bb6_ld__writedata(avm_local_bb6_ld__inst0_writedata),
	.avm_local_bb6_ld__byteenable(avm_local_bb6_ld__inst0_byteenable),
	.avm_local_bb6_ld__burstcount(avm_local_bb6_ld__inst0_burstcount),
	.avm_local_bb6_ld__u41_readdata(avm_local_bb6_ld__u41_inst0_readdata),
	.avm_local_bb6_ld__u41_readdatavalid(avm_local_bb6_ld__u41_inst0_readdatavalid),
	.avm_local_bb6_ld__u41_waitrequest(avm_local_bb6_ld__u41_inst0_waitrequest),
	.avm_local_bb6_ld__u41_address(avm_local_bb6_ld__u41_inst0_address),
	.avm_local_bb6_ld__u41_read(avm_local_bb6_ld__u41_inst0_read),
	.avm_local_bb6_ld__u41_write(avm_local_bb6_ld__u41_inst0_write),
	.avm_local_bb6_ld__u41_writeack(avm_local_bb6_ld__u41_inst0_writeack),
	.avm_local_bb6_ld__u41_writedata(avm_local_bb6_ld__u41_inst0_writedata),
	.avm_local_bb6_ld__u41_byteenable(avm_local_bb6_ld__u41_inst0_byteenable),
	.avm_local_bb6_ld__u41_burstcount(avm_local_bb6_ld__u41_inst0_burstcount),
	.avm_local_bb6_ld__u42_readdata(avm_local_bb6_ld__u42_inst0_readdata),
	.avm_local_bb6_ld__u42_readdatavalid(avm_local_bb6_ld__u42_inst0_readdatavalid),
	.avm_local_bb6_ld__u42_waitrequest(avm_local_bb6_ld__u42_inst0_waitrequest),
	.avm_local_bb6_ld__u42_address(avm_local_bb6_ld__u42_inst0_address),
	.avm_local_bb6_ld__u42_read(avm_local_bb6_ld__u42_inst0_read),
	.avm_local_bb6_ld__u42_write(avm_local_bb6_ld__u42_inst0_write),
	.avm_local_bb6_ld__u42_writeack(avm_local_bb6_ld__u42_inst0_writeack),
	.avm_local_bb6_ld__u42_writedata(avm_local_bb6_ld__u42_inst0_writedata),
	.avm_local_bb6_ld__u42_byteenable(avm_local_bb6_ld__u42_inst0_byteenable),
	.avm_local_bb6_ld__u42_burstcount(avm_local_bb6_ld__u42_inst0_burstcount),
	.avm_local_bb6_ld__u43_readdata(avm_local_bb6_ld__u43_inst0_readdata),
	.avm_local_bb6_ld__u43_readdatavalid(avm_local_bb6_ld__u43_inst0_readdatavalid),
	.avm_local_bb6_ld__u43_waitrequest(avm_local_bb6_ld__u43_inst0_waitrequest),
	.avm_local_bb6_ld__u43_address(avm_local_bb6_ld__u43_inst0_address),
	.avm_local_bb6_ld__u43_read(avm_local_bb6_ld__u43_inst0_read),
	.avm_local_bb6_ld__u43_write(avm_local_bb6_ld__u43_inst0_write),
	.avm_local_bb6_ld__u43_writeack(avm_local_bb6_ld__u43_inst0_writeack),
	.avm_local_bb6_ld__u43_writedata(avm_local_bb6_ld__u43_inst0_writedata),
	.avm_local_bb6_ld__u43_byteenable(avm_local_bb6_ld__u43_inst0_byteenable),
	.avm_local_bb6_ld__u43_burstcount(avm_local_bb6_ld__u43_inst0_burstcount),
	.avm_local_bb6_ld__pre65_readdata(avm_local_bb6_ld__pre65_inst0_readdata),
	.avm_local_bb6_ld__pre65_readdatavalid(avm_local_bb6_ld__pre65_inst0_readdatavalid),
	.avm_local_bb6_ld__pre65_waitrequest(avm_local_bb6_ld__pre65_inst0_waitrequest),
	.avm_local_bb6_ld__pre65_address(avm_local_bb6_ld__pre65_inst0_address),
	.avm_local_bb6_ld__pre65_read(avm_local_bb6_ld__pre65_inst0_read),
	.avm_local_bb6_ld__pre65_write(avm_local_bb6_ld__pre65_inst0_write),
	.avm_local_bb6_ld__pre65_writeack(avm_local_bb6_ld__pre65_inst0_writeack),
	.avm_local_bb6_ld__pre65_writedata(avm_local_bb6_ld__pre65_inst0_writedata),
	.avm_local_bb6_ld__pre65_byteenable(avm_local_bb6_ld__pre65_inst0_byteenable),
	.avm_local_bb6_ld__pre65_burstcount(avm_local_bb6_ld__pre65_inst0_burstcount),
	.avm_local_bb6_st_reduction_9_readdata(avm_local_bb6_st_reduction_9_inst0_readdata),
	.avm_local_bb6_st_reduction_9_readdatavalid(avm_local_bb6_st_reduction_9_inst0_readdatavalid),
	.avm_local_bb6_st_reduction_9_waitrequest(avm_local_bb6_st_reduction_9_inst0_waitrequest),
	.avm_local_bb6_st_reduction_9_address(avm_local_bb6_st_reduction_9_inst0_address),
	.avm_local_bb6_st_reduction_9_read(avm_local_bb6_st_reduction_9_inst0_read),
	.avm_local_bb6_st_reduction_9_write(avm_local_bb6_st_reduction_9_inst0_write),
	.avm_local_bb6_st_reduction_9_writeack(avm_local_bb6_st_reduction_9_inst0_writeack),
	.avm_local_bb6_st_reduction_9_writedata(avm_local_bb6_st_reduction_9_inst0_writedata),
	.avm_local_bb6_st_reduction_9_byteenable(avm_local_bb6_st_reduction_9_inst0_byteenable),
	.avm_local_bb6_st_reduction_9_burstcount(avm_local_bb6_st_reduction_9_inst0_burstcount),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_readdata(avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_readdata),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_readdatavalid(avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_readdatavalid),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_waitrequest(avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_waitrequest),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_address(avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_address),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_read(avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_read),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_write(avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_write),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_writeack(avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_writeack),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_writedata(avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_writedata),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_byteenable(avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_byteenable),
	.avm_local_bb7_st_memcoalesce_digest_insertValue_17_burstcount(avm_local_bb7_st_memcoalesce_digest_insertValue_17_inst0_burstcount),
	.clock2x(clock2x),
	.start(start_out),
	.input_data(kernel_arguments_NO_SHIFT_REG[63:0]),
	.input_digest(kernel_arguments_NO_SHIFT_REG[191:128]),
	.input_key(kernel_arguments_NO_SHIFT_REG[127:64]),
	.has_a_write_pending(has_a_write_pending),
	.has_a_lsu_active(has_a_lsu_active)
);



endmodule

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

module sha256_sys_cycle_time
	(
		input 		clock,
		input 		resetn,
		output [31:0] 		cur_cycle
	);


 reg [31:0] cur_count_NO_SHIFT_REG;

assign cur_cycle = cur_count_NO_SHIFT_REG;

always @(posedge clock or negedge resetn)
begin
	if (~(resetn))
	begin
		cur_count_NO_SHIFT_REG <= 32'h0;
	end
	else
	begin
		cur_count_NO_SHIFT_REG <= (cur_count_NO_SHIFT_REG + 32'h1);
	end
end

endmodule

